
lab1.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000324  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008a  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000294  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bb  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 ee       	ldi	r30, 0xE0	; 224
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 30       	cpi	r26, 0x00	; 0
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:

#include <avr/io.h>

int main(void)
{
	TCNT1 = 0;
  9a:	10 92 85 00 	sts	0x0085, r1
  9e:	10 92 84 00 	sts	0x0084, r1
	LCDCRA  = 0x80;
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	80 93 e4 00 	sts	0x00E4, r24
	LCDCRB  = 0xB7;
  a8:	87 eb       	ldi	r24, 0xB7	; 183
  aa:	80 93 e5 00 	sts	0x00E5, r24
	TCCR1B = 0x04;
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	80 93 81 00 	sts	0x0081, r24
			{
				LCDDR18 = 0x00;
				TCNT1 = 0;
			}
		}*/
		while (TCNT1<=32767)
  b4:	e4 e8       	ldi	r30, 0x84	; 132
  b6:	f0 e0       	ldi	r31, 0x00	; 0
		{
		}
		LCDDR18 = 0x00;
  b8:	ae ef       	ldi	r26, 0xFE	; 254
  ba:	b0 e0       	ldi	r27, 0x00	; 0
		TCNT1 = 0;
		while (TCNT1<=32767)
		{
		}
		LCDDR18 = 0x01;
  bc:	21 e0       	ldi	r18, 0x01	; 1
			{
				LCDDR18 = 0x00;
				TCNT1 = 0;
			}
		}*/
		while (TCNT1<=32767)
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	99 23       	and	r25, r25
  c4:	e4 f7       	brge	.-8      	; 0xbe <main+0x24>
		{
		}
		LCDDR18 = 0x00;
  c6:	1c 92       	st	X, r1
		TCNT1 = 0;
  c8:	11 82       	std	Z+1, r1	; 0x01
  ca:	10 82       	st	Z, r1
		while (TCNT1<=32767)
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	99 23       	and	r25, r25
  d2:	e4 f7       	brge	.-8      	; 0xcc <main+0x32>
		{
		}
		LCDDR18 = 0x01;
  d4:	2c 93       	st	X, r18
		TCNT1 = 0;
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	10 82       	st	Z, r1
	}
  da:	f1 cf       	rjmp	.-30     	; 0xbe <main+0x24>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>

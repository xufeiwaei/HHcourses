
lab3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00002b16  00002baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  00800168  00800168  00002c12  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  00002c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000045e  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00004608  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002026  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e4  00000000  00000000  000067ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f15  00000000  00000000  000070d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cd8  00000000  00000000  00007fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000648  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b84  00000000  00000000  00009308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000be8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__vector_1>
       8:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__vector_2>
       c:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_3>
      10:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__vector_4>
      14:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__vector_9>
      28:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__vector_10>
      2c:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_11>
      30:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_12>
      34:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_13>
      38:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_14>
      3c:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_15>
      40:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_16>
      44:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_17>
      48:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_18>
      4c:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_19>
      50:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_20>
      54:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__vector_21>
      58:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 e1       	ldi	r30, 0x16	; 22
      70:	fb e2       	ldi	r31, 0x2B	; 43
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a8 36       	cpi	r26, 0x68	; 104
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	14 e0       	ldi	r17, 0x04	; 4
      80:	a8 e6       	ldi	r26, 0x68	; 104
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a1 3c       	cpi	r26, 0xC1	; 193
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 85 05 	call	0xb0a	; 0xb0a <main>
      92:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
#include "primes.h"
#include "blinker.h"
static int flag=0;

int blink(Blinker *self, int x)
{
      9a:	af 92       	push	r10
      9c:	bf 92       	push	r11
      9e:	cf 92       	push	r12
      a0:	df 92       	push	r13
      a2:	ef 92       	push	r14
      a4:	ff 92       	push	r15
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	ec 01       	movw	r28, r24
      b0:	5b 01       	movw	r10, r22
	AFTER(MSEC(self->halfPeriod),self,blink,1-x);
      b2:	68 85       	ldd	r22, Y+8	; 0x08
      b4:	79 85       	ldd	r23, Y+9	; 0x09
      b6:	88 27       	eor	r24, r24
      b8:	77 fd       	sbrc	r23, 7
      ba:	80 95       	com	r24
      bc:	98 2f       	mov	r25, r24
      be:	2d e7       	ldi	r18, 0x7D	; 125
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	40 e0       	ldi	r20, 0x00	; 0
      c4:	50 e0       	ldi	r21, 0x00	; 0
      c6:	0e 94 c5 14 	call	0x298a	; 0x298a <__mulsi3>
      ca:	24 e0       	ldi	r18, 0x04	; 4
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	50 e0       	ldi	r21, 0x00	; 0
      d2:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__divmodsi4>
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	6c 01       	movw	r12, r24
      dc:	ca 18       	sub	r12, r10
      de:	db 08       	sbc	r13, r11
      e0:	ca 01       	movw	r24, r20
      e2:	b9 01       	movw	r22, r18
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	a9 01       	movw	r20, r18
      ea:	8e 01       	movw	r16, r28
      ec:	0f 2e       	mov	r0, r31
      ee:	fd e4       	ldi	r31, 0x4D	; 77
      f0:	ef 2e       	mov	r14, r31
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	ff 2e       	mov	r15, r31
      f6:	f0 2d       	mov	r31, r0
      f8:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
	if (1-x)
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	a8 16       	cp	r10, r24
     100:	b1 04       	cpc	r11, r1
     102:	99 f0       	breq	.+38     	; 0x12a <blink+0x90>
	ASYNC(self->driver,segmentOff,self->segment);
     104:	0c 81       	ldd	r16, Y+4	; 0x04
     106:	1d 81       	ldd	r17, Y+5	; 0x05
     108:	ce 80       	ldd	r12, Y+6	; 0x06
     10a:	df 80       	ldd	r13, Y+7	; 0x07
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	cb 01       	movw	r24, r22
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	a9 01       	movw	r20, r18
     118:	0f 2e       	mov	r0, r31
     11a:	f6 ea       	ldi	r31, 0xA6	; 166
     11c:	ef 2e       	mov	r14, r31
     11e:	f4 e0       	ldi	r31, 0x04	; 4
     120:	ff 2e       	mov	r15, r31
     122:	f0 2d       	mov	r31, r0
     124:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
     128:	12 c0       	rjmp	.+36     	; 0x14e <blink+0xb4>
	else
	ASYNC(self->driver,segmentOn,self->segment);
     12a:	0c 81       	ldd	r16, Y+4	; 0x04
     12c:	1d 81       	ldd	r17, Y+5	; 0x05
     12e:	ce 80       	ldd	r12, Y+6	; 0x06
     130:	df 80       	ldd	r13, Y+7	; 0x07
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	cb 01       	movw	r24, r22
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	a9 01       	movw	r20, r18
     13e:	0f 2e       	mov	r0, r31
     140:	f7 e8       	ldi	r31, 0x87	; 135
     142:	ef 2e       	mov	r14, r31
     144:	f4 e0       	ldi	r31, 0x04	; 4
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
}
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	bf 90       	pop	r11
     160:	af 90       	pop	r10
     162:	08 95       	ret

00000164 <startBlinking>:

int startBlinking(Blinker *self, int nothing)
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	ec 01       	movw	r28, r24
	flag = 0;
     16a:	10 92 69 01 	sts	0x0169, r1
     16e:	10 92 68 01 	sts	0x0168, r1
	if (flag==0)
	{
		SYNC(self,blink(self,0),0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	0e 94 4d 00 	call	0x9a	; 0x9a <blink>
     17a:	bc 01       	movw	r22, r24
     17c:	ce 01       	movw	r24, r28
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	0e 94 b4 11 	call	0x2368	; 0x2368 <sync>
	}
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <stopBlinking>:

int stopBlinking(Blinker *self, int nothing)
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	ec 01       	movw	r28, r24
	flag = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	90 93 69 01 	sts	0x0169, r25
     19a:	80 93 68 01 	sts	0x0168, r24
	if (flag==1)
	{
		SYNC(self,segmentOff(self,self->segment),0);
     19e:	6e 81       	ldd	r22, Y+6	; 0x06
     1a0:	7f 81       	ldd	r23, Y+7	; 0x07
     1a2:	ce 01       	movw	r24, r28
     1a4:	0e 94 a6 04 	call	0x94c	; 0x94c <segmentOff>
     1a8:	bc 01       	movw	r22, r24
     1aa:	ce 01       	movw	r24, r28
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	50 e0       	ldi	r21, 0x00	; 0
     1b0:	0e 94 b4 11 	call	0x2368	; 0x2368 <sync>
	}
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <setPeriod>:

int setPeriod(Blinker *self, int period)
{
	self -> halfPeriod = period;
     1ba:	fc 01       	movw	r30, r24
     1bc:	71 87       	std	Z+9, r23	; 0x09
     1be:	60 87       	std	Z+8, r22	; 0x08
}
     1c0:	08 95       	ret

000001c2 <button>:
#include "blinker.h"
#include <avr/io.h>

int button(Joystick *self, int i)
{
	if ((PINB & PORTB) != PORTB)
     1c2:	93 b1       	in	r25, 0x03	; 3
     1c4:	25 b1       	in	r18, 0x05	; 5
     1c6:	85 b1       	in	r24, 0x05	; 5
     1c8:	92 23       	and	r25, r18
     1ca:	98 17       	cp	r25, r24
     1cc:	21 f0       	breq	.+8      	; 0x1d6 <button+0x14>
	{
		//ASYNC(self,segmentOn(self,2),0);
		LCDDR13 = 0x01;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 f9 00 	sts	0x00F9, r24
     1d4:	08 95       	ret
	}
	else
	//ASYNC(self,segmentOff(self,2),0);
	LCDDR13 = 0x00;
     1d6:	10 92 f9 00 	sts	0x00F9, r1
     1da:	08 95       	ret

000001dc <writeChar>:
DR15   0001   0000   0001   0001   0000   0001   0001   0000   0001   0001
       1551   8110   11E1   11B1   05B0   14B1   14F1   1110   15F1   15B1

*/
void writeChar(char ch, int pos)
{
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
	int n1,n2,n3,n4;
	switch(ch)
     1f0:	84 33       	cpi	r24, 0x34	; 52
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <writeChar+0x1a>
     1f4:	46 c0       	rjmp	.+140    	; 0x282 <writeChar+0xa6>
     1f6:	85 33       	cpi	r24, 0x35	; 53
     1f8:	70 f4       	brcc	.+28     	; 0x216 <writeChar+0x3a>
     1fa:	81 33       	cpi	r24, 0x31	; 49
     1fc:	f1 f0       	breq	.+60     	; 0x23a <writeChar+0x5e>
     1fe:	82 33       	cpi	r24, 0x32	; 50
     200:	20 f4       	brcc	.+8      	; 0x20a <writeChar+0x2e>
     202:	80 33       	cpi	r24, 0x30	; 48
     204:	09 f0       	breq	.+2      	; 0x208 <writeChar+0x2c>
     206:	93 c0       	rjmp	.+294    	; 0x32e <writeChar+0x152>
     208:	86 c0       	rjmp	.+268    	; 0x316 <writeChar+0x13a>
     20a:	82 33       	cpi	r24, 0x32	; 50
     20c:	01 f1       	breq	.+64     	; 0x24e <writeChar+0x72>
     20e:	83 33       	cpi	r24, 0x33	; 51
     210:	09 f0       	breq	.+2      	; 0x214 <writeChar+0x38>
     212:	8d c0       	rjmp	.+282    	; 0x32e <writeChar+0x152>
     214:	29 c0       	rjmp	.+82     	; 0x268 <writeChar+0x8c>
     216:	87 33       	cpi	r24, 0x37	; 55
     218:	09 f4       	brne	.+2      	; 0x21c <writeChar+0x40>
     21a:	59 c0       	rjmp	.+178    	; 0x2ce <writeChar+0xf2>
     21c:	88 33       	cpi	r24, 0x38	; 56
     21e:	30 f4       	brcc	.+12     	; 0x22c <writeChar+0x50>
     220:	85 33       	cpi	r24, 0x35	; 53
     222:	d9 f1       	breq	.+118    	; 0x29a <writeChar+0xbe>
     224:	86 33       	cpi	r24, 0x36	; 54
     226:	09 f0       	breq	.+2      	; 0x22a <writeChar+0x4e>
     228:	82 c0       	rjmp	.+260    	; 0x32e <writeChar+0x152>
     22a:	44 c0       	rjmp	.+136    	; 0x2b4 <writeChar+0xd8>
     22c:	88 33       	cpi	r24, 0x38	; 56
     22e:	09 f4       	brne	.+2      	; 0x232 <writeChar+0x56>
     230:	58 c0       	rjmp	.+176    	; 0x2e2 <writeChar+0x106>
     232:	89 33       	cpi	r24, 0x39	; 57
     234:	09 f0       	breq	.+2      	; 0x238 <writeChar+0x5c>
     236:	7b c0       	rjmp	.+246    	; 0x32e <writeChar+0x152>
     238:	61 c0       	rjmp	.+194    	; 0x2fc <writeChar+0x120>
	{
		case '0': n1=1; n2=5; n3=5; n4=1;break;
		case '1': n1=8; n2=1; n3=1; n4=0;break;
     23a:	cc 24       	eor	r12, r12
     23c:	dd 24       	eor	r13, r13
     23e:	ee 24       	eor	r14, r14
     240:	ff 24       	eor	r15, r15
     242:	e3 94       	inc	r14
     244:	01 e0       	ldi	r16, 0x01	; 1
     246:	10 e0       	ldi	r17, 0x00	; 0
     248:	48 e0       	ldi	r20, 0x08	; 8
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	70 c0       	rjmp	.+224    	; 0x32e <writeChar+0x152>
		case '2': n1=1; n2=1; n3=0xE; n4=1;break;
     24e:	cc 24       	eor	r12, r12
     250:	dd 24       	eor	r13, r13
     252:	c3 94       	inc	r12
     254:	0f 2e       	mov	r0, r31
     256:	fe e0       	ldi	r31, 0x0E	; 14
     258:	ef 2e       	mov	r14, r31
     25a:	ff 24       	eor	r15, r15
     25c:	f0 2d       	mov	r31, r0
     25e:	01 e0       	ldi	r16, 0x01	; 1
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	41 e0       	ldi	r20, 0x01	; 1
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	63 c0       	rjmp	.+198    	; 0x32e <writeChar+0x152>
		case '3': n1=1; n2=1; n3=0xB; n4=1;break;
     268:	cc 24       	eor	r12, r12
     26a:	dd 24       	eor	r13, r13
     26c:	c3 94       	inc	r12
     26e:	0f 2e       	mov	r0, r31
     270:	fb e0       	ldi	r31, 0x0B	; 11
     272:	ef 2e       	mov	r14, r31
     274:	ff 24       	eor	r15, r15
     276:	f0 2d       	mov	r31, r0
     278:	01 e0       	ldi	r16, 0x01	; 1
     27a:	10 e0       	ldi	r17, 0x00	; 0
     27c:	41 e0       	ldi	r20, 0x01	; 1
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	56 c0       	rjmp	.+172    	; 0x32e <writeChar+0x152>
		case '4': n1=0; n2=5; n3=0xB; n4=0;break;
     282:	cc 24       	eor	r12, r12
     284:	dd 24       	eor	r13, r13
     286:	0f 2e       	mov	r0, r31
     288:	fb e0       	ldi	r31, 0x0B	; 11
     28a:	ef 2e       	mov	r14, r31
     28c:	ff 24       	eor	r15, r15
     28e:	f0 2d       	mov	r31, r0
     290:	05 e0       	ldi	r16, 0x05	; 5
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	4a c0       	rjmp	.+148    	; 0x32e <writeChar+0x152>
		case '5': n1=1; n2=4; n3=0xB; n4=1;break;
     29a:	cc 24       	eor	r12, r12
     29c:	dd 24       	eor	r13, r13
     29e:	c3 94       	inc	r12
     2a0:	0f 2e       	mov	r0, r31
     2a2:	fb e0       	ldi	r31, 0x0B	; 11
     2a4:	ef 2e       	mov	r14, r31
     2a6:	ff 24       	eor	r15, r15
     2a8:	f0 2d       	mov	r31, r0
     2aa:	04 e0       	ldi	r16, 0x04	; 4
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	3d c0       	rjmp	.+122    	; 0x32e <writeChar+0x152>
		case '6': n1=1; n2=4; n3=0xF; n4=1;break;
     2b4:	cc 24       	eor	r12, r12
     2b6:	dd 24       	eor	r13, r13
     2b8:	c3 94       	inc	r12
     2ba:	0f 2e       	mov	r0, r31
     2bc:	ff e0       	ldi	r31, 0x0F	; 15
     2be:	ef 2e       	mov	r14, r31
     2c0:	ff 24       	eor	r15, r15
     2c2:	f0 2d       	mov	r31, r0
     2c4:	04 e0       	ldi	r16, 0x04	; 4
     2c6:	10 e0       	ldi	r17, 0x00	; 0
     2c8:	41 e0       	ldi	r20, 0x01	; 1
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	30 c0       	rjmp	.+96     	; 0x32e <writeChar+0x152>
		case '7': n1=1; n2=1; n3=0x1; n4=0;break;
     2ce:	cc 24       	eor	r12, r12
     2d0:	dd 24       	eor	r13, r13
     2d2:	ee 24       	eor	r14, r14
     2d4:	ff 24       	eor	r15, r15
     2d6:	e3 94       	inc	r14
     2d8:	01 e0       	ldi	r16, 0x01	; 1
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	41 e0       	ldi	r20, 0x01	; 1
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	26 c0       	rjmp	.+76     	; 0x32e <writeChar+0x152>
		case '8': n1=1; n2=5; n3=0xF; n4=1;break;
     2e2:	cc 24       	eor	r12, r12
     2e4:	dd 24       	eor	r13, r13
     2e6:	c3 94       	inc	r12
     2e8:	0f 2e       	mov	r0, r31
     2ea:	ff e0       	ldi	r31, 0x0F	; 15
     2ec:	ef 2e       	mov	r14, r31
     2ee:	ff 24       	eor	r15, r15
     2f0:	f0 2d       	mov	r31, r0
     2f2:	05 e0       	ldi	r16, 0x05	; 5
     2f4:	10 e0       	ldi	r17, 0x00	; 0
     2f6:	41 e0       	ldi	r20, 0x01	; 1
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	19 c0       	rjmp	.+50     	; 0x32e <writeChar+0x152>
		case '9': n1=1; n2=5; n3=0xB; n4=1;break;
     2fc:	cc 24       	eor	r12, r12
     2fe:	dd 24       	eor	r13, r13
     300:	c3 94       	inc	r12
     302:	0f 2e       	mov	r0, r31
     304:	fb e0       	ldi	r31, 0x0B	; 11
     306:	ef 2e       	mov	r14, r31
     308:	ff 24       	eor	r15, r15
     30a:	f0 2d       	mov	r31, r0
     30c:	05 e0       	ldi	r16, 0x05	; 5
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0c c0       	rjmp	.+24     	; 0x32e <writeChar+0x152>
void writeChar(char ch, int pos)
{
	int n1,n2,n3,n4;
	switch(ch)
	{
		case '0': n1=1; n2=5; n3=5; n4=1;break;
     316:	cc 24       	eor	r12, r12
     318:	dd 24       	eor	r13, r13
     31a:	c3 94       	inc	r12
     31c:	0f 2e       	mov	r0, r31
     31e:	f5 e0       	ldi	r31, 0x05	; 5
     320:	ef 2e       	mov	r14, r31
     322:	ff 24       	eor	r15, r15
     324:	f0 2d       	mov	r31, r0
     326:	05 e0       	ldi	r16, 0x05	; 5
     328:	10 e0       	ldi	r17, 0x00	; 0
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	50 e0       	ldi	r21, 0x00	; 0
		case '6': n1=1; n2=4; n3=0xF; n4=1;break;
		case '7': n1=1; n2=1; n3=0x1; n4=0;break;
		case '8': n1=1; n2=5; n3=0xF; n4=1;break;
		case '9': n1=1; n2=5; n3=0xB; n4=1;break;
	}
	switch(pos)
     32e:	62 30       	cpi	r22, 0x02	; 2
     330:	71 05       	cpc	r23, r1
     332:	09 f4       	brne	.+2      	; 0x336 <writeChar+0x15a>
     334:	82 c0       	rjmp	.+260    	; 0x43a <writeChar+0x25e>
     336:	63 30       	cpi	r22, 0x03	; 3
     338:	71 05       	cpc	r23, r1
     33a:	44 f4       	brge	.+16     	; 0x34c <writeChar+0x170>
     33c:	61 15       	cp	r22, r1
     33e:	71 05       	cpc	r23, r1
     340:	91 f0       	breq	.+36     	; 0x366 <writeChar+0x18a>
     342:	61 30       	cpi	r22, 0x01	; 1
     344:	71 05       	cpc	r23, r1
     346:	09 f0       	breq	.+2      	; 0x34a <writeChar+0x16e>
     348:	4b c1       	rjmp	.+662    	; 0x5e0 <__stack+0xe1>
     34a:	32 c0       	rjmp	.+100    	; 0x3b0 <writeChar+0x1d4>
     34c:	64 30       	cpi	r22, 0x04	; 4
     34e:	71 05       	cpc	r23, r1
     350:	09 f4       	brne	.+2      	; 0x354 <writeChar+0x178>
     352:	dd c0       	rjmp	.+442    	; 0x50e <__stack+0xf>
     354:	64 30       	cpi	r22, 0x04	; 4
     356:	71 05       	cpc	r23, r1
     358:	0c f4       	brge	.+2      	; 0x35c <writeChar+0x180>
     35a:	94 c0       	rjmp	.+296    	; 0x484 <writeChar+0x2a8>
     35c:	65 30       	cpi	r22, 0x05	; 5
     35e:	71 05       	cpc	r23, r1
     360:	09 f0       	breq	.+2      	; 0x364 <writeChar+0x188>
     362:	3e c1       	rjmp	.+636    	; 0x5e0 <__stack+0xe1>
     364:	f9 c0       	rjmp	.+498    	; 0x558 <__stack+0x59>
	{
		case 0: LCDDR0  = LCDDR0&0xf0;
     366:	6c ee       	ldi	r22, 0xEC	; 236
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	fb 01       	movw	r30, r22
     36c:	80 81       	ld	r24, Z
     36e:	80 7f       	andi	r24, 0xF0	; 240
     370:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5&0xf0;
     372:	a1 ef       	ldi	r26, 0xF1	; 241
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	8c 91       	ld	r24, X
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10&0xf0;
     37c:	c6 ef       	ldi	r28, 0xF6	; 246
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	88 81       	ld	r24, Y
     382:	80 7f       	andi	r24, 0xF0	; 240
     384:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15&0xf0;
     386:	2b ef       	ldi	r18, 0xFB	; 251
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	f9 01       	movw	r30, r18
     38c:	80 81       	ld	r24, Z
     38e:	80 7f       	andi	r24, 0xF0	; 240
     390:	80 83       	st	Z, r24
		        LCDDR0  = LCDDR0|n1;
     392:	fb 01       	movw	r30, r22
     394:	80 81       	ld	r24, Z
     396:	48 2b       	or	r20, r24
     398:	40 83       	st	Z, r20
		        LCDDR5  = LCDDR5|n2;
     39a:	8c 91       	ld	r24, X
     39c:	08 2b       	or	r16, r24
     39e:	0c 93       	st	X, r16
		        LCDDR10 = LCDDR10|n3;
     3a0:	88 81       	ld	r24, Y
     3a2:	e8 2a       	or	r14, r24
     3a4:	e8 82       	st	Y, r14
		        LCDDR15 = LCDDR15|n4;
     3a6:	f9 01       	movw	r30, r18
     3a8:	80 81       	ld	r24, Z
     3aa:	c8 2a       	or	r12, r24
     3ac:	c0 82       	st	Z, r12
				break;
     3ae:	18 c1       	rjmp	.+560    	; 0x5e0 <__stack+0xe1>
		case 1: LCDDR0  = LCDDR0&0x0f;
     3b0:	0f 2e       	mov	r0, r31
     3b2:	fc ee       	ldi	r31, 0xEC	; 236
     3b4:	af 2e       	mov	r10, r31
     3b6:	bb 24       	eor	r11, r11
     3b8:	f0 2d       	mov	r31, r0
     3ba:	f5 01       	movw	r30, r10
     3bc:	80 81       	ld	r24, Z
     3be:	8f 70       	andi	r24, 0x0F	; 15
     3c0:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5&0x0f;
     3c2:	a1 ef       	ldi	r26, 0xF1	; 241
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	8c 91       	ld	r24, X
     3c8:	8f 70       	andi	r24, 0x0F	; 15
     3ca:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10&0x0f;
     3cc:	c6 ef       	ldi	r28, 0xF6	; 246
     3ce:	d0 e0       	ldi	r29, 0x00	; 0
     3d0:	88 81       	ld	r24, Y
     3d2:	8f 70       	andi	r24, 0x0F	; 15
     3d4:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15&0x0f;
     3d6:	2b ef       	ldi	r18, 0xFB	; 251
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	80 81       	ld	r24, Z
     3de:	8f 70       	andi	r24, 0x0F	; 15
     3e0:	80 83       	st	Z, r24
		        LCDDR0  = LCDDR0|(n1<<4);
     3e2:	f5 01       	movw	r30, r10
     3e4:	60 81       	ld	r22, Z
     3e6:	ca 01       	movw	r24, r20
     3e8:	82 95       	swap	r24
     3ea:	92 95       	swap	r25
     3ec:	90 7f       	andi	r25, 0xF0	; 240
     3ee:	98 27       	eor	r25, r24
     3f0:	80 7f       	andi	r24, 0xF0	; 240
     3f2:	98 27       	eor	r25, r24
     3f4:	86 2b       	or	r24, r22
     3f6:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5|(n2<<4);
     3f8:	4c 91       	ld	r20, X
     3fa:	c8 01       	movw	r24, r16
     3fc:	82 95       	swap	r24
     3fe:	92 95       	swap	r25
     400:	90 7f       	andi	r25, 0xF0	; 240
     402:	98 27       	eor	r25, r24
     404:	80 7f       	andi	r24, 0xF0	; 240
     406:	98 27       	eor	r25, r24
     408:	84 2b       	or	r24, r20
     40a:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10|(n3<<4);
     40c:	48 81       	ld	r20, Y
     40e:	c7 01       	movw	r24, r14
     410:	82 95       	swap	r24
     412:	92 95       	swap	r25
     414:	90 7f       	andi	r25, 0xF0	; 240
     416:	98 27       	eor	r25, r24
     418:	80 7f       	andi	r24, 0xF0	; 240
     41a:	98 27       	eor	r25, r24
     41c:	84 2b       	or	r24, r20
     41e:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15|(n4<<4);
     420:	f9 01       	movw	r30, r18
     422:	80 81       	ld	r24, Z
     424:	cc 0c       	add	r12, r12
     426:	dd 1c       	adc	r13, r13
     428:	cc 0c       	add	r12, r12
     42a:	dd 1c       	adc	r13, r13
     42c:	cc 0c       	add	r12, r12
     42e:	dd 1c       	adc	r13, r13
     430:	cc 0c       	add	r12, r12
     432:	dd 1c       	adc	r13, r13
     434:	c8 2a       	or	r12, r24
     436:	c0 82       	st	Z, r12
				break;
     438:	d3 c0       	rjmp	.+422    	; 0x5e0 <__stack+0xe1>
		case 2: LCDDR1  = LCDDR1&0xf0;
     43a:	6d ee       	ldi	r22, 0xED	; 237
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	fb 01       	movw	r30, r22
     440:	80 81       	ld	r24, Z
     442:	80 7f       	andi	r24, 0xF0	; 240
     444:	80 83       	st	Z, r24
		        LCDDR6  = LCDDR6&0xf0;
     446:	a2 ef       	ldi	r26, 0xF2	; 242
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	8c 91       	ld	r24, X
     44c:	80 7f       	andi	r24, 0xF0	; 240
     44e:	8c 93       	st	X, r24
		        LCDDR11 = LCDDR11&0xf0;
     450:	c7 ef       	ldi	r28, 0xF7	; 247
     452:	d0 e0       	ldi	r29, 0x00	; 0
     454:	88 81       	ld	r24, Y
     456:	80 7f       	andi	r24, 0xF0	; 240
     458:	88 83       	st	Y, r24
		        LCDDR16 = LCDDR16&0xf0;
     45a:	2c ef       	ldi	r18, 0xFC	; 252
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	80 81       	ld	r24, Z
     462:	80 7f       	andi	r24, 0xF0	; 240
     464:	80 83       	st	Z, r24
		        LCDDR1  = LCDDR1|n1;
     466:	fb 01       	movw	r30, r22
     468:	80 81       	ld	r24, Z
     46a:	48 2b       	or	r20, r24
     46c:	40 83       	st	Z, r20
		        LCDDR6  = LCDDR6|n2;
     46e:	8c 91       	ld	r24, X
     470:	08 2b       	or	r16, r24
     472:	0c 93       	st	X, r16
		        LCDDR11 = LCDDR11|n3;
     474:	88 81       	ld	r24, Y
     476:	e8 2a       	or	r14, r24
     478:	e8 82       	st	Y, r14
		        LCDDR16 = LCDDR16|n4;
     47a:	f9 01       	movw	r30, r18
     47c:	80 81       	ld	r24, Z
     47e:	c8 2a       	or	r12, r24
     480:	c0 82       	st	Z, r12
				break;
     482:	ae c0       	rjmp	.+348    	; 0x5e0 <__stack+0xe1>
        case 3: LCDDR1  = LCDDR1&0x0f;
     484:	0f 2e       	mov	r0, r31
     486:	fd ee       	ldi	r31, 0xED	; 237
     488:	af 2e       	mov	r10, r31
     48a:	bb 24       	eor	r11, r11
     48c:	f0 2d       	mov	r31, r0
     48e:	f5 01       	movw	r30, r10
     490:	80 81       	ld	r24, Z
     492:	8f 70       	andi	r24, 0x0F	; 15
     494:	80 83       	st	Z, r24
                LCDDR6  = LCDDR6&0x0f;
     496:	a2 ef       	ldi	r26, 0xF2	; 242
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	8c 91       	ld	r24, X
     49c:	8f 70       	andi	r24, 0x0F	; 15
     49e:	8c 93       	st	X, r24
                LCDDR11 = LCDDR11&0x0f;
     4a0:	c7 ef       	ldi	r28, 0xF7	; 247
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	88 81       	ld	r24, Y
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	88 83       	st	Y, r24
                LCDDR16 = LCDDR16&0x0f;
     4aa:	2c ef       	ldi	r18, 0xFC	; 252
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	80 81       	ld	r24, Z
     4b2:	8f 70       	andi	r24, 0x0F	; 15
     4b4:	80 83       	st	Z, r24
		        LCDDR1  = LCDDR1|(n1<<4);
     4b6:	f5 01       	movw	r30, r10
     4b8:	60 81       	ld	r22, Z
     4ba:	ca 01       	movw	r24, r20
     4bc:	82 95       	swap	r24
     4be:	92 95       	swap	r25
     4c0:	90 7f       	andi	r25, 0xF0	; 240
     4c2:	98 27       	eor	r25, r24
     4c4:	80 7f       	andi	r24, 0xF0	; 240
     4c6:	98 27       	eor	r25, r24
     4c8:	86 2b       	or	r24, r22
     4ca:	80 83       	st	Z, r24
                LCDDR6  = LCDDR6|(n2<<4);
     4cc:	4c 91       	ld	r20, X
     4ce:	c8 01       	movw	r24, r16
     4d0:	82 95       	swap	r24
     4d2:	92 95       	swap	r25
     4d4:	90 7f       	andi	r25, 0xF0	; 240
     4d6:	98 27       	eor	r25, r24
     4d8:	80 7f       	andi	r24, 0xF0	; 240
     4da:	98 27       	eor	r25, r24
     4dc:	84 2b       	or	r24, r20
     4de:	8c 93       	st	X, r24
                LCDDR11 = LCDDR11|(n3<<4);
     4e0:	48 81       	ld	r20, Y
     4e2:	c7 01       	movw	r24, r14
     4e4:	82 95       	swap	r24
     4e6:	92 95       	swap	r25
     4e8:	90 7f       	andi	r25, 0xF0	; 240
     4ea:	98 27       	eor	r25, r24
     4ec:	80 7f       	andi	r24, 0xF0	; 240
     4ee:	98 27       	eor	r25, r24
     4f0:	84 2b       	or	r24, r20
     4f2:	88 83       	st	Y, r24
                LCDDR16 = LCDDR16|(n4<<4);
     4f4:	f9 01       	movw	r30, r18
     4f6:	80 81       	ld	r24, Z
     4f8:	cc 0c       	add	r12, r12
     4fa:	dd 1c       	adc	r13, r13
     4fc:	cc 0c       	add	r12, r12
     4fe:	dd 1c       	adc	r13, r13
     500:	cc 0c       	add	r12, r12
     502:	dd 1c       	adc	r13, r13
     504:	cc 0c       	add	r12, r12
     506:	dd 1c       	adc	r13, r13
     508:	c8 2a       	or	r12, r24
     50a:	c0 82       	st	Z, r12
				break;
     50c:	69 c0       	rjmp	.+210    	; 0x5e0 <__stack+0xe1>
		case 4: LCDDR2  = LCDDR2&0xf0;
     50e:	6e ee       	ldi	r22, 0xEE	; 238
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	fb 01       	movw	r30, r22
     514:	80 81       	ld	r24, Z
     516:	80 7f       	andi	r24, 0xF0	; 240
     518:	80 83       	st	Z, r24
		        LCDDR7  = LCDDR7&0xf0;
     51a:	a3 ef       	ldi	r26, 0xF3	; 243
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	8c 91       	ld	r24, X
     520:	80 7f       	andi	r24, 0xF0	; 240
     522:	8c 93       	st	X, r24
		        LCDDR12 = LCDDR12&0xf0;
     524:	c8 ef       	ldi	r28, 0xF8	; 248
     526:	d0 e0       	ldi	r29, 0x00	; 0
     528:	88 81       	ld	r24, Y
     52a:	80 7f       	andi	r24, 0xF0	; 240
     52c:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17&0xf0;
     52e:	2d ef       	ldi	r18, 0xFD	; 253
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	f9 01       	movw	r30, r18
     534:	80 81       	ld	r24, Z
     536:	80 7f       	andi	r24, 0xF0	; 240
     538:	80 83       	st	Z, r24
		        LCDDR2  = LCDDR2|n1;
     53a:	fb 01       	movw	r30, r22
     53c:	80 81       	ld	r24, Z
     53e:	48 2b       	or	r20, r24
     540:	40 83       	st	Z, r20
	        	LCDDR7 = LCDDR7|n2;
     542:	8c 91       	ld	r24, X
     544:	08 2b       	or	r16, r24
     546:	0c 93       	st	X, r16
		        LCDDR12  = LCDDR12|n3;
     548:	88 81       	ld	r24, Y
     54a:	e8 2a       	or	r14, r24
     54c:	e8 82       	st	Y, r14
		        LCDDR17 = LCDDR17|n4;
     54e:	f9 01       	movw	r30, r18
     550:	80 81       	ld	r24, Z
     552:	c8 2a       	or	r12, r24
     554:	c0 82       	st	Z, r12
				break;
     556:	44 c0       	rjmp	.+136    	; 0x5e0 <__stack+0xe1>
		case 5: LCDDR2  = LCDDR2&0x0f;
     558:	0f 2e       	mov	r0, r31
     55a:	fe ee       	ldi	r31, 0xEE	; 238
     55c:	af 2e       	mov	r10, r31
     55e:	bb 24       	eor	r11, r11
     560:	f0 2d       	mov	r31, r0
     562:	f5 01       	movw	r30, r10
     564:	80 81       	ld	r24, Z
     566:	8f 70       	andi	r24, 0x0F	; 15
     568:	80 83       	st	Z, r24
		        LCDDR7  = LCDDR7&0x0f;
     56a:	a3 ef       	ldi	r26, 0xF3	; 243
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	8c 91       	ld	r24, X
     570:	8f 70       	andi	r24, 0x0F	; 15
     572:	8c 93       	st	X, r24
		        LCDDR12 = LCDDR12&0x0f;
     574:	c8 ef       	ldi	r28, 0xF8	; 248
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	88 81       	ld	r24, Y
     57a:	8f 70       	andi	r24, 0x0F	; 15
     57c:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17&0x0f;
     57e:	2d ef       	ldi	r18, 0xFD	; 253
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	f9 01       	movw	r30, r18
     584:	80 81       	ld	r24, Z
     586:	8f 70       	andi	r24, 0x0F	; 15
     588:	80 83       	st	Z, r24
		        LCDDR2  = LCDDR2|(n1<<4);
     58a:	f5 01       	movw	r30, r10
     58c:	60 81       	ld	r22, Z
     58e:	ca 01       	movw	r24, r20
     590:	82 95       	swap	r24
     592:	92 95       	swap	r25
     594:	90 7f       	andi	r25, 0xF0	; 240
     596:	98 27       	eor	r25, r24
     598:	80 7f       	andi	r24, 0xF0	; 240
     59a:	98 27       	eor	r25, r24
     59c:	86 2b       	or	r24, r22
     59e:	80 83       	st	Z, r24
		        LCDDR7 = LCDDR7|(n2<<4);
     5a0:	4c 91       	ld	r20, X
     5a2:	c8 01       	movw	r24, r16
     5a4:	82 95       	swap	r24
     5a6:	92 95       	swap	r25
     5a8:	90 7f       	andi	r25, 0xF0	; 240
     5aa:	98 27       	eor	r25, r24
     5ac:	80 7f       	andi	r24, 0xF0	; 240
     5ae:	98 27       	eor	r25, r24
     5b0:	84 2b       	or	r24, r20
     5b2:	8c 93       	st	X, r24
		        LCDDR12  = LCDDR12|(n3<<4);
     5b4:	48 81       	ld	r20, Y
     5b6:	c7 01       	movw	r24, r14
     5b8:	82 95       	swap	r24
     5ba:	92 95       	swap	r25
     5bc:	90 7f       	andi	r25, 0xF0	; 240
     5be:	98 27       	eor	r25, r24
     5c0:	80 7f       	andi	r24, 0xF0	; 240
     5c2:	98 27       	eor	r25, r24
     5c4:	84 2b       	or	r24, r20
     5c6:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17|(n4<<4);
     5c8:	f9 01       	movw	r30, r18
     5ca:	80 81       	ld	r24, Z
     5cc:	cc 0c       	add	r12, r12
     5ce:	dd 1c       	adc	r13, r13
     5d0:	cc 0c       	add	r12, r12
     5d2:	dd 1c       	adc	r13, r13
     5d4:	cc 0c       	add	r12, r12
     5d6:	dd 1c       	adc	r13, r13
     5d8:	cc 0c       	add	r12, r12
     5da:	dd 1c       	adc	r13, r13
     5dc:	c8 2a       	or	r12, r24
     5de:	c0 82       	st	Z, r12
				break;
	}
}	
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	bf 90       	pop	r11
     5f2:	af 90       	pop	r10
     5f4:	08 95       	ret

000005f6 <longSize>:

int longSize(int i)
{
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	9c 01       	movw	r18, r24
	if (i%10==i)
     600:	6a e0       	ldi	r22, 0x0A	; 10
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     608:	82 17       	cp	r24, r18
     60a:	93 07       	cpc	r25, r19
     60c:	79 f1       	breq	.+94     	; 0x66c <longSize+0x76>
	{
		return 1;
	}
	else if (i%100==i)
     60e:	c9 01       	movw	r24, r18
     610:	64 e6       	ldi	r22, 0x64	; 100
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     618:	82 17       	cp	r24, r18
     61a:	93 07       	cpc	r25, r19
     61c:	51 f1       	breq	.+84     	; 0x672 <longSize+0x7c>
	{
		return 2;
	}
	else if (i%1000==i)
     61e:	c9 01       	movw	r24, r18
     620:	68 ee       	ldi	r22, 0xE8	; 232
     622:	73 e0       	ldi	r23, 0x03	; 3
     624:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	29 f1       	breq	.+74     	; 0x678 <longSize+0x82>
	{
		return 3;
	}
	else if (i%10000==i)
     62e:	c9 01       	movw	r24, r18
     630:	60 e1       	ldi	r22, 0x10	; 16
     632:	77 e2       	ldi	r23, 0x27	; 39
     634:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     638:	82 17       	cp	r24, r18
     63a:	93 07       	cpc	r25, r19
     63c:	01 f1       	breq	.+64     	; 0x67e <longSize+0x88>
	{
		return 4;
	}
	else if (i%100000==i)
     63e:	69 01       	movw	r12, r18
     640:	ee 24       	eor	r14, r14
     642:	d7 fc       	sbrc	r13, 7
     644:	e0 94       	com	r14
     646:	fe 2c       	mov	r15, r14
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	20 ea       	ldi	r18, 0xA0	; 160
     64e:	36 e8       	ldi	r19, 0x86	; 134
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__divmodsi4>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	c8 16       	cp	r12, r24
     65e:	d9 06       	cpc	r13, r25
     660:	ea 06       	cpc	r14, r26
     662:	fb 06       	cpc	r15, r27
     664:	79 f4       	brne	.+30     	; 0x684 <longSize+0x8e>
	{
		return 5;
     666:	85 e0       	ldi	r24, 0x05	; 5
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e c0       	rjmp	.+28     	; 0x688 <longSize+0x92>

int longSize(int i)
{
	if (i%10==i)
	{
		return 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0b c0       	rjmp	.+22     	; 0x688 <longSize+0x92>
	}
	else if (i%100==i)
	{
		return 2;
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	08 c0       	rjmp	.+16     	; 0x688 <longSize+0x92>
	}
	else if (i%1000==i)
	{
		return 3;
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	05 c0       	rjmp	.+10     	; 0x688 <longSize+0x92>
	}
	else if (i%10000==i)
	{
		return 4;
     67e:	84 e0       	ldi	r24, 0x04	; 4
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	02 c0       	rjmp	.+4      	; 0x688 <longSize+0x92>
	else if (i%100000==i)
	{
		return 5;
	}
	else
	return 6;
     684:	86 e0       	ldi	r24, 0x06	; 6
     686:	90 e0       	ldi	r25, 0x00	; 0
}
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	08 95       	ret

00000692 <writeLong>:


void writeLong(int i)
{
     692:	4f 92       	push	r4
     694:	5f 92       	push	r5
     696:	6f 92       	push	r6
     698:	7f 92       	push	r7
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <writeLong+0x22>
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <writeLong+0x24>
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	6c 01       	movw	r12, r24
	int position = 0;
	char number = '0';
	int num = 0;
	int numsize;
	numsize = longSize(i);
     6bc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <longSize>
     6c0:	7c 01       	movw	r14, r24
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
     6c2:	18 16       	cp	r1, r24
     6c4:	19 06       	cpc	r1, r25
     6c6:	0c f0       	brlt	.+2      	; 0x6ca <writeLong+0x38>
     6c8:	fd c0       	rjmp	.+506    	; 0x8c4 <writeLong+0x232>
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
     6ca:	46 01       	movw	r8, r12
     6cc:	aa 24       	eor	r10, r10
     6ce:	97 fc       	sbrc	r9, 7
     6d0:	a0 94       	com	r10
     6d2:	ba 2c       	mov	r11, r10
     6d4:	0f 2e       	mov	r0, r31
     6d6:	f0 ea       	ldi	r31, 0xA0	; 160
     6d8:	4f 2e       	mov	r4, r31
     6da:	f6 e8       	ldi	r31, 0x86	; 134
     6dc:	5f 2e       	mov	r5, r31
     6de:	f1 e0       	ldi	r31, 0x01	; 1
     6e0:	6f 2e       	mov	r6, r31
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	7f 2e       	mov	r7, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	c5 01       	movw	r24, r10
     6ea:	b4 01       	movw	r22, r8
     6ec:	a3 01       	movw	r20, r6
     6ee:	92 01       	movw	r18, r4
     6f0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__divmodsi4>
     6f4:	69 83       	std	Y+1, r22	; 0x01
     6f6:	7a 83       	std	Y+2, r23	; 0x02
     6f8:	8b 83       	std	Y+3, r24	; 0x03
     6fa:	9c 83       	std	Y+4, r25	; 0x04
     6fc:	c5 01       	movw	r24, r10
     6fe:	b4 01       	movw	r22, r8
     700:	20 e4       	ldi	r18, 0x40	; 64
     702:	32 e4       	ldi	r19, 0x42	; 66
     704:	4f e0       	ldi	r20, 0x0F	; 15
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__divmodsi4>
     70c:	29 81       	ldd	r18, Y+1	; 0x01
     70e:	3a 81       	ldd	r19, Y+2	; 0x02
     710:	4b 81       	ldd	r20, Y+3	; 0x03
     712:	5c 81       	ldd	r21, Y+4	; 0x04
     714:	62 1b       	sub	r22, r18
     716:	73 0b       	sbc	r23, r19
     718:	84 0b       	sbc	r24, r20
     71a:	95 0b       	sbc	r25, r21
     71c:	a3 01       	movw	r20, r6
     71e:	92 01       	movw	r18, r4
     720:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__divmodsi4>
     724:	92 2e       	mov	r9, r18
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
     726:	c6 01       	movw	r24, r12
     728:	60 e1       	ldi	r22, 0x10	; 16
     72a:	77 e2       	ldi	r23, 0x27	; 39
     72c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     730:	8c 01       	movw	r16, r24
     732:	c8 01       	movw	r24, r16
     734:	aa 27       	eor	r26, r26
     736:	97 fd       	sbrc	r25, 7
     738:	a0 95       	com	r26
     73a:	ba 2f       	mov	r27, r26
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	3a 81       	ldd	r19, Y+2	; 0x02
     740:	4b 81       	ldd	r20, Y+3	; 0x03
     742:	5c 81       	ldd	r21, Y+4	; 0x04
     744:	28 1b       	sub	r18, r24
     746:	39 0b       	sbc	r19, r25
     748:	4a 0b       	sbc	r20, r26
     74a:	5b 0b       	sbc	r21, r27
     74c:	ca 01       	movw	r24, r20
     74e:	b9 01       	movw	r22, r18
     750:	20 e1       	ldi	r18, 0x10	; 16
     752:	37 e2       	ldi	r19, 0x27	; 39
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__divmodsi4>
     75c:	f2 2f       	mov	r31, r18
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
     75e:	28 ee       	ldi	r18, 0xE8	; 232
     760:	33 e0       	ldi	r19, 0x03	; 3
     762:	c6 01       	movw	r24, r12
     764:	b9 01       	movw	r22, r18
     766:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     76a:	5c 01       	movw	r10, r24
     76c:	c8 01       	movw	r24, r16
     76e:	8a 19       	sub	r24, r10
     770:	9b 09       	sbc	r25, r11
     772:	b9 01       	movw	r22, r18
     774:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     778:	e6 2f       	mov	r30, r22
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
     77a:	24 e6       	ldi	r18, 0x64	; 100
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	c6 01       	movw	r24, r12
     780:	b9 01       	movw	r22, r18
     782:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     786:	8c 01       	movw	r16, r24
     788:	c5 01       	movw	r24, r10
     78a:	80 1b       	sub	r24, r16
     78c:	91 0b       	sbc	r25, r17
     78e:	b9 01       	movw	r22, r18
     790:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     794:	46 2f       	mov	r20, r22
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
     796:	2a e0       	ldi	r18, 0x0A	; 10
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	c6 01       	movw	r24, r12
     79c:	b9 01       	movw	r22, r18
     79e:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     7a2:	5c 01       	movw	r10, r24
     7a4:	c8 01       	movw	r24, r16
     7a6:	8a 19       	sub	r24, r10
     7a8:	9b 09       	sbc	r25, r11
     7aa:	b9 01       	movw	r22, r18
     7ac:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>


void writeLong(int i)
{
	int position = 0;
	char number = '0';
     7b0:	10 e3       	ldi	r17, 0x30	; 48
	int numsize;
	numsize = longSize(i);
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
     7b2:	66 24       	eor	r6, r6
     7b4:	77 24       	eor	r7, r7
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f0 e3       	ldi	r31, 0x30	; 48
     7ba:	df 2e       	mov	r13, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	d4 0e       	add	r13, r20
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f0 e3       	ldi	r31, 0x30	; 48
     7c4:	bf 2e       	mov	r11, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	bf 0e       	add	r11, r31
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f0 e3       	ldi	r31, 0x30	; 48
     7ce:	4f 2e       	mov	r4, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	4e 0e       	add	r4, r30
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f0 e3       	ldi	r31, 0x30	; 48
     7d8:	cf 2e       	mov	r12, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	c9 0c       	add	r12, r9
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
     7de:	0a 2d       	mov	r16, r10
     7e0:	00 5d       	subi	r16, 0xD0	; 208
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f0 e3       	ldi	r31, 0x30	; 48
     7e6:	8f 2e       	mov	r8, r31
     7e8:	f0 2d       	mov	r31, r0
     7ea:	86 0e       	add	r8, r22
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
     7ec:	32 e0       	ldi	r19, 0x02	; 2
     7ee:	63 16       	cp	r6, r19
     7f0:	71 04       	cpc	r7, r1
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <writeLong+0x164>
     7f4:	45 c0       	rjmp	.+138    	; 0x880 <writeLong+0x1ee>
     7f6:	43 e0       	ldi	r20, 0x03	; 3
     7f8:	64 16       	cp	r6, r20
     7fa:	71 04       	cpc	r7, r1
     7fc:	44 f4       	brge	.+16     	; 0x80e <writeLong+0x17c>
     7fe:	61 14       	cp	r6, r1
     800:	71 04       	cpc	r7, r1
     802:	81 f1       	breq	.+96     	; 0x864 <writeLong+0x1d2>
     804:	51 e0       	ldi	r21, 0x01	; 1
     806:	65 16       	cp	r6, r21
     808:	71 04       	cpc	r7, r1
     80a:	79 f4       	brne	.+30     	; 0x82a <writeLong+0x198>
     80c:	32 c0       	rjmp	.+100    	; 0x872 <writeLong+0x1e0>
     80e:	84 e0       	ldi	r24, 0x04	; 4
     810:	68 16       	cp	r6, r24
     812:	71 04       	cpc	r7, r1
     814:	09 f4       	brne	.+2      	; 0x818 <writeLong+0x186>
     816:	42 c0       	rjmp	.+132    	; 0x89c <writeLong+0x20a>
     818:	e4 e0       	ldi	r30, 0x04	; 4
     81a:	6e 16       	cp	r6, r30
     81c:	71 04       	cpc	r7, r1
     81e:	bc f1       	brlt	.+110    	; 0x88e <writeLong+0x1fc>
     820:	f5 e0       	ldi	r31, 0x05	; 5
     822:	6f 16       	cp	r6, r31
     824:	71 04       	cpc	r7, r1
     826:	09 f4       	brne	.+2      	; 0x82a <writeLong+0x198>
     828:	40 c0       	rjmp	.+128    	; 0x8aa <writeLong+0x218>
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
		}
		switch (position)
     82a:	22 e0       	ldi	r18, 0x02	; 2
     82c:	62 16       	cp	r6, r18
     82e:	71 04       	cpc	r7, r1
     830:	41 f1       	breq	.+80     	; 0x882 <writeLong+0x1f0>
     832:	33 e0       	ldi	r19, 0x03	; 3
     834:	63 16       	cp	r6, r19
     836:	71 04       	cpc	r7, r1
     838:	44 f4       	brge	.+16     	; 0x84a <writeLong+0x1b8>
     83a:	61 14       	cp	r6, r1
     83c:	71 04       	cpc	r7, r1
     83e:	99 f0       	breq	.+38     	; 0x866 <writeLong+0x1d4>
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	64 16       	cp	r6, r20
     844:	71 04       	cpc	r7, r1
     846:	b9 f5       	brne	.+110    	; 0x8b6 <writeLong+0x224>
     848:	15 c0       	rjmp	.+42     	; 0x874 <writeLong+0x1e2>
     84a:	54 e0       	ldi	r21, 0x04	; 4
     84c:	65 16       	cp	r6, r21
     84e:	71 04       	cpc	r7, r1
     850:	31 f1       	breq	.+76     	; 0x89e <writeLong+0x20c>
     852:	84 e0       	ldi	r24, 0x04	; 4
     854:	68 16       	cp	r6, r24
     856:	71 04       	cpc	r7, r1
     858:	dc f0       	brlt	.+54     	; 0x890 <writeLong+0x1fe>
     85a:	e5 e0       	ldi	r30, 0x05	; 5
     85c:	6e 16       	cp	r6, r30
     85e:	71 04       	cpc	r7, r1
     860:	51 f5       	brne	.+84     	; 0x8b6 <writeLong+0x224>
     862:	24 c0       	rjmp	.+72     	; 0x8ac <writeLong+0x21a>
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
     864:	10 2f       	mov	r17, r16
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
     866:	81 2f       	mov	r24, r17
     868:	65 e0       	ldi	r22, 0x05	; 5
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
     870:	22 c0       	rjmp	.+68     	; 0x8b6 <writeLong+0x224>
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
     872:	18 2d       	mov	r17, r8
			case 0: num = i%10; number = num+'0';break;
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
     874:	81 2f       	mov	r24, r17
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
     87e:	1b c0       	rjmp	.+54     	; 0x8b6 <writeLong+0x224>
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
     880:	1d 2d       	mov	r17, r13
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
     882:	81 2f       	mov	r24, r17
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
     88c:	14 c0       	rjmp	.+40     	; 0x8b6 <writeLong+0x224>
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
     88e:	14 2d       	mov	r17, r4
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
     890:	81 2f       	mov	r24, r17
     892:	62 e0       	ldi	r22, 0x02	; 2
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
     89a:	0d c0       	rjmp	.+26     	; 0x8b6 <writeLong+0x224>
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
     89c:	1b 2d       	mov	r17, r11
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
			case 4:writeChar(number,1);break;
     89e:	81 2f       	mov	r24, r17
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <writeLong+0x224>
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
     8aa:	1c 2d       	mov	r17, r12
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
			case 4:writeChar(number,1);break;
			case 5:writeChar(number,0);break;
     8ac:	81 2f       	mov	r24, r17
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
	int numsize;
	numsize = longSize(i);
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
     8b6:	08 94       	sec
     8b8:	61 1c       	adc	r6, r1
     8ba:	71 1c       	adc	r7, r1
     8bc:	6e 14       	cp	r6, r14
     8be:	7f 04       	cpc	r7, r15
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <writeLong+0x232>
     8c2:	94 cf       	rjmp	.-216    	; 0x7ec <writeLong+0x15a>
			case 4:writeChar(number,1);break;
			case 5:writeChar(number,0);break;
		}
		
	}
}
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	bf 90       	pop	r11
     8de:	af 90       	pop	r10
     8e0:	9f 90       	pop	r9
     8e2:	8f 90       	pop	r8
     8e4:	7f 90       	pop	r7
     8e6:	6f 90       	pop	r6
     8e8:	5f 90       	pop	r5
     8ea:	4f 90       	pop	r4
     8ec:	08 95       	ret

000008ee <writeDigit>:

int  writeDigit(LCD *self, int digitPos)
{
     8ee:	cb 01       	movw	r24, r22
	int position;
	char digit;
	position = digitPos%10;
	digit = digitPos/10+'0';
     8f0:	6a e0       	ldi	r22, 0x0A	; 10
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     8f8:	9c 01       	movw	r18, r24
	writeChar(digit,position);
     8fa:	86 2f       	mov	r24, r22
     8fc:	80 5d       	subi	r24, 0xD0	; 208
     8fe:	b9 01       	movw	r22, r18
     900:	0e 94 ee 00 	call	0x1dc	; 0x1dc <writeChar>
}
     904:	08 95       	ret

00000906 <writeInt>:
int  writeInt(LCD *self, int val)
{
     906:	cb 01       	movw	r24, r22
	writeLong(val);
     908:	0e 94 49 03 	call	0x692	; 0x692 <writeLong>
}
     90c:	08 95       	ret

0000090e <segmentOn>:
int  segmentOn(LCD *self, int segment)
{
	switch(segment){
     90e:	62 30       	cpi	r22, 0x02	; 2
     910:	71 05       	cpc	r23, r1
     912:	61 f0       	breq	.+24     	; 0x92c <segmentOn+0x1e>
     914:	63 30       	cpi	r22, 0x03	; 3
     916:	71 05       	cpc	r23, r1
     918:	79 f0       	breq	.+30     	; 0x938 <segmentOn+0x2a>
     91a:	61 30       	cpi	r22, 0x01	; 1
     91c:	71 05       	cpc	r23, r1
     91e:	91 f4       	brne	.+36     	; 0x944 <segmentOn+0x36>
		case 1:LCDDR3|= 0x01;
     920:	ef ee       	ldi	r30, 0xEF	; 239
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	81 60       	ori	r24, 0x01	; 1
     928:	80 83       	st	Z, r24
		break;
     92a:	0f c0       	rjmp	.+30     	; 0x94a <segmentOn+0x3c>
		case 2:LCDDR13|= 0x01;
     92c:	e9 ef       	ldi	r30, 0xF9	; 249
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 83       	st	Z, r24
		break;
     936:	09 c0       	rjmp	.+18     	; 0x94a <segmentOn+0x3c>
		case 3: LCDDR18 |= 0x01;
     938:	ee ef       	ldi	r30, 0xFE	; 254
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	80 83       	st	Z, r24
		break;
     942:	03 c0       	rjmp	.+6      	; 0x94a <segmentOn+0x3c>
		default: return 0;
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	08 95       	ret
	}
}
     94a:	08 95       	ret

0000094c <segmentOff>:
int  segmentOff(LCD *self, int segment)
{
	switch(segment){
     94c:	62 30       	cpi	r22, 0x02	; 2
     94e:	71 05       	cpc	r23, r1
     950:	59 f0       	breq	.+22     	; 0x968 <segmentOff+0x1c>
     952:	63 30       	cpi	r22, 0x03	; 3
     954:	71 05       	cpc	r23, r1
     956:	69 f0       	breq	.+26     	; 0x972 <segmentOff+0x26>
     958:	61 30       	cpi	r22, 0x01	; 1
     95a:	71 05       	cpc	r23, r1
     95c:	79 f4       	brne	.+30     	; 0x97c <segmentOff+0x30>
		case 1:LCDDR3 &= 0x00;
     95e:	ef ee       	ldi	r30, 0xEF	; 239
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	10 82       	st	Z, r1
		break;
     966:	0d c0       	rjmp	.+26     	; 0x982 <segmentOff+0x36>
		case 2:LCDDR13 &= 0x00;
     968:	e9 ef       	ldi	r30, 0xF9	; 249
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	10 82       	st	Z, r1
		break;
     970:	08 c0       	rjmp	.+16     	; 0x982 <segmentOff+0x36>
		case 3: LCDDR18 &= 0x00;
     972:	ee ef       	ldi	r30, 0xFE	; 254
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	10 82       	st	Z, r1
		break;
     97a:	03 c0       	rjmp	.+6      	; 0x982 <segmentOff+0x36>
		default: return 0;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	08 95       	ret
	}
     982:	08 95       	ret

00000984 <is_prime>:
#include "lcd.h"
#include "primes.h"
#include "blinker.h"

int is_prime(int i)
{
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	ec 01       	movw	r28, r24
	int loop;
	loop = sqrt(i);
     98e:	be 01       	movw	r22, r28
     990:	88 27       	eor	r24, r24
     992:	77 fd       	sbrc	r23, 7
     994:	80 95       	com	r24
     996:	98 2f       	mov	r25, r24
     998:	0e 94 07 14 	call	0x280e	; 0x280e <__floatsisf>
     99c:	0e 94 6f 14 	call	0x28de	; 0x28de <sqrt>
     9a0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <__fixsfsi>
     9a4:	9b 01       	movw	r18, r22
	int j = 0;
	int amount = 0;
	for (j=2; j<=loop+1; j++)
     9a6:	2f 5f       	subi	r18, 0xFF	; 255
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	22 30       	cpi	r18, 0x02	; 2
     9ac:	31 05       	cpc	r19, r1
     9ae:	8c f0       	brlt	.+34     	; 0x9d2 <is_prime+0x4e>
int is_prime(int i)
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
     9b0:	00 e0       	ldi	r16, 0x00	; 0
     9b2:	10 e0       	ldi	r17, 0x00	; 0
	for (j=2; j<=loop+1; j++)
     9b4:	e2 e0       	ldi	r30, 0x02	; 2
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (i%j == 0)
     9b8:	ce 01       	movw	r24, r28
     9ba:	bf 01       	movw	r22, r30
     9bc:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__divmodhi4>
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	11 f4       	brne	.+4      	; 0x9c8 <is_prime+0x44>
		{
			amount++;
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
	for (j=2; j<=loop+1; j++)
     9c8:	31 96       	adiw	r30, 0x01	; 1
     9ca:	2e 17       	cp	r18, r30
     9cc:	3f 07       	cpc	r19, r31
     9ce:	a4 f7       	brge	.-24     	; 0x9b8 <is_prime+0x34>
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <is_prime+0x52>
int is_prime(int i)
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
     9d2:	00 e0       	ldi	r16, 0x00	; 0
     9d4:	10 e0       	ldi	r17, 0x00	; 0
			amount++;
		}
	}
	if (amount != 0)
	{
		return 0;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	01 15       	cp	r16, r1
     9dc:	11 05       	cpc	r17, r1
     9de:	11 f0       	breq	.+4      	; 0x9e4 <is_prime+0x60>
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	return 1;
}
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <primes>:

int primes(PrimeCalculator *self, int x)
{
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	5c 01       	movw	r10, r24
     a04:	eb 01       	movw	r28, r22
	while (!(is_prime(x)))
	{
		if (x==32767) x=0;
     a06:	00 e0       	ldi	r16, 0x00	; 0
     a08:	10 e0       	ldi	r17, 0x00	; 0
	return 1;
}

int primes(PrimeCalculator *self, int x)
{
	while (!(is_prime(x)))
     a0a:	07 c0       	rjmp	.+14     	; 0xa1a <primes+0x2c>
	{
		if (x==32767) x=0;
     a0c:	8f e7       	ldi	r24, 0x7F	; 127
     a0e:	cf 3f       	cpi	r28, 0xFF	; 255
     a10:	d8 07       	cpc	r29, r24
     a12:	11 f0       	breq	.+4      	; 0xa18 <primes+0x2a>
		else
		x++;
     a14:	21 96       	adiw	r28, 0x01	; 1
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <primes+0x2c>

int primes(PrimeCalculator *self, int x)
{
	while (!(is_prime(x)))
	{
		if (x==32767) x=0;
     a18:	e8 01       	movw	r28, r16
	return 1;
}

int primes(PrimeCalculator *self, int x)
{
	while (!(is_prime(x)))
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 c2 04 	call	0x984	; 0x984 <is_prime>
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	a1 f3       	breq	.-24     	; 0xa0c <primes+0x1e>
	{
		if (x==32767) x=0;
		else
		x++;
	}
	ASYNC(self->driver,writeInt,x);
     a24:	f5 01       	movw	r30, r10
     a26:	04 81       	ldd	r16, Z+4	; 0x04
     a28:	15 81       	ldd	r17, Z+5	; 0x05
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	cb 01       	movw	r24, r22
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	a9 01       	movw	r20, r18
     a36:	0f 2e       	mov	r0, r31
     a38:	f3 e8       	ldi	r31, 0x83	; 131
     a3a:	ef 2e       	mov	r14, r31
     a3c:	f4 e0       	ldi	r31, 0x04	; 4
     a3e:	ff 2e       	mov	r15, r31
     a40:	f0 2d       	mov	r31, r0
     a42:	6e 01       	movw	r12, r28
     a44:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
	x++;
     a48:	08 94       	sec
     a4a:	c1 1c       	adc	r12, r1
     a4c:	d1 1c       	adc	r13, r1
	AFTER(MSEC(200),self, primes, x++);
     a4e:	6a e6       	ldi	r22, 0x6A	; 106
     a50:	78 e1       	ldi	r23, 0x18	; 24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	a9 01       	movw	r20, r18
     a5c:	85 01       	movw	r16, r10
     a5e:	0f 2e       	mov	r0, r31
     a60:	f7 ef       	ldi	r31, 0xF7	; 247
     a62:	ef 2e       	mov	r14, r31
     a64:	f4 e0       	ldi	r31, 0x04	; 4
     a66:	ff 2e       	mov	r15, r31
     a68:	f0 2d       	mov	r31, r0
     a6a:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	08 95       	ret

00000a84 <startup>:
	Blinker* bkr2;
} APP;

#define initAPP(p,b1,b2) {initObject(),p,b1,b2}
 
int startup(APP * self, int x){
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
  ASYNC(self -> pctr, primes,0);
     a9a:	0c 81       	ldd	r16, Y+4	; 0x04
     a9c:	1d 81       	ldd	r17, Y+5	; 0x05
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	cb 01       	movw	r24, r22
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	a9 01       	movw	r20, r18
     aaa:	0f 2e       	mov	r0, r31
     aac:	f7 ef       	ldi	r31, 0xF7	; 247
     aae:	ef 2e       	mov	r14, r31
     ab0:	f4 e0       	ldi	r31, 0x04	; 4
     ab2:	ff 2e       	mov	r15, r31
     ab4:	f0 2d       	mov	r31, r0
     ab6:	cc 24       	eor	r12, r12
     ab8:	dd 24       	eor	r13, r13
     aba:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
  ASYNC(self -> bkr1, startBlinking, 0);
     abe:	0e 81       	ldd	r16, Y+6	; 0x06
     ac0:	1f 81       	ldd	r17, Y+7	; 0x07
     ac2:	0f 2e       	mov	r0, r31
     ac4:	f2 eb       	ldi	r31, 0xB2	; 178
     ac6:	af 2e       	mov	r10, r31
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	bf 2e       	mov	r11, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	cb 01       	movw	r24, r22
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	a9 01       	movw	r20, r18
     ada:	75 01       	movw	r14, r10
     adc:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
  ASYNC(self -> bkr2, startBlinking, 0);
     ae0:	08 85       	ldd	r16, Y+8	; 0x08
     ae2:	19 85       	ldd	r17, Y+9	; 0x09
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	cb 01       	movw	r24, r22
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	a9 01       	movw	r20, r18
     af0:	0e 94 9d 10 	call	0x213a	; 0x213a <async>
} 
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	08 95       	ret

00000b0a <main>:

APP app = initAPP(&primeCalc,&blinker1,&blinker2);

int main(){
  CONFLCD;
     b0a:	87 eb       	ldi	r24, 0xB7	; 183
     b0c:	80 93 e5 00 	sts	0x00E5, r24
     b10:	80 e1       	ldi	r24, 0x10	; 16
     b12:	80 93 e6 00 	sts	0x00E6, r24
     b16:	8f e0       	ldi	r24, 0x0F	; 15
     b18:	80 93 e7 00 	sts	0x00E7, r24
     b1c:	80 e8       	ldi	r24, 0x80	; 128
     b1e:	80 93 e4 00 	sts	0x00E4, r24
  CONFJOY;
     b22:	85 b9       	out	0x05, r24	; 5
     b24:	80 93 6c 00 	sts	0x006C, r24
     b28:	8d bb       	out	0x1d, r24	; 29
  INSTALL(&stick,button,IRQ_PCINT1);
     b2a:	8a e0       	ldi	r24, 0x0A	; 10
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	61 ee       	ldi	r22, 0xE1	; 225
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	42 e0       	ldi	r20, 0x02	; 2
     b34:	0e 94 a3 13 	call	0x2746	; 0x2746 <install>
  return TINYTIMBER(&app,startup,0);
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	62 e4       	ldi	r22, 0x42	; 66
     b3e:	75 e0       	ldi	r23, 0x05	; 5
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 bd 13 	call	0x277a	; 0x277a <tinytimber>
     b48:	08 95       	ret

00000b4a <remove>:
    Thread t = *stack;
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	eb 01       	movw	r28, r22
    Msg prev = NULL, q = *queue;
     b50:	e8 81       	ld	r30, Y
     b52:	f9 81       	ldd	r31, Y+1	; 0x01
    while (q && (q != m)) {
     b54:	30 97       	sbiw	r30, 0x00	; 0
     b56:	f9 f0       	breq	.+62     	; 0xb96 <remove+0x4c>
     b58:	e8 17       	cp	r30, r24
     b5a:	f9 07       	cpc	r31, r25
     b5c:	11 f4       	brne	.+4      	; 0xb62 <remove+0x18>
     b5e:	12 c0       	rjmp	.+36     	; 0xb84 <remove+0x3a>
        prev = q;
        q = q->next;
     b60:	fd 01       	movw	r30, r26
     b62:	a0 81       	ld	r26, Z
     b64:	b1 81       	ldd	r27, Z+1	; 0x01
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     b66:	10 97       	sbiw	r26, 0x00	; 0
     b68:	c9 f0       	breq	.+50     	; 0xb9c <remove+0x52>
     b6a:	8a 17       	cp	r24, r26
     b6c:	9b 07       	cpc	r25, r27
     b6e:	c1 f7       	brne	.-16     	; 0xb60 <remove+0x16>
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     b70:	30 97       	sbiw	r30, 0x00	; 0
     b72:	49 f0       	breq	.+18     	; 0xb86 <remove+0x3c>
            prev->next = q->next;
     b74:	8d 91       	ld	r24, X+
     b76:	9c 91       	ld	r25, X
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	91 83       	std	Z+1, r25	; 0x01
     b7c:	80 83       	st	Z, r24
        else
            *queue = q->next;
        return 1;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e c0       	rjmp	.+28     	; 0xba0 <remove+0x56>
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     b84:	df 01       	movw	r26, r30
    }
    if (q) {
        if (prev)
            prev->next = q->next;
        else
            *queue = q->next;
     b86:	8d 91       	ld	r24, X+
     b88:	9c 91       	ld	r25, X
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	99 83       	std	Y+1, r25	; 0x01
     b8e:	88 83       	st	Y, r24
        return 1;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <remove+0x56>
    }
    return 0;
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <remove+0x56>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	00 d0       	rcall	.+0      	; 0xbac <dispatch+0x6>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     bb4:	80 91 4e 01 	lds	r24, 0x014E
     bb8:	90 91 4f 01 	lds	r25, 0x014F
     bbc:	06 96       	adiw	r24, 0x06	; 6
     bbe:	0e 94 48 15 	call	0x2a90	; 0x2a90 <setjmp>
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	59 f4       	brne	.+22     	; 0xbdc <dispatch+0x36>
        current = next;
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
     bca:	90 93 4f 01 	sts	0x014F, r25
     bce:	80 93 4e 01 	sts	0x014E, r24
        longjmp( next->context, 1 );
     bd2:	06 96       	adiw	r24, 0x06	; 6
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <longjmp>
    }
}
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <DUMP>:

#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
     be6:	fc 01       	movw	r30, r24
  while (*s)
     be8:	80 81       	ld	r24, Z
     bea:	88 23       	and	r24, r24
     bec:	21 f0       	breq	.+8      	; 0xbf6 <DUMP+0x10>

#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
     bee:	31 96       	adiw	r30, 0x01	; 1
  while (*s)
     bf0:	81 91       	ld	r24, Z+
     bf2:	88 23       	and	r24, r24
     bf4:	e9 f7       	brne	.-6      	; 0xbf0 <DUMP+0xa>
     bf6:	08 95       	ret

00000bf8 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <initialize+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <initialize+0x8>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <initialize+0xa>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     c06:	e1 e5       	ldi	r30, 0x51	; 81
     c08:	f2 e0       	ldi	r31, 0x02	; 2
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
        messages[i].next = &messages[i+1];
     c0e:	9c 01       	movw	r18, r24
     c10:	22 95       	swap	r18
     c12:	32 95       	swap	r19
     c14:	30 7f       	andi	r19, 0xF0	; 240
     c16:	32 27       	eor	r19, r18
     c18:	20 7f       	andi	r18, 0xF0	; 240
     c1a:	32 27       	eor	r19, r18
     c1c:	2f 5a       	subi	r18, 0xAF	; 175
     c1e:	3d 4f       	sbci	r19, 0xFD	; 253
     c20:	31 83       	std	Z+1, r19	; 0x01
     c22:	20 83       	st	Z, r18
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	70 96       	adiw	r30, 0x10	; 16
static void initialize(void) {
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     c28:	8f 30       	cpi	r24, 0x0F	; 15
     c2a:	91 05       	cpc	r25, r1
     c2c:	81 f7       	brne	.-32     	; 0xc0e <initialize+0x16>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     c2e:	10 92 32 03 	sts	0x0332, r1
     c32:	10 92 31 03 	sts	0x0331, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     c36:	8c e9       	ldi	r24, 0x9C	; 156
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	9c 01       	movw	r18, r24
     c3c:	23 5e       	subi	r18, 0xE3	; 227
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	30 93 9d 01 	sts	0x019D, r19
     c44:	20 93 9c 01 	sts	0x019C, r18
     c48:	9c 01       	movw	r18, r24
     c4a:	26 5c       	subi	r18, 0xC6	; 198
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	30 93 ba 01 	sts	0x01BA, r19
     c52:	20 93 b9 01 	sts	0x01B9, r18
     c56:	23 ef       	ldi	r18, 0xF3	; 243
     c58:	31 e0       	ldi	r19, 0x01	; 1
     c5a:	30 93 d7 01 	sts	0x01D7, r19
     c5e:	20 93 d6 01 	sts	0x01D6, r18
    threads[NTHREADS-1].next = NULL;
     c62:	10 92 f4 01 	sts	0x01F4, r1
     c66:	10 92 f3 01 	sts	0x01F3, r1
     c6a:	9c 01       	movw	r18, r24
     c6c:	2c 5f       	subi	r18, 0xFC	; 252
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	3e 83       	std	Y+6, r19	; 0x06
     c72:	2d 83       	std	Y+5, r18	; 0x05
    
    for (i=0; i<NTHREADS; i++) {
     c74:	1a 82       	std	Y+2, r1	; 0x02
     c76:	19 82       	std	Y+1, r1	; 0x01
        setjmp( threads[i].context );
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	9c 01       	movw	r18, r24
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	28 1b       	sub	r18, r24
     c94:	39 0b       	sbc	r19, r25
     c96:	49 81       	ldd	r20, Y+1	; 0x01
     c98:	5a 81       	ldd	r21, Y+2	; 0x02
     c9a:	24 0f       	add	r18, r20
     c9c:	35 1f       	adc	r19, r21
     c9e:	c9 01       	movw	r24, r18
     ca0:	8e 55       	subi	r24, 0x5E	; 94
     ca2:	9e 4f       	sbci	r25, 0xFE	; 254
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	8b 83       	std	Y+3, r24	; 0x03
     ca8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     cac:	e9 81       	ldd	r30, Y+1	; 0x01
     cae:	fa 81       	ldd	r31, Y+2	; 0x02
     cb0:	20 e6       	ldi	r18, 0x60	; 96
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	e2 9f       	mul	r30, r18
     cb6:	c0 01       	movw	r24, r0
     cb8:	e3 9f       	mul	r30, r19
     cba:	90 0d       	add	r25, r0
     cbc:	f2 9f       	mul	r31, r18
     cbe:	90 0d       	add	r25, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	83 56       	subi	r24, 0x63	; 99
     cc4:	9c 4f       	sbci	r25, 0xFC	; 252
     cc6:	eb 81       	ldd	r30, Y+3	; 0x03
     cc8:	fc 81       	ldd	r31, Y+4	; 0x04
     cca:	91 8b       	std	Z+17, r25	; 0x11
     ccc:	80 8b       	std	Z+16, r24	; 0x10
     cce:	93 8b       	std	Z+19, r25	; 0x13
     cd0:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     cd2:	21 e5       	ldi	r18, 0x51	; 81
     cd4:	32 e1       	ldi	r19, 0x12	; 18
     cd6:	36 8b       	std	Z+22, r19	; 0x16
     cd8:	25 8b       	std	Z+21, r18	; 0x15
        threads[i].waitsFor = NULL;
     cda:	ed 81       	ldd	r30, Y+5	; 0x05
     cdc:	fe 81       	ldd	r31, Y+6	; 0x06
     cde:	11 82       	std	Z+1, r1	; 0x01
     ce0:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     ce2:	29 81       	ldd	r18, Y+1	; 0x01
     ce4:	3a 81       	ldd	r19, Y+2	; 0x02
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	3a 83       	std	Y+2, r19	; 0x02
     cec:	29 83       	std	Y+1, r18	; 0x01
     cee:	7d 96       	adiw	r30, 0x1d	; 29
     cf0:	fe 83       	std	Y+6, r31	; 0x06
     cf2:	ed 83       	std	Y+5, r30	; 0x05
     cf4:	24 30       	cpi	r18, 0x04	; 4
     cf6:	31 05       	cpc	r19, r1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <initialize+0x104>
     cfa:	be cf       	rjmp	.-132    	; 0xc78 <initialize+0x80>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     cfc:	10 92 35 02 	sts	0x0235, r1
     d00:	10 92 34 02 	sts	0x0234, r1
    thread0.waitsFor = NULL;
     d04:	10 92 39 02 	sts	0x0239, r1
     d08:	10 92 38 02 	sts	0x0238, r1
    thread0.msg = NULL;
     d0c:	10 92 37 02 	sts	0x0237, r1
     d10:	10 92 36 02 	sts	0x0236, r1
    
    DUMP("\n\rTinyTimber ");
     d14:	8a e2       	ldi	r24, 0x2A	; 42
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DUMP>
    DUMP(TINYTIMBER_VERSION);
     d1c:	88 e3       	ldi	r24, 0x38	; 56
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DUMP>
    DUMP("\n\r");
     d24:	8b e4       	ldi	r24, 0x4B	; 75
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DUMP>
    TIMER_INIT();
     d2c:	e1 e6       	ldi	r30, 0x61	; 97
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	80 83       	st	Z, r24
     d34:	10 82       	st	Z, r1
     d36:	10 92 85 00 	sts	0x0085, r1
     d3a:	10 92 84 00 	sts	0x0084, r1
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	80 93 81 00 	sts	0x0081, r24
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 6f 00 	sts	0x006F, r24
}
     d4a:	26 96       	adiw	r28, 0x06	; 6
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <DUMPH>:

char hex[] = "0123456789ABCDEF";

void DUMPH(unsigned int val) {
    char buf[8];
    int i = 0;
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
    do {
        buf[i++] = hex[val & 0x0F];
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
        val = val >> 4;
     d64:	92 95       	swap	r25
     d66:	82 95       	swap	r24
     d68:	8f 70       	andi	r24, 0x0F	; 15
     d6a:	89 27       	eor	r24, r25
     d6c:	9f 70       	andi	r25, 0x0F	; 15
     d6e:	89 27       	eor	r24, r25
    } while (val);
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	b1 f7       	brne	.-20     	; 0xd60 <DUMPH+0x4>
    while (i)
     d74:	21 15       	cp	r18, r1
     d76:	31 05       	cpc	r19, r1
     d78:	19 f0       	breq	.+6      	; 0xd80 <DUMPH+0x24>
        DUMPC(buf[--i]);
     d7a:	21 50       	subi	r18, 0x01	; 1
     d7c:	30 40       	sbci	r19, 0x00	; 0
    int i = 0;
    do {
        buf[i++] = hex[val & 0x0F];
        val = val >> 4;
    } while (val);
    while (i)
     d7e:	e9 f7       	brne	.-6      	; 0xd7a <DUMPH+0x1e>
     d80:	08 95       	ret

00000d82 <DUMP_INIT>:
#define INFINITY        0x7fffffffL
#define INF(a)          ( (a)==0 ? INFINITY : (a) )

void DUMP_INIT() {

}
     d82:	08 95       	ret

00000d84 <DUMPC>:

void DUMPC(char c) {
    
}
     d84:	08 95       	ret

00000d86 <enqueueByDeadline>:
#pragma	DATA default

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	9c 01       	movw	r18, r24
     d90:	8b 01       	movw	r16, r22
    Msg prev = NULL, q = *queue;
     d92:	db 01       	movw	r26, r22
     d94:	cd 91       	ld	r28, X+
     d96:	dc 91       	ld	r29, X
     d98:	11 97       	sbiw	r26, 0x01	; 1
    while (q && (q->deadline <= p->deadline)) {
     d9a:	20 97       	sbiw	r28, 0x00	; 0
     d9c:	51 f1       	breq	.+84     	; 0xdf2 <enqueueByDeadline+0x6c>
     d9e:	fc 01       	movw	r30, r24
     da0:	46 81       	ldd	r20, Z+6	; 0x06
     da2:	57 81       	ldd	r21, Z+7	; 0x07
     da4:	60 85       	ldd	r22, Z+8	; 0x08
     da6:	71 85       	ldd	r23, Z+9	; 0x09
     da8:	8e 81       	ldd	r24, Y+6	; 0x06
     daa:	9f 81       	ldd	r25, Y+7	; 0x07
     dac:	a8 85       	ldd	r26, Y+8	; 0x08
     dae:	b9 85       	ldd	r27, Y+9	; 0x09
     db0:	48 17       	cp	r20, r24
     db2:	59 07       	cpc	r21, r25
     db4:	6a 07       	cpc	r22, r26
     db6:	7b 07       	cpc	r23, r27
     db8:	14 f4       	brge	.+4      	; 0xdbe <enqueueByDeadline+0x38>
     dba:	1b c0       	rjmp	.+54     	; 0xdf2 <enqueueByDeadline+0x6c>
        prev = q;
        q = q->next;
     dbc:	ef 01       	movw	r28, r30
     dbe:	e8 81       	ld	r30, Y
     dc0:	f9 81       	ldd	r31, Y+1	; 0x01
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
     dc2:	30 97       	sbiw	r30, 0x00	; 0
     dc4:	49 f0       	breq	.+18     	; 0xdd8 <enqueueByDeadline+0x52>
     dc6:	86 81       	ldd	r24, Z+6	; 0x06
     dc8:	97 81       	ldd	r25, Z+7	; 0x07
     dca:	a0 85       	ldd	r26, Z+8	; 0x08
     dcc:	b1 85       	ldd	r27, Z+9	; 0x09
     dce:	48 17       	cp	r20, r24
     dd0:	59 07       	cpc	r21, r25
     dd2:	6a 07       	cpc	r22, r26
     dd4:	7b 07       	cpc	r23, r27
     dd6:	94 f7       	brge	.-28     	; 0xdbc <enqueueByDeadline+0x36>
        prev = q;
        q = q->next;
    }
    p->next = q;
     dd8:	d9 01       	movw	r26, r18
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	fc 93       	st	X, r31
     dde:	ee 93       	st	-X, r30
    if (prev == NULL)
     de0:	20 97       	sbiw	r28, 0x00	; 0
     de2:	21 f4       	brne	.+8      	; 0xdec <enqueueByDeadline+0x66>
        *queue = p;
     de4:	f8 01       	movw	r30, r16
     de6:	31 83       	std	Z+1, r19	; 0x01
     de8:	20 83       	st	Z, r18
     dea:	08 c0       	rjmp	.+16     	; 0xdfc <enqueueByDeadline+0x76>
    else
        prev->next = p;
     dec:	39 83       	std	Y+1, r19	; 0x01
     dee:	28 83       	st	Y, r18
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <enqueueByDeadline+0x76>
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    }
    p->next = q;
     df2:	d9 01       	movw	r26, r18
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	dc 93       	st	X, r29
     df8:	ce 93       	st	-X, r28
     dfa:	f4 cf       	rjmp	.-24     	; 0xde4 <enqueueByDeadline+0x5e>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	9c 01       	movw	r18, r24
     e10:	8b 01       	movw	r16, r22
    Msg prev = NULL, q = *queue;
     e12:	db 01       	movw	r26, r22
     e14:	cd 91       	ld	r28, X+
     e16:	dc 91       	ld	r29, X
     e18:	11 97       	sbiw	r26, 0x01	; 1
    while (q && (q->baseline <= p->baseline )) {
     e1a:	20 97       	sbiw	r28, 0x00	; 0
     e1c:	51 f1       	breq	.+84     	; 0xe72 <enqueueByBaseline+0x6c>
     e1e:	fc 01       	movw	r30, r24
     e20:	42 81       	ldd	r20, Z+2	; 0x02
     e22:	53 81       	ldd	r21, Z+3	; 0x03
     e24:	64 81       	ldd	r22, Z+4	; 0x04
     e26:	75 81       	ldd	r23, Z+5	; 0x05
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	9b 81       	ldd	r25, Y+3	; 0x03
     e2c:	ac 81       	ldd	r26, Y+4	; 0x04
     e2e:	bd 81       	ldd	r27, Y+5	; 0x05
     e30:	48 17       	cp	r20, r24
     e32:	59 07       	cpc	r21, r25
     e34:	6a 07       	cpc	r22, r26
     e36:	7b 07       	cpc	r23, r27
     e38:	14 f4       	brge	.+4      	; 0xe3e <enqueueByBaseline+0x38>
     e3a:	1b c0       	rjmp	.+54     	; 0xe72 <enqueueByBaseline+0x6c>
        prev = q;
        q = q->next;
     e3c:	ef 01       	movw	r28, r30
     e3e:	e8 81       	ld	r30, Y
     e40:	f9 81       	ldd	r31, Y+1	; 0x01
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
     e42:	30 97       	sbiw	r30, 0x00	; 0
     e44:	49 f0       	breq	.+18     	; 0xe58 <enqueueByBaseline+0x52>
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	93 81       	ldd	r25, Z+3	; 0x03
     e4a:	a4 81       	ldd	r26, Z+4	; 0x04
     e4c:	b5 81       	ldd	r27, Z+5	; 0x05
     e4e:	48 17       	cp	r20, r24
     e50:	59 07       	cpc	r21, r25
     e52:	6a 07       	cpc	r22, r26
     e54:	7b 07       	cpc	r23, r27
     e56:	94 f7       	brge	.-28     	; 0xe3c <enqueueByBaseline+0x36>
        prev = q;
        q = q->next;
    }
    p->next = q;
     e58:	d9 01       	movw	r26, r18
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	fc 93       	st	X, r31
     e5e:	ee 93       	st	-X, r30
    if (prev == NULL)
     e60:	20 97       	sbiw	r28, 0x00	; 0
     e62:	21 f4       	brne	.+8      	; 0xe6c <enqueueByBaseline+0x66>
        *queue = p;
     e64:	f8 01       	movw	r30, r16
     e66:	31 83       	std	Z+1, r19	; 0x01
     e68:	20 83       	st	Z, r18
     e6a:	08 c0       	rjmp	.+16     	; 0xe7c <enqueueByBaseline+0x76>
    else
        prev->next = p;
     e6c:	39 83       	std	Y+1, r19	; 0x01
     e6e:	28 83       	st	Y, r18
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <enqueueByBaseline+0x76>
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    }
    p->next = q;
     e72:	d9 01       	movw	r26, r18
     e74:	11 96       	adiw	r26, 0x01	; 1
     e76:	dc 93       	st	X, r29
     e78:	ce 93       	st	-X, r28
     e7a:	f4 cf       	rjmp	.-24     	; 0xe64 <enqueueByBaseline+0x5e>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <dequeue>:

Msg dequeue(Msg *queue) {
     e86:	dc 01       	movw	r26, r24
    Msg m = *queue;
     e88:	ed 91       	ld	r30, X+
     e8a:	fc 91       	ld	r31, X
     e8c:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
     e8e:	30 97       	sbiw	r30, 0x00	; 0
     e90:	41 f0       	breq	.+16     	; 0xea2 <dequeue+0x1c>
        *queue = m->next;
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	9c 93       	st	X, r25
     e9a:	8e 93       	st	-X, r24
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
     e9c:	8e 2f       	mov	r24, r30
     e9e:	9f 2f       	mov	r25, r31
     ea0:	08 95       	ret
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	80 93 ec 00 	sts	0x00EC, r24
     ea8:	80 93 ed 00 	sts	0x00ED, r24
     eac:	80 93 ee 00 	sts	0x00EE, r24
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	83 bf       	out	0x33, r24	; 51
     eb4:	88 95       	sleep
     eb6:	fd cf       	rjmp	.-6      	; 0xeb2 <dequeue+0x2c>

00000eb8 <insert>:
    return m;
}

void insert(Msg m, Msg *queue) {
     eb8:	fb 01       	movw	r30, r22
    m->next = *queue;
     eba:	20 81       	ld	r18, Z
     ebc:	31 81       	ldd	r19, Z+1	; 0x01
     ebe:	dc 01       	movw	r26, r24
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	3c 93       	st	X, r19
     ec4:	2e 93       	st	-X, r18
    *queue = m;
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
}
     eca:	08 95       	ret

00000ecc <push>:

void push(Thread t, Thread *stack) {
     ecc:	fb 01       	movw	r30, r22
    t->next = *stack;
     ece:	20 81       	ld	r18, Z
     ed0:	31 81       	ldd	r19, Z+1	; 0x01
     ed2:	dc 01       	movw	r26, r24
     ed4:	11 96       	adiw	r26, 0x01	; 1
     ed6:	3c 93       	st	X, r19
     ed8:	2e 93       	st	-X, r18
    *stack = t;
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
}
     ede:	08 95       	ret

00000ee0 <pop>:

Thread pop(Thread *stack) {
     ee0:	dc 01       	movw	r26, r24
    Thread t = *stack;
     ee2:	ed 91       	ld	r30, X+
     ee4:	fc 91       	ld	r31, X
     ee6:	11 97       	sbiw	r26, 0x01	; 1
    *stack = t->next;
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	11 96       	adiw	r26, 0x01	; 1
     eee:	9c 93       	st	X, r25
     ef0:	8e 93       	st	-X, r24
    return t;
}
     ef2:	8e 2f       	mov	r24, r30
     ef4:	9f 2f       	mov	r25, r31
     ef6:	08 95       	ret

00000ef8 <schedule>:
        SLEEP();
    }
}

static void schedule(void) {
    Msg topMsg = activeStack->msg;
     ef8:	e0 91 50 01 	lds	r30, 0x0150
     efc:	f0 91 51 01 	lds	r31, 0x0151
     f00:	02 80       	ldd	r0, Z+2	; 0x02
     f02:	f3 81       	ldd	r31, Z+3	; 0x03
     f04:	e0 2d       	mov	r30, r0
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     f06:	a0 91 76 01 	lds	r26, 0x0176
     f0a:	b0 91 77 01 	lds	r27, 0x0177
     f0e:	10 97       	sbiw	r26, 0x00	; 0
     f10:	29 f1       	breq	.+74     	; 0xf5c <schedule+0x64>
     f12:	80 91 52 01 	lds	r24, 0x0152
     f16:	90 91 53 01 	lds	r25, 0x0153
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	f9 f0       	breq	.+62     	; 0xf5c <schedule+0x64>
     f1e:	30 97       	sbiw	r30, 0x00	; 0
     f20:	79 f0       	breq	.+30     	; 0xf40 <schedule+0x48>
     f22:	16 96       	adiw	r26, 0x06	; 6
     f24:	8d 91       	ld	r24, X+
     f26:	9d 91       	ld	r25, X+
     f28:	0d 90       	ld	r0, X+
     f2a:	bc 91       	ld	r27, X
     f2c:	a0 2d       	mov	r26, r0
     f2e:	46 81       	ldd	r20, Z+6	; 0x06
     f30:	57 81       	ldd	r21, Z+7	; 0x07
     f32:	60 85       	ldd	r22, Z+8	; 0x08
     f34:	71 85       	ldd	r23, Z+9	; 0x09
     f36:	84 1b       	sub	r24, r20
     f38:	95 0b       	sbc	r25, r21
     f3a:	a6 0b       	sbc	r26, r22
     f3c:	b7 0b       	sbc	r27, r23
     f3e:	72 f4       	brpl	.+28     	; 0xf5c <schedule+0x64>
        push(pop(&threadPool), &activeStack);
     f40:	82 e5       	ldi	r24, 0x52	; 82
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	0e 94 70 07 	call	0xee0	; 0xee0 <pop>
     f48:	60 e5       	ldi	r22, 0x50	; 80
     f4a:	71 e0       	ldi	r23, 0x01	; 1
     f4c:	0e 94 66 07 	call	0xecc	; 0xecc <push>
        dispatch(activeStack);
     f50:	80 91 50 01 	lds	r24, 0x0150
     f54:	90 91 51 01 	lds	r25, 0x0151
     f58:	0e 94 d3 05 	call	0xba6	; 0xba6 <dispatch>
     f5c:	08 95       	ret

00000f5e <__vector_22>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
IRQ(IRQ_LCD,             LCD_vect);
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	2f 93       	push	r18
     f6e:	3f 93       	push	r19
     f70:	4f 93       	push	r20
     f72:	5f 93       	push	r21
     f74:	6f 93       	push	r22
     f76:	7f 93       	push	r23
     f78:	8f 93       	push	r24
     f7a:	9f 93       	push	r25
     f7c:	af 93       	push	r26
     f7e:	bf 93       	push	r27
     f80:	ef 93       	push	r30
     f82:	ff 93       	push	r31
     f84:	80 91 6e 01 	lds	r24, 0x016E
     f88:	90 91 6f 01 	lds	r25, 0x016F
     f8c:	20 91 84 00 	lds	r18, 0x0084
     f90:	30 91 85 00 	lds	r19, 0x0085
     f94:	ac 01       	movw	r20, r24
     f96:	66 27       	eor	r22, r22
     f98:	57 fd       	sbrc	r21, 7
     f9a:	60 95       	com	r22
     f9c:	76 2f       	mov	r23, r22
     f9e:	ba 01       	movw	r22, r20
     fa0:	55 27       	eor	r21, r21
     fa2:	44 27       	eor	r20, r20
     fa4:	89 01       	movw	r16, r18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 2b       	or	r20, r16
     fac:	51 2b       	or	r21, r17
     fae:	62 2b       	or	r22, r18
     fb0:	73 2b       	or	r23, r19
     fb2:	40 93 70 01 	sts	0x0170, r20
     fb6:	50 93 71 01 	sts	0x0171, r21
     fba:	60 93 72 01 	sts	0x0172, r22
     fbe:	70 93 73 01 	sts	0x0173, r23
     fc2:	b0 9b       	sbis	0x16, 0	; 22
     fc4:	1a c0       	rjmp	.+52     	; 0xffa <__vector_22+0x9c>
     fc6:	40 91 84 00 	lds	r20, 0x0084
     fca:	50 91 85 00 	lds	r21, 0x0085
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	aa 27       	eor	r26, r26
     fd2:	97 fd       	sbrc	r25, 7
     fd4:	a0 95       	com	r26
     fd6:	ba 2f       	mov	r27, r26
     fd8:	dc 01       	movw	r26, r24
     fda:	99 27       	eor	r25, r25
     fdc:	88 27       	eor	r24, r24
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	84 2b       	or	r24, r20
     fe4:	95 2b       	or	r25, r21
     fe6:	a6 2b       	or	r26, r22
     fe8:	b7 2b       	or	r27, r23
     fea:	80 93 70 01 	sts	0x0170, r24
     fee:	90 93 71 01 	sts	0x0171, r25
     ff2:	a0 93 72 01 	sts	0x0172, r26
     ff6:	b0 93 73 01 	sts	0x0173, r27
     ffa:	e0 91 32 02 	lds	r30, 0x0232
     ffe:	f0 91 33 02 	lds	r31, 0x0233
    1002:	30 97       	sbiw	r30, 0x00	; 0
    1004:	39 f0       	breq	.+14     	; 0x1014 <__vector_22+0xb6>
    1006:	80 91 9a 01 	lds	r24, 0x019A
    100a:	90 91 9b 01 	lds	r25, 0x019B
    100e:	61 e1       	ldi	r22, 0x11	; 17
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	09 95       	icall
    1014:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	0f 90       	pop	r0
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	0f 90       	pop	r0
    103a:	1f 90       	pop	r1
    103c:	18 95       	reti

0000103e <__vector_21>:
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
    103e:	1f 92       	push	r1
    1040:	0f 92       	push	r0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	0f 92       	push	r0
    1046:	11 24       	eor	r1, r1
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
    1064:	80 91 6e 01 	lds	r24, 0x016E
    1068:	90 91 6f 01 	lds	r25, 0x016F
    106c:	20 91 84 00 	lds	r18, 0x0084
    1070:	30 91 85 00 	lds	r19, 0x0085
    1074:	ac 01       	movw	r20, r24
    1076:	66 27       	eor	r22, r22
    1078:	57 fd       	sbrc	r21, 7
    107a:	60 95       	com	r22
    107c:	76 2f       	mov	r23, r22
    107e:	ba 01       	movw	r22, r20
    1080:	55 27       	eor	r21, r21
    1082:	44 27       	eor	r20, r20
    1084:	89 01       	movw	r16, r18
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 2b       	or	r20, r16
    108c:	51 2b       	or	r21, r17
    108e:	62 2b       	or	r22, r18
    1090:	73 2b       	or	r23, r19
    1092:	40 93 70 01 	sts	0x0170, r20
    1096:	50 93 71 01 	sts	0x0171, r21
    109a:	60 93 72 01 	sts	0x0172, r22
    109e:	70 93 73 01 	sts	0x0173, r23
    10a2:	b0 9b       	sbis	0x16, 0	; 22
    10a4:	1a c0       	rjmp	.+52     	; 0x10da <__vector_21+0x9c>
    10a6:	40 91 84 00 	lds	r20, 0x0084
    10aa:	50 91 85 00 	lds	r21, 0x0085
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	aa 27       	eor	r26, r26
    10b2:	97 fd       	sbrc	r25, 7
    10b4:	a0 95       	com	r26
    10b6:	ba 2f       	mov	r27, r26
    10b8:	dc 01       	movw	r26, r24
    10ba:	99 27       	eor	r25, r25
    10bc:	88 27       	eor	r24, r24
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	84 2b       	or	r24, r20
    10c4:	95 2b       	or	r25, r21
    10c6:	a6 2b       	or	r26, r22
    10c8:	b7 2b       	or	r27, r23
    10ca:	80 93 70 01 	sts	0x0170, r24
    10ce:	90 93 71 01 	sts	0x0171, r25
    10d2:	a0 93 72 01 	sts	0x0172, r26
    10d6:	b0 93 73 01 	sts	0x0173, r27
    10da:	e0 91 30 02 	lds	r30, 0x0230
    10de:	f0 91 31 02 	lds	r31, 0x0231
    10e2:	30 97       	sbiw	r30, 0x00	; 0
    10e4:	39 f0       	breq	.+14     	; 0x10f4 <__vector_21+0xb6>
    10e6:	80 91 98 01 	lds	r24, 0x0198
    10ea:	90 91 99 01 	lds	r25, 0x0199
    10ee:	60 e1       	ldi	r22, 0x10	; 16
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	09 95       	icall
    10f4:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_20>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
    1144:	80 91 6e 01 	lds	r24, 0x016E
    1148:	90 91 6f 01 	lds	r25, 0x016F
    114c:	20 91 84 00 	lds	r18, 0x0084
    1150:	30 91 85 00 	lds	r19, 0x0085
    1154:	ac 01       	movw	r20, r24
    1156:	66 27       	eor	r22, r22
    1158:	57 fd       	sbrc	r21, 7
    115a:	60 95       	com	r22
    115c:	76 2f       	mov	r23, r22
    115e:	ba 01       	movw	r22, r20
    1160:	55 27       	eor	r21, r21
    1162:	44 27       	eor	r20, r20
    1164:	89 01       	movw	r16, r18
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 2b       	or	r20, r16
    116c:	51 2b       	or	r21, r17
    116e:	62 2b       	or	r22, r18
    1170:	73 2b       	or	r23, r19
    1172:	40 93 70 01 	sts	0x0170, r20
    1176:	50 93 71 01 	sts	0x0171, r21
    117a:	60 93 72 01 	sts	0x0172, r22
    117e:	70 93 73 01 	sts	0x0173, r23
    1182:	b0 9b       	sbis	0x16, 0	; 22
    1184:	1a c0       	rjmp	.+52     	; 0x11ba <__vector_20+0x9c>
    1186:	40 91 84 00 	lds	r20, 0x0084
    118a:	50 91 85 00 	lds	r21, 0x0085
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	aa 27       	eor	r26, r26
    1192:	97 fd       	sbrc	r25, 7
    1194:	a0 95       	com	r26
    1196:	ba 2f       	mov	r27, r26
    1198:	dc 01       	movw	r26, r24
    119a:	99 27       	eor	r25, r25
    119c:	88 27       	eor	r24, r24
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	84 2b       	or	r24, r20
    11a4:	95 2b       	or	r25, r21
    11a6:	a6 2b       	or	r26, r22
    11a8:	b7 2b       	or	r27, r23
    11aa:	80 93 70 01 	sts	0x0170, r24
    11ae:	90 93 71 01 	sts	0x0171, r25
    11b2:	a0 93 72 01 	sts	0x0172, r26
    11b6:	b0 93 73 01 	sts	0x0173, r27
    11ba:	e0 91 2e 02 	lds	r30, 0x022E
    11be:	f0 91 2f 02 	lds	r31, 0x022F
    11c2:	30 97       	sbiw	r30, 0x00	; 0
    11c4:	39 f0       	breq	.+14     	; 0x11d4 <__vector_20+0xb6>
    11c6:	80 91 96 01 	lds	r24, 0x0196
    11ca:	90 91 97 01 	lds	r25, 0x0197
    11ce:	6f e0       	ldi	r22, 0x0F	; 15
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	09 95       	icall
    11d4:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    11d8:	ff 91       	pop	r31
    11da:	ef 91       	pop	r30
    11dc:	bf 91       	pop	r27
    11de:	af 91       	pop	r26
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	7f 91       	pop	r23
    11e6:	6f 91       	pop	r22
    11e8:	5f 91       	pop	r21
    11ea:	4f 91       	pop	r20
    11ec:	3f 91       	pop	r19
    11ee:	2f 91       	pop	r18
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <__vector_19>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
    1224:	80 91 6e 01 	lds	r24, 0x016E
    1228:	90 91 6f 01 	lds	r25, 0x016F
    122c:	20 91 84 00 	lds	r18, 0x0084
    1230:	30 91 85 00 	lds	r19, 0x0085
    1234:	ac 01       	movw	r20, r24
    1236:	66 27       	eor	r22, r22
    1238:	57 fd       	sbrc	r21, 7
    123a:	60 95       	com	r22
    123c:	76 2f       	mov	r23, r22
    123e:	ba 01       	movw	r22, r20
    1240:	55 27       	eor	r21, r21
    1242:	44 27       	eor	r20, r20
    1244:	89 01       	movw	r16, r18
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 2b       	or	r20, r16
    124c:	51 2b       	or	r21, r17
    124e:	62 2b       	or	r22, r18
    1250:	73 2b       	or	r23, r19
    1252:	40 93 70 01 	sts	0x0170, r20
    1256:	50 93 71 01 	sts	0x0171, r21
    125a:	60 93 72 01 	sts	0x0172, r22
    125e:	70 93 73 01 	sts	0x0173, r23
    1262:	b0 9b       	sbis	0x16, 0	; 22
    1264:	1a c0       	rjmp	.+52     	; 0x129a <__vector_19+0x9c>
    1266:	40 91 84 00 	lds	r20, 0x0084
    126a:	50 91 85 00 	lds	r21, 0x0085
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	aa 27       	eor	r26, r26
    1272:	97 fd       	sbrc	r25, 7
    1274:	a0 95       	com	r26
    1276:	ba 2f       	mov	r27, r26
    1278:	dc 01       	movw	r26, r24
    127a:	99 27       	eor	r25, r25
    127c:	88 27       	eor	r24, r24
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	84 2b       	or	r24, r20
    1284:	95 2b       	or	r25, r21
    1286:	a6 2b       	or	r26, r22
    1288:	b7 2b       	or	r27, r23
    128a:	80 93 70 01 	sts	0x0170, r24
    128e:	90 93 71 01 	sts	0x0171, r25
    1292:	a0 93 72 01 	sts	0x0172, r26
    1296:	b0 93 73 01 	sts	0x0173, r27
    129a:	e0 91 2c 02 	lds	r30, 0x022C
    129e:	f0 91 2d 02 	lds	r31, 0x022D
    12a2:	30 97       	sbiw	r30, 0x00	; 0
    12a4:	39 f0       	breq	.+14     	; 0x12b4 <__vector_19+0xb6>
    12a6:	80 91 94 01 	lds	r24, 0x0194
    12aa:	90 91 95 01 	lds	r25, 0x0195
    12ae:	6e e0       	ldi	r22, 0x0E	; 14
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	09 95       	icall
    12b4:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_18>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	80 91 6e 01 	lds	r24, 0x016E
    1308:	90 91 6f 01 	lds	r25, 0x016F
    130c:	20 91 84 00 	lds	r18, 0x0084
    1310:	30 91 85 00 	lds	r19, 0x0085
    1314:	ac 01       	movw	r20, r24
    1316:	66 27       	eor	r22, r22
    1318:	57 fd       	sbrc	r21, 7
    131a:	60 95       	com	r22
    131c:	76 2f       	mov	r23, r22
    131e:	ba 01       	movw	r22, r20
    1320:	55 27       	eor	r21, r21
    1322:	44 27       	eor	r20, r20
    1324:	89 01       	movw	r16, r18
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 2b       	or	r20, r16
    132c:	51 2b       	or	r21, r17
    132e:	62 2b       	or	r22, r18
    1330:	73 2b       	or	r23, r19
    1332:	40 93 70 01 	sts	0x0170, r20
    1336:	50 93 71 01 	sts	0x0171, r21
    133a:	60 93 72 01 	sts	0x0172, r22
    133e:	70 93 73 01 	sts	0x0173, r23
    1342:	b0 9b       	sbis	0x16, 0	; 22
    1344:	1a c0       	rjmp	.+52     	; 0x137a <__vector_18+0x9c>
    1346:	40 91 84 00 	lds	r20, 0x0084
    134a:	50 91 85 00 	lds	r21, 0x0085
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	aa 27       	eor	r26, r26
    1352:	97 fd       	sbrc	r25, 7
    1354:	a0 95       	com	r26
    1356:	ba 2f       	mov	r27, r26
    1358:	dc 01       	movw	r26, r24
    135a:	99 27       	eor	r25, r25
    135c:	88 27       	eor	r24, r24
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	84 2b       	or	r24, r20
    1364:	95 2b       	or	r25, r21
    1366:	a6 2b       	or	r26, r22
    1368:	b7 2b       	or	r27, r23
    136a:	80 93 70 01 	sts	0x0170, r24
    136e:	90 93 71 01 	sts	0x0171, r25
    1372:	a0 93 72 01 	sts	0x0172, r26
    1376:	b0 93 73 01 	sts	0x0173, r27
    137a:	e0 91 2a 02 	lds	r30, 0x022A
    137e:	f0 91 2b 02 	lds	r31, 0x022B
    1382:	30 97       	sbiw	r30, 0x00	; 0
    1384:	39 f0       	breq	.+14     	; 0x1394 <__vector_18+0xb6>
    1386:	80 91 92 01 	lds	r24, 0x0192
    138a:	90 91 93 01 	lds	r25, 0x0193
    138e:	6d e0       	ldi	r22, 0x0D	; 13
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	09 95       	icall
    1394:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <__vector_17>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
    13be:	1f 92       	push	r1
    13c0:	0f 92       	push	r0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	2f 93       	push	r18
    13ce:	3f 93       	push	r19
    13d0:	4f 93       	push	r20
    13d2:	5f 93       	push	r21
    13d4:	6f 93       	push	r22
    13d6:	7f 93       	push	r23
    13d8:	8f 93       	push	r24
    13da:	9f 93       	push	r25
    13dc:	af 93       	push	r26
    13de:	bf 93       	push	r27
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	80 91 6e 01 	lds	r24, 0x016E
    13e8:	90 91 6f 01 	lds	r25, 0x016F
    13ec:	20 91 84 00 	lds	r18, 0x0084
    13f0:	30 91 85 00 	lds	r19, 0x0085
    13f4:	ac 01       	movw	r20, r24
    13f6:	66 27       	eor	r22, r22
    13f8:	57 fd       	sbrc	r21, 7
    13fa:	60 95       	com	r22
    13fc:	76 2f       	mov	r23, r22
    13fe:	ba 01       	movw	r22, r20
    1400:	55 27       	eor	r21, r21
    1402:	44 27       	eor	r20, r20
    1404:	89 01       	movw	r16, r18
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 2b       	or	r20, r16
    140c:	51 2b       	or	r21, r17
    140e:	62 2b       	or	r22, r18
    1410:	73 2b       	or	r23, r19
    1412:	40 93 70 01 	sts	0x0170, r20
    1416:	50 93 71 01 	sts	0x0171, r21
    141a:	60 93 72 01 	sts	0x0172, r22
    141e:	70 93 73 01 	sts	0x0173, r23
    1422:	b0 9b       	sbis	0x16, 0	; 22
    1424:	1a c0       	rjmp	.+52     	; 0x145a <__vector_17+0x9c>
    1426:	40 91 84 00 	lds	r20, 0x0084
    142a:	50 91 85 00 	lds	r21, 0x0085
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	aa 27       	eor	r26, r26
    1432:	97 fd       	sbrc	r25, 7
    1434:	a0 95       	com	r26
    1436:	ba 2f       	mov	r27, r26
    1438:	dc 01       	movw	r26, r24
    143a:	99 27       	eor	r25, r25
    143c:	88 27       	eor	r24, r24
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	84 2b       	or	r24, r20
    1444:	95 2b       	or	r25, r21
    1446:	a6 2b       	or	r26, r22
    1448:	b7 2b       	or	r27, r23
    144a:	80 93 70 01 	sts	0x0170, r24
    144e:	90 93 71 01 	sts	0x0171, r25
    1452:	a0 93 72 01 	sts	0x0172, r26
    1456:	b0 93 73 01 	sts	0x0173, r27
    145a:	e0 91 28 02 	lds	r30, 0x0228
    145e:	f0 91 29 02 	lds	r31, 0x0229
    1462:	30 97       	sbiw	r30, 0x00	; 0
    1464:	39 f0       	breq	.+14     	; 0x1474 <__vector_17+0xb6>
    1466:	80 91 90 01 	lds	r24, 0x0190
    146a:	90 91 91 01 	lds	r25, 0x0191
    146e:	6c e0       	ldi	r22, 0x0C	; 12
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	09 95       	icall
    1474:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_16>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	2f 93       	push	r18
    14ae:	3f 93       	push	r19
    14b0:	4f 93       	push	r20
    14b2:	5f 93       	push	r21
    14b4:	6f 93       	push	r22
    14b6:	7f 93       	push	r23
    14b8:	8f 93       	push	r24
    14ba:	9f 93       	push	r25
    14bc:	af 93       	push	r26
    14be:	bf 93       	push	r27
    14c0:	ef 93       	push	r30
    14c2:	ff 93       	push	r31
    14c4:	80 91 6e 01 	lds	r24, 0x016E
    14c8:	90 91 6f 01 	lds	r25, 0x016F
    14cc:	20 91 84 00 	lds	r18, 0x0084
    14d0:	30 91 85 00 	lds	r19, 0x0085
    14d4:	ac 01       	movw	r20, r24
    14d6:	66 27       	eor	r22, r22
    14d8:	57 fd       	sbrc	r21, 7
    14da:	60 95       	com	r22
    14dc:	76 2f       	mov	r23, r22
    14de:	ba 01       	movw	r22, r20
    14e0:	55 27       	eor	r21, r21
    14e2:	44 27       	eor	r20, r20
    14e4:	89 01       	movw	r16, r18
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 2b       	or	r20, r16
    14ec:	51 2b       	or	r21, r17
    14ee:	62 2b       	or	r22, r18
    14f0:	73 2b       	or	r23, r19
    14f2:	40 93 70 01 	sts	0x0170, r20
    14f6:	50 93 71 01 	sts	0x0171, r21
    14fa:	60 93 72 01 	sts	0x0172, r22
    14fe:	70 93 73 01 	sts	0x0173, r23
    1502:	b0 9b       	sbis	0x16, 0	; 22
    1504:	1a c0       	rjmp	.+52     	; 0x153a <__vector_16+0x9c>
    1506:	40 91 84 00 	lds	r20, 0x0084
    150a:	50 91 85 00 	lds	r21, 0x0085
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	aa 27       	eor	r26, r26
    1512:	97 fd       	sbrc	r25, 7
    1514:	a0 95       	com	r26
    1516:	ba 2f       	mov	r27, r26
    1518:	dc 01       	movw	r26, r24
    151a:	99 27       	eor	r25, r25
    151c:	88 27       	eor	r24, r24
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	84 2b       	or	r24, r20
    1524:	95 2b       	or	r25, r21
    1526:	a6 2b       	or	r26, r22
    1528:	b7 2b       	or	r27, r23
    152a:	80 93 70 01 	sts	0x0170, r24
    152e:	90 93 71 01 	sts	0x0171, r25
    1532:	a0 93 72 01 	sts	0x0172, r26
    1536:	b0 93 73 01 	sts	0x0173, r27
    153a:	e0 91 26 02 	lds	r30, 0x0226
    153e:	f0 91 27 02 	lds	r31, 0x0227
    1542:	30 97       	sbiw	r30, 0x00	; 0
    1544:	39 f0       	breq	.+14     	; 0x1554 <__vector_16+0xb6>
    1546:	80 91 8e 01 	lds	r24, 0x018E
    154a:	90 91 8f 01 	lds	r25, 0x018F
    154e:	6b e0       	ldi	r22, 0x0B	; 11
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	09 95       	icall
    1554:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_15>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	80 91 6e 01 	lds	r24, 0x016E
    15a8:	90 91 6f 01 	lds	r25, 0x016F
    15ac:	20 91 84 00 	lds	r18, 0x0084
    15b0:	30 91 85 00 	lds	r19, 0x0085
    15b4:	ac 01       	movw	r20, r24
    15b6:	66 27       	eor	r22, r22
    15b8:	57 fd       	sbrc	r21, 7
    15ba:	60 95       	com	r22
    15bc:	76 2f       	mov	r23, r22
    15be:	ba 01       	movw	r22, r20
    15c0:	55 27       	eor	r21, r21
    15c2:	44 27       	eor	r20, r20
    15c4:	89 01       	movw	r16, r18
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 2b       	or	r20, r16
    15cc:	51 2b       	or	r21, r17
    15ce:	62 2b       	or	r22, r18
    15d0:	73 2b       	or	r23, r19
    15d2:	40 93 70 01 	sts	0x0170, r20
    15d6:	50 93 71 01 	sts	0x0171, r21
    15da:	60 93 72 01 	sts	0x0172, r22
    15de:	70 93 73 01 	sts	0x0173, r23
    15e2:	b0 9b       	sbis	0x16, 0	; 22
    15e4:	1a c0       	rjmp	.+52     	; 0x161a <__vector_15+0x9c>
    15e6:	40 91 84 00 	lds	r20, 0x0084
    15ea:	50 91 85 00 	lds	r21, 0x0085
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	aa 27       	eor	r26, r26
    15f2:	97 fd       	sbrc	r25, 7
    15f4:	a0 95       	com	r26
    15f6:	ba 2f       	mov	r27, r26
    15f8:	dc 01       	movw	r26, r24
    15fa:	99 27       	eor	r25, r25
    15fc:	88 27       	eor	r24, r24
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	84 2b       	or	r24, r20
    1604:	95 2b       	or	r25, r21
    1606:	a6 2b       	or	r26, r22
    1608:	b7 2b       	or	r27, r23
    160a:	80 93 70 01 	sts	0x0170, r24
    160e:	90 93 71 01 	sts	0x0171, r25
    1612:	a0 93 72 01 	sts	0x0172, r26
    1616:	b0 93 73 01 	sts	0x0173, r27
    161a:	e0 91 24 02 	lds	r30, 0x0224
    161e:	f0 91 25 02 	lds	r31, 0x0225
    1622:	30 97       	sbiw	r30, 0x00	; 0
    1624:	39 f0       	breq	.+14     	; 0x1634 <__vector_15+0xb6>
    1626:	80 91 8c 01 	lds	r24, 0x018C
    162a:	90 91 8d 01 	lds	r25, 0x018D
    162e:	6a e0       	ldi	r22, 0x0A	; 10
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	09 95       	icall
    1634:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	bf 91       	pop	r27
    163e:	af 91       	pop	r26
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	7f 91       	pop	r23
    1646:	6f 91       	pop	r22
    1648:	5f 91       	pop	r21
    164a:	4f 91       	pop	r20
    164c:	3f 91       	pop	r19
    164e:	2f 91       	pop	r18
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_14>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	2f 93       	push	r18
    166e:	3f 93       	push	r19
    1670:	4f 93       	push	r20
    1672:	5f 93       	push	r21
    1674:	6f 93       	push	r22
    1676:	7f 93       	push	r23
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	af 93       	push	r26
    167e:	bf 93       	push	r27
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
    1684:	80 91 6e 01 	lds	r24, 0x016E
    1688:	90 91 6f 01 	lds	r25, 0x016F
    168c:	20 91 84 00 	lds	r18, 0x0084
    1690:	30 91 85 00 	lds	r19, 0x0085
    1694:	ac 01       	movw	r20, r24
    1696:	66 27       	eor	r22, r22
    1698:	57 fd       	sbrc	r21, 7
    169a:	60 95       	com	r22
    169c:	76 2f       	mov	r23, r22
    169e:	ba 01       	movw	r22, r20
    16a0:	55 27       	eor	r21, r21
    16a2:	44 27       	eor	r20, r20
    16a4:	89 01       	movw	r16, r18
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 2b       	or	r20, r16
    16ac:	51 2b       	or	r21, r17
    16ae:	62 2b       	or	r22, r18
    16b0:	73 2b       	or	r23, r19
    16b2:	40 93 70 01 	sts	0x0170, r20
    16b6:	50 93 71 01 	sts	0x0171, r21
    16ba:	60 93 72 01 	sts	0x0172, r22
    16be:	70 93 73 01 	sts	0x0173, r23
    16c2:	b0 9b       	sbis	0x16, 0	; 22
    16c4:	1a c0       	rjmp	.+52     	; 0x16fa <__vector_14+0x9c>
    16c6:	40 91 84 00 	lds	r20, 0x0084
    16ca:	50 91 85 00 	lds	r21, 0x0085
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	aa 27       	eor	r26, r26
    16d2:	97 fd       	sbrc	r25, 7
    16d4:	a0 95       	com	r26
    16d6:	ba 2f       	mov	r27, r26
    16d8:	dc 01       	movw	r26, r24
    16da:	99 27       	eor	r25, r25
    16dc:	88 27       	eor	r24, r24
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	84 2b       	or	r24, r20
    16e4:	95 2b       	or	r25, r21
    16e6:	a6 2b       	or	r26, r22
    16e8:	b7 2b       	or	r27, r23
    16ea:	80 93 70 01 	sts	0x0170, r24
    16ee:	90 93 71 01 	sts	0x0171, r25
    16f2:	a0 93 72 01 	sts	0x0172, r26
    16f6:	b0 93 73 01 	sts	0x0173, r27
    16fa:	e0 91 22 02 	lds	r30, 0x0222
    16fe:	f0 91 23 02 	lds	r31, 0x0223
    1702:	30 97       	sbiw	r30, 0x00	; 0
    1704:	39 f0       	breq	.+14     	; 0x1714 <__vector_14+0xb6>
    1706:	80 91 8a 01 	lds	r24, 0x018A
    170a:	90 91 8b 01 	lds	r25, 0x018B
    170e:	69 e0       	ldi	r22, 0x09	; 9
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	09 95       	icall
    1714:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1718:	ff 91       	pop	r31
    171a:	ef 91       	pop	r30
    171c:	bf 91       	pop	r27
    171e:	af 91       	pop	r26
    1720:	9f 91       	pop	r25
    1722:	8f 91       	pop	r24
    1724:	7f 91       	pop	r23
    1726:	6f 91       	pop	r22
    1728:	5f 91       	pop	r21
    172a:	4f 91       	pop	r20
    172c:	3f 91       	pop	r19
    172e:	2f 91       	pop	r18
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <__vector_13>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
    1764:	80 91 6e 01 	lds	r24, 0x016E
    1768:	90 91 6f 01 	lds	r25, 0x016F
    176c:	20 91 84 00 	lds	r18, 0x0084
    1770:	30 91 85 00 	lds	r19, 0x0085
    1774:	ac 01       	movw	r20, r24
    1776:	66 27       	eor	r22, r22
    1778:	57 fd       	sbrc	r21, 7
    177a:	60 95       	com	r22
    177c:	76 2f       	mov	r23, r22
    177e:	ba 01       	movw	r22, r20
    1780:	55 27       	eor	r21, r21
    1782:	44 27       	eor	r20, r20
    1784:	89 01       	movw	r16, r18
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 2b       	or	r20, r16
    178c:	51 2b       	or	r21, r17
    178e:	62 2b       	or	r22, r18
    1790:	73 2b       	or	r23, r19
    1792:	40 93 70 01 	sts	0x0170, r20
    1796:	50 93 71 01 	sts	0x0171, r21
    179a:	60 93 72 01 	sts	0x0172, r22
    179e:	70 93 73 01 	sts	0x0173, r23
    17a2:	b0 9b       	sbis	0x16, 0	; 22
    17a4:	1a c0       	rjmp	.+52     	; 0x17da <__vector_13+0x9c>
    17a6:	40 91 84 00 	lds	r20, 0x0084
    17aa:	50 91 85 00 	lds	r21, 0x0085
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	aa 27       	eor	r26, r26
    17b2:	97 fd       	sbrc	r25, 7
    17b4:	a0 95       	com	r26
    17b6:	ba 2f       	mov	r27, r26
    17b8:	dc 01       	movw	r26, r24
    17ba:	99 27       	eor	r25, r25
    17bc:	88 27       	eor	r24, r24
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	84 2b       	or	r24, r20
    17c4:	95 2b       	or	r25, r21
    17c6:	a6 2b       	or	r26, r22
    17c8:	b7 2b       	or	r27, r23
    17ca:	80 93 70 01 	sts	0x0170, r24
    17ce:	90 93 71 01 	sts	0x0171, r25
    17d2:	a0 93 72 01 	sts	0x0172, r26
    17d6:	b0 93 73 01 	sts	0x0173, r27
    17da:	e0 91 20 02 	lds	r30, 0x0220
    17de:	f0 91 21 02 	lds	r31, 0x0221
    17e2:	30 97       	sbiw	r30, 0x00	; 0
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <__vector_13+0xb6>
    17e6:	80 91 88 01 	lds	r24, 0x0188
    17ea:	90 91 89 01 	lds	r25, 0x0189
    17ee:	68 e0       	ldi	r22, 0x08	; 8
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	09 95       	icall
    17f4:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_12>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31
    1844:	80 91 6e 01 	lds	r24, 0x016E
    1848:	90 91 6f 01 	lds	r25, 0x016F
    184c:	20 91 84 00 	lds	r18, 0x0084
    1850:	30 91 85 00 	lds	r19, 0x0085
    1854:	ac 01       	movw	r20, r24
    1856:	66 27       	eor	r22, r22
    1858:	57 fd       	sbrc	r21, 7
    185a:	60 95       	com	r22
    185c:	76 2f       	mov	r23, r22
    185e:	ba 01       	movw	r22, r20
    1860:	55 27       	eor	r21, r21
    1862:	44 27       	eor	r20, r20
    1864:	89 01       	movw	r16, r18
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 2b       	or	r20, r16
    186c:	51 2b       	or	r21, r17
    186e:	62 2b       	or	r22, r18
    1870:	73 2b       	or	r23, r19
    1872:	40 93 70 01 	sts	0x0170, r20
    1876:	50 93 71 01 	sts	0x0171, r21
    187a:	60 93 72 01 	sts	0x0172, r22
    187e:	70 93 73 01 	sts	0x0173, r23
    1882:	b0 9b       	sbis	0x16, 0	; 22
    1884:	1a c0       	rjmp	.+52     	; 0x18ba <__vector_12+0x9c>
    1886:	40 91 84 00 	lds	r20, 0x0084
    188a:	50 91 85 00 	lds	r21, 0x0085
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	aa 27       	eor	r26, r26
    1892:	97 fd       	sbrc	r25, 7
    1894:	a0 95       	com	r26
    1896:	ba 2f       	mov	r27, r26
    1898:	dc 01       	movw	r26, r24
    189a:	99 27       	eor	r25, r25
    189c:	88 27       	eor	r24, r24
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	84 2b       	or	r24, r20
    18a4:	95 2b       	or	r25, r21
    18a6:	a6 2b       	or	r26, r22
    18a8:	b7 2b       	or	r27, r23
    18aa:	80 93 70 01 	sts	0x0170, r24
    18ae:	90 93 71 01 	sts	0x0171, r25
    18b2:	a0 93 72 01 	sts	0x0172, r26
    18b6:	b0 93 73 01 	sts	0x0173, r27
    18ba:	e0 91 1e 02 	lds	r30, 0x021E
    18be:	f0 91 1f 02 	lds	r31, 0x021F
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <__vector_12+0xb6>
    18c6:	80 91 86 01 	lds	r24, 0x0186
    18ca:	90 91 87 01 	lds	r25, 0x0187
    18ce:	67 e0       	ldi	r22, 0x07	; 7
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	09 95       	icall
    18d4:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_11>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	2f 93       	push	r18
    190e:	3f 93       	push	r19
    1910:	4f 93       	push	r20
    1912:	5f 93       	push	r21
    1914:	6f 93       	push	r22
    1916:	7f 93       	push	r23
    1918:	8f 93       	push	r24
    191a:	9f 93       	push	r25
    191c:	af 93       	push	r26
    191e:	bf 93       	push	r27
    1920:	ef 93       	push	r30
    1922:	ff 93       	push	r31
    1924:	80 91 6e 01 	lds	r24, 0x016E
    1928:	90 91 6f 01 	lds	r25, 0x016F
    192c:	20 91 84 00 	lds	r18, 0x0084
    1930:	30 91 85 00 	lds	r19, 0x0085
    1934:	ac 01       	movw	r20, r24
    1936:	66 27       	eor	r22, r22
    1938:	57 fd       	sbrc	r21, 7
    193a:	60 95       	com	r22
    193c:	76 2f       	mov	r23, r22
    193e:	ba 01       	movw	r22, r20
    1940:	55 27       	eor	r21, r21
    1942:	44 27       	eor	r20, r20
    1944:	89 01       	movw	r16, r18
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 2b       	or	r20, r16
    194c:	51 2b       	or	r21, r17
    194e:	62 2b       	or	r22, r18
    1950:	73 2b       	or	r23, r19
    1952:	40 93 70 01 	sts	0x0170, r20
    1956:	50 93 71 01 	sts	0x0171, r21
    195a:	60 93 72 01 	sts	0x0172, r22
    195e:	70 93 73 01 	sts	0x0173, r23
    1962:	b0 9b       	sbis	0x16, 0	; 22
    1964:	1a c0       	rjmp	.+52     	; 0x199a <__vector_11+0x9c>
    1966:	40 91 84 00 	lds	r20, 0x0084
    196a:	50 91 85 00 	lds	r21, 0x0085
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	aa 27       	eor	r26, r26
    1972:	97 fd       	sbrc	r25, 7
    1974:	a0 95       	com	r26
    1976:	ba 2f       	mov	r27, r26
    1978:	dc 01       	movw	r26, r24
    197a:	99 27       	eor	r25, r25
    197c:	88 27       	eor	r24, r24
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	84 2b       	or	r24, r20
    1984:	95 2b       	or	r25, r21
    1986:	a6 2b       	or	r26, r22
    1988:	b7 2b       	or	r27, r23
    198a:	80 93 70 01 	sts	0x0170, r24
    198e:	90 93 71 01 	sts	0x0171, r25
    1992:	a0 93 72 01 	sts	0x0172, r26
    1996:	b0 93 73 01 	sts	0x0173, r27
    199a:	e0 91 1c 02 	lds	r30, 0x021C
    199e:	f0 91 1d 02 	lds	r31, 0x021D
    19a2:	30 97       	sbiw	r30, 0x00	; 0
    19a4:	39 f0       	breq	.+14     	; 0x19b4 <__vector_11+0xb6>
    19a6:	80 91 84 01 	lds	r24, 0x0184
    19aa:	90 91 85 01 	lds	r25, 0x0185
    19ae:	66 e0       	ldi	r22, 0x06	; 6
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	09 95       	icall
    19b4:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	0f 90       	pop	r0
    19da:	1f 90       	pop	r1
    19dc:	18 95       	reti

000019de <__vector_10>:
IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    19de:	1f 92       	push	r1
    19e0:	0f 92       	push	r0
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	0f 92       	push	r0
    19e6:	11 24       	eor	r1, r1
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	2f 93       	push	r18
    19ee:	3f 93       	push	r19
    19f0:	4f 93       	push	r20
    19f2:	5f 93       	push	r21
    19f4:	6f 93       	push	r22
    19f6:	7f 93       	push	r23
    19f8:	8f 93       	push	r24
    19fa:	9f 93       	push	r25
    19fc:	af 93       	push	r26
    19fe:	bf 93       	push	r27
    1a00:	ef 93       	push	r30
    1a02:	ff 93       	push	r31
    1a04:	80 91 6e 01 	lds	r24, 0x016E
    1a08:	90 91 6f 01 	lds	r25, 0x016F
    1a0c:	20 91 84 00 	lds	r18, 0x0084
    1a10:	30 91 85 00 	lds	r19, 0x0085
    1a14:	ac 01       	movw	r20, r24
    1a16:	66 27       	eor	r22, r22
    1a18:	57 fd       	sbrc	r21, 7
    1a1a:	60 95       	com	r22
    1a1c:	76 2f       	mov	r23, r22
    1a1e:	ba 01       	movw	r22, r20
    1a20:	55 27       	eor	r21, r21
    1a22:	44 27       	eor	r20, r20
    1a24:	89 01       	movw	r16, r18
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 2b       	or	r20, r16
    1a2c:	51 2b       	or	r21, r17
    1a2e:	62 2b       	or	r22, r18
    1a30:	73 2b       	or	r23, r19
    1a32:	40 93 70 01 	sts	0x0170, r20
    1a36:	50 93 71 01 	sts	0x0171, r21
    1a3a:	60 93 72 01 	sts	0x0172, r22
    1a3e:	70 93 73 01 	sts	0x0173, r23
    1a42:	b0 9b       	sbis	0x16, 0	; 22
    1a44:	1a c0       	rjmp	.+52     	; 0x1a7a <__vector_10+0x9c>
    1a46:	40 91 84 00 	lds	r20, 0x0084
    1a4a:	50 91 85 00 	lds	r21, 0x0085
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	aa 27       	eor	r26, r26
    1a52:	97 fd       	sbrc	r25, 7
    1a54:	a0 95       	com	r26
    1a56:	ba 2f       	mov	r27, r26
    1a58:	dc 01       	movw	r26, r24
    1a5a:	99 27       	eor	r25, r25
    1a5c:	88 27       	eor	r24, r24
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	84 2b       	or	r24, r20
    1a64:	95 2b       	or	r25, r21
    1a66:	a6 2b       	or	r26, r22
    1a68:	b7 2b       	or	r27, r23
    1a6a:	80 93 70 01 	sts	0x0170, r24
    1a6e:	90 93 71 01 	sts	0x0171, r25
    1a72:	a0 93 72 01 	sts	0x0172, r26
    1a76:	b0 93 73 01 	sts	0x0173, r27
    1a7a:	e0 91 1a 02 	lds	r30, 0x021A
    1a7e:	f0 91 1b 02 	lds	r31, 0x021B
    1a82:	30 97       	sbiw	r30, 0x00	; 0
    1a84:	39 f0       	breq	.+14     	; 0x1a94 <__vector_10+0xb6>
    1a86:	80 91 82 01 	lds	r24, 0x0182
    1a8a:	90 91 83 01 	lds	r25, 0x0183
    1a8e:	65 e0       	ldi	r22, 0x05	; 5
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	09 95       	icall
    1a94:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_5>:

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	2f 93       	push	r18
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
    1ae4:	80 91 6e 01 	lds	r24, 0x016E
    1ae8:	90 91 6f 01 	lds	r25, 0x016F
    1aec:	20 91 84 00 	lds	r18, 0x0084
    1af0:	30 91 85 00 	lds	r19, 0x0085
    1af4:	ac 01       	movw	r20, r24
    1af6:	66 27       	eor	r22, r22
    1af8:	57 fd       	sbrc	r21, 7
    1afa:	60 95       	com	r22
    1afc:	76 2f       	mov	r23, r22
    1afe:	ba 01       	movw	r22, r20
    1b00:	55 27       	eor	r21, r21
    1b02:	44 27       	eor	r20, r20
    1b04:	89 01       	movw	r16, r18
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 2b       	or	r20, r16
    1b0c:	51 2b       	or	r21, r17
    1b0e:	62 2b       	or	r22, r18
    1b10:	73 2b       	or	r23, r19
    1b12:	40 93 70 01 	sts	0x0170, r20
    1b16:	50 93 71 01 	sts	0x0171, r21
    1b1a:	60 93 72 01 	sts	0x0172, r22
    1b1e:	70 93 73 01 	sts	0x0173, r23
    1b22:	b0 9b       	sbis	0x16, 0	; 22
    1b24:	1a c0       	rjmp	.+52     	; 0x1b5a <__vector_5+0x9c>
    1b26:	40 91 84 00 	lds	r20, 0x0084
    1b2a:	50 91 85 00 	lds	r21, 0x0085
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	aa 27       	eor	r26, r26
    1b32:	97 fd       	sbrc	r25, 7
    1b34:	a0 95       	com	r26
    1b36:	ba 2f       	mov	r27, r26
    1b38:	dc 01       	movw	r26, r24
    1b3a:	99 27       	eor	r25, r25
    1b3c:	88 27       	eor	r24, r24
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	84 2b       	or	r24, r20
    1b44:	95 2b       	or	r25, r21
    1b46:	a6 2b       	or	r26, r22
    1b48:	b7 2b       	or	r27, r23
    1b4a:	80 93 70 01 	sts	0x0170, r24
    1b4e:	90 93 71 01 	sts	0x0171, r25
    1b52:	a0 93 72 01 	sts	0x0172, r26
    1b56:	b0 93 73 01 	sts	0x0173, r27
    1b5a:	e0 91 18 02 	lds	r30, 0x0218
    1b5e:	f0 91 19 02 	lds	r31, 0x0219
    1b62:	30 97       	sbiw	r30, 0x00	; 0
    1b64:	39 f0       	breq	.+14     	; 0x1b74 <__vector_5+0xb6>
    1b66:	80 91 80 01 	lds	r24, 0x0180
    1b6a:	90 91 81 01 	lds	r25, 0x0181
    1b6e:	64 e0       	ldi	r22, 0x04	; 4
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	09 95       	icall
    1b74:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	7f 91       	pop	r23
    1b86:	6f 91       	pop	r22
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <__vector_4>:
#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
    1b9e:	1f 92       	push	r1
    1ba0:	0f 92       	push	r0
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	0f 92       	push	r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	2f 93       	push	r18
    1bae:	3f 93       	push	r19
    1bb0:	4f 93       	push	r20
    1bb2:	5f 93       	push	r21
    1bb4:	6f 93       	push	r22
    1bb6:	7f 93       	push	r23
    1bb8:	8f 93       	push	r24
    1bba:	9f 93       	push	r25
    1bbc:	af 93       	push	r26
    1bbe:	bf 93       	push	r27
    1bc0:	ef 93       	push	r30
    1bc2:	ff 93       	push	r31
    1bc4:	80 91 6e 01 	lds	r24, 0x016E
    1bc8:	90 91 6f 01 	lds	r25, 0x016F
    1bcc:	20 91 84 00 	lds	r18, 0x0084
    1bd0:	30 91 85 00 	lds	r19, 0x0085
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	66 27       	eor	r22, r22
    1bd8:	57 fd       	sbrc	r21, 7
    1bda:	60 95       	com	r22
    1bdc:	76 2f       	mov	r23, r22
    1bde:	ba 01       	movw	r22, r20
    1be0:	55 27       	eor	r21, r21
    1be2:	44 27       	eor	r20, r20
    1be4:	89 01       	movw	r16, r18
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 2b       	or	r20, r16
    1bec:	51 2b       	or	r21, r17
    1bee:	62 2b       	or	r22, r18
    1bf0:	73 2b       	or	r23, r19
    1bf2:	40 93 70 01 	sts	0x0170, r20
    1bf6:	50 93 71 01 	sts	0x0171, r21
    1bfa:	60 93 72 01 	sts	0x0172, r22
    1bfe:	70 93 73 01 	sts	0x0173, r23
    1c02:	b0 9b       	sbis	0x16, 0	; 22
    1c04:	1a c0       	rjmp	.+52     	; 0x1c3a <__vector_4+0x9c>
    1c06:	40 91 84 00 	lds	r20, 0x0084
    1c0a:	50 91 85 00 	lds	r21, 0x0085
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	aa 27       	eor	r26, r26
    1c12:	97 fd       	sbrc	r25, 7
    1c14:	a0 95       	com	r26
    1c16:	ba 2f       	mov	r27, r26
    1c18:	dc 01       	movw	r26, r24
    1c1a:	99 27       	eor	r25, r25
    1c1c:	88 27       	eor	r24, r24
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	84 2b       	or	r24, r20
    1c24:	95 2b       	or	r25, r21
    1c26:	a6 2b       	or	r26, r22
    1c28:	b7 2b       	or	r27, r23
    1c2a:	80 93 70 01 	sts	0x0170, r24
    1c2e:	90 93 71 01 	sts	0x0171, r25
    1c32:	a0 93 72 01 	sts	0x0172, r26
    1c36:	b0 93 73 01 	sts	0x0173, r27
    1c3a:	e0 91 16 02 	lds	r30, 0x0216
    1c3e:	f0 91 17 02 	lds	r31, 0x0217
    1c42:	30 97       	sbiw	r30, 0x00	; 0
    1c44:	39 f0       	breq	.+14     	; 0x1c54 <__vector_4+0xb6>
    1c46:	80 91 7e 01 	lds	r24, 0x017E
    1c4a:	90 91 7f 01 	lds	r25, 0x017F
    1c4e:	63 e0       	ldi	r22, 0x03	; 3
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	09 95       	icall
    1c54:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	bf 91       	pop	r27
    1c5e:	af 91       	pop	r26
    1c60:	9f 91       	pop	r25
    1c62:	8f 91       	pop	r24
    1c64:	7f 91       	pop	r23
    1c66:	6f 91       	pop	r22
    1c68:	5f 91       	pop	r21
    1c6a:	4f 91       	pop	r20
    1c6c:	3f 91       	pop	r19
    1c6e:	2f 91       	pop	r18
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <__vector_3>:

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	2f 93       	push	r18
    1c8e:	3f 93       	push	r19
    1c90:	4f 93       	push	r20
    1c92:	5f 93       	push	r21
    1c94:	6f 93       	push	r22
    1c96:	7f 93       	push	r23
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	af 93       	push	r26
    1c9e:	bf 93       	push	r27
    1ca0:	ef 93       	push	r30
    1ca2:	ff 93       	push	r31
    1ca4:	80 91 6e 01 	lds	r24, 0x016E
    1ca8:	90 91 6f 01 	lds	r25, 0x016F
    1cac:	20 91 84 00 	lds	r18, 0x0084
    1cb0:	30 91 85 00 	lds	r19, 0x0085
    1cb4:	ac 01       	movw	r20, r24
    1cb6:	66 27       	eor	r22, r22
    1cb8:	57 fd       	sbrc	r21, 7
    1cba:	60 95       	com	r22
    1cbc:	76 2f       	mov	r23, r22
    1cbe:	ba 01       	movw	r22, r20
    1cc0:	55 27       	eor	r21, r21
    1cc2:	44 27       	eor	r20, r20
    1cc4:	89 01       	movw	r16, r18
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 2b       	or	r20, r16
    1ccc:	51 2b       	or	r21, r17
    1cce:	62 2b       	or	r22, r18
    1cd0:	73 2b       	or	r23, r19
    1cd2:	40 93 70 01 	sts	0x0170, r20
    1cd6:	50 93 71 01 	sts	0x0171, r21
    1cda:	60 93 72 01 	sts	0x0172, r22
    1cde:	70 93 73 01 	sts	0x0173, r23
    1ce2:	b0 9b       	sbis	0x16, 0	; 22
    1ce4:	1a c0       	rjmp	.+52     	; 0x1d1a <__vector_3+0x9c>
    1ce6:	40 91 84 00 	lds	r20, 0x0084
    1cea:	50 91 85 00 	lds	r21, 0x0085
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	97 fd       	sbrc	r25, 7
    1cf4:	a0 95       	com	r26
    1cf6:	ba 2f       	mov	r27, r26
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	99 27       	eor	r25, r25
    1cfc:	88 27       	eor	r24, r24
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	84 2b       	or	r24, r20
    1d04:	95 2b       	or	r25, r21
    1d06:	a6 2b       	or	r26, r22
    1d08:	b7 2b       	or	r27, r23
    1d0a:	80 93 70 01 	sts	0x0170, r24
    1d0e:	90 93 71 01 	sts	0x0171, r25
    1d12:	a0 93 72 01 	sts	0x0172, r26
    1d16:	b0 93 73 01 	sts	0x0173, r27
    1d1a:	e0 91 14 02 	lds	r30, 0x0214
    1d1e:	f0 91 15 02 	lds	r31, 0x0215
    1d22:	30 97       	sbiw	r30, 0x00	; 0
    1d24:	39 f0       	breq	.+14     	; 0x1d34 <__vector_3+0xb6>
    1d26:	80 91 7c 01 	lds	r24, 0x017C
    1d2a:	90 91 7d 01 	lds	r25, 0x017D
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	09 95       	icall
    1d34:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1d38:	ff 91       	pop	r31
    1d3a:	ef 91       	pop	r30
    1d3c:	bf 91       	pop	r27
    1d3e:	af 91       	pop	r26
    1d40:	9f 91       	pop	r25
    1d42:	8f 91       	pop	r24
    1d44:	7f 91       	pop	r23
    1d46:	6f 91       	pop	r22
    1d48:	5f 91       	pop	r21
    1d4a:	4f 91       	pop	r20
    1d4c:	3f 91       	pop	r19
    1d4e:	2f 91       	pop	r18
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	0f 90       	pop	r0
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	0f 90       	pop	r0
    1d5a:	1f 90       	pop	r1
    1d5c:	18 95       	reti

00001d5e <__vector_2>:
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
    1d5e:	1f 92       	push	r1
    1d60:	0f 92       	push	r0
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	0f 92       	push	r0
    1d66:	11 24       	eor	r1, r1
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	2f 93       	push	r18
    1d6e:	3f 93       	push	r19
    1d70:	4f 93       	push	r20
    1d72:	5f 93       	push	r21
    1d74:	6f 93       	push	r22
    1d76:	7f 93       	push	r23
    1d78:	8f 93       	push	r24
    1d7a:	9f 93       	push	r25
    1d7c:	af 93       	push	r26
    1d7e:	bf 93       	push	r27
    1d80:	ef 93       	push	r30
    1d82:	ff 93       	push	r31
    1d84:	80 91 6e 01 	lds	r24, 0x016E
    1d88:	90 91 6f 01 	lds	r25, 0x016F
    1d8c:	20 91 84 00 	lds	r18, 0x0084
    1d90:	30 91 85 00 	lds	r19, 0x0085
    1d94:	ac 01       	movw	r20, r24
    1d96:	66 27       	eor	r22, r22
    1d98:	57 fd       	sbrc	r21, 7
    1d9a:	60 95       	com	r22
    1d9c:	76 2f       	mov	r23, r22
    1d9e:	ba 01       	movw	r22, r20
    1da0:	55 27       	eor	r21, r21
    1da2:	44 27       	eor	r20, r20
    1da4:	89 01       	movw	r16, r18
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 2b       	or	r20, r16
    1dac:	51 2b       	or	r21, r17
    1dae:	62 2b       	or	r22, r18
    1db0:	73 2b       	or	r23, r19
    1db2:	40 93 70 01 	sts	0x0170, r20
    1db6:	50 93 71 01 	sts	0x0171, r21
    1dba:	60 93 72 01 	sts	0x0172, r22
    1dbe:	70 93 73 01 	sts	0x0173, r23
    1dc2:	b0 9b       	sbis	0x16, 0	; 22
    1dc4:	1a c0       	rjmp	.+52     	; 0x1dfa <__vector_2+0x9c>
    1dc6:	40 91 84 00 	lds	r20, 0x0084
    1dca:	50 91 85 00 	lds	r21, 0x0085
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	aa 27       	eor	r26, r26
    1dd2:	97 fd       	sbrc	r25, 7
    1dd4:	a0 95       	com	r26
    1dd6:	ba 2f       	mov	r27, r26
    1dd8:	dc 01       	movw	r26, r24
    1dda:	99 27       	eor	r25, r25
    1ddc:	88 27       	eor	r24, r24
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	84 2b       	or	r24, r20
    1de4:	95 2b       	or	r25, r21
    1de6:	a6 2b       	or	r26, r22
    1de8:	b7 2b       	or	r27, r23
    1dea:	80 93 70 01 	sts	0x0170, r24
    1dee:	90 93 71 01 	sts	0x0171, r25
    1df2:	a0 93 72 01 	sts	0x0172, r26
    1df6:	b0 93 73 01 	sts	0x0173, r27
    1dfa:	e0 91 12 02 	lds	r30, 0x0212
    1dfe:	f0 91 13 02 	lds	r31, 0x0213
    1e02:	30 97       	sbiw	r30, 0x00	; 0
    1e04:	39 f0       	breq	.+14     	; 0x1e14 <__vector_2+0xb6>
    1e06:	80 91 7a 01 	lds	r24, 0x017A
    1e0a:	90 91 7b 01 	lds	r25, 0x017B
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	09 95       	icall
    1e14:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1e18:	ff 91       	pop	r31
    1e1a:	ef 91       	pop	r30
    1e1c:	bf 91       	pop	r27
    1e1e:	af 91       	pop	r26
    1e20:	9f 91       	pop	r25
    1e22:	8f 91       	pop	r24
    1e24:	7f 91       	pop	r23
    1e26:	6f 91       	pop	r22
    1e28:	5f 91       	pop	r21
    1e2a:	4f 91       	pop	r20
    1e2c:	3f 91       	pop	r19
    1e2e:	2f 91       	pop	r18
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
    1e3e:	1f 92       	push	r1
    1e40:	0f 92       	push	r0
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	2f 93       	push	r18
    1e4e:	3f 93       	push	r19
    1e50:	4f 93       	push	r20
    1e52:	5f 93       	push	r21
    1e54:	6f 93       	push	r22
    1e56:	7f 93       	push	r23
    1e58:	8f 93       	push	r24
    1e5a:	9f 93       	push	r25
    1e5c:	af 93       	push	r26
    1e5e:	bf 93       	push	r27
    1e60:	ef 93       	push	r30
    1e62:	ff 93       	push	r31
    1e64:	80 91 6e 01 	lds	r24, 0x016E
    1e68:	90 91 6f 01 	lds	r25, 0x016F
    1e6c:	20 91 84 00 	lds	r18, 0x0084
    1e70:	30 91 85 00 	lds	r19, 0x0085
    1e74:	ac 01       	movw	r20, r24
    1e76:	66 27       	eor	r22, r22
    1e78:	57 fd       	sbrc	r21, 7
    1e7a:	60 95       	com	r22
    1e7c:	76 2f       	mov	r23, r22
    1e7e:	ba 01       	movw	r22, r20
    1e80:	55 27       	eor	r21, r21
    1e82:	44 27       	eor	r20, r20
    1e84:	89 01       	movw	r16, r18
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 2b       	or	r20, r16
    1e8c:	51 2b       	or	r21, r17
    1e8e:	62 2b       	or	r22, r18
    1e90:	73 2b       	or	r23, r19
    1e92:	40 93 70 01 	sts	0x0170, r20
    1e96:	50 93 71 01 	sts	0x0171, r21
    1e9a:	60 93 72 01 	sts	0x0172, r22
    1e9e:	70 93 73 01 	sts	0x0173, r23
    1ea2:	b0 9b       	sbis	0x16, 0	; 22
    1ea4:	1a c0       	rjmp	.+52     	; 0x1eda <__vector_1+0x9c>
    1ea6:	40 91 84 00 	lds	r20, 0x0084
    1eaa:	50 91 85 00 	lds	r21, 0x0085
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	aa 27       	eor	r26, r26
    1eb2:	97 fd       	sbrc	r25, 7
    1eb4:	a0 95       	com	r26
    1eb6:	ba 2f       	mov	r27, r26
    1eb8:	dc 01       	movw	r26, r24
    1eba:	99 27       	eor	r25, r25
    1ebc:	88 27       	eor	r24, r24
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	84 2b       	or	r24, r20
    1ec4:	95 2b       	or	r25, r21
    1ec6:	a6 2b       	or	r26, r22
    1ec8:	b7 2b       	or	r27, r23
    1eca:	80 93 70 01 	sts	0x0170, r24
    1ece:	90 93 71 01 	sts	0x0171, r25
    1ed2:	a0 93 72 01 	sts	0x0172, r26
    1ed6:	b0 93 73 01 	sts	0x0173, r27
    1eda:	e0 91 10 02 	lds	r30, 0x0210
    1ede:	f0 91 11 02 	lds	r31, 0x0211
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	39 f0       	breq	.+14     	; 0x1ef4 <__vector_1+0xb6>
    1ee6:	80 91 78 01 	lds	r24, 0x0178
    1eea:	90 91 79 01 	lds	r25, 0x0179
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	09 95       	icall
    1ef4:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    1ef8:	ff 91       	pop	r31
    1efa:	ef 91       	pop	r30
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	7f 91       	pop	r23
    1f06:	6f 91       	pop	r22
    1f08:	5f 91       	pop	r21
    1f0a:	4f 91       	pop	r20
    1f0c:	3f 91       	pop	r19
    1f0e:	2f 91       	pop	r18
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    1f1e:	1f 92       	push	r1
    1f20:	0f 92       	push	r0
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	0f 92       	push	r0
    1f26:	11 24       	eor	r1, r1
    1f28:	2f 93       	push	r18
    1f2a:	3f 93       	push	r19
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    1f38:	20 91 6e 01 	lds	r18, 0x016E
    1f3c:	30 91 6f 01 	lds	r19, 0x016F
    1f40:	2f 5f       	subi	r18, 0xFF	; 255
    1f42:	3f 4f       	sbci	r19, 0xFF	; 255
    1f44:	30 93 6f 01 	sts	0x016F, r19
    1f48:	20 93 6e 01 	sts	0x016E, r18
    TIMERSET(timerQ);
    1f4c:	e0 91 74 01 	lds	r30, 0x0174
    1f50:	f0 91 75 01 	lds	r31, 0x0175
    1f54:	30 97       	sbiw	r30, 0x00	; 0
    1f56:	09 f1       	breq	.+66     	; 0x1f9a <__vector_9+0x7c>
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	a4 81       	ldd	r26, Z+4	; 0x04
    1f5e:	b5 81       	ldd	r27, Z+5	; 0x05
    1f60:	2a 17       	cp	r18, r26
    1f62:	3b 07       	cpc	r19, r27
    1f64:	d1 f4       	brne	.+52     	; 0x1f9a <__vector_9+0x7c>
    1f66:	20 91 84 00 	lds	r18, 0x0084
    1f6a:	30 91 85 00 	lds	r19, 0x0085
    1f6e:	20 95       	com	r18
    1f70:	30 95       	com	r19
    1f72:	28 0f       	add	r18, r24
    1f74:	39 1f       	adc	r19, r25
    1f76:	21 15       	cp	r18, r1
    1f78:	31 05       	cpc	r19, r1
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <__vector_9+0x68>
    1f7c:	80 91 84 00 	lds	r24, 0x0084
    1f80:	90 91 85 00 	lds	r25, 0x0085
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	90 93 89 00 	sts	0x0089, r25
    1f8a:	80 93 88 00 	sts	0x0088, r24
    1f8e:	ef e6       	ldi	r30, 0x6F	; 111
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	82 60       	ori	r24, 0x02	; 2
    1f96:	80 83       	st	Z, r24
    1f98:	05 c0       	rjmp	.+10     	; 0x1fa4 <__vector_9+0x86>
    1f9a:	ef e6       	ldi	r30, 0x6F	; 111
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8d 7f       	andi	r24, 0xFD	; 253
    1fa2:	80 83       	st	Z, r24
}
    1fa4:	ff 91       	pop	r31
    1fa6:	ef 91       	pop	r30
    1fa8:	bf 91       	pop	r27
    1faa:	af 91       	pop	r26
    1fac:	9f 91       	pop	r25
    1fae:	8f 91       	pop	r24
    1fb0:	3f 91       	pop	r19
    1fb2:	2f 91       	pop	r18
    1fb4:	0f 90       	pop	r0
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	0f 90       	pop	r0
    1fba:	1f 90       	pop	r1
    1fbc:	18 95       	reti

00001fbe <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    1fbe:	1f 92       	push	r1
    1fc0:	0f 92       	push	r0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	0f 92       	push	r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	cf 92       	push	r12
    1fca:	df 92       	push	r13
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	2f 93       	push	r18
    1fd6:	3f 93       	push	r19
    1fd8:	4f 93       	push	r20
    1fda:	5f 93       	push	r21
    1fdc:	6f 93       	push	r22
    1fde:	7f 93       	push	r23
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	af 93       	push	r26
    1fe6:	bf 93       	push	r27
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	ef 93       	push	r30
    1fee:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    1ff0:	c0 90 6e 01 	lds	r12, 0x016E
    1ff4:	d0 90 6f 01 	lds	r13, 0x016F
    1ff8:	80 91 84 00 	lds	r24, 0x0084
    1ffc:	90 91 85 00 	lds	r25, 0x0085
    2000:	b0 99       	sbic	0x16, 0	; 22
    2002:	0e c0       	rjmp	.+28     	; 0x2020 <__vector_7+0x62>
    2004:	ee 24       	eor	r14, r14
    2006:	d7 fc       	sbrc	r13, 7
    2008:	e0 94       	com	r14
    200a:	fe 2c       	mov	r15, r14
    200c:	76 01       	movw	r14, r12
    200e:	dd 24       	eor	r13, r13
    2010:	cc 24       	eor	r12, r12
    2012:	a0 e0       	ldi	r26, 0x00	; 0
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	c8 2a       	or	r12, r24
    2018:	d9 2a       	or	r13, r25
    201a:	ea 2a       	or	r14, r26
    201c:	fb 2a       	or	r15, r27
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <__vector_7+0x8a>
    2020:	80 91 84 00 	lds	r24, 0x0084
    2024:	90 91 85 00 	lds	r25, 0x0085
    2028:	08 94       	sec
    202a:	c1 1c       	adc	r12, r1
    202c:	d1 1c       	adc	r13, r1
    202e:	ee 24       	eor	r14, r14
    2030:	d7 fc       	sbrc	r13, 7
    2032:	e0 94       	com	r14
    2034:	fe 2c       	mov	r15, r14
    2036:	76 01       	movw	r14, r12
    2038:	dd 24       	eor	r13, r13
    203a:	cc 24       	eor	r12, r12
    203c:	a0 e0       	ldi	r26, 0x00	; 0
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	c8 2a       	or	r12, r24
    2042:	d9 2a       	or	r13, r25
    2044:	ea 2a       	or	r14, r26
    2046:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    2048:	e0 91 74 01 	lds	r30, 0x0174
    204c:	f0 91 75 01 	lds	r31, 0x0175
    2050:	30 97       	sbiw	r30, 0x00	; 0
    2052:	09 f4       	brne	.+2      	; 0x2056 <__vector_7+0x98>
    2054:	46 c0       	rjmp	.+140    	; 0x20e2 <__vector_7+0x124>
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	a4 81       	ldd	r26, Z+4	; 0x04
    205c:	b5 81       	ldd	r27, Z+5	; 0x05
    205e:	8c 19       	sub	r24, r12
    2060:	9d 09       	sbc	r25, r13
    2062:	ae 09       	sbc	r26, r14
    2064:	bf 09       	sbc	r27, r15
    2066:	18 16       	cp	r1, r24
    2068:	19 06       	cpc	r1, r25
    206a:	1a 06       	cpc	r1, r26
    206c:	1b 06       	cpc	r1, r27
    206e:	0c f4       	brge	.+2      	; 0x2072 <__vector_7+0xb4>
    2070:	58 c0       	rjmp	.+176    	; 0x2122 <__vector_7+0x164>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    2072:	c4 e7       	ldi	r28, 0x74	; 116
    2074:	d1 e0       	ldi	r29, 0x01	; 1
    2076:	06 e7       	ldi	r16, 0x76	; 118
    2078:	11 e0       	ldi	r17, 0x01	; 1
    207a:	ce 01       	movw	r24, r28
    207c:	0e 94 43 07 	call	0xe86	; 0xe86 <dequeue>
    2080:	b8 01       	movw	r22, r16
    2082:	0e 94 c3 06 	call	0xd86	; 0xd86 <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    2086:	e0 91 74 01 	lds	r30, 0x0174
    208a:	f0 91 75 01 	lds	r31, 0x0175
    208e:	30 97       	sbiw	r30, 0x00	; 0
    2090:	41 f1       	breq	.+80     	; 0x20e2 <__vector_7+0x124>
    2092:	82 81       	ldd	r24, Z+2	; 0x02
    2094:	93 81       	ldd	r25, Z+3	; 0x03
    2096:	a4 81       	ldd	r26, Z+4	; 0x04
    2098:	b5 81       	ldd	r27, Z+5	; 0x05
    209a:	8c 19       	sub	r24, r12
    209c:	9d 09       	sbc	r25, r13
    209e:	ae 09       	sbc	r26, r14
    20a0:	bf 09       	sbc	r27, r15
    20a2:	18 16       	cp	r1, r24
    20a4:	19 06       	cpc	r1, r25
    20a6:	1a 06       	cpc	r1, r26
    20a8:	1b 06       	cpc	r1, r27
    20aa:	3c f7       	brge	.-50     	; 0x207a <__vector_7+0xbc>
    20ac:	3a c0       	rjmp	.+116    	; 0x2122 <__vector_7+0x164>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    20ae:	20 91 84 00 	lds	r18, 0x0084
    20b2:	30 91 85 00 	lds	r19, 0x0085
    20b6:	20 95       	com	r18
    20b8:	30 95       	com	r19
    20ba:	28 0f       	add	r18, r24
    20bc:	39 1f       	adc	r19, r25
    20be:	21 15       	cp	r18, r1
    20c0:	31 05       	cpc	r19, r1
    20c2:	29 f4       	brne	.+10     	; 0x20ce <__vector_7+0x110>
    20c4:	80 91 84 00 	lds	r24, 0x0084
    20c8:	90 91 85 00 	lds	r25, 0x0085
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	90 93 89 00 	sts	0x0089, r25
    20d2:	80 93 88 00 	sts	0x0088, r24
    20d6:	ef e6       	ldi	r30, 0x6F	; 111
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	82 60       	ori	r24, 0x02	; 2
    20de:	80 83       	st	Z, r24
    20e0:	05 c0       	rjmp	.+10     	; 0x20ec <__vector_7+0x12e>
    20e2:	ef e6       	ldi	r30, 0x6F	; 111
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8d 7f       	andi	r24, 0xFD	; 253
    20ea:	80 83       	st	Z, r24
    schedule();
    20ec:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
}
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	bf 91       	pop	r27
    20fa:	af 91       	pop	r26
    20fc:	9f 91       	pop	r25
    20fe:	8f 91       	pop	r24
    2100:	7f 91       	pop	r23
    2102:	6f 91       	pop	r22
    2104:	5f 91       	pop	r21
    2106:	4f 91       	pop	r20
    2108:	3f 91       	pop	r19
    210a:	2f 91       	pop	r18
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	ff 90       	pop	r15
    2112:	ef 90       	pop	r14
    2114:	df 90       	pop	r13
    2116:	cf 90       	pop	r12
    2118:	0f 90       	pop	r0
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	0f 90       	pop	r0
    211e:	1f 90       	pop	r1
    2120:	18 95       	reti
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	a4 81       	ldd	r26, Z+4	; 0x04
    2128:	b5 81       	ldd	r27, Z+5	; 0x05
    212a:	20 91 6e 01 	lds	r18, 0x016E
    212e:	30 91 6f 01 	lds	r19, 0x016F
    2132:	2a 17       	cp	r18, r26
    2134:	3b 07       	cpc	r19, r27
    2136:	a9 f6       	brne	.-86     	; 0x20e2 <__vector_7+0x124>
    2138:	ba cf       	rjmp	.-140    	; 0x20ae <__vector_7+0xf0>

0000213a <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    213a:	3f 92       	push	r3
    213c:	4f 92       	push	r4
    213e:	5f 92       	push	r5
    2140:	6f 92       	push	r6
    2142:	7f 92       	push	r7
    2144:	8f 92       	push	r8
    2146:	9f 92       	push	r9
    2148:	af 92       	push	r10
    214a:	bf 92       	push	r11
    214c:	cf 92       	push	r12
    214e:	df 92       	push	r13
    2150:	ef 92       	push	r14
    2152:	ff 92       	push	r15
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	2b 01       	movw	r4, r22
    215e:	3c 01       	movw	r6, r24
    2160:	49 01       	movw	r8, r18
    2162:	5a 01       	movw	r10, r20
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    2164:	8f b7       	in	r24, 0x3f	; 63
    2166:	0f 2e       	mov	r0, r31
    2168:	f0 e8       	ldi	r31, 0x80	; 128
    216a:	3f 2e       	mov	r3, r31
    216c:	f0 2d       	mov	r31, r0
    216e:	38 22       	and	r3, r24
    2170:	f8 94       	cli
    m = dequeue(&msgPool);
    2172:	84 e5       	ldi	r24, 0x54	; 84
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	0e 94 43 07 	call	0xe86	; 0xe86 <dequeue>
    217a:	ec 01       	movw	r28, r24
    m->to = to; 
    217c:	1b 87       	std	Y+11, r17	; 0x0b
    217e:	0a 87       	std	Y+10, r16	; 0x0a
    m->method = meth; 
    2180:	fd 86       	std	Y+13, r15	; 0x0d
    2182:	ec 86       	std	Y+12, r14	; 0x0c
    m->arg = arg;
    2184:	df 86       	std	Y+15, r13	; 0x0f
    2186:	ce 86       	std	Y+14, r12	; 0x0e
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    2188:	33 20       	and	r3, r3
    218a:	61 f0       	breq	.+24     	; 0x21a4 <async+0x6a>
    218c:	e0 91 4e 01 	lds	r30, 0x014E
    2190:	f0 91 4f 01 	lds	r31, 0x014F
    2194:	02 80       	ldd	r0, Z+2	; 0x02
    2196:	f3 81       	ldd	r31, Z+3	; 0x03
    2198:	e0 2d       	mov	r30, r0
    219a:	42 81       	ldd	r20, Z+2	; 0x02
    219c:	53 81       	ldd	r21, Z+3	; 0x03
    219e:	64 81       	ldd	r22, Z+4	; 0x04
    21a0:	75 81       	ldd	r23, Z+5	; 0x05
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <async+0x7a>
    21a4:	40 91 70 01 	lds	r20, 0x0170
    21a8:	50 91 71 01 	lds	r21, 0x0171
    21ac:	60 91 72 01 	lds	r22, 0x0172
    21b0:	70 91 73 01 	lds	r23, 0x0173
    21b4:	44 0d       	add	r20, r4
    21b6:	55 1d       	adc	r21, r5
    21b8:	66 1d       	adc	r22, r6
    21ba:	77 1d       	adc	r23, r7
    21bc:	4a 83       	std	Y+2, r20	; 0x02
    21be:	5b 83       	std	Y+3, r21	; 0x03
    21c0:	6c 83       	std	Y+4, r22	; 0x04
    21c2:	7d 83       	std	Y+5, r23	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    21c4:	18 14       	cp	r1, r8
    21c6:	19 04       	cpc	r1, r9
    21c8:	1a 04       	cpc	r1, r10
    21ca:	1b 04       	cpc	r1, r11
    21cc:	54 f0       	brlt	.+20     	; 0x21e2 <async+0xa8>
    21ce:	0f 2e       	mov	r0, r31
    21d0:	ff ef       	ldi	r31, 0xFF	; 255
    21d2:	8f 2e       	mov	r8, r31
    21d4:	ff ef       	ldi	r31, 0xFF	; 255
    21d6:	9f 2e       	mov	r9, r31
    21d8:	ff ef       	ldi	r31, 0xFF	; 255
    21da:	af 2e       	mov	r10, r31
    21dc:	ff e7       	ldi	r31, 0x7F	; 127
    21de:	bf 2e       	mov	r11, r31
    21e0:	f0 2d       	mov	r31, r0
    21e2:	84 0e       	add	r8, r20
    21e4:	95 1e       	adc	r9, r21
    21e6:	a6 1e       	adc	r10, r22
    21e8:	b7 1e       	adc	r11, r23
    21ea:	8e 82       	std	Y+6, r8	; 0x06
    21ec:	9f 82       	std	Y+7, r9	; 0x07
    21ee:	a8 86       	std	Y+8, r10	; 0x08
    21f0:	b9 86       	std	Y+9, r11	; 0x09
    
    TIMERGET(now);
    21f2:	80 91 6e 01 	lds	r24, 0x016E
    21f6:	90 91 6f 01 	lds	r25, 0x016F
    21fa:	e0 91 84 00 	lds	r30, 0x0084
    21fe:	f0 91 85 00 	lds	r31, 0x0085
    2202:	b0 99       	sbic	0x16, 0	; 22
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <async+0xea>
    2206:	aa 27       	eor	r26, r26
    2208:	97 fd       	sbrc	r25, 7
    220a:	a0 95       	com	r26
    220c:	ba 2f       	mov	r27, r26
    220e:	9c 01       	movw	r18, r24
    2210:	11 27       	eor	r17, r17
    2212:	00 27       	eor	r16, r16
    2214:	cf 01       	movw	r24, r30
    2216:	a0 e0       	ldi	r26, 0x00	; 0
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	80 2b       	or	r24, r16
    221c:	91 2b       	or	r25, r17
    221e:	a2 2b       	or	r26, r18
    2220:	b3 2b       	or	r27, r19
    2222:	13 c0       	rjmp	.+38     	; 0x224a <async+0x110>
    2224:	e0 91 84 00 	lds	r30, 0x0084
    2228:	f0 91 85 00 	lds	r31, 0x0085
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	aa 27       	eor	r26, r26
    2230:	97 fd       	sbrc	r25, 7
    2232:	a0 95       	com	r26
    2234:	ba 2f       	mov	r27, r26
    2236:	9c 01       	movw	r18, r24
    2238:	11 27       	eor	r17, r17
    223a:	00 27       	eor	r16, r16
    223c:	cf 01       	movw	r24, r30
    223e:	a0 e0       	ldi	r26, 0x00	; 0
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	80 2b       	or	r24, r16
    2244:	91 2b       	or	r25, r17
    2246:	a2 2b       	or	r26, r18
    2248:	b3 2b       	or	r27, r19
    if (m->baseline - now > 0) {        // baseline has not yet passed
    224a:	48 1b       	sub	r20, r24
    224c:	59 0b       	sbc	r21, r25
    224e:	6a 0b       	sbc	r22, r26
    2250:	7b 0b       	sbc	r23, r27
    2252:	14 16       	cp	r1, r20
    2254:	15 06       	cpc	r1, r21
    2256:	16 06       	cpc	r1, r22
    2258:	17 06       	cpc	r1, r23
    225a:	b4 f5       	brge	.+108    	; 0x22c8 <async+0x18e>
        enqueueByBaseline(m, &timerQ);
    225c:	ce 01       	movw	r24, r28
    225e:	64 e7       	ldi	r22, 0x74	; 116
    2260:	71 e0       	ldi	r23, 0x01	; 1
    2262:	0e 94 03 07 	call	0xe06	; 0xe06 <enqueueByBaseline>
        TIMERSET(timerQ);
    2266:	e0 91 74 01 	lds	r30, 0x0174
    226a:	f0 91 75 01 	lds	r31, 0x0175
    226e:	30 97       	sbiw	r30, 0x00	; 0
    2270:	29 f1       	breq	.+74     	; 0x22bc <async+0x182>
    2272:	42 81       	ldd	r20, Z+2	; 0x02
    2274:	53 81       	ldd	r21, Z+3	; 0x03
    2276:	64 81       	ldd	r22, Z+4	; 0x04
    2278:	75 81       	ldd	r23, Z+5	; 0x05
    227a:	80 91 6e 01 	lds	r24, 0x016E
    227e:	90 91 6f 01 	lds	r25, 0x016F
    2282:	86 17       	cp	r24, r22
    2284:	97 07       	cpc	r25, r23
    2286:	d1 f4       	brne	.+52     	; 0x22bc <async+0x182>
    2288:	80 91 84 00 	lds	r24, 0x0084
    228c:	90 91 85 00 	lds	r25, 0x0085
    2290:	80 95       	com	r24
    2292:	90 95       	com	r25
    2294:	84 0f       	add	r24, r20
    2296:	95 1f       	adc	r25, r21
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	31 f4       	brne	.+12     	; 0x22a8 <async+0x16e>
    229c:	40 91 84 00 	lds	r20, 0x0084
    22a0:	50 91 85 00 	lds	r21, 0x0085
    22a4:	4f 5f       	subi	r20, 0xFF	; 255
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255
    22a8:	50 93 89 00 	sts	0x0089, r21
    22ac:	40 93 88 00 	sts	0x0088, r20
    22b0:	ef e6       	ldi	r30, 0x6F	; 111
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	82 60       	ori	r24, 0x02	; 2
    22b8:	80 83       	st	Z, r24
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <async+0x200>
    22bc:	ef e6       	ldi	r30, 0x6F	; 111
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	8d 7f       	andi	r24, 0xFD	; 253
    22c4:	80 83       	st	Z, r24
    22c6:	39 c0       	rjmp	.+114    	; 0x233a <async+0x200>
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
    22c8:	ce 01       	movw	r24, r28
    22ca:	66 e7       	ldi	r22, 0x76	; 118
    22cc:	71 e0       	ldi	r23, 0x01	; 1
    22ce:	0e 94 c3 06 	call	0xd86	; 0xd86 <enqueueByDeadline>
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    22d2:	33 20       	and	r3, r3
    22d4:	a9 f1       	breq	.+106    	; 0x2340 <async+0x206>
    22d6:	80 91 52 01 	lds	r24, 0x0152
    22da:	90 91 53 01 	lds	r25, 0x0153
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	71 f1       	breq	.+92     	; 0x233e <async+0x204>
    22e2:	e0 91 76 01 	lds	r30, 0x0176
    22e6:	f0 91 77 01 	lds	r31, 0x0177
    22ea:	a0 91 50 01 	lds	r26, 0x0150
    22ee:	b0 91 51 01 	lds	r27, 0x0151
    22f2:	12 96       	adiw	r26, 0x02	; 2
    22f4:	0d 90       	ld	r0, X+
    22f6:	bc 91       	ld	r27, X
    22f8:	a0 2d       	mov	r26, r0
    22fa:	46 81       	ldd	r20, Z+6	; 0x06
    22fc:	57 81       	ldd	r21, Z+7	; 0x07
    22fe:	60 85       	ldd	r22, Z+8	; 0x08
    2300:	71 85       	ldd	r23, Z+9	; 0x09
    2302:	16 96       	adiw	r26, 0x06	; 6
    2304:	8d 91       	ld	r24, X+
    2306:	9d 91       	ld	r25, X+
    2308:	0d 90       	ld	r0, X+
    230a:	bc 91       	ld	r27, X
    230c:	a0 2d       	mov	r26, r0
    230e:	8a 01       	movw	r16, r20
    2310:	9b 01       	movw	r18, r22
    2312:	08 1b       	sub	r16, r24
    2314:	19 0b       	sbc	r17, r25
    2316:	2a 0b       	sbc	r18, r26
    2318:	3b 0b       	sbc	r19, r27
    231a:	8a f4       	brpl	.+34     	; 0x233e <async+0x204>
            push(pop(&threadPool), &activeStack);
    231c:	82 e5       	ldi	r24, 0x52	; 82
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	0e 94 70 07 	call	0xee0	; 0xee0 <pop>
    2324:	60 e5       	ldi	r22, 0x50	; 80
    2326:	71 e0       	ldi	r23, 0x01	; 1
    2328:	0e 94 66 07 	call	0xecc	; 0xecc <push>
            dispatch(activeStack);
    232c:	80 91 50 01 	lds	r24, 0x0150
    2330:	90 91 51 01 	lds	r25, 0x0151
    2334:	0e 94 d3 05 	call	0xba6	; 0xba6 <dispatch>
    2338:	02 c0       	rjmp	.+4      	; 0x233e <async+0x204>
        }
    }
    
    ENABLE(status);
    233a:	33 20       	and	r3, r3
    233c:	09 f0       	breq	.+2      	; 0x2340 <async+0x206>
    233e:	78 94       	sei
    return m;
}
    2340:	8c 2f       	mov	r24, r28
    2342:	9d 2f       	mov	r25, r29
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	ff 90       	pop	r15
    234e:	ef 90       	pop	r14
    2350:	df 90       	pop	r13
    2352:	cf 90       	pop	r12
    2354:	bf 90       	pop	r11
    2356:	af 90       	pop	r10
    2358:	9f 90       	pop	r9
    235a:	8f 90       	pop	r8
    235c:	7f 90       	pop	r7
    235e:	6f 90       	pop	r6
    2360:	5f 90       	pop	r5
    2362:	4f 90       	pop	r4
    2364:	3f 90       	pop	r3
    2366:	08 95       	ret

00002368 <sync>:

int sync(Object *to, Method meth, int arg) {
    2368:	af 92       	push	r10
    236a:	bf 92       	push	r11
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ff 92       	push	r15
    2372:	0f 93       	push	r16
    2374:	1f 93       	push	r17
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	8c 01       	movw	r16, r24
    237c:	5b 01       	movw	r10, r22
    237e:	6a 01       	movw	r12, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    2380:	8f b7       	in	r24, 0x3f	; 63
    2382:	0f 2e       	mov	r0, r31
    2384:	f0 e8       	ldi	r31, 0x80	; 128
    2386:	ff 2e       	mov	r15, r31
    2388:	f0 2d       	mov	r31, r0
    238a:	f8 22       	and	r15, r24
    238c:	f8 94       	cli
    t = to->ownedBy;
    238e:	d8 01       	movw	r26, r16
    2390:	cd 91       	ld	r28, X+
    2392:	dc 91       	ld	r29, X
    2394:	11 97       	sbiw	r26, 0x01	; 1
    if (t) {                            // to is already locked
    2396:	20 97       	sbiw	r28, 0x00	; 0
    2398:	09 f4       	brne	.+2      	; 0x239c <sync+0x34>
    239a:	3f c0       	rjmp	.+126    	; 0x241a <sync+0xb2>
        while (t->waitsFor) 
    239c:	ec 81       	ldd	r30, Y+4	; 0x04
    239e:	fd 81       	ldd	r31, Y+5	; 0x05
    23a0:	30 97       	sbiw	r30, 0x00	; 0
    23a2:	31 f0       	breq	.+12     	; 0x23b0 <sync+0x48>
            t = t->waitsFor->ownedBy;
    23a4:	c0 81       	ld	r28, Z
    23a6:	d1 81       	ldd	r29, Z+1	; 0x01
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    23a8:	ec 81       	ldd	r30, Y+4	; 0x04
    23aa:	fd 81       	ldd	r31, Y+5	; 0x05
    23ac:	30 97       	sbiw	r30, 0x00	; 0
    23ae:	d1 f7       	brne	.-12     	; 0x23a4 <sync+0x3c>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    23b0:	e0 91 4e 01 	lds	r30, 0x014E
    23b4:	f0 91 4f 01 	lds	r31, 0x014F
    23b8:	ce 17       	cp	r28, r30
    23ba:	df 07       	cpc	r29, r31
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <sync+0x5e>
    23be:	ff 20       	and	r15, r15
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <sync+0x5c>
    23c2:	59 c0       	rjmp	.+178    	; 0x2476 <sync+0x10e>
    23c4:	07 c0       	rjmp	.+14     	; 0x23d4 <sync+0x6c>
            ENABLE(status);
    23c6:	ff 20       	and	r15, r15
    23c8:	09 f4       	brne	.+2      	; 0x23cc <sync+0x64>
    23ca:	58 c0       	rjmp	.+176    	; 0x247c <sync+0x114>
    23cc:	78 94       	sei
            return -1;
    23ce:	cf ef       	ldi	r28, 0xFF	; 255
    23d0:	df ef       	ldi	r29, 0xFF	; 255
    23d2:	56 c0       	rjmp	.+172    	; 0x2480 <sync+0x118>
        }
        if (to->wantedBy)               // must be a lower priority thread
    23d4:	d8 01       	movw	r26, r16
    23d6:	12 96       	adiw	r26, 0x02	; 2
    23d8:	8d 91       	ld	r24, X+
    23da:	9c 91       	ld	r25, X
    23dc:	13 97       	sbiw	r26, 0x03	; 3
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	29 f0       	breq	.+10     	; 0x23ec <sync+0x84>
            to->wantedBy->waitsFor = NULL;
    23e2:	dc 01       	movw	r26, r24
    23e4:	15 96       	adiw	r26, 0x05	; 5
    23e6:	1c 92       	st	X, r1
    23e8:	1e 92       	st	-X, r1
    23ea:	14 97       	sbiw	r26, 0x04	; 4
        to->wantedBy = current;
    23ec:	d8 01       	movw	r26, r16
    23ee:	13 96       	adiw	r26, 0x03	; 3
    23f0:	fc 93       	st	X, r31
    23f2:	ee 93       	st	-X, r30
    23f4:	12 97       	sbiw	r26, 0x02	; 2
        current->waitsFor = to;
    23f6:	15 83       	std	Z+5, r17	; 0x05
    23f8:	04 83       	std	Z+4, r16	; 0x04
        dispatch(t);
    23fa:	ce 01       	movw	r24, r28
    23fc:	0e 94 d3 05 	call	0xba6	; 0xba6 <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    2400:	e0 91 4e 01 	lds	r30, 0x014E
    2404:	f0 91 4f 01 	lds	r31, 0x014F
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	09 f0       	breq	.+2      	; 0x2412 <sync+0xaa>
    2410:	43 c0       	rjmp	.+134    	; 0x2498 <sync+0x130>
            ENABLE(status);
    2412:	78 94       	sei
            return 0;
    2414:	c0 e0       	ldi	r28, 0x00	; 0
    2416:	d0 e0       	ldi	r29, 0x00	; 0
    2418:	33 c0       	rjmp	.+102    	; 0x2480 <sync+0x118>
        }
    }
    to->ownedBy = current;
    241a:	80 91 4e 01 	lds	r24, 0x014E
    241e:	90 91 4f 01 	lds	r25, 0x014F
    2422:	f8 01       	movw	r30, r16
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    2428:	ff 20       	and	r15, r15
    242a:	49 f0       	breq	.+18     	; 0x243e <sync+0xd6>
    242c:	d8 01       	movw	r26, r16
    242e:	12 96       	adiw	r26, 0x02	; 2
    2430:	8d 91       	ld	r24, X+
    2432:	9c 91       	ld	r25, X
    2434:	13 97       	sbiw	r26, 0x03	; 3
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	91 05       	cpc	r25, r1
    243a:	09 f0       	breq	.+2      	; 0x243e <sync+0xd6>
    243c:	78 94       	sei
    result = meth(to, arg);
    243e:	c8 01       	movw	r24, r16
    2440:	b6 01       	movw	r22, r12
    2442:	f5 01       	movw	r30, r10
    2444:	09 95       	icall
    2446:	ec 01       	movw	r28, r24
    DISABLE(status_ignore);
    2448:	8f b7       	in	r24, 0x3f	; 63
    244a:	f8 94       	cli
    to->ownedBy = NULL; 
    244c:	f8 01       	movw	r30, r16
    244e:	11 82       	std	Z+1, r1	; 0x01
    2450:	10 82       	st	Z, r1
    t = to->wantedBy;
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    2456:	82 30       	cpi	r24, 0x02	; 2
    2458:	91 05       	cpc	r25, r1
    245a:	48 f0       	brcs	.+18     	; 0x246e <sync+0x106>
        to->wantedBy = NULL; 
    245c:	13 82       	std	Z+3, r1	; 0x03
    245e:	12 82       	std	Z+2, r1	; 0x02
        t->waitsFor = NULL;
    2460:	dc 01       	movw	r26, r24
    2462:	15 96       	adiw	r26, 0x05	; 5
    2464:	1c 92       	st	X, r1
    2466:	1e 92       	st	-X, r1
    2468:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    246a:	0e 94 d3 05 	call	0xba6	; 0xba6 <dispatch>
    }
    ENABLE(status);
    246e:	ff 20       	and	r15, r15
    2470:	39 f0       	breq	.+14     	; 0x2480 <sync+0x118>
    2472:	78 94       	sei
    2474:	05 c0       	rjmp	.+10     	; 0x2480 <sync+0x118>
    if (t) {                            // to is already locked
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
            ENABLE(status);
            return -1;
    2476:	cf ef       	ldi	r28, 0xFF	; 255
    2478:	df ef       	ldi	r29, 0xFF	; 255
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <sync+0x118>
    247c:	cf ef       	ldi	r28, 0xFF	; 255
    247e:	df ef       	ldi	r29, 0xFF	; 255
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
}
    2480:	8c 2f       	mov	r24, r28
    2482:	9d 2f       	mov	r25, r29
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	df 90       	pop	r13
    2490:	cf 90       	pop	r12
    2492:	bf 90       	pop	r11
    2494:	af 90       	pop	r10
    2496:	08 95       	ret
        if (current->msg == NULL) {     // message was aborted (when called from run)
            ENABLE(status);
            return 0;
        }
    }
    to->ownedBy = current;
    2498:	d8 01       	movw	r26, r16
    249a:	11 96       	adiw	r26, 0x01	; 1
    249c:	fc 93       	st	X, r31
    249e:	ee 93       	st	-X, r30
    24a0:	c5 cf       	rjmp	.-118    	; 0x242c <sync+0xc4>

000024a2 <run>:
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    24a2:	0f 2e       	mov	r0, r31
    24a4:	f6 e7       	ldi	r31, 0x76	; 118
    24a6:	ef 2e       	mov	r14, r31
    24a8:	f1 e0       	ldi	r31, 0x01	; 1
    24aa:	ff 2e       	mov	r15, r31
    24ac:	f0 2d       	mov	r31, r0
        char status = 1;
        
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
    24ae:	0f 2e       	mov	r0, r31
    24b0:	f4 e5       	ldi	r31, 0x54	; 84
    24b2:	cf 2e       	mov	r12, r31
    24b4:	f1 e0       	ldi	r31, 0x01	; 1
    24b6:	df 2e       	mov	r13, r31
    24b8:	f0 2d       	mov	r31, r0
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
    24ba:	0f 2e       	mov	r0, r31
    24bc:	f0 e5       	ldi	r31, 0x50	; 80
    24be:	af 2e       	mov	r10, r31
    24c0:	f1 e0       	ldi	r31, 0x01	; 1
    24c2:	bf 2e       	mov	r11, r31
    24c4:	f0 2d       	mov	r31, r0
    24c6:	0f 2e       	mov	r0, r31
    24c8:	f2 e5       	ldi	r31, 0x52	; 82
    24ca:	8f 2e       	mov	r8, r31
    24cc:	f1 e0       	ldi	r31, 0x01	; 1
    24ce:	9f 2e       	mov	r9, r31
    24d0:	f0 2d       	mov	r31, r0
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    24d2:	c0 91 4e 01 	lds	r28, 0x014E
    24d6:	d0 91 4f 01 	lds	r29, 0x014F
    24da:	c7 01       	movw	r24, r14
    24dc:	0e 94 43 07 	call	0xe86	; 0xe86 <dequeue>
    24e0:	8c 01       	movw	r16, r24
    24e2:	9b 83       	std	Y+3, r25	; 0x03
    24e4:	8a 83       	std	Y+2, r24	; 0x02
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    24e6:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    24e8:	fc 01       	movw	r30, r24
    24ea:	64 85       	ldd	r22, Z+12	; 0x0c
    24ec:	75 85       	ldd	r23, Z+13	; 0x0d
    24ee:	46 85       	ldd	r20, Z+14	; 0x0e
    24f0:	57 85       	ldd	r21, Z+15	; 0x0f
    24f2:	82 85       	ldd	r24, Z+10	; 0x0a
    24f4:	93 85       	ldd	r25, Z+11	; 0x0b
    24f6:	0e 94 b4 11 	call	0x2368	; 0x2368 <sync>
        DISABLE(status);
    24fa:	8f b7       	in	r24, 0x3f	; 63
    24fc:	f8 94       	cli
        insert(this, &msgPool);
    24fe:	c8 01       	movw	r24, r16
    2500:	b6 01       	movw	r22, r12
    2502:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <insert>
       
        oldMsg = activeStack->next->msg;
    2506:	e0 91 50 01 	lds	r30, 0x0150
    250a:	f0 91 51 01 	lds	r31, 0x0151
    250e:	01 90       	ld	r0, Z+
    2510:	f0 81       	ld	r31, Z
    2512:	e0 2d       	mov	r30, r0
    2514:	a2 81       	ldd	r26, Z+2	; 0x02
    2516:	b3 81       	ldd	r27, Z+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    2518:	e0 91 76 01 	lds	r30, 0x0176
    251c:	f0 91 77 01 	lds	r31, 0x0177
    2520:	30 97       	sbiw	r30, 0x00	; 0
    2522:	b1 f0       	breq	.+44     	; 0x2550 <run+0xae>
    2524:	10 97       	sbiw	r26, 0x00	; 0
    2526:	a9 f2       	breq	.-86     	; 0x24d2 <run+0x30>
    2528:	46 81       	ldd	r20, Z+6	; 0x06
    252a:	57 81       	ldd	r21, Z+7	; 0x07
    252c:	60 85       	ldd	r22, Z+8	; 0x08
    252e:	71 85       	ldd	r23, Z+9	; 0x09
    2530:	16 96       	adiw	r26, 0x06	; 6
    2532:	8d 91       	ld	r24, X+
    2534:	9d 91       	ld	r25, X+
    2536:	0d 90       	ld	r0, X+
    2538:	bc 91       	ld	r27, X
    253a:	a0 2d       	mov	r26, r0
    253c:	48 1b       	sub	r20, r24
    253e:	59 0b       	sbc	r21, r25
    2540:	6a 0b       	sbc	r22, r26
    2542:	7b 0b       	sbc	r23, r27
    2544:	14 16       	cp	r1, r20
    2546:	15 06       	cpc	r1, r21
    2548:	16 06       	cpc	r1, r22
    254a:	17 06       	cpc	r1, r23
    254c:	0c f0       	brlt	.+2      	; 0x2550 <run+0xae>
    254e:	c1 cf       	rjmp	.-126    	; 0x24d2 <run+0x30>
            Thread t;
            push(pop(&activeStack), &threadPool);
    2550:	c5 01       	movw	r24, r10
    2552:	0e 94 70 07 	call	0xee0	; 0xee0 <pop>
    2556:	b4 01       	movw	r22, r8
    2558:	0e 94 66 07 	call	0xecc	; 0xecc <push>
            t = activeStack;  // can't be NULL, may be &thread0
    255c:	a0 91 50 01 	lds	r26, 0x0150
    2560:	b0 91 51 01 	lds	r27, 0x0151
            while (t->waitsFor) 
    2564:	14 96       	adiw	r26, 0x04	; 4
    2566:	ed 91       	ld	r30, X+
    2568:	fc 91       	ld	r31, X
    256a:	15 97       	sbiw	r26, 0x05	; 5
    256c:	30 97       	sbiw	r30, 0x00	; 0
    256e:	41 f0       	breq	.+16     	; 0x2580 <run+0xde>
	            t = t->waitsFor->ownedBy;
    2570:	a0 81       	ld	r26, Z
    2572:	b1 81       	ldd	r27, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    2574:	14 96       	adiw	r26, 0x04	; 4
    2576:	ed 91       	ld	r30, X+
    2578:	fc 91       	ld	r31, X
    257a:	15 97       	sbiw	r26, 0x05	; 5
    257c:	30 97       	sbiw	r30, 0x00	; 0
    257e:	c1 f7       	brne	.-16     	; 0x2570 <run+0xce>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 d3 05 	call	0xba6	; 0xba6 <dispatch>
    2586:	a5 cf       	rjmp	.-182    	; 0x24d2 <run+0x30>

00002588 <ABORT>:
    }
    ENABLE(status);
    return result;
}

void ABORT(Msg m) {
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	ec 01       	movw	r28, r24
    char status;
    DISABLE(status);
    2590:	1f b7       	in	r17, 0x3f	; 63
    2592:	10 78       	andi	r17, 0x80	; 128
    2594:	f8 94       	cli
    if (remove(m, &timerQ) || remove(m, &msgQ))
    2596:	64 e7       	ldi	r22, 0x74	; 116
    2598:	71 e0       	ldi	r23, 0x01	; 1
    259a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <remove>
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	39 f4       	brne	.+14     	; 0x25b0 <ABORT+0x28>
    25a2:	ce 01       	movw	r24, r28
    25a4:	66 e7       	ldi	r22, 0x76	; 118
    25a6:	71 e0       	ldi	r23, 0x01	; 1
    25a8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <remove>
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	31 f0       	breq	.+12     	; 0x25bc <ABORT+0x34>
        insert(m, &msgPool);
    25b0:	ce 01       	movw	r24, r28
    25b2:	64 e5       	ldi	r22, 0x54	; 84
    25b4:	71 e0       	ldi	r23, 0x01	; 1
    25b6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <insert>
    25ba:	26 c0       	rjmp	.+76     	; 0x2608 <ABORT+0x80>
    else {
        Thread t = activeStack;
    25bc:	e0 91 50 01 	lds	r30, 0x0150
    25c0:	f0 91 51 01 	lds	r31, 0x0151
        while (t) {
    25c4:	30 97       	sbiw	r30, 0x00	; 0
    25c6:	01 f1       	breq	.+64     	; 0x2608 <ABORT+0x80>
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
    25c8:	40 91 4e 01 	lds	r20, 0x014E
    25cc:	50 91 4f 01 	lds	r21, 0x014F
    25d0:	e4 17       	cp	r30, r20
    25d2:	f5 07       	cpc	r31, r21
    25d4:	a1 f0       	breq	.+40     	; 0x25fe <ABORT+0x76>
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	8c 17       	cp	r24, r28
    25dc:	9d 07       	cpc	r25, r29
    25de:	79 f4       	brne	.+30     	; 0x25fe <ABORT+0x76>
    25e0:	84 81       	ldd	r24, Z+4	; 0x04
    25e2:	95 81       	ldd	r25, Z+5	; 0x05
    25e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    25e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    25e8:	82 17       	cp	r24, r18
    25ea:	93 07       	cpc	r25, r19
    25ec:	41 f4       	brne	.+16     	; 0x25fe <ABORT+0x76>
	            t->msg = NULL;
    25ee:	13 82       	std	Z+3, r1	; 0x03
    25f0:	12 82       	std	Z+2, r1	; 0x02
	            insert(m, &msgPool);
    25f2:	ce 01       	movw	r24, r28
    25f4:	64 e5       	ldi	r22, 0x54	; 84
    25f6:	71 e0       	ldi	r23, 0x01	; 1
    25f8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <insert>
	            break;
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <ABORT+0x80>
            }
            t = t->next;
    25fe:	01 90       	ld	r0, Z+
    2600:	f0 81       	ld	r31, Z
    2602:	e0 2d       	mov	r30, r0
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
        while (t) {
    2604:	30 97       	sbiw	r30, 0x00	; 0
    2606:	21 f7       	brne	.-56     	; 0x25d0 <ABORT+0x48>
	            break;
            }
            t = t->next;
        }
    }
    ENABLE(status);
    2608:	11 23       	and	r17, r17
    260a:	09 f0       	breq	.+2      	; 0x260e <ABORT+0x86>
    260c:	78 94       	sei
}
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	08 95       	ret

00002616 <T_RESET>:

void T_RESET(Timer *t) {
    t->accum = STATUS() ? current->msg->baseline : timestamp;
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	07 fe       	sbrs	r0, 7
    261a:	0c c0       	rjmp	.+24     	; 0x2634 <T_RESET+0x1e>
    261c:	e0 91 4e 01 	lds	r30, 0x014E
    2620:	f0 91 4f 01 	lds	r31, 0x014F
    2624:	02 80       	ldd	r0, Z+2	; 0x02
    2626:	f3 81       	ldd	r31, Z+3	; 0x03
    2628:	e0 2d       	mov	r30, r0
    262a:	42 81       	ldd	r20, Z+2	; 0x02
    262c:	53 81       	ldd	r21, Z+3	; 0x03
    262e:	64 81       	ldd	r22, Z+4	; 0x04
    2630:	75 81       	ldd	r23, Z+5	; 0x05
    2632:	08 c0       	rjmp	.+16     	; 0x2644 <T_RESET+0x2e>
    2634:	40 91 70 01 	lds	r20, 0x0170
    2638:	50 91 71 01 	lds	r21, 0x0171
    263c:	60 91 72 01 	lds	r22, 0x0172
    2640:	70 91 73 01 	lds	r23, 0x0173
    2644:	fc 01       	movw	r30, r24
    2646:	40 83       	st	Z, r20
    2648:	51 83       	std	Z+1, r21	; 0x01
    264a:	62 83       	std	Z+2, r22	; 0x02
    264c:	73 83       	std	Z+3, r23	; 0x03
}
    264e:	08 95       	ret

00002650 <T_SAMPLE>:

Time T_SAMPLE(Timer *t) {
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	07 fe       	sbrs	r0, 7
    2658:	0c c0       	rjmp	.+24     	; 0x2672 <T_SAMPLE+0x22>
    265a:	e0 91 4e 01 	lds	r30, 0x014E
    265e:	f0 91 4f 01 	lds	r31, 0x014F
    2662:	02 80       	ldd	r0, Z+2	; 0x02
    2664:	f3 81       	ldd	r31, Z+3	; 0x03
    2666:	e0 2d       	mov	r30, r0
    2668:	02 81       	ldd	r16, Z+2	; 0x02
    266a:	13 81       	ldd	r17, Z+3	; 0x03
    266c:	24 81       	ldd	r18, Z+4	; 0x04
    266e:	35 81       	ldd	r19, Z+5	; 0x05
    2670:	08 c0       	rjmp	.+16     	; 0x2682 <T_SAMPLE+0x32>
    2672:	00 91 70 01 	lds	r16, 0x0170
    2676:	10 91 71 01 	lds	r17, 0x0171
    267a:	20 91 72 01 	lds	r18, 0x0172
    267e:	30 91 73 01 	lds	r19, 0x0173
    2682:	fc 01       	movw	r30, r24
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	a2 81       	ldd	r26, Z+2	; 0x02
    268a:	b3 81       	ldd	r27, Z+3	; 0x03
    268c:	08 1b       	sub	r16, r24
    268e:	19 0b       	sbc	r17, r25
    2690:	2a 0b       	sbc	r18, r26
    2692:	3b 0b       	sbc	r19, r27
}
    2694:	60 2f       	mov	r22, r16
    2696:	71 2f       	mov	r23, r17
    2698:	82 2f       	mov	r24, r18
    269a:	93 2f       	mov	r25, r19
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	08 95       	ret

000026a2 <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    char status;
    Time now;
    DISABLE(status);
    26a6:	4f b7       	in	r20, 0x3f	; 63
    26a8:	40 78       	andi	r20, 0x80	; 128
    26aa:	f8 94       	cli
    TIMERGET(now);
    26ac:	00 91 6e 01 	lds	r16, 0x016E
    26b0:	10 91 6f 01 	lds	r17, 0x016F
    26b4:	80 91 84 00 	lds	r24, 0x0084
    26b8:	90 91 85 00 	lds	r25, 0x0085
    26bc:	b0 99       	sbic	0x16, 0	; 22
    26be:	0e c0       	rjmp	.+28     	; 0x26dc <CURRENT_OFFSET+0x3a>
    26c0:	22 27       	eor	r18, r18
    26c2:	17 fd       	sbrc	r17, 7
    26c4:	20 95       	com	r18
    26c6:	32 2f       	mov	r19, r18
    26c8:	98 01       	movw	r18, r16
    26ca:	11 27       	eor	r17, r17
    26cc:	00 27       	eor	r16, r16
    26ce:	a0 e0       	ldi	r26, 0x00	; 0
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	08 2b       	or	r16, r24
    26d4:	19 2b       	or	r17, r25
    26d6:	2a 2b       	or	r18, r26
    26d8:	3b 2b       	or	r19, r27
    26da:	13 c0       	rjmp	.+38     	; 0x2702 <CURRENT_OFFSET+0x60>
    26dc:	80 91 84 00 	lds	r24, 0x0084
    26e0:	90 91 85 00 	lds	r25, 0x0085
    26e4:	0f 5f       	subi	r16, 0xFF	; 255
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	22 27       	eor	r18, r18
    26ea:	17 fd       	sbrc	r17, 7
    26ec:	20 95       	com	r18
    26ee:	32 2f       	mov	r19, r18
    26f0:	98 01       	movw	r18, r16
    26f2:	11 27       	eor	r17, r17
    26f4:	00 27       	eor	r16, r16
    26f6:	a0 e0       	ldi	r26, 0x00	; 0
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	08 2b       	or	r16, r24
    26fc:	19 2b       	or	r17, r25
    26fe:	2a 2b       	or	r18, r26
    2700:	3b 2b       	or	r19, r27
    ENABLE(status);
    2702:	44 23       	and	r20, r20
    2704:	69 f0       	breq	.+26     	; 0x2720 <CURRENT_OFFSET+0x7e>
    2706:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
    2708:	e0 91 4e 01 	lds	r30, 0x014E
    270c:	f0 91 4f 01 	lds	r31, 0x014F
    2710:	02 80       	ldd	r0, Z+2	; 0x02
    2712:	f3 81       	ldd	r31, Z+3	; 0x03
    2714:	e0 2d       	mov	r30, r0
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	a4 81       	ldd	r26, Z+4	; 0x04
    271c:	b5 81       	ldd	r27, Z+5	; 0x05
    271e:	08 c0       	rjmp	.+16     	; 0x2730 <CURRENT_OFFSET+0x8e>
    2720:	80 91 70 01 	lds	r24, 0x0170
    2724:	90 91 71 01 	lds	r25, 0x0171
    2728:	a0 91 72 01 	lds	r26, 0x0172
    272c:	b0 91 73 01 	lds	r27, 0x0173
    2730:	08 1b       	sub	r16, r24
    2732:	19 0b       	sbc	r17, r25
    2734:	2a 0b       	sbc	r18, r26
    2736:	3b 0b       	sbc	r19, r27
}
    2738:	60 2f       	mov	r22, r16
    273a:	71 2f       	mov	r23, r17
    273c:	82 2f       	mov	r24, r18
    273e:	93 2f       	mov	r25, r19
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	08 95       	ret

00002746 <install>:
    DUMP("\n\r");
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2746:	42 31       	cpi	r20, 0x12	; 18
    2748:	b8 f4       	brcc	.+46     	; 0x2778 <install+0x32>
        char status;
        DISABLE(status);
    274a:	af b7       	in	r26, 0x3f	; 63
    274c:	f8 94       	cli
        otable[i] = obj;
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	44 0f       	add	r20, r20
    2752:	55 1f       	adc	r21, r21
    2754:	fa 01       	movw	r30, r20
    2756:	e8 58       	subi	r30, 0x88	; 136
    2758:	fe 4f       	sbci	r31, 0xFE	; 254
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
        mtable[i] = m;
    275e:	40 5f       	subi	r20, 0xF0	; 240
    2760:	5d 4f       	sbci	r21, 0xFD	; 253
    2762:	fa 01       	movw	r30, r20
    2764:	71 83       	std	Z+1, r23	; 0x01
    2766:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2768:	21 e0       	ldi	r18, 0x01	; 1
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	fc 01       	movw	r30, r24
    276e:	33 83       	std	Z+3, r19	; 0x03
    2770:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2772:	aa 23       	and	r26, r26
    2774:	0c f4       	brge	.+2      	; 0x2778 <install+0x32>
    2776:	78 94       	sei
    2778:	08 95       	ret

0000277a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    277a:	8c 01       	movw	r16, r24
    277c:	eb 01       	movw	r28, r22
    277e:	7a 01       	movw	r14, r20
    char status;
    DISABLE(status);
    2780:	8f b7       	in	r24, 0x3f	; 63
    2782:	f8 94       	cli
    initialize();
    2784:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <initialize>
    ENABLE(1);
    2788:	78 94       	sei
    if (m != NULL)
    278a:	20 97       	sbiw	r28, 0x00	; 0
    278c:	21 f0       	breq	.+8      	; 0x2796 <tinytimber+0x1c>
        m(obj, arg);
    278e:	c8 01       	movw	r24, r16
    2790:	b7 01       	movw	r22, r14
    2792:	fe 01       	movw	r30, r28
    2794:	09 95       	icall
    DISABLE(status);
    2796:	8f b7       	in	r24, 0x3f	; 63
    2798:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    279a:	0e 94 7c 07 	call	0xef8	; 0xef8 <schedule>
    ENABLE(1);
    279e:	78 94       	sei
    while (1) {
        SLEEP();
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	83 bf       	out	0x33, r24	; 51
    27a4:	88 95       	sleep
    27a6:	fd cf       	rjmp	.-6      	; 0x27a2 <tinytimber+0x28>

000027a8 <__fixsfsi>:
    27a8:	04 d0       	rcall	.+8      	; 0x27b2 <__fixunssfsi>
    27aa:	68 94       	set
    27ac:	b1 11       	cpse	r27, r1
    27ae:	8d c0       	rjmp	.+282    	; 0x28ca <__fp_szero>
    27b0:	08 95       	ret

000027b2 <__fixunssfsi>:
    27b2:	70 d0       	rcall	.+224    	; 0x2894 <__fp_splitA>
    27b4:	88 f0       	brcs	.+34     	; 0x27d8 <__fixunssfsi+0x26>
    27b6:	9f 57       	subi	r25, 0x7F	; 127
    27b8:	90 f0       	brcs	.+36     	; 0x27de <__fixunssfsi+0x2c>
    27ba:	b9 2f       	mov	r27, r25
    27bc:	99 27       	eor	r25, r25
    27be:	b7 51       	subi	r27, 0x17	; 23
    27c0:	a0 f0       	brcs	.+40     	; 0x27ea <__fixunssfsi+0x38>
    27c2:	d1 f0       	breq	.+52     	; 0x27f8 <__fixunssfsi+0x46>
    27c4:	66 0f       	add	r22, r22
    27c6:	77 1f       	adc	r23, r23
    27c8:	88 1f       	adc	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	1a f0       	brmi	.+6      	; 0x27d4 <__fixunssfsi+0x22>
    27ce:	ba 95       	dec	r27
    27d0:	c9 f7       	brne	.-14     	; 0x27c4 <__fixunssfsi+0x12>
    27d2:	12 c0       	rjmp	.+36     	; 0x27f8 <__fixunssfsi+0x46>
    27d4:	b1 30       	cpi	r27, 0x01	; 1
    27d6:	81 f0       	breq	.+32     	; 0x27f8 <__fixunssfsi+0x46>
    27d8:	77 d0       	rcall	.+238    	; 0x28c8 <__fp_zero>
    27da:	b1 e0       	ldi	r27, 0x01	; 1
    27dc:	08 95       	ret
    27de:	74 c0       	rjmp	.+232    	; 0x28c8 <__fp_zero>
    27e0:	67 2f       	mov	r22, r23
    27e2:	78 2f       	mov	r23, r24
    27e4:	88 27       	eor	r24, r24
    27e6:	b8 5f       	subi	r27, 0xF8	; 248
    27e8:	39 f0       	breq	.+14     	; 0x27f8 <__fixunssfsi+0x46>
    27ea:	b9 3f       	cpi	r27, 0xF9	; 249
    27ec:	cc f3       	brlt	.-14     	; 0x27e0 <__fixunssfsi+0x2e>
    27ee:	86 95       	lsr	r24
    27f0:	77 95       	ror	r23
    27f2:	67 95       	ror	r22
    27f4:	b3 95       	inc	r27
    27f6:	d9 f7       	brne	.-10     	; 0x27ee <__fixunssfsi+0x3c>
    27f8:	3e f4       	brtc	.+14     	; 0x2808 <__fixunssfsi+0x56>
    27fa:	90 95       	com	r25
    27fc:	80 95       	com	r24
    27fe:	70 95       	com	r23
    2800:	61 95       	neg	r22
    2802:	7f 4f       	sbci	r23, 0xFF	; 255
    2804:	8f 4f       	sbci	r24, 0xFF	; 255
    2806:	9f 4f       	sbci	r25, 0xFF	; 255
    2808:	08 95       	ret

0000280a <__floatunsisf>:
    280a:	e8 94       	clt
    280c:	09 c0       	rjmp	.+18     	; 0x2820 <__floatsisf+0x12>

0000280e <__floatsisf>:
    280e:	97 fb       	bst	r25, 7
    2810:	3e f4       	brtc	.+14     	; 0x2820 <__floatsisf+0x12>
    2812:	90 95       	com	r25
    2814:	80 95       	com	r24
    2816:	70 95       	com	r23
    2818:	61 95       	neg	r22
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	8f 4f       	sbci	r24, 0xFF	; 255
    281e:	9f 4f       	sbci	r25, 0xFF	; 255
    2820:	99 23       	and	r25, r25
    2822:	a9 f0       	breq	.+42     	; 0x284e <__floatsisf+0x40>
    2824:	f9 2f       	mov	r31, r25
    2826:	96 e9       	ldi	r25, 0x96	; 150
    2828:	bb 27       	eor	r27, r27
    282a:	93 95       	inc	r25
    282c:	f6 95       	lsr	r31
    282e:	87 95       	ror	r24
    2830:	77 95       	ror	r23
    2832:	67 95       	ror	r22
    2834:	b7 95       	ror	r27
    2836:	f1 11       	cpse	r31, r1
    2838:	f8 cf       	rjmp	.-16     	; 0x282a <__floatsisf+0x1c>
    283a:	fa f4       	brpl	.+62     	; 0x287a <__floatsisf+0x6c>
    283c:	bb 0f       	add	r27, r27
    283e:	11 f4       	brne	.+4      	; 0x2844 <__floatsisf+0x36>
    2840:	60 ff       	sbrs	r22, 0
    2842:	1b c0       	rjmp	.+54     	; 0x287a <__floatsisf+0x6c>
    2844:	6f 5f       	subi	r22, 0xFF	; 255
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	8f 4f       	sbci	r24, 0xFF	; 255
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	16 c0       	rjmp	.+44     	; 0x287a <__floatsisf+0x6c>
    284e:	88 23       	and	r24, r24
    2850:	11 f0       	breq	.+4      	; 0x2856 <__floatsisf+0x48>
    2852:	96 e9       	ldi	r25, 0x96	; 150
    2854:	11 c0       	rjmp	.+34     	; 0x2878 <__floatsisf+0x6a>
    2856:	77 23       	and	r23, r23
    2858:	21 f0       	breq	.+8      	; 0x2862 <__floatsisf+0x54>
    285a:	9e e8       	ldi	r25, 0x8E	; 142
    285c:	87 2f       	mov	r24, r23
    285e:	76 2f       	mov	r23, r22
    2860:	05 c0       	rjmp	.+10     	; 0x286c <__floatsisf+0x5e>
    2862:	66 23       	and	r22, r22
    2864:	71 f0       	breq	.+28     	; 0x2882 <__floatsisf+0x74>
    2866:	96 e8       	ldi	r25, 0x86	; 134
    2868:	86 2f       	mov	r24, r22
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	2a f0       	brmi	.+10     	; 0x287a <__floatsisf+0x6c>
    2870:	9a 95       	dec	r25
    2872:	66 0f       	add	r22, r22
    2874:	77 1f       	adc	r23, r23
    2876:	88 1f       	adc	r24, r24
    2878:	da f7       	brpl	.-10     	; 0x2870 <__floatsisf+0x62>
    287a:	88 0f       	add	r24, r24
    287c:	96 95       	lsr	r25
    287e:	87 95       	ror	r24
    2880:	97 f9       	bld	r25, 7
    2882:	08 95       	ret

00002884 <__fp_split3>:
    2884:	57 fd       	sbrc	r21, 7
    2886:	90 58       	subi	r25, 0x80	; 128
    2888:	44 0f       	add	r20, r20
    288a:	55 1f       	adc	r21, r21
    288c:	59 f0       	breq	.+22     	; 0x28a4 <__fp_splitA+0x10>
    288e:	5f 3f       	cpi	r21, 0xFF	; 255
    2890:	71 f0       	breq	.+28     	; 0x28ae <__fp_splitA+0x1a>
    2892:	47 95       	ror	r20

00002894 <__fp_splitA>:
    2894:	88 0f       	add	r24, r24
    2896:	97 fb       	bst	r25, 7
    2898:	99 1f       	adc	r25, r25
    289a:	61 f0       	breq	.+24     	; 0x28b4 <__fp_splitA+0x20>
    289c:	9f 3f       	cpi	r25, 0xFF	; 255
    289e:	79 f0       	breq	.+30     	; 0x28be <__fp_splitA+0x2a>
    28a0:	87 95       	ror	r24
    28a2:	08 95       	ret
    28a4:	12 16       	cp	r1, r18
    28a6:	13 06       	cpc	r1, r19
    28a8:	14 06       	cpc	r1, r20
    28aa:	55 1f       	adc	r21, r21
    28ac:	f2 cf       	rjmp	.-28     	; 0x2892 <__fp_split3+0xe>
    28ae:	46 95       	lsr	r20
    28b0:	f1 df       	rcall	.-30     	; 0x2894 <__fp_splitA>
    28b2:	08 c0       	rjmp	.+16     	; 0x28c4 <__fp_splitA+0x30>
    28b4:	16 16       	cp	r1, r22
    28b6:	17 06       	cpc	r1, r23
    28b8:	18 06       	cpc	r1, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	f1 cf       	rjmp	.-30     	; 0x28a0 <__fp_splitA+0xc>
    28be:	86 95       	lsr	r24
    28c0:	71 05       	cpc	r23, r1
    28c2:	61 05       	cpc	r22, r1
    28c4:	08 94       	sec
    28c6:	08 95       	ret

000028c8 <__fp_zero>:
    28c8:	e8 94       	clt

000028ca <__fp_szero>:
    28ca:	bb 27       	eor	r27, r27
    28cc:	66 27       	eor	r22, r22
    28ce:	77 27       	eor	r23, r23
    28d0:	cb 01       	movw	r24, r22
    28d2:	97 f9       	bld	r25, 7
    28d4:	08 95       	ret
    28d6:	11 f4       	brne	.+4      	; 0x28dc <__fp_szero+0x12>
    28d8:	0e f4       	brtc	.+2      	; 0x28dc <__fp_szero+0x12>
    28da:	4d c0       	rjmp	.+154    	; 0x2976 <__fp_nan>
    28dc:	3e c0       	rjmp	.+124    	; 0x295a <__fp_mpack>

000028de <sqrt>:
    28de:	da df       	rcall	.-76     	; 0x2894 <__fp_splitA>
    28e0:	d0 f3       	brcs	.-12     	; 0x28d6 <__fp_szero+0xc>
    28e2:	99 23       	and	r25, r25
    28e4:	d9 f3       	breq	.-10     	; 0x28dc <__fp_szero+0x12>
    28e6:	ce f3       	brts	.-14     	; 0x28da <__fp_szero+0x10>
    28e8:	9f 57       	subi	r25, 0x7F	; 127
    28ea:	55 0b       	sbc	r21, r21
    28ec:	87 ff       	sbrs	r24, 7
    28ee:	46 d0       	rcall	.+140    	; 0x297c <__fp_norm2>
    28f0:	00 24       	eor	r0, r0
    28f2:	a0 e6       	ldi	r26, 0x60	; 96
    28f4:	40 ea       	ldi	r20, 0xA0	; 160
    28f6:	90 01       	movw	r18, r0
    28f8:	80 58       	subi	r24, 0x80	; 128
    28fa:	56 95       	lsr	r21
    28fc:	97 95       	ror	r25
    28fe:	28 f4       	brcc	.+10     	; 0x290a <sqrt+0x2c>
    2900:	80 5c       	subi	r24, 0xC0	; 192
    2902:	66 0f       	add	r22, r22
    2904:	77 1f       	adc	r23, r23
    2906:	88 1f       	adc	r24, r24
    2908:	20 f0       	brcs	.+8      	; 0x2912 <sqrt+0x34>
    290a:	26 17       	cp	r18, r22
    290c:	37 07       	cpc	r19, r23
    290e:	48 07       	cpc	r20, r24
    2910:	30 f4       	brcc	.+12     	; 0x291e <sqrt+0x40>
    2912:	62 1b       	sub	r22, r18
    2914:	73 0b       	sbc	r23, r19
    2916:	84 0b       	sbc	r24, r20
    2918:	20 29       	or	r18, r0
    291a:	31 29       	or	r19, r1
    291c:	4a 2b       	or	r20, r26
    291e:	a6 95       	lsr	r26
    2920:	17 94       	ror	r1
    2922:	07 94       	ror	r0
    2924:	20 25       	eor	r18, r0
    2926:	31 25       	eor	r19, r1
    2928:	4a 27       	eor	r20, r26
    292a:	58 f7       	brcc	.-42     	; 0x2902 <sqrt+0x24>
    292c:	66 0f       	add	r22, r22
    292e:	77 1f       	adc	r23, r23
    2930:	88 1f       	adc	r24, r24
    2932:	20 f0       	brcs	.+8      	; 0x293c <sqrt+0x5e>
    2934:	26 17       	cp	r18, r22
    2936:	37 07       	cpc	r19, r23
    2938:	48 07       	cpc	r20, r24
    293a:	30 f4       	brcc	.+12     	; 0x2948 <sqrt+0x6a>
    293c:	62 0b       	sbc	r22, r18
    293e:	73 0b       	sbc	r23, r19
    2940:	84 0b       	sbc	r24, r20
    2942:	20 0d       	add	r18, r0
    2944:	31 1d       	adc	r19, r1
    2946:	41 1d       	adc	r20, r1
    2948:	a0 95       	com	r26
    294a:	81 f7       	brne	.-32     	; 0x292c <sqrt+0x4e>
    294c:	b9 01       	movw	r22, r18
    294e:	84 2f       	mov	r24, r20
    2950:	91 58       	subi	r25, 0x81	; 129
    2952:	88 0f       	add	r24, r24
    2954:	96 95       	lsr	r25
    2956:	87 95       	ror	r24
    2958:	08 95       	ret

0000295a <__fp_mpack>:
    295a:	9f 3f       	cpi	r25, 0xFF	; 255
    295c:	31 f0       	breq	.+12     	; 0x296a <__fp_mpack_finite+0xc>

0000295e <__fp_mpack_finite>:
    295e:	91 50       	subi	r25, 0x01	; 1
    2960:	20 f4       	brcc	.+8      	; 0x296a <__fp_mpack_finite+0xc>
    2962:	87 95       	ror	r24
    2964:	77 95       	ror	r23
    2966:	67 95       	ror	r22
    2968:	b7 95       	ror	r27
    296a:	88 0f       	add	r24, r24
    296c:	91 1d       	adc	r25, r1
    296e:	96 95       	lsr	r25
    2970:	87 95       	ror	r24
    2972:	97 f9       	bld	r25, 7
    2974:	08 95       	ret

00002976 <__fp_nan>:
    2976:	9f ef       	ldi	r25, 0xFF	; 255
    2978:	80 ec       	ldi	r24, 0xC0	; 192
    297a:	08 95       	ret

0000297c <__fp_norm2>:
    297c:	91 50       	subi	r25, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	66 0f       	add	r22, r22
    2982:	77 1f       	adc	r23, r23
    2984:	88 1f       	adc	r24, r24
    2986:	d2 f7       	brpl	.-12     	; 0x297c <__fp_norm2>
    2988:	08 95       	ret

0000298a <__mulsi3>:
    298a:	62 9f       	mul	r22, r18
    298c:	d0 01       	movw	r26, r0
    298e:	73 9f       	mul	r23, r19
    2990:	f0 01       	movw	r30, r0
    2992:	82 9f       	mul	r24, r18
    2994:	e0 0d       	add	r30, r0
    2996:	f1 1d       	adc	r31, r1
    2998:	64 9f       	mul	r22, r20
    299a:	e0 0d       	add	r30, r0
    299c:	f1 1d       	adc	r31, r1
    299e:	92 9f       	mul	r25, r18
    29a0:	f0 0d       	add	r31, r0
    29a2:	83 9f       	mul	r24, r19
    29a4:	f0 0d       	add	r31, r0
    29a6:	74 9f       	mul	r23, r20
    29a8:	f0 0d       	add	r31, r0
    29aa:	65 9f       	mul	r22, r21
    29ac:	f0 0d       	add	r31, r0
    29ae:	99 27       	eor	r25, r25
    29b0:	72 9f       	mul	r23, r18
    29b2:	b0 0d       	add	r27, r0
    29b4:	e1 1d       	adc	r30, r1
    29b6:	f9 1f       	adc	r31, r25
    29b8:	63 9f       	mul	r22, r19
    29ba:	b0 0d       	add	r27, r0
    29bc:	e1 1d       	adc	r30, r1
    29be:	f9 1f       	adc	r31, r25
    29c0:	bd 01       	movw	r22, r26
    29c2:	cf 01       	movw	r24, r30
    29c4:	11 24       	eor	r1, r1
    29c6:	08 95       	ret

000029c8 <__divmodhi4>:
    29c8:	97 fb       	bst	r25, 7
    29ca:	09 2e       	mov	r0, r25
    29cc:	07 26       	eor	r0, r23
    29ce:	0a d0       	rcall	.+20     	; 0x29e4 <__divmodhi4_neg1>
    29d0:	77 fd       	sbrc	r23, 7
    29d2:	04 d0       	rcall	.+8      	; 0x29dc <__divmodhi4_neg2>
    29d4:	27 d0       	rcall	.+78     	; 0x2a24 <__udivmodhi4>
    29d6:	06 d0       	rcall	.+12     	; 0x29e4 <__divmodhi4_neg1>
    29d8:	00 20       	and	r0, r0
    29da:	1a f4       	brpl	.+6      	; 0x29e2 <__divmodhi4_exit>

000029dc <__divmodhi4_neg2>:
    29dc:	70 95       	com	r23
    29de:	61 95       	neg	r22
    29e0:	7f 4f       	sbci	r23, 0xFF	; 255

000029e2 <__divmodhi4_exit>:
    29e2:	08 95       	ret

000029e4 <__divmodhi4_neg1>:
    29e4:	f6 f7       	brtc	.-4      	; 0x29e2 <__divmodhi4_exit>
    29e6:	90 95       	com	r25
    29e8:	81 95       	neg	r24
    29ea:	9f 4f       	sbci	r25, 0xFF	; 255
    29ec:	08 95       	ret

000029ee <__divmodsi4>:
    29ee:	97 fb       	bst	r25, 7
    29f0:	09 2e       	mov	r0, r25
    29f2:	05 26       	eor	r0, r21
    29f4:	0e d0       	rcall	.+28     	; 0x2a12 <__divmodsi4_neg1>
    29f6:	57 fd       	sbrc	r21, 7
    29f8:	04 d0       	rcall	.+8      	; 0x2a02 <__divmodsi4_neg2>
    29fa:	28 d0       	rcall	.+80     	; 0x2a4c <__udivmodsi4>
    29fc:	0a d0       	rcall	.+20     	; 0x2a12 <__divmodsi4_neg1>
    29fe:	00 1c       	adc	r0, r0
    2a00:	38 f4       	brcc	.+14     	; 0x2a10 <__divmodsi4_exit>

00002a02 <__divmodsi4_neg2>:
    2a02:	50 95       	com	r21
    2a04:	40 95       	com	r20
    2a06:	30 95       	com	r19
    2a08:	21 95       	neg	r18
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a0e:	5f 4f       	sbci	r21, 0xFF	; 255

00002a10 <__divmodsi4_exit>:
    2a10:	08 95       	ret

00002a12 <__divmodsi4_neg1>:
    2a12:	f6 f7       	brtc	.-4      	; 0x2a10 <__divmodsi4_exit>
    2a14:	90 95       	com	r25
    2a16:	80 95       	com	r24
    2a18:	70 95       	com	r23
    2a1a:	61 95       	neg	r22
    2a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	08 95       	ret

00002a24 <__udivmodhi4>:
    2a24:	aa 1b       	sub	r26, r26
    2a26:	bb 1b       	sub	r27, r27
    2a28:	51 e1       	ldi	r21, 0x11	; 17
    2a2a:	07 c0       	rjmp	.+14     	; 0x2a3a <__udivmodhi4_ep>

00002a2c <__udivmodhi4_loop>:
    2a2c:	aa 1f       	adc	r26, r26
    2a2e:	bb 1f       	adc	r27, r27
    2a30:	a6 17       	cp	r26, r22
    2a32:	b7 07       	cpc	r27, r23
    2a34:	10 f0       	brcs	.+4      	; 0x2a3a <__udivmodhi4_ep>
    2a36:	a6 1b       	sub	r26, r22
    2a38:	b7 0b       	sbc	r27, r23

00002a3a <__udivmodhi4_ep>:
    2a3a:	88 1f       	adc	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	5a 95       	dec	r21
    2a40:	a9 f7       	brne	.-22     	; 0x2a2c <__udivmodhi4_loop>
    2a42:	80 95       	com	r24
    2a44:	90 95       	com	r25
    2a46:	bc 01       	movw	r22, r24
    2a48:	cd 01       	movw	r24, r26
    2a4a:	08 95       	ret

00002a4c <__udivmodsi4>:
    2a4c:	a1 e2       	ldi	r26, 0x21	; 33
    2a4e:	1a 2e       	mov	r1, r26
    2a50:	aa 1b       	sub	r26, r26
    2a52:	bb 1b       	sub	r27, r27
    2a54:	fd 01       	movw	r30, r26
    2a56:	0d c0       	rjmp	.+26     	; 0x2a72 <__udivmodsi4_ep>

00002a58 <__udivmodsi4_loop>:
    2a58:	aa 1f       	adc	r26, r26
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	ee 1f       	adc	r30, r30
    2a5e:	ff 1f       	adc	r31, r31
    2a60:	a2 17       	cp	r26, r18
    2a62:	b3 07       	cpc	r27, r19
    2a64:	e4 07       	cpc	r30, r20
    2a66:	f5 07       	cpc	r31, r21
    2a68:	20 f0       	brcs	.+8      	; 0x2a72 <__udivmodsi4_ep>
    2a6a:	a2 1b       	sub	r26, r18
    2a6c:	b3 0b       	sbc	r27, r19
    2a6e:	e4 0b       	sbc	r30, r20
    2a70:	f5 0b       	sbc	r31, r21

00002a72 <__udivmodsi4_ep>:
    2a72:	66 1f       	adc	r22, r22
    2a74:	77 1f       	adc	r23, r23
    2a76:	88 1f       	adc	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	1a 94       	dec	r1
    2a7c:	69 f7       	brne	.-38     	; 0x2a58 <__udivmodsi4_loop>
    2a7e:	60 95       	com	r22
    2a80:	70 95       	com	r23
    2a82:	80 95       	com	r24
    2a84:	90 95       	com	r25
    2a86:	9b 01       	movw	r18, r22
    2a88:	ac 01       	movw	r20, r24
    2a8a:	bd 01       	movw	r22, r26
    2a8c:	cf 01       	movw	r24, r30
    2a8e:	08 95       	ret

00002a90 <setjmp>:
    2a90:	dc 01       	movw	r26, r24
    2a92:	2d 92       	st	X+, r2
    2a94:	3d 92       	st	X+, r3
    2a96:	4d 92       	st	X+, r4
    2a98:	5d 92       	st	X+, r5
    2a9a:	6d 92       	st	X+, r6
    2a9c:	7d 92       	st	X+, r7
    2a9e:	8d 92       	st	X+, r8
    2aa0:	9d 92       	st	X+, r9
    2aa2:	ad 92       	st	X+, r10
    2aa4:	bd 92       	st	X+, r11
    2aa6:	cd 92       	st	X+, r12
    2aa8:	dd 92       	st	X+, r13
    2aaa:	ed 92       	st	X+, r14
    2aac:	fd 92       	st	X+, r15
    2aae:	0d 93       	st	X+, r16
    2ab0:	1d 93       	st	X+, r17
    2ab2:	cd 93       	st	X+, r28
    2ab4:	dd 93       	st	X+, r29
    2ab6:	ff 91       	pop	r31
    2ab8:	ef 91       	pop	r30
    2aba:	8d b7       	in	r24, 0x3d	; 61
    2abc:	8d 93       	st	X+, r24
    2abe:	8e b7       	in	r24, 0x3e	; 62
    2ac0:	8d 93       	st	X+, r24
    2ac2:	8f b7       	in	r24, 0x3f	; 63
    2ac4:	8d 93       	st	X+, r24
    2ac6:	ed 93       	st	X+, r30
    2ac8:	fd 93       	st	X+, r31
    2aca:	88 27       	eor	r24, r24
    2acc:	99 27       	eor	r25, r25
    2ace:	09 94       	ijmp

00002ad0 <longjmp>:
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	81 1d       	adc	r24, r1
    2ada:	2d 90       	ld	r2, X+
    2adc:	3d 90       	ld	r3, X+
    2ade:	4d 90       	ld	r4, X+
    2ae0:	5d 90       	ld	r5, X+
    2ae2:	6d 90       	ld	r6, X+
    2ae4:	7d 90       	ld	r7, X+
    2ae6:	8d 90       	ld	r8, X+
    2ae8:	9d 90       	ld	r9, X+
    2aea:	ad 90       	ld	r10, X+
    2aec:	bd 90       	ld	r11, X+
    2aee:	cd 90       	ld	r12, X+
    2af0:	dd 90       	ld	r13, X+
    2af2:	ed 90       	ld	r14, X+
    2af4:	fd 90       	ld	r15, X+
    2af6:	0d 91       	ld	r16, X+
    2af8:	1d 91       	ld	r17, X+
    2afa:	cd 91       	ld	r28, X+
    2afc:	dd 91       	ld	r29, X+
    2afe:	ed 91       	ld	r30, X+
    2b00:	fd 91       	ld	r31, X+
    2b02:	0d 90       	ld	r0, X+
    2b04:	f8 94       	cli
    2b06:	fe bf       	out	0x3e, r31	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	ed bf       	out	0x3d, r30	; 61
    2b0c:	ed 91       	ld	r30, X+
    2b0e:	fd 91       	ld	r31, X+
    2b10:	09 94       	ijmp

00002b12 <_exit>:
    2b12:	f8 94       	cli

00002b14 <__stop_program>:
    2b14:	ff cf       	rjmp	.-2      	; 0x2b14 <__stop_program>

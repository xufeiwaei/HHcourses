
lab3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00002d72  00002e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  0080015c  0080015c  00002e62  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000045e  00000000  00000000  000043f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00004858  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022db  00000000  00000000  00004a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  00006cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f88  00000000  00000000  000076fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd0  00000000  00000000  00008688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000686  00000000  00000000  00009458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f41  00000000  00000000  00009ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000ca1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
       4:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_1>
       8:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__vector_2>
       c:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__vector_3>
      10:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__vector_4>
      14:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__vector_5>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__vector_7>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_9>
      28:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_10>
      2c:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_11>
      30:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_12>
      34:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_13>
      38:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__vector_14>
      3c:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__vector_15>
      40:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__vector_16>
      44:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_17>
      48:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_18>
      4c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_19>
      50:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_20>
      54:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_21>
      58:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_22>

0000005c <dur>:
      5c:	09 3d 09 3d 09 3d 09 3d 09 3d 84 1e 96 98 09 3d     .=.=.=.=.=.....=
      6c:	09 3d 09 3d 09 3d 09 3d 84 1e 96 98 09 3d 09 3d     .=.=.=.=.....=.=
      7c:	09 3d 09 3d 09 3d 84 1e 96 98 09 3d 09 3d 09 3d     .=.=.=.....=.=.=
      8c:	09 3d 09 3d 84 1e 96 98 09 3d 09 3d 09 3d 09 3d     .=.=.....=.=.=.=
      9c:	09 3d 84 1e 96 98 09 3d 09 3d 09 3d 09 3d 09 3d     .=.....=.=.=.=.=
      ac:	84 1e 96 98 2d 31 2d 31 1b b7 09 3d 1b b7 09 3d     ....-1-1...=...=
      bc:	09 3d 1b b7                                         .=..

000000c0 <freq>:
      c0:	5d 01 4a 01 4a 01 4a 01 4a 01 4a 01 4a 01 5d 01     ].J.J.J.J.J.J.].
      d0:	5d 01 5d 01 5d 01 88 01 5d 01 26 01 4a 01 4a 01     ].].]...].&.J.J.
      e0:	4a 01 4a 01 4a 01 4a 01 4a 01 5d 01 5d 01 5d 01     J.J.J.J.J.].].].
      f0:	5d 01 88 01 5d 01 26 01 88 01 88 01 88 01 88 01     ]...].&.........
     100:	b8 01 b8 01 b8 01 b8 01 b8 01 b8 01 b8 01 37 01     ..............7.
     110:	37 01 37 01 06 01 06 01 b8 01 b8 01 88 01 37 01     7.7...........7.
     120:	26 01 06 01                                         &...

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d4 e0       	ldi	r29, 0x04	; 4
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	11 e0       	ldi	r17, 0x01	; 1
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	e2 e7       	ldi	r30, 0x72	; 114
     138:	fd e2       	ldi	r31, 0x2D	; 45
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	ac 35       	cpi	r26, 0x5C	; 92
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	14 e0       	ldi	r17, 0x04	; 4
     148:	ac e5       	ldi	r26, 0x5C	; 92
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a7 3b       	cpi	r26, 0xB7	; 183
     152:	b1 07       	cpc	r27, r17
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
     15a:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <startup>:
Piezo piezo = initPiezo();
Sound sound = initSound(&piezo,0);
Melody melody = initMelody(&sound,0);
APP app = initAPP(&primeCal,&melody);

int startup(APP * self){
     162:	cf 92       	push	r12
     164:	df 92       	push	r13
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	ec 01       	movw	r28, r24
  ASYNC(self -> mel, playDiana,0);
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	cb 01       	movw	r24, r22
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	a9 01       	movw	r20, r18
     184:	0f 2e       	mov	r0, r31
     186:	f0 ed       	ldi	r31, 0xD0	; 208
     188:	ef 2e       	mov	r14, r31
     18a:	f4 e0       	ldi	r31, 0x04	; 4
     18c:	ff 2e       	mov	r15, r31
     18e:	f0 2d       	mov	r31, r0
     190:	cc 24       	eor	r12, r12
     192:	dd 24       	eor	r13, r13
     194:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
  ASYNC(self -> pctr, primes,0);
     198:	0c 81       	ldd	r16, Y+4	; 0x04
     19a:	1d 81       	ldd	r17, Y+5	; 0x05
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	cb 01       	movw	r24, r22
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	a9 01       	movw	r20, r18
     1a8:	0f 2e       	mov	r0, r31
     1aa:	f4 ee       	ldi	r31, 0xE4	; 228
     1ac:	ef 2e       	mov	r14, r31
     1ae:	f5 e0       	ldi	r31, 0x05	; 5
     1b0:	ff 2e       	mov	r15, r31
     1b2:	f0 2d       	mov	r31, r0
     1b4:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
}
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	ff 90       	pop	r15
     1c2:	ef 90       	pop	r14
     1c4:	df 90       	pop	r13
     1c6:	cf 90       	pop	r12
     1c8:	08 95       	ret

000001ca <main>:

int main()
{
	CONFLCD;
     1ca:	87 eb       	ldi	r24, 0xB7	; 183
     1cc:	80 93 e5 00 	sts	0x00E5, r24
     1d0:	80 e1       	ldi	r24, 0x10	; 16
     1d2:	80 93 e6 00 	sts	0x00E6, r24
     1d6:	8f e0       	ldi	r24, 0x0F	; 15
     1d8:	80 93 e7 00 	sts	0x00E7, r24
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	80 93 e4 00 	sts	0x00E4, r24
	CONFPIE;
     1e2:	80 e2       	ldi	r24, 0x20	; 32
     1e4:	84 b9       	out	0x04, r24	; 4
	return TINYTIMBER(&app,startup,0);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	61 eb       	ldi	r22, 0xB1	; 177
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	40 e0       	ldi	r20, 0x00	; 0
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <tinytimber>
     1f6:	08 95       	ret

000001f8 <writeChar>:
#include <math.h>
#include "TinyTimber.h"
#include "lcd.h"

void writeChar(char ch, int pos)
{
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
	int n1,n2,n3,n4;
	switch(ch)
     20c:	84 33       	cpi	r24, 0x34	; 52
     20e:	09 f4       	brne	.+2      	; 0x212 <writeChar+0x1a>
     210:	46 c0       	rjmp	.+140    	; 0x29e <writeChar+0xa6>
     212:	85 33       	cpi	r24, 0x35	; 53
     214:	70 f4       	brcc	.+28     	; 0x232 <writeChar+0x3a>
     216:	81 33       	cpi	r24, 0x31	; 49
     218:	f1 f0       	breq	.+60     	; 0x256 <writeChar+0x5e>
     21a:	82 33       	cpi	r24, 0x32	; 50
     21c:	20 f4       	brcc	.+8      	; 0x226 <writeChar+0x2e>
     21e:	80 33       	cpi	r24, 0x30	; 48
     220:	09 f0       	breq	.+2      	; 0x224 <writeChar+0x2c>
     222:	93 c0       	rjmp	.+294    	; 0x34a <writeChar+0x152>
     224:	86 c0       	rjmp	.+268    	; 0x332 <writeChar+0x13a>
     226:	82 33       	cpi	r24, 0x32	; 50
     228:	01 f1       	breq	.+64     	; 0x26a <writeChar+0x72>
     22a:	83 33       	cpi	r24, 0x33	; 51
     22c:	09 f0       	breq	.+2      	; 0x230 <writeChar+0x38>
     22e:	8d c0       	rjmp	.+282    	; 0x34a <writeChar+0x152>
     230:	29 c0       	rjmp	.+82     	; 0x284 <writeChar+0x8c>
     232:	87 33       	cpi	r24, 0x37	; 55
     234:	09 f4       	brne	.+2      	; 0x238 <writeChar+0x40>
     236:	59 c0       	rjmp	.+178    	; 0x2ea <writeChar+0xf2>
     238:	88 33       	cpi	r24, 0x38	; 56
     23a:	30 f4       	brcc	.+12     	; 0x248 <writeChar+0x50>
     23c:	85 33       	cpi	r24, 0x35	; 53
     23e:	d9 f1       	breq	.+118    	; 0x2b6 <writeChar+0xbe>
     240:	86 33       	cpi	r24, 0x36	; 54
     242:	09 f0       	breq	.+2      	; 0x246 <writeChar+0x4e>
     244:	82 c0       	rjmp	.+260    	; 0x34a <writeChar+0x152>
     246:	44 c0       	rjmp	.+136    	; 0x2d0 <writeChar+0xd8>
     248:	88 33       	cpi	r24, 0x38	; 56
     24a:	09 f4       	brne	.+2      	; 0x24e <writeChar+0x56>
     24c:	58 c0       	rjmp	.+176    	; 0x2fe <writeChar+0x106>
     24e:	89 33       	cpi	r24, 0x39	; 57
     250:	09 f0       	breq	.+2      	; 0x254 <writeChar+0x5c>
     252:	7b c0       	rjmp	.+246    	; 0x34a <writeChar+0x152>
     254:	61 c0       	rjmp	.+194    	; 0x318 <writeChar+0x120>
	{
		case '0': n1=1; n2=5; n3=5; n4=1;break;
		case '1': n1=8; n2=1; n3=1; n4=0;break;
     256:	cc 24       	eor	r12, r12
     258:	dd 24       	eor	r13, r13
     25a:	ee 24       	eor	r14, r14
     25c:	ff 24       	eor	r15, r15
     25e:	e3 94       	inc	r14
     260:	01 e0       	ldi	r16, 0x01	; 1
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	48 e0       	ldi	r20, 0x08	; 8
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	70 c0       	rjmp	.+224    	; 0x34a <writeChar+0x152>
		case '2': n1=1; n2=1; n3=0xE; n4=1;break;
     26a:	cc 24       	eor	r12, r12
     26c:	dd 24       	eor	r13, r13
     26e:	c3 94       	inc	r12
     270:	0f 2e       	mov	r0, r31
     272:	fe e0       	ldi	r31, 0x0E	; 14
     274:	ef 2e       	mov	r14, r31
     276:	ff 24       	eor	r15, r15
     278:	f0 2d       	mov	r31, r0
     27a:	01 e0       	ldi	r16, 0x01	; 1
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	63 c0       	rjmp	.+198    	; 0x34a <writeChar+0x152>
		case '3': n1=1; n2=1; n3=0xB; n4=1;break;
     284:	cc 24       	eor	r12, r12
     286:	dd 24       	eor	r13, r13
     288:	c3 94       	inc	r12
     28a:	0f 2e       	mov	r0, r31
     28c:	fb e0       	ldi	r31, 0x0B	; 11
     28e:	ef 2e       	mov	r14, r31
     290:	ff 24       	eor	r15, r15
     292:	f0 2d       	mov	r31, r0
     294:	01 e0       	ldi	r16, 0x01	; 1
     296:	10 e0       	ldi	r17, 0x00	; 0
     298:	41 e0       	ldi	r20, 0x01	; 1
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	56 c0       	rjmp	.+172    	; 0x34a <writeChar+0x152>
		case '4': n1=0; n2=5; n3=0xB; n4=0;break;
     29e:	cc 24       	eor	r12, r12
     2a0:	dd 24       	eor	r13, r13
     2a2:	0f 2e       	mov	r0, r31
     2a4:	fb e0       	ldi	r31, 0x0B	; 11
     2a6:	ef 2e       	mov	r14, r31
     2a8:	ff 24       	eor	r15, r15
     2aa:	f0 2d       	mov	r31, r0
     2ac:	05 e0       	ldi	r16, 0x05	; 5
     2ae:	10 e0       	ldi	r17, 0x00	; 0
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	4a c0       	rjmp	.+148    	; 0x34a <writeChar+0x152>
		case '5': n1=1; n2=4; n3=0xB; n4=1;break;
     2b6:	cc 24       	eor	r12, r12
     2b8:	dd 24       	eor	r13, r13
     2ba:	c3 94       	inc	r12
     2bc:	0f 2e       	mov	r0, r31
     2be:	fb e0       	ldi	r31, 0x0B	; 11
     2c0:	ef 2e       	mov	r14, r31
     2c2:	ff 24       	eor	r15, r15
     2c4:	f0 2d       	mov	r31, r0
     2c6:	04 e0       	ldi	r16, 0x04	; 4
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	41 e0       	ldi	r20, 0x01	; 1
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	3d c0       	rjmp	.+122    	; 0x34a <writeChar+0x152>
		case '6': n1=1; n2=4; n3=0xF; n4=1;break;
     2d0:	cc 24       	eor	r12, r12
     2d2:	dd 24       	eor	r13, r13
     2d4:	c3 94       	inc	r12
     2d6:	0f 2e       	mov	r0, r31
     2d8:	ff e0       	ldi	r31, 0x0F	; 15
     2da:	ef 2e       	mov	r14, r31
     2dc:	ff 24       	eor	r15, r15
     2de:	f0 2d       	mov	r31, r0
     2e0:	04 e0       	ldi	r16, 0x04	; 4
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	41 e0       	ldi	r20, 0x01	; 1
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	30 c0       	rjmp	.+96     	; 0x34a <writeChar+0x152>
		case '7': n1=1; n2=1; n3=0x1; n4=0;break;
     2ea:	cc 24       	eor	r12, r12
     2ec:	dd 24       	eor	r13, r13
     2ee:	ee 24       	eor	r14, r14
     2f0:	ff 24       	eor	r15, r15
     2f2:	e3 94       	inc	r14
     2f4:	01 e0       	ldi	r16, 0x01	; 1
     2f6:	10 e0       	ldi	r17, 0x00	; 0
     2f8:	41 e0       	ldi	r20, 0x01	; 1
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	26 c0       	rjmp	.+76     	; 0x34a <writeChar+0x152>
		case '8': n1=1; n2=5; n3=0xF; n4=1;break;
     2fe:	cc 24       	eor	r12, r12
     300:	dd 24       	eor	r13, r13
     302:	c3 94       	inc	r12
     304:	0f 2e       	mov	r0, r31
     306:	ff e0       	ldi	r31, 0x0F	; 15
     308:	ef 2e       	mov	r14, r31
     30a:	ff 24       	eor	r15, r15
     30c:	f0 2d       	mov	r31, r0
     30e:	05 e0       	ldi	r16, 0x05	; 5
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	19 c0       	rjmp	.+50     	; 0x34a <writeChar+0x152>
		case '9': n1=1; n2=5; n3=0xB; n4=1;break;
     318:	cc 24       	eor	r12, r12
     31a:	dd 24       	eor	r13, r13
     31c:	c3 94       	inc	r12
     31e:	0f 2e       	mov	r0, r31
     320:	fb e0       	ldi	r31, 0x0B	; 11
     322:	ef 2e       	mov	r14, r31
     324:	ff 24       	eor	r15, r15
     326:	f0 2d       	mov	r31, r0
     328:	05 e0       	ldi	r16, 0x05	; 5
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	41 e0       	ldi	r20, 0x01	; 1
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	0c c0       	rjmp	.+24     	; 0x34a <writeChar+0x152>
void writeChar(char ch, int pos)
{
	int n1,n2,n3,n4;
	switch(ch)
	{
		case '0': n1=1; n2=5; n3=5; n4=1;break;
     332:	cc 24       	eor	r12, r12
     334:	dd 24       	eor	r13, r13
     336:	c3 94       	inc	r12
     338:	0f 2e       	mov	r0, r31
     33a:	f5 e0       	ldi	r31, 0x05	; 5
     33c:	ef 2e       	mov	r14, r31
     33e:	ff 24       	eor	r15, r15
     340:	f0 2d       	mov	r31, r0
     342:	05 e0       	ldi	r16, 0x05	; 5
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	41 e0       	ldi	r20, 0x01	; 1
     348:	50 e0       	ldi	r21, 0x00	; 0
		case '6': n1=1; n2=4; n3=0xF; n4=1;break;
		case '7': n1=1; n2=1; n3=0x1; n4=0;break;
		case '8': n1=1; n2=5; n3=0xF; n4=1;break;
		case '9': n1=1; n2=5; n3=0xB; n4=1;break;
	}
	switch(pos)
     34a:	62 30       	cpi	r22, 0x02	; 2
     34c:	71 05       	cpc	r23, r1
     34e:	09 f4       	brne	.+2      	; 0x352 <writeChar+0x15a>
     350:	82 c0       	rjmp	.+260    	; 0x456 <writeChar+0x25e>
     352:	63 30       	cpi	r22, 0x03	; 3
     354:	71 05       	cpc	r23, r1
     356:	44 f4       	brge	.+16     	; 0x368 <writeChar+0x170>
     358:	61 15       	cp	r22, r1
     35a:	71 05       	cpc	r23, r1
     35c:	91 f0       	breq	.+36     	; 0x382 <writeChar+0x18a>
     35e:	61 30       	cpi	r22, 0x01	; 1
     360:	71 05       	cpc	r23, r1
     362:	09 f0       	breq	.+2      	; 0x366 <writeChar+0x16e>
     364:	4b c1       	rjmp	.+662    	; 0x5fc <__stack+0xfd>
     366:	32 c0       	rjmp	.+100    	; 0x3cc <writeChar+0x1d4>
     368:	64 30       	cpi	r22, 0x04	; 4
     36a:	71 05       	cpc	r23, r1
     36c:	09 f4       	brne	.+2      	; 0x370 <writeChar+0x178>
     36e:	dd c0       	rjmp	.+442    	; 0x52a <__stack+0x2b>
     370:	64 30       	cpi	r22, 0x04	; 4
     372:	71 05       	cpc	r23, r1
     374:	0c f4       	brge	.+2      	; 0x378 <writeChar+0x180>
     376:	94 c0       	rjmp	.+296    	; 0x4a0 <writeChar+0x2a8>
     378:	65 30       	cpi	r22, 0x05	; 5
     37a:	71 05       	cpc	r23, r1
     37c:	09 f0       	breq	.+2      	; 0x380 <writeChar+0x188>
     37e:	3e c1       	rjmp	.+636    	; 0x5fc <__stack+0xfd>
     380:	f9 c0       	rjmp	.+498    	; 0x574 <__stack+0x75>
	{
		case 0: LCDDR0  = LCDDR0&0xf0;
     382:	6c ee       	ldi	r22, 0xEC	; 236
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	fb 01       	movw	r30, r22
     388:	80 81       	ld	r24, Z
     38a:	80 7f       	andi	r24, 0xF0	; 240
     38c:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5&0xf0;
     38e:	a1 ef       	ldi	r26, 0xF1	; 241
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	8c 91       	ld	r24, X
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10&0xf0;
     398:	c6 ef       	ldi	r28, 0xF6	; 246
     39a:	d0 e0       	ldi	r29, 0x00	; 0
     39c:	88 81       	ld	r24, Y
     39e:	80 7f       	andi	r24, 0xF0	; 240
     3a0:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15&0xf0;
     3a2:	2b ef       	ldi	r18, 0xFB	; 251
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	f9 01       	movw	r30, r18
     3a8:	80 81       	ld	r24, Z
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	80 83       	st	Z, r24
		        LCDDR0  = LCDDR0|n1;
     3ae:	fb 01       	movw	r30, r22
     3b0:	80 81       	ld	r24, Z
     3b2:	48 2b       	or	r20, r24
     3b4:	40 83       	st	Z, r20
		        LCDDR5  = LCDDR5|n2;
     3b6:	8c 91       	ld	r24, X
     3b8:	08 2b       	or	r16, r24
     3ba:	0c 93       	st	X, r16
		        LCDDR10 = LCDDR10|n3;
     3bc:	88 81       	ld	r24, Y
     3be:	e8 2a       	or	r14, r24
     3c0:	e8 82       	st	Y, r14
		        LCDDR15 = LCDDR15|n4;
     3c2:	f9 01       	movw	r30, r18
     3c4:	80 81       	ld	r24, Z
     3c6:	c8 2a       	or	r12, r24
     3c8:	c0 82       	st	Z, r12
				break;
     3ca:	18 c1       	rjmp	.+560    	; 0x5fc <__stack+0xfd>
		case 1: LCDDR0  = LCDDR0&0x0f;
     3cc:	0f 2e       	mov	r0, r31
     3ce:	fc ee       	ldi	r31, 0xEC	; 236
     3d0:	af 2e       	mov	r10, r31
     3d2:	bb 24       	eor	r11, r11
     3d4:	f0 2d       	mov	r31, r0
     3d6:	f5 01       	movw	r30, r10
     3d8:	80 81       	ld	r24, Z
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5&0x0f;
     3de:	a1 ef       	ldi	r26, 0xF1	; 241
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	8c 91       	ld	r24, X
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10&0x0f;
     3e8:	c6 ef       	ldi	r28, 0xF6	; 246
     3ea:	d0 e0       	ldi	r29, 0x00	; 0
     3ec:	88 81       	ld	r24, Y
     3ee:	8f 70       	andi	r24, 0x0F	; 15
     3f0:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15&0x0f;
     3f2:	2b ef       	ldi	r18, 0xFB	; 251
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	f9 01       	movw	r30, r18
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 70       	andi	r24, 0x0F	; 15
     3fc:	80 83       	st	Z, r24
		        LCDDR0  = LCDDR0|(n1<<4);
     3fe:	f5 01       	movw	r30, r10
     400:	60 81       	ld	r22, Z
     402:	ca 01       	movw	r24, r20
     404:	82 95       	swap	r24
     406:	92 95       	swap	r25
     408:	90 7f       	andi	r25, 0xF0	; 240
     40a:	98 27       	eor	r25, r24
     40c:	80 7f       	andi	r24, 0xF0	; 240
     40e:	98 27       	eor	r25, r24
     410:	86 2b       	or	r24, r22
     412:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5|(n2<<4);
     414:	4c 91       	ld	r20, X
     416:	c8 01       	movw	r24, r16
     418:	82 95       	swap	r24
     41a:	92 95       	swap	r25
     41c:	90 7f       	andi	r25, 0xF0	; 240
     41e:	98 27       	eor	r25, r24
     420:	80 7f       	andi	r24, 0xF0	; 240
     422:	98 27       	eor	r25, r24
     424:	84 2b       	or	r24, r20
     426:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10|(n3<<4);
     428:	48 81       	ld	r20, Y
     42a:	c7 01       	movw	r24, r14
     42c:	82 95       	swap	r24
     42e:	92 95       	swap	r25
     430:	90 7f       	andi	r25, 0xF0	; 240
     432:	98 27       	eor	r25, r24
     434:	80 7f       	andi	r24, 0xF0	; 240
     436:	98 27       	eor	r25, r24
     438:	84 2b       	or	r24, r20
     43a:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15|(n4<<4);
     43c:	f9 01       	movw	r30, r18
     43e:	80 81       	ld	r24, Z
     440:	cc 0c       	add	r12, r12
     442:	dd 1c       	adc	r13, r13
     444:	cc 0c       	add	r12, r12
     446:	dd 1c       	adc	r13, r13
     448:	cc 0c       	add	r12, r12
     44a:	dd 1c       	adc	r13, r13
     44c:	cc 0c       	add	r12, r12
     44e:	dd 1c       	adc	r13, r13
     450:	c8 2a       	or	r12, r24
     452:	c0 82       	st	Z, r12
				break;
     454:	d3 c0       	rjmp	.+422    	; 0x5fc <__stack+0xfd>
		case 2: LCDDR1  = LCDDR1&0xf0;
     456:	6d ee       	ldi	r22, 0xED	; 237
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	fb 01       	movw	r30, r22
     45c:	80 81       	ld	r24, Z
     45e:	80 7f       	andi	r24, 0xF0	; 240
     460:	80 83       	st	Z, r24
		        LCDDR6  = LCDDR6&0xf0;
     462:	a2 ef       	ldi	r26, 0xF2	; 242
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	8c 91       	ld	r24, X
     468:	80 7f       	andi	r24, 0xF0	; 240
     46a:	8c 93       	st	X, r24
		        LCDDR11 = LCDDR11&0xf0;
     46c:	c7 ef       	ldi	r28, 0xF7	; 247
     46e:	d0 e0       	ldi	r29, 0x00	; 0
     470:	88 81       	ld	r24, Y
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 83       	st	Y, r24
		        LCDDR16 = LCDDR16&0xf0;
     476:	2c ef       	ldi	r18, 0xFC	; 252
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	80 81       	ld	r24, Z
     47e:	80 7f       	andi	r24, 0xF0	; 240
     480:	80 83       	st	Z, r24
		        LCDDR1  = LCDDR1|n1;
     482:	fb 01       	movw	r30, r22
     484:	80 81       	ld	r24, Z
     486:	48 2b       	or	r20, r24
     488:	40 83       	st	Z, r20
		        LCDDR6  = LCDDR6|n2;
     48a:	8c 91       	ld	r24, X
     48c:	08 2b       	or	r16, r24
     48e:	0c 93       	st	X, r16
		        LCDDR11 = LCDDR11|n3;
     490:	88 81       	ld	r24, Y
     492:	e8 2a       	or	r14, r24
     494:	e8 82       	st	Y, r14
		        LCDDR16 = LCDDR16|n4;
     496:	f9 01       	movw	r30, r18
     498:	80 81       	ld	r24, Z
     49a:	c8 2a       	or	r12, r24
     49c:	c0 82       	st	Z, r12
				break;
     49e:	ae c0       	rjmp	.+348    	; 0x5fc <__stack+0xfd>
        case 3: LCDDR1  = LCDDR1&0x0f;
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fd ee       	ldi	r31, 0xED	; 237
     4a4:	af 2e       	mov	r10, r31
     4a6:	bb 24       	eor	r11, r11
     4a8:	f0 2d       	mov	r31, r0
     4aa:	f5 01       	movw	r30, r10
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 70       	andi	r24, 0x0F	; 15
     4b0:	80 83       	st	Z, r24
                LCDDR6  = LCDDR6&0x0f;
     4b2:	a2 ef       	ldi	r26, 0xF2	; 242
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	8c 91       	ld	r24, X
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	8c 93       	st	X, r24
                LCDDR11 = LCDDR11&0x0f;
     4bc:	c7 ef       	ldi	r28, 0xF7	; 247
     4be:	d0 e0       	ldi	r29, 0x00	; 0
     4c0:	88 81       	ld	r24, Y
     4c2:	8f 70       	andi	r24, 0x0F	; 15
     4c4:	88 83       	st	Y, r24
                LCDDR16 = LCDDR16&0x0f;
     4c6:	2c ef       	ldi	r18, 0xFC	; 252
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	f9 01       	movw	r30, r18
     4cc:	80 81       	ld	r24, Z
     4ce:	8f 70       	andi	r24, 0x0F	; 15
     4d0:	80 83       	st	Z, r24
		        LCDDR1  = LCDDR1|(n1<<4);
     4d2:	f5 01       	movw	r30, r10
     4d4:	60 81       	ld	r22, Z
     4d6:	ca 01       	movw	r24, r20
     4d8:	82 95       	swap	r24
     4da:	92 95       	swap	r25
     4dc:	90 7f       	andi	r25, 0xF0	; 240
     4de:	98 27       	eor	r25, r24
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	98 27       	eor	r25, r24
     4e4:	86 2b       	or	r24, r22
     4e6:	80 83       	st	Z, r24
                LCDDR6  = LCDDR6|(n2<<4);
     4e8:	4c 91       	ld	r20, X
     4ea:	c8 01       	movw	r24, r16
     4ec:	82 95       	swap	r24
     4ee:	92 95       	swap	r25
     4f0:	90 7f       	andi	r25, 0xF0	; 240
     4f2:	98 27       	eor	r25, r24
     4f4:	80 7f       	andi	r24, 0xF0	; 240
     4f6:	98 27       	eor	r25, r24
     4f8:	84 2b       	or	r24, r20
     4fa:	8c 93       	st	X, r24
                LCDDR11 = LCDDR11|(n3<<4);
     4fc:	48 81       	ld	r20, Y
     4fe:	c7 01       	movw	r24, r14
     500:	82 95       	swap	r24
     502:	92 95       	swap	r25
     504:	90 7f       	andi	r25, 0xF0	; 240
     506:	98 27       	eor	r25, r24
     508:	80 7f       	andi	r24, 0xF0	; 240
     50a:	98 27       	eor	r25, r24
     50c:	84 2b       	or	r24, r20
     50e:	88 83       	st	Y, r24
                LCDDR16 = LCDDR16|(n4<<4);
     510:	f9 01       	movw	r30, r18
     512:	80 81       	ld	r24, Z
     514:	cc 0c       	add	r12, r12
     516:	dd 1c       	adc	r13, r13
     518:	cc 0c       	add	r12, r12
     51a:	dd 1c       	adc	r13, r13
     51c:	cc 0c       	add	r12, r12
     51e:	dd 1c       	adc	r13, r13
     520:	cc 0c       	add	r12, r12
     522:	dd 1c       	adc	r13, r13
     524:	c8 2a       	or	r12, r24
     526:	c0 82       	st	Z, r12
				break;
     528:	69 c0       	rjmp	.+210    	; 0x5fc <__stack+0xfd>
		case 4: LCDDR2  = LCDDR2&0xf0;
     52a:	6e ee       	ldi	r22, 0xEE	; 238
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	fb 01       	movw	r30, r22
     530:	80 81       	ld	r24, Z
     532:	80 7f       	andi	r24, 0xF0	; 240
     534:	80 83       	st	Z, r24
		        LCDDR7  = LCDDR7&0xf0;
     536:	a3 ef       	ldi	r26, 0xF3	; 243
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	8c 91       	ld	r24, X
     53c:	80 7f       	andi	r24, 0xF0	; 240
     53e:	8c 93       	st	X, r24
		        LCDDR12 = LCDDR12&0xf0;
     540:	c8 ef       	ldi	r28, 0xF8	; 248
     542:	d0 e0       	ldi	r29, 0x00	; 0
     544:	88 81       	ld	r24, Y
     546:	80 7f       	andi	r24, 0xF0	; 240
     548:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17&0xf0;
     54a:	2d ef       	ldi	r18, 0xFD	; 253
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	80 81       	ld	r24, Z
     552:	80 7f       	andi	r24, 0xF0	; 240
     554:	80 83       	st	Z, r24
		        LCDDR2  = LCDDR2|n1;
     556:	fb 01       	movw	r30, r22
     558:	80 81       	ld	r24, Z
     55a:	48 2b       	or	r20, r24
     55c:	40 83       	st	Z, r20
	        	LCDDR7 = LCDDR7|n2;
     55e:	8c 91       	ld	r24, X
     560:	08 2b       	or	r16, r24
     562:	0c 93       	st	X, r16
		        LCDDR12  = LCDDR12|n3;
     564:	88 81       	ld	r24, Y
     566:	e8 2a       	or	r14, r24
     568:	e8 82       	st	Y, r14
		        LCDDR17 = LCDDR17|n4;
     56a:	f9 01       	movw	r30, r18
     56c:	80 81       	ld	r24, Z
     56e:	c8 2a       	or	r12, r24
     570:	c0 82       	st	Z, r12
				break;
     572:	44 c0       	rjmp	.+136    	; 0x5fc <__stack+0xfd>
		case 5: LCDDR2  = LCDDR2&0x0f;
     574:	0f 2e       	mov	r0, r31
     576:	fe ee       	ldi	r31, 0xEE	; 238
     578:	af 2e       	mov	r10, r31
     57a:	bb 24       	eor	r11, r11
     57c:	f0 2d       	mov	r31, r0
     57e:	f5 01       	movw	r30, r10
     580:	80 81       	ld	r24, Z
     582:	8f 70       	andi	r24, 0x0F	; 15
     584:	80 83       	st	Z, r24
		        LCDDR7  = LCDDR7&0x0f;
     586:	a3 ef       	ldi	r26, 0xF3	; 243
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	8c 91       	ld	r24, X
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	8c 93       	st	X, r24
		        LCDDR12 = LCDDR12&0x0f;
     590:	c8 ef       	ldi	r28, 0xF8	; 248
     592:	d0 e0       	ldi	r29, 0x00	; 0
     594:	88 81       	ld	r24, Y
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17&0x0f;
     59a:	2d ef       	ldi	r18, 0xFD	; 253
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	80 81       	ld	r24, Z
     5a2:	8f 70       	andi	r24, 0x0F	; 15
     5a4:	80 83       	st	Z, r24
		        LCDDR2  = LCDDR2|(n1<<4);
     5a6:	f5 01       	movw	r30, r10
     5a8:	60 81       	ld	r22, Z
     5aa:	ca 01       	movw	r24, r20
     5ac:	82 95       	swap	r24
     5ae:	92 95       	swap	r25
     5b0:	90 7f       	andi	r25, 0xF0	; 240
     5b2:	98 27       	eor	r25, r24
     5b4:	80 7f       	andi	r24, 0xF0	; 240
     5b6:	98 27       	eor	r25, r24
     5b8:	86 2b       	or	r24, r22
     5ba:	80 83       	st	Z, r24
		        LCDDR7 = LCDDR7|(n2<<4);
     5bc:	4c 91       	ld	r20, X
     5be:	c8 01       	movw	r24, r16
     5c0:	82 95       	swap	r24
     5c2:	92 95       	swap	r25
     5c4:	90 7f       	andi	r25, 0xF0	; 240
     5c6:	98 27       	eor	r25, r24
     5c8:	80 7f       	andi	r24, 0xF0	; 240
     5ca:	98 27       	eor	r25, r24
     5cc:	84 2b       	or	r24, r20
     5ce:	8c 93       	st	X, r24
		        LCDDR12  = LCDDR12|(n3<<4);
     5d0:	48 81       	ld	r20, Y
     5d2:	c7 01       	movw	r24, r14
     5d4:	82 95       	swap	r24
     5d6:	92 95       	swap	r25
     5d8:	90 7f       	andi	r25, 0xF0	; 240
     5da:	98 27       	eor	r25, r24
     5dc:	80 7f       	andi	r24, 0xF0	; 240
     5de:	98 27       	eor	r25, r24
     5e0:	84 2b       	or	r24, r20
     5e2:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17|(n4<<4);
     5e4:	f9 01       	movw	r30, r18
     5e6:	80 81       	ld	r24, Z
     5e8:	cc 0c       	add	r12, r12
     5ea:	dd 1c       	adc	r13, r13
     5ec:	cc 0c       	add	r12, r12
     5ee:	dd 1c       	adc	r13, r13
     5f0:	cc 0c       	add	r12, r12
     5f2:	dd 1c       	adc	r13, r13
     5f4:	cc 0c       	add	r12, r12
     5f6:	dd 1c       	adc	r13, r13
     5f8:	c8 2a       	or	r12, r24
     5fa:	c0 82       	st	Z, r12
				break;
	}
}	
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	08 95       	ret

00000612 <longSize>:

int longSize(int i)
{
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	9c 01       	movw	r18, r24
	if (i%10==i)
     61c:	6a e0       	ldi	r22, 0x0A	; 10
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     624:	82 17       	cp	r24, r18
     626:	93 07       	cpc	r25, r19
     628:	79 f1       	breq	.+94     	; 0x688 <longSize+0x76>
	{
		return 1;
	}
	else if (i%100==i)
     62a:	c9 01       	movw	r24, r18
     62c:	64 e6       	ldi	r22, 0x64	; 100
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     634:	82 17       	cp	r24, r18
     636:	93 07       	cpc	r25, r19
     638:	51 f1       	breq	.+84     	; 0x68e <longSize+0x7c>
	{
		return 2;
	}
	else if (i%1000==i)
     63a:	c9 01       	movw	r24, r18
     63c:	68 ee       	ldi	r22, 0xE8	; 232
     63e:	73 e0       	ldi	r23, 0x03	; 3
     640:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     644:	82 17       	cp	r24, r18
     646:	93 07       	cpc	r25, r19
     648:	29 f1       	breq	.+74     	; 0x694 <longSize+0x82>
	{
		return 3;
	}
	else if (i%10000==i)
     64a:	c9 01       	movw	r24, r18
     64c:	60 e1       	ldi	r22, 0x10	; 16
     64e:	77 e2       	ldi	r23, 0x27	; 39
     650:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     654:	82 17       	cp	r24, r18
     656:	93 07       	cpc	r25, r19
     658:	01 f1       	breq	.+64     	; 0x69a <longSize+0x88>
	{
		return 4;
	}
	else if (i%100000==i)
     65a:	69 01       	movw	r12, r18
     65c:	ee 24       	eor	r14, r14
     65e:	d7 fc       	sbrc	r13, 7
     660:	e0 94       	com	r14
     662:	fe 2c       	mov	r15, r14
     664:	c7 01       	movw	r24, r14
     666:	b6 01       	movw	r22, r12
     668:	20 ea       	ldi	r18, 0xA0	; 160
     66a:	36 e8       	ldi	r19, 0x86	; 134
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__divmodsi4>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	c8 16       	cp	r12, r24
     67a:	d9 06       	cpc	r13, r25
     67c:	ea 06       	cpc	r14, r26
     67e:	fb 06       	cpc	r15, r27
     680:	79 f4       	brne	.+30     	; 0x6a0 <longSize+0x8e>
	{
		return 5;
     682:	85 e0       	ldi	r24, 0x05	; 5
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e c0       	rjmp	.+28     	; 0x6a4 <longSize+0x92>

int longSize(int i)
{
	if (i%10==i)
	{
		return 1;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0b c0       	rjmp	.+22     	; 0x6a4 <longSize+0x92>
	}
	else if (i%100==i)
	{
		return 2;
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	08 c0       	rjmp	.+16     	; 0x6a4 <longSize+0x92>
	}
	else if (i%1000==i)
	{
		return 3;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <longSize+0x92>
	}
	else if (i%10000==i)
	{
		return 4;
     69a:	84 e0       	ldi	r24, 0x04	; 4
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	02 c0       	rjmp	.+4      	; 0x6a4 <longSize+0x92>
	else if (i%100000==i)
	{
		return 5;
	}
	else
	return 6;
     6a0:	86 e0       	ldi	r24, 0x06	; 6
     6a2:	90 e0       	ldi	r25, 0x00	; 0
}
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	08 95       	ret

000006ae <writeLong>:


void writeLong(int i)
{
     6ae:	4f 92       	push	r4
     6b0:	5f 92       	push	r5
     6b2:	6f 92       	push	r6
     6b4:	7f 92       	push	r7
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <writeLong+0x22>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <writeLong+0x24>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	6c 01       	movw	r12, r24
	int position = 0;
	char number = '0';
	int num = 0;
	int numsize;
	numsize = longSize(i);
     6d8:	0e 94 09 03 	call	0x612	; 0x612 <longSize>
     6dc:	7c 01       	movw	r14, r24
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
     6de:	18 16       	cp	r1, r24
     6e0:	19 06       	cpc	r1, r25
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <writeLong+0x38>
     6e4:	fd c0       	rjmp	.+506    	; 0x8e0 <writeLong+0x232>
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
     6e6:	46 01       	movw	r8, r12
     6e8:	aa 24       	eor	r10, r10
     6ea:	97 fc       	sbrc	r9, 7
     6ec:	a0 94       	com	r10
     6ee:	ba 2c       	mov	r11, r10
     6f0:	0f 2e       	mov	r0, r31
     6f2:	f0 ea       	ldi	r31, 0xA0	; 160
     6f4:	4f 2e       	mov	r4, r31
     6f6:	f6 e8       	ldi	r31, 0x86	; 134
     6f8:	5f 2e       	mov	r5, r31
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	6f 2e       	mov	r6, r31
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	7f 2e       	mov	r7, r31
     702:	f0 2d       	mov	r31, r0
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	a3 01       	movw	r20, r6
     70a:	92 01       	movw	r18, r4
     70c:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__divmodsi4>
     710:	69 83       	std	Y+1, r22	; 0x01
     712:	7a 83       	std	Y+2, r23	; 0x02
     714:	8b 83       	std	Y+3, r24	; 0x03
     716:	9c 83       	std	Y+4, r25	; 0x04
     718:	c5 01       	movw	r24, r10
     71a:	b4 01       	movw	r22, r8
     71c:	20 e4       	ldi	r18, 0x40	; 64
     71e:	32 e4       	ldi	r19, 0x42	; 66
     720:	4f e0       	ldi	r20, 0x0F	; 15
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__divmodsi4>
     728:	29 81       	ldd	r18, Y+1	; 0x01
     72a:	3a 81       	ldd	r19, Y+2	; 0x02
     72c:	4b 81       	ldd	r20, Y+3	; 0x03
     72e:	5c 81       	ldd	r21, Y+4	; 0x04
     730:	62 1b       	sub	r22, r18
     732:	73 0b       	sbc	r23, r19
     734:	84 0b       	sbc	r24, r20
     736:	95 0b       	sbc	r25, r21
     738:	a3 01       	movw	r20, r6
     73a:	92 01       	movw	r18, r4
     73c:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__divmodsi4>
     740:	92 2e       	mov	r9, r18
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
     742:	c6 01       	movw	r24, r12
     744:	60 e1       	ldi	r22, 0x10	; 16
     746:	77 e2       	ldi	r23, 0x27	; 39
     748:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     74c:	8c 01       	movw	r16, r24
     74e:	c8 01       	movw	r24, r16
     750:	aa 27       	eor	r26, r26
     752:	97 fd       	sbrc	r25, 7
     754:	a0 95       	com	r26
     756:	ba 2f       	mov	r27, r26
     758:	29 81       	ldd	r18, Y+1	; 0x01
     75a:	3a 81       	ldd	r19, Y+2	; 0x02
     75c:	4b 81       	ldd	r20, Y+3	; 0x03
     75e:	5c 81       	ldd	r21, Y+4	; 0x04
     760:	28 1b       	sub	r18, r24
     762:	39 0b       	sbc	r19, r25
     764:	4a 0b       	sbc	r20, r26
     766:	5b 0b       	sbc	r21, r27
     768:	ca 01       	movw	r24, r20
     76a:	b9 01       	movw	r22, r18
     76c:	20 e1       	ldi	r18, 0x10	; 16
     76e:	37 e2       	ldi	r19, 0x27	; 39
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__divmodsi4>
     778:	f2 2f       	mov	r31, r18
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
     77a:	28 ee       	ldi	r18, 0xE8	; 232
     77c:	33 e0       	ldi	r19, 0x03	; 3
     77e:	c6 01       	movw	r24, r12
     780:	b9 01       	movw	r22, r18
     782:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     786:	5c 01       	movw	r10, r24
     788:	c8 01       	movw	r24, r16
     78a:	8a 19       	sub	r24, r10
     78c:	9b 09       	sbc	r25, r11
     78e:	b9 01       	movw	r22, r18
     790:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     794:	e6 2f       	mov	r30, r22
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
     796:	24 e6       	ldi	r18, 0x64	; 100
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	c6 01       	movw	r24, r12
     79c:	b9 01       	movw	r22, r18
     79e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     7a2:	8c 01       	movw	r16, r24
     7a4:	c5 01       	movw	r24, r10
     7a6:	80 1b       	sub	r24, r16
     7a8:	91 0b       	sbc	r25, r17
     7aa:	b9 01       	movw	r22, r18
     7ac:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     7b0:	46 2f       	mov	r20, r22
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
     7b2:	2a e0       	ldi	r18, 0x0A	; 10
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	c6 01       	movw	r24, r12
     7b8:	b9 01       	movw	r22, r18
     7ba:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     7be:	5c 01       	movw	r10, r24
     7c0:	c8 01       	movw	r24, r16
     7c2:	8a 19       	sub	r24, r10
     7c4:	9b 09       	sbc	r25, r11
     7c6:	b9 01       	movw	r22, r18
     7c8:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>


void writeLong(int i)
{
	int position = 0;
	char number = '0';
     7cc:	10 e3       	ldi	r17, 0x30	; 48
	int numsize;
	numsize = longSize(i);
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
     7ce:	66 24       	eor	r6, r6
     7d0:	77 24       	eor	r7, r7
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f0 e3       	ldi	r31, 0x30	; 48
     7d6:	df 2e       	mov	r13, r31
     7d8:	f0 2d       	mov	r31, r0
     7da:	d4 0e       	add	r13, r20
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
     7dc:	0f 2e       	mov	r0, r31
     7de:	f0 e3       	ldi	r31, 0x30	; 48
     7e0:	bf 2e       	mov	r11, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	bf 0e       	add	r11, r31
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
     7e6:	0f 2e       	mov	r0, r31
     7e8:	f0 e3       	ldi	r31, 0x30	; 48
     7ea:	4f 2e       	mov	r4, r31
     7ec:	f0 2d       	mov	r31, r0
     7ee:	4e 0e       	add	r4, r30
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
     7f0:	0f 2e       	mov	r0, r31
     7f2:	f0 e3       	ldi	r31, 0x30	; 48
     7f4:	cf 2e       	mov	r12, r31
     7f6:	f0 2d       	mov	r31, r0
     7f8:	c9 0c       	add	r12, r9
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
     7fa:	0a 2d       	mov	r16, r10
     7fc:	00 5d       	subi	r16, 0xD0	; 208
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
     7fe:	0f 2e       	mov	r0, r31
     800:	f0 e3       	ldi	r31, 0x30	; 48
     802:	8f 2e       	mov	r8, r31
     804:	f0 2d       	mov	r31, r0
     806:	86 0e       	add	r8, r22
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
     808:	32 e0       	ldi	r19, 0x02	; 2
     80a:	63 16       	cp	r6, r19
     80c:	71 04       	cpc	r7, r1
     80e:	09 f4       	brne	.+2      	; 0x812 <writeLong+0x164>
     810:	45 c0       	rjmp	.+138    	; 0x89c <writeLong+0x1ee>
     812:	43 e0       	ldi	r20, 0x03	; 3
     814:	64 16       	cp	r6, r20
     816:	71 04       	cpc	r7, r1
     818:	44 f4       	brge	.+16     	; 0x82a <writeLong+0x17c>
     81a:	61 14       	cp	r6, r1
     81c:	71 04       	cpc	r7, r1
     81e:	81 f1       	breq	.+96     	; 0x880 <writeLong+0x1d2>
     820:	51 e0       	ldi	r21, 0x01	; 1
     822:	65 16       	cp	r6, r21
     824:	71 04       	cpc	r7, r1
     826:	79 f4       	brne	.+30     	; 0x846 <writeLong+0x198>
     828:	32 c0       	rjmp	.+100    	; 0x88e <writeLong+0x1e0>
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	68 16       	cp	r6, r24
     82e:	71 04       	cpc	r7, r1
     830:	09 f4       	brne	.+2      	; 0x834 <writeLong+0x186>
     832:	42 c0       	rjmp	.+132    	; 0x8b8 <writeLong+0x20a>
     834:	e4 e0       	ldi	r30, 0x04	; 4
     836:	6e 16       	cp	r6, r30
     838:	71 04       	cpc	r7, r1
     83a:	bc f1       	brlt	.+110    	; 0x8aa <writeLong+0x1fc>
     83c:	f5 e0       	ldi	r31, 0x05	; 5
     83e:	6f 16       	cp	r6, r31
     840:	71 04       	cpc	r7, r1
     842:	09 f4       	brne	.+2      	; 0x846 <writeLong+0x198>
     844:	40 c0       	rjmp	.+128    	; 0x8c6 <writeLong+0x218>
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
		}
		switch (position)
     846:	22 e0       	ldi	r18, 0x02	; 2
     848:	62 16       	cp	r6, r18
     84a:	71 04       	cpc	r7, r1
     84c:	41 f1       	breq	.+80     	; 0x89e <writeLong+0x1f0>
     84e:	33 e0       	ldi	r19, 0x03	; 3
     850:	63 16       	cp	r6, r19
     852:	71 04       	cpc	r7, r1
     854:	44 f4       	brge	.+16     	; 0x866 <writeLong+0x1b8>
     856:	61 14       	cp	r6, r1
     858:	71 04       	cpc	r7, r1
     85a:	99 f0       	breq	.+38     	; 0x882 <writeLong+0x1d4>
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	64 16       	cp	r6, r20
     860:	71 04       	cpc	r7, r1
     862:	b9 f5       	brne	.+110    	; 0x8d2 <writeLong+0x224>
     864:	15 c0       	rjmp	.+42     	; 0x890 <writeLong+0x1e2>
     866:	54 e0       	ldi	r21, 0x04	; 4
     868:	65 16       	cp	r6, r21
     86a:	71 04       	cpc	r7, r1
     86c:	31 f1       	breq	.+76     	; 0x8ba <writeLong+0x20c>
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	68 16       	cp	r6, r24
     872:	71 04       	cpc	r7, r1
     874:	dc f0       	brlt	.+54     	; 0x8ac <writeLong+0x1fe>
     876:	e5 e0       	ldi	r30, 0x05	; 5
     878:	6e 16       	cp	r6, r30
     87a:	71 04       	cpc	r7, r1
     87c:	51 f5       	brne	.+84     	; 0x8d2 <writeLong+0x224>
     87e:	24 c0       	rjmp	.+72     	; 0x8c8 <writeLong+0x21a>
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
     880:	10 2f       	mov	r17, r16
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
     882:	81 2f       	mov	r24, r17
     884:	65 e0       	ldi	r22, 0x05	; 5
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeChar>
     88c:	22 c0       	rjmp	.+68     	; 0x8d2 <writeLong+0x224>
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
     88e:	18 2d       	mov	r17, r8
			case 0: num = i%10; number = num+'0';break;
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
     890:	81 2f       	mov	r24, r17
     892:	64 e0       	ldi	r22, 0x04	; 4
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeChar>
     89a:	1b c0       	rjmp	.+54     	; 0x8d2 <writeLong+0x224>
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
     89c:	1d 2d       	mov	r17, r13
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
     89e:	81 2f       	mov	r24, r17
     8a0:	63 e0       	ldi	r22, 0x03	; 3
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeChar>
     8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <writeLong+0x224>
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
     8aa:	14 2d       	mov	r17, r4
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
     8ac:	81 2f       	mov	r24, r17
     8ae:	62 e0       	ldi	r22, 0x02	; 2
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeChar>
     8b6:	0d c0       	rjmp	.+26     	; 0x8d2 <writeLong+0x224>
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
     8b8:	1b 2d       	mov	r17, r11
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
			case 4:writeChar(number,1);break;
     8ba:	81 2f       	mov	r24, r17
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeChar>
     8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <writeLong+0x224>
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
     8c6:	1c 2d       	mov	r17, r12
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
			case 4:writeChar(number,1);break;
			case 5:writeChar(number,0);break;
     8c8:	81 2f       	mov	r24, r17
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeChar>
	int numsize;
	numsize = longSize(i);
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
     8d2:	08 94       	sec
     8d4:	61 1c       	adc	r6, r1
     8d6:	71 1c       	adc	r7, r1
     8d8:	6e 14       	cp	r6, r14
     8da:	7f 04       	cpc	r7, r15
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <writeLong+0x232>
     8de:	94 cf       	rjmp	.-216    	; 0x808 <writeLong+0x15a>
			case 4:writeChar(number,1);break;
			case 5:writeChar(number,0);break;
		}
		
	}
}
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	4f 90       	pop	r4
     908:	08 95       	ret

0000090a <writeDigit>:

int  writeDigit(LCD *self, int digitPos)
{
     90a:	cb 01       	movw	r24, r22
	int position;
	char digit;
	position = digitPos%10;
	digit = digitPos/10+'0';
     90c:	6a e0       	ldi	r22, 0x0A	; 10
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     914:	9c 01       	movw	r18, r24
	writeChar(digit,position);
     916:	86 2f       	mov	r24, r22
     918:	80 5d       	subi	r24, 0xD0	; 208
     91a:	b9 01       	movw	r22, r18
     91c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <writeChar>
}
     920:	08 95       	ret

00000922 <writeInt>:
int  writeInt(LCD *self, int val)
{
     922:	cb 01       	movw	r24, r22
	writeLong(val);
     924:	0e 94 57 03 	call	0x6ae	; 0x6ae <writeLong>
}
     928:	08 95       	ret

0000092a <segmentOn>:
int  segmentOn(LCD *self, int segment)
{
	switch(segment){
     92a:	62 30       	cpi	r22, 0x02	; 2
     92c:	71 05       	cpc	r23, r1
     92e:	61 f0       	breq	.+24     	; 0x948 <segmentOn+0x1e>
     930:	63 30       	cpi	r22, 0x03	; 3
     932:	71 05       	cpc	r23, r1
     934:	79 f0       	breq	.+30     	; 0x954 <segmentOn+0x2a>
     936:	61 30       	cpi	r22, 0x01	; 1
     938:	71 05       	cpc	r23, r1
     93a:	91 f4       	brne	.+36     	; 0x960 <segmentOn+0x36>
		case 1:LCDDR3|= 0x01;
     93c:	ef ee       	ldi	r30, 0xEF	; 239
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	81 60       	ori	r24, 0x01	; 1
     944:	80 83       	st	Z, r24
		break;
     946:	0f c0       	rjmp	.+30     	; 0x966 <segmentOn+0x3c>
		case 2:LCDDR13|= 0x01;
     948:	e9 ef       	ldi	r30, 0xF9	; 249
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	81 60       	ori	r24, 0x01	; 1
     950:	80 83       	st	Z, r24
		break;
     952:	09 c0       	rjmp	.+18     	; 0x966 <segmentOn+0x3c>
		case 3: LCDDR18 |= 0x01;
     954:	ee ef       	ldi	r30, 0xFE	; 254
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	80 83       	st	Z, r24
		break;
     95e:	03 c0       	rjmp	.+6      	; 0x966 <segmentOn+0x3c>
		default: return 0;
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	08 95       	ret
	}
}
     966:	08 95       	ret

00000968 <segmentOff>:
int  segmentOff(LCD *self, int segment)
{
	switch(segment){
     968:	62 30       	cpi	r22, 0x02	; 2
     96a:	71 05       	cpc	r23, r1
     96c:	59 f0       	breq	.+22     	; 0x984 <segmentOff+0x1c>
     96e:	63 30       	cpi	r22, 0x03	; 3
     970:	71 05       	cpc	r23, r1
     972:	69 f0       	breq	.+26     	; 0x98e <segmentOff+0x26>
     974:	61 30       	cpi	r22, 0x01	; 1
     976:	71 05       	cpc	r23, r1
     978:	79 f4       	brne	.+30     	; 0x998 <segmentOff+0x30>
		case 1:LCDDR3 &= 0x00;
     97a:	ef ee       	ldi	r30, 0xEF	; 239
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	10 82       	st	Z, r1
		break;
     982:	0d c0       	rjmp	.+26     	; 0x99e <segmentOff+0x36>
		case 2:LCDDR13 &= 0x00;
     984:	e9 ef       	ldi	r30, 0xF9	; 249
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	10 82       	st	Z, r1
		break;
     98c:	08 c0       	rjmp	.+16     	; 0x99e <segmentOff+0x36>
		case 3: LCDDR18 &= 0x00;
     98e:	ee ef       	ldi	r30, 0xFE	; 254
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	10 82       	st	Z, r1
		break;
     996:	03 c0       	rjmp	.+6      	; 0x99e <segmentOff+0x36>
		default: return 0;
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	08 95       	ret
	}
     99e:	08 95       	ret

000009a0 <playDiana>:
	                    	   x, x, x, y, z, x, x, x, x, x,
			                   y, z, ss, ss, t, x, t, x, x, t};
			 				   

int playDiana(Melody *self, int nothing)
{	
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
	if (self->pos == 49)
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	9f 81       	ldd	r25, Y+7	; 0x07
     9b6:	81 33       	cpi	r24, 0x31	; 49
     9b8:	91 05       	cpc	r25, r1
     9ba:	11 f4       	brne	.+4      	; 0x9c0 <playDiana+0x20>
	{
		self->pos = 0; 
     9bc:	1f 82       	std	Y+7, r1	; 0x07
     9be:	1e 82       	std	Y+6, r1	; 0x06
	}
	BEFORE(pgm_read_word(&dur[self->pos]),self->sound,setFrequence,pgm_read_word(&freq[self->pos]));
     9c0:	8e 81       	ldd	r24, Y+6	; 0x06
     9c2:	9f 81       	ldd	r25, Y+7	; 0x07
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	fc 01       	movw	r30, r24
     9ca:	e4 5a       	subi	r30, 0xA4	; 164
     9cc:	ff 4f       	sbci	r31, 0xFF	; 255
     9ce:	25 91       	lpm	r18, Z+
     9d0:	34 91       	lpm	r19, Z
     9d2:	80 54       	subi	r24, 0x40	; 64
     9d4:	9f 4f       	sbci	r25, 0xFF	; 255
     9d6:	fc 01       	movw	r30, r24
     9d8:	c5 90       	lpm	r12, Z+
     9da:	d4 90       	lpm	r13, Z
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0c 81       	ldd	r16, Y+4	; 0x04
     9e2:	1d 81       	ldd	r17, Y+5	; 0x05
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	cb 01       	movw	r24, r22
     9ea:	0f 2e       	mov	r0, r31
     9ec:	f2 e2       	ldi	r31, 0x22	; 34
     9ee:	ef 2e       	mov	r14, r31
     9f0:	f6 e0       	ldi	r31, 0x06	; 6
     9f2:	ff 2e       	mov	r15, r31
     9f4:	f0 2d       	mov	r31, r0
     9f6:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
	BEFORE(pgm_read_word(&dur[self->pos]),self->sound,startPlaying, 0);
     9fa:	ee 81       	ldd	r30, Y+6	; 0x06
     9fc:	ff 81       	ldd	r31, Y+7	; 0x07
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	e4 5a       	subi	r30, 0xA4	; 164
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	25 91       	lpm	r18, Z+
     a08:	34 91       	lpm	r19, Z
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0c 81       	ldd	r16, Y+4	; 0x04
     a10:	1d 81       	ldd	r17, Y+5	; 0x05
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	cb 01       	movw	r24, r22
     a18:	0f 2e       	mov	r0, r31
     a1a:	ff ec       	ldi	r31, 0xCF	; 207
     a1c:	ef 2e       	mov	r14, r31
     a1e:	f6 e0       	ldi	r31, 0x06	; 6
     a20:	ff 2e       	mov	r15, r31
     a22:	f0 2d       	mov	r31, r0
     a24:	cc 24       	eor	r12, r12
     a26:	dd 24       	eor	r13, r13
     a28:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
	//AFTER(0,self->sound,setFrequence,pgm_read_word(&freq[self->pos]));
	//AFTER(0,self->sound,startPlaying, 0);
	SEND(pgm_read_word(&dur[self->pos]), pgm_read_word(&dur[self->pos])+MSEC(10),self->sound,stopPlaying,0);
     a2c:	ee 81       	ldd	r30, Y+6	; 0x06
     a2e:	ff 81       	ldd	r31, Y+7	; 0x07
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	e4 5a       	subi	r30, 0xA4	; 164
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	65 91       	lpm	r22, Z+
     a3a:	74 91       	lpm	r23, Z
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	28 5c       	subi	r18, 0xC8	; 200
     a46:	3e 4f       	sbci	r19, 0xFE	; 254
     a48:	4f 4f       	sbci	r20, 0xFF	; 255
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	0c 81       	ldd	r16, Y+4	; 0x04
     a4e:	1d 81       	ldd	r17, Y+5	; 0x05
     a50:	0f 2e       	mov	r0, r31
     a52:	f4 ed       	ldi	r31, 0xD4	; 212
     a54:	ef 2e       	mov	r14, r31
     a56:	f6 e0       	ldi	r31, 0x06	; 6
     a58:	ff 2e       	mov	r15, r31
     a5a:	f0 2d       	mov	r31, r0
     a5c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
	SEND(pgm_read_word(&dur[self->pos])+MSEC(10),pgm_read_word(&dur[self->pos])+MSEC(10),self,playDiana,self->pos++);
     a60:	ce 80       	ldd	r12, Y+6	; 0x06
     a62:	df 80       	ldd	r13, Y+7	; 0x07
     a64:	f6 01       	movw	r30, r12
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	e4 5a       	subi	r30, 0xA4	; 164
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	25 91       	lpm	r18, Z+
     a70:	34 91       	lpm	r19, Z
     a72:	c6 01       	movw	r24, r12
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	9f 83       	std	Y+7, r25	; 0x07
     a78:	8e 83       	std	Y+6, r24	; 0x06
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	28 5c       	subi	r18, 0xC8	; 200
     a80:	3e 4f       	sbci	r19, 0xFE	; 254
     a82:	4f 4f       	sbci	r20, 0xFF	; 255
     a84:	5f 4f       	sbci	r21, 0xFF	; 255
     a86:	ca 01       	movw	r24, r20
     a88:	b9 01       	movw	r22, r18
     a8a:	8e 01       	movw	r16, r28
     a8c:	0f 2e       	mov	r0, r31
     a8e:	f0 ed       	ldi	r31, 0xD0	; 208
     a90:	ef 2e       	mov	r14, r31
     a92:	f4 e0       	ldi	r31, 0x04	; 4
     a94:	ff 2e       	mov	r15, r31
     a96:	f0 2d       	mov	r31, r0
     a98:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
	//AFTER(pgm_read_word(&dur[self->pos]),self->sound,stopPlaying,0);
	//AFTER(pgm_read_word(&dur[self->pos])+MSEC(10),self,playDiana,self->pos++);
	
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	df 90       	pop	r13
     aaa:	cf 90       	pop	r12
     aac:	08 95       	ret

00000aae <stop>:

int stop(Melody *self, int nothing)
{
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
	ASYNC(self->pos,stopPlaying,0);
     aba:	fc 01       	movw	r30, r24
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	cb 01       	movw	r24, r22
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	a9 01       	movw	r20, r18
     acc:	0f 2e       	mov	r0, r31
     ace:	f4 ed       	ldi	r31, 0xD4	; 212
     ad0:	ef 2e       	mov	r14, r31
     ad2:	f6 e0       	ldi	r31, 0x06	; 6
     ad4:	ff 2e       	mov	r15, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	cc 24       	eor	r12, r12
     ada:	dd 24       	eor	r13, r13
     adc:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
}
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret

00000aee <turnOn>:
#include "TinyTimber.h"
#include "piezo.h"

int turnOn(Piezo *self, int nothing)
{
	PORTB |= 0x20;
     aee:	2d 9a       	sbi	0x05, 5	; 5
}
     af0:	08 95       	ret

00000af2 <turnOff>:

int turnOff(Piezo *self, int nothing)
{
	PORTB &= 0xDF;
     af2:	2d 98       	cbi	0x05, 5	; 5
}
     af4:	08 95       	ret

00000af6 <testPiezo>:

int testPiezo(Piezo *self, int nothing)
{
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	8c 01       	movw	r16, r24
     b08:	eb 01       	movw	r28, r22
	if(nothing) {
     b0a:	20 97       	sbiw	r28, 0x00	; 0
     b0c:	29 f0       	breq	.+10     	; 0xb18 <testPiezo+0x22>
		turnOn(self, 0);
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	0e 94 77 05 	call	0xaee	; 0xaee <turnOn>
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <testPiezo+0x2a>
	} else {
		turnOff(self, 0);
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <turnOff>
	}
	AFTER(MSEC(500), self, testPiezo, !nothing);
     b20:	cc 24       	eor	r12, r12
     b22:	dd 24       	eor	r13, r13
     b24:	c3 94       	inc	r12
     b26:	20 97       	sbiw	r28, 0x00	; 0
     b28:	11 f0       	breq	.+4      	; 0xb2e <testPiezo+0x38>
     b2a:	cc 24       	eor	r12, r12
     b2c:	dd 24       	eor	r13, r13
     b2e:	69 e0       	ldi	r22, 0x09	; 9
     b30:	7d e3       	ldi	r23, 0x3D	; 61
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	a9 01       	movw	r20, r18
     b3c:	0f 2e       	mov	r0, r31
     b3e:	fb e7       	ldi	r31, 0x7B	; 123
     b40:	ef 2e       	mov	r14, r31
     b42:	f5 e0       	ldi	r31, 0x05	; 5
     b44:	ff 2e       	mov	r15, r31
     b46:	f0 2d       	mov	r31, r0
     b48:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>

}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	08 95       	ret

00000b5e <is_prime>:
#include "TinyTimber.h"
#include "lcd.h"
#include "primes.h"

int is_prime(int i)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	ec 01       	movw	r28, r24
	int loop;
	loop = sqrt(i);
     b68:	be 01       	movw	r22, r28
     b6a:	88 27       	eor	r24, r24
     b6c:	77 fd       	sbrc	r23, 7
     b6e:	80 95       	com	r24
     b70:	98 2f       	mov	r25, r24
     b72:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__floatsisf>
     b76:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <sqrt>
     b7a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <__fixsfsi>
     b7e:	9b 01       	movw	r18, r22
	int j = 0;
	int amount = 0;
	for (j=2; j<=loop+1; j++)
     b80:	2f 5f       	subi	r18, 0xFF	; 255
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	8c f0       	brlt	.+34     	; 0xbac <is_prime+0x4e>
int is_prime(int i)
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
     b8a:	00 e0       	ldi	r16, 0x00	; 0
     b8c:	10 e0       	ldi	r17, 0x00	; 0
	for (j=2; j<=loop+1; j++)
     b8e:	e2 e0       	ldi	r30, 0x02	; 2
     b90:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (i%j == 0)
     b92:	ce 01       	movw	r24, r28
     b94:	bf 01       	movw	r22, r30
     b96:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	11 f4       	brne	.+4      	; 0xba2 <is_prime+0x44>
		{
			amount++;
     b9e:	0f 5f       	subi	r16, 0xFF	; 255
     ba0:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
	for (j=2; j<=loop+1; j++)
     ba2:	31 96       	adiw	r30, 0x01	; 1
     ba4:	2e 17       	cp	r18, r30
     ba6:	3f 07       	cpc	r19, r31
     ba8:	a4 f7       	brge	.-24     	; 0xb92 <is_prime+0x34>
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <is_prime+0x52>
int is_prime(int i)
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
     bac:	00 e0       	ldi	r16, 0x00	; 0
     bae:	10 e0       	ldi	r17, 0x00	; 0
			amount++;
		}
	}
	if (amount != 0)
	{
		return 0;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	01 15       	cp	r16, r1
     bb6:	11 05       	cpc	r17, r1
     bb8:	11 f0       	breq	.+4      	; 0xbbe <is_prime+0x60>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	return 1;
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <primes>:

int primes(PrimeCalculator *self, int x)
{
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	7c 01       	movw	r14, r24
     bda:	eb 01       	movw	r28, r22
	while (!(is_prime(x)))
	{
		if (x==32767) x=0;
     bdc:	00 e0       	ldi	r16, 0x00	; 0
     bde:	10 e0       	ldi	r17, 0x00	; 0
	return 1;
}

int primes(PrimeCalculator *self, int x)
{
	while (!(is_prime(x)))
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <primes+0x28>
	{
		if (x==32767) x=0;
     be2:	8f e7       	ldi	r24, 0x7F	; 127
     be4:	cf 3f       	cpi	r28, 0xFF	; 255
     be6:	d8 07       	cpc	r29, r24
     be8:	11 f0       	breq	.+4      	; 0xbee <primes+0x26>
		else
		x++;
     bea:	21 96       	adiw	r28, 0x01	; 1
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <primes+0x28>

int primes(PrimeCalculator *self, int x)
{
	while (!(is_prime(x)))
	{
		if (x==32767) x=0;
     bee:	e8 01       	movw	r28, r16
	return 1;
}

int primes(PrimeCalculator *self, int x)
{
	while (!(is_prime(x)))
     bf0:	ce 01       	movw	r24, r28
     bf2:	0e 94 af 05 	call	0xb5e	; 0xb5e <is_prime>
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 f3       	breq	.-24     	; 0xbe2 <primes+0x1a>
	{
		if (x==32767) x=0;
		else
		x++;
	}
	SYNC(self->driver,writeInt,x);
     bfa:	f7 01       	movw	r30, r14
     bfc:	84 81       	ldd	r24, Z+4	; 0x04
     bfe:	95 81       	ldd	r25, Z+5	; 0x05
     c00:	61 e9       	ldi	r22, 0x91	; 145
     c02:	74 e0       	ldi	r23, 0x04	; 4
     c04:	ae 01       	movw	r20, r28
     c06:	0e 94 01 13 	call	0x2602	; 0x2602 <sync>
	x++;
     c0a:	6e 01       	movw	r12, r28
     c0c:	08 94       	sec
     c0e:	c1 1c       	adc	r12, r1
     c10:	d1 1c       	adc	r13, r1
	AFTER(MSEC(100),self, primes, x++);
     c12:	65 e3       	ldi	r22, 0x35	; 53
     c14:	7c e0       	ldi	r23, 0x0C	; 12
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	a9 01       	movw	r20, r18
     c20:	87 01       	movw	r16, r14
     c22:	0f 2e       	mov	r0, r31
     c24:	f4 ee       	ldi	r31, 0xE4	; 228
     c26:	ef 2e       	mov	r14, r31
     c28:	f5 e0       	ldi	r31, 0x05	; 5
     c2a:	ff 2e       	mov	r15, r31
     c2c:	f0 2d       	mov	r31, r0
     c2e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	08 95       	ret

00000c44 <setFrequence>:
	ASYNC(self,setFrequence,0);
}

int setFrequence(Sound *self, int frequency)
{
	self -> frequence = frequency;
     c44:	fc 01       	movw	r30, r24
     c46:	77 83       	std	Z+7, r23	; 0x07
     c48:	66 83       	std	Z+6, r22	; 0x06
}
     c4a:	08 95       	ret

00000c4c <playHightone>:
		turnOn(self->p,0);
	}
}

int playHightone(Sound *self, int nothing)
{
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	5b 01       	movw	r10, r22
	SEND(RESOLUTION(15625/(self->frequence)), MSEC(10), self,playHightone, 1-nothing);
     c64:	6e 81       	ldd	r22, Y+6	; 0x06
     c66:	7f 81       	ldd	r23, Y+7	; 0x07
     c68:	89 e0       	ldi	r24, 0x09	; 9
     c6a:	9d e3       	ldi	r25, 0x3D	; 61
     c6c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     c70:	cb 01       	movw	r24, r22
     c72:	ac 01       	movw	r20, r24
     c74:	66 27       	eor	r22, r22
     c76:	57 fd       	sbrc	r21, 7
     c78:	60 95       	com	r22
     c7a:	76 2f       	mov	r23, r22
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	6c 01       	movw	r12, r24
     c82:	ca 18       	sub	r12, r10
     c84:	db 08       	sbc	r13, r11
     c86:	cb 01       	movw	r24, r22
     c88:	ba 01       	movw	r22, r20
     c8a:	28 e3       	ldi	r18, 0x38	; 56
     c8c:	31 e0       	ldi	r19, 0x01	; 1
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	8e 01       	movw	r16, r28
     c94:	0f 2e       	mov	r0, r31
     c96:	f6 e2       	ldi	r31, 0x26	; 38
     c98:	ef 2e       	mov	r14, r31
     c9a:	f6 e0       	ldi	r31, 0x06	; 6
     c9c:	ff 2e       	mov	r15, r31
     c9e:	f0 2d       	mov	r31, r0
     ca0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
	if (nothing)
     ca4:	a1 14       	cp	r10, r1
     ca6:	b1 04       	cpc	r11, r1
     ca8:	99 f0       	breq	.+38     	; 0xcd0 <playHightone+0x84>
	{
		ASYNC(self->p,turnOff,0);
     caa:	0c 81       	ldd	r16, Y+4	; 0x04
     cac:	1d 81       	ldd	r17, Y+5	; 0x05
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	cb 01       	movw	r24, r22
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	a9 01       	movw	r20, r18
     cba:	0f 2e       	mov	r0, r31
     cbc:	f9 e7       	ldi	r31, 0x79	; 121
     cbe:	ef 2e       	mov	r14, r31
     cc0:	f5 e0       	ldi	r31, 0x05	; 5
     cc2:	ff 2e       	mov	r15, r31
     cc4:	f0 2d       	mov	r31, r0
     cc6:	cc 24       	eor	r12, r12
     cc8:	dd 24       	eor	r13, r13
     cca:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
     cce:	12 c0       	rjmp	.+36     	; 0xcf4 <playHightone+0xa8>
	}
	else
	ASYNC(self->p,turnOn,0);
     cd0:	0c 81       	ldd	r16, Y+4	; 0x04
     cd2:	1d 81       	ldd	r17, Y+5	; 0x05
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	cb 01       	movw	r24, r22
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	a9 01       	movw	r20, r18
     ce0:	0f 2e       	mov	r0, r31
     ce2:	f7 e7       	ldi	r31, 0x77	; 119
     ce4:	ef 2e       	mov	r14, r31
     ce6:	f5 e0       	ldi	r31, 0x05	; 5
     ce8:	ff 2e       	mov	r15, r31
     cea:	f0 2d       	mov	r31, r0
     cec:	cc 24       	eor	r12, r12
     cee:	dd 24       	eor	r13, r13
     cf0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	08 95       	ret

00000d0a <playMiddletone>:
#include "sound.h"
#include "TinyTimber.h"
#include <avr/io.h>

int playMiddletone(Sound *self, int nothing)
{
     d0a:	af 92       	push	r10
     d0c:	bf 92       	push	r11
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
     d20:	5b 01       	movw	r10, r22
	if(self->frequence!=0)
     d22:	6e 81       	ldd	r22, Y+6	; 0x06
     d24:	7f 81       	ldd	r23, Y+7	; 0x07
     d26:	61 15       	cp	r22, r1
     d28:	71 05       	cpc	r23, r1
     d2a:	71 f1       	breq	.+92     	; 0xd88 <playMiddletone+0x7e>
	{
		SEND(RESOLUTION(31250/(self->frequence)), MSEC(5), self,playMiddletone, 1-nothing);
     d2c:	82 e1       	ldi	r24, 0x12	; 18
     d2e:	9a e7       	ldi	r25, 0x7A	; 122
     d30:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__divmodhi4>
     d34:	cb 01       	movw	r24, r22
     d36:	ac 01       	movw	r20, r24
     d38:	66 27       	eor	r22, r22
     d3a:	57 fd       	sbrc	r21, 7
     d3c:	60 95       	com	r22
     d3e:	76 2f       	mov	r23, r22
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	6c 01       	movw	r12, r24
     d46:	ca 18       	sub	r12, r10
     d48:	db 08       	sbc	r13, r11
     d4a:	cb 01       	movw	r24, r22
     d4c:	ba 01       	movw	r22, r20
     d4e:	2c e9       	ldi	r18, 0x9C	; 156
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	8e 01       	movw	r16, r28
     d58:	0f 2e       	mov	r0, r31
     d5a:	f5 e8       	ldi	r31, 0x85	; 133
     d5c:	ef 2e       	mov	r14, r31
     d5e:	f6 e0       	ldi	r31, 0x06	; 6
     d60:	ff 2e       	mov	r15, r31
     d62:	f0 2d       	mov	r31, r0
     d64:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
	    //AFTER(RESOLUTION(31250/(self->frequence)),self,playMiddletone,1-nothing);
	    if (nothing)
     d68:	a1 14       	cp	r10, r1
     d6a:	b1 04       	cpc	r11, r1
     d6c:	39 f0       	breq	.+14     	; 0xd7c <playMiddletone+0x72>
	    {
		    //ASYNC(self->p,turnOff,0);
			turnOff(self->p,0);
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	9d 81       	ldd	r25, Y+5	; 0x05
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	0e 94 79 05 	call	0xaf2	; 0xaf2 <turnOff>
     d7a:	06 c0       	rjmp	.+12     	; 0xd88 <playMiddletone+0x7e>
	    }
	    else
	    //ASYNC(self->p,turnOn,0);
		turnOn(self->p,0);
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	0e 94 77 05 	call	0xaee	; 0xaee <turnOn>
	}
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	bf 90       	pop	r11
     d9a:	af 90       	pop	r10
     d9c:	08 95       	ret

00000d9e <startPlaying>:
}

int startPlaying(Sound *self, int nothing)
{
	//ASYNC(self,playMiddletone,0);
	playMiddletone(self,0);
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	0e 94 85 06 	call	0xd0a	; 0xd0a <playMiddletone>
}
     da6:	08 95       	ret

00000da8 <stopPlaying>:

int stopPlaying(Sound *self, int nothing)
{
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	8c 01       	movw	r16, r24
	ASYNC(self,setFrequence,0);
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	cb 01       	movw	r24, r22
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	a9 01       	movw	r20, r18
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f2 e2       	ldi	r31, 0x22	; 34
     dc6:	ef 2e       	mov	r14, r31
     dc8:	f6 e0       	ldi	r31, 0x06	; 6
     dca:	ff 2e       	mov	r15, r31
     dcc:	f0 2d       	mov	r31, r0
     dce:	cc 24       	eor	r12, r12
     dd0:	dd 24       	eor	r13, r13
     dd2:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <async>
}
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	08 95       	ret

00000de4 <remove>:
    Thread t = *stack;
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	eb 01       	movw	r28, r22
    Msg prev = NULL, q = *queue;
     dea:	e8 81       	ld	r30, Y
     dec:	f9 81       	ldd	r31, Y+1	; 0x01
    while (q && (q != m)) {
     dee:	30 97       	sbiw	r30, 0x00	; 0
     df0:	f9 f0       	breq	.+62     	; 0xe30 <remove+0x4c>
     df2:	e8 17       	cp	r30, r24
     df4:	f9 07       	cpc	r31, r25
     df6:	11 f4       	brne	.+4      	; 0xdfc <remove+0x18>
     df8:	12 c0       	rjmp	.+36     	; 0xe1e <remove+0x3a>
        prev = q;
        q = q->next;
     dfa:	fd 01       	movw	r30, r26
     dfc:	a0 81       	ld	r26, Z
     dfe:	b1 81       	ldd	r27, Z+1	; 0x01
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     e00:	10 97       	sbiw	r26, 0x00	; 0
     e02:	c9 f0       	breq	.+50     	; 0xe36 <remove+0x52>
     e04:	8a 17       	cp	r24, r26
     e06:	9b 07       	cpc	r25, r27
     e08:	c1 f7       	brne	.-16     	; 0xdfa <remove+0x16>
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	49 f0       	breq	.+18     	; 0xe20 <remove+0x3c>
            prev->next = q->next;
     e0e:	8d 91       	ld	r24, X+
     e10:	9c 91       	ld	r25, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
        else
            *queue = q->next;
        return 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <remove+0x56>
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     e1e:	df 01       	movw	r26, r30
    }
    if (q) {
        if (prev)
            prev->next = q->next;
        else
            *queue = q->next;
     e20:	8d 91       	ld	r24, X+
     e22:	9c 91       	ld	r25, X
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	99 83       	std	Y+1, r25	; 0x01
     e28:	88 83       	st	Y, r24
        return 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <remove+0x56>
    }
    return 0;
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <remove+0x56>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
}
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	00 d0       	rcall	.+0      	; 0xe46 <dispatch+0x6>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	9a 83       	std	Y+2, r25	; 0x02
     e4c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     e4e:	80 91 42 01 	lds	r24, 0x0142
     e52:	90 91 43 01 	lds	r25, 0x0143
     e56:	06 96       	adiw	r24, 0x06	; 6
     e58:	0e 94 76 16 	call	0x2cec	; 0x2cec <setjmp>
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	59 f4       	brne	.+22     	; 0xe76 <dispatch+0x36>
        current = next;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	9a 81       	ldd	r25, Y+2	; 0x02
     e64:	90 93 43 01 	sts	0x0143, r25
     e68:	80 93 42 01 	sts	0x0142, r24
        longjmp( next->context, 1 );
     e6c:	06 96       	adiw	r24, 0x06	; 6
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <longjmp>
    }
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <DUMP>:

#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
     e80:	fc 01       	movw	r30, r24
  while (*s)
     e82:	80 81       	ld	r24, Z
     e84:	88 23       	and	r24, r24
     e86:	21 f0       	breq	.+8      	; 0xe90 <DUMP+0x10>

#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
     e88:	31 96       	adiw	r30, 0x01	; 1
  while (*s)
     e8a:	81 91       	ld	r24, Z+
     e8c:	88 23       	and	r24, r24
     e8e:	e9 f7       	brne	.-6      	; 0xe8a <DUMP+0xa>
     e90:	08 95       	ret

00000e92 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	00 d0       	rcall	.+0      	; 0xe98 <initialize+0x6>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <initialize+0x8>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <initialize+0xa>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     ea0:	e7 e4       	ldi	r30, 0x47	; 71
     ea2:	f2 e0       	ldi	r31, 0x02	; 2
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
        messages[i].next = &messages[i+1];
     ea8:	9c 01       	movw	r18, r24
     eaa:	22 95       	swap	r18
     eac:	32 95       	swap	r19
     eae:	30 7f       	andi	r19, 0xF0	; 240
     eb0:	32 27       	eor	r19, r18
     eb2:	20 7f       	andi	r18, 0xF0	; 240
     eb4:	32 27       	eor	r19, r18
     eb6:	29 5b       	subi	r18, 0xB9	; 185
     eb8:	3d 4f       	sbci	r19, 0xFD	; 253
     eba:	31 83       	std	Z+1, r19	; 0x01
     ebc:	20 83       	st	Z, r18
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	70 96       	adiw	r30, 0x10	; 16
static void initialize(void) {
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     ec2:	8f 30       	cpi	r24, 0x0F	; 15
     ec4:	91 05       	cpc	r25, r1
     ec6:	81 f7       	brne	.-32     	; 0xea8 <initialize+0x16>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     ec8:	10 92 28 03 	sts	0x0328, r1
     ecc:	10 92 27 03 	sts	0x0327, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     ed0:	82 e9       	ldi	r24, 0x92	; 146
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	9c 01       	movw	r18, r24
     ed6:	23 5e       	subi	r18, 0xE3	; 227
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	30 93 93 01 	sts	0x0193, r19
     ede:	20 93 92 01 	sts	0x0192, r18
     ee2:	9c 01       	movw	r18, r24
     ee4:	26 5c       	subi	r18, 0xC6	; 198
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	30 93 b0 01 	sts	0x01B0, r19
     eec:	20 93 af 01 	sts	0x01AF, r18
     ef0:	29 ee       	ldi	r18, 0xE9	; 233
     ef2:	31 e0       	ldi	r19, 0x01	; 1
     ef4:	30 93 cd 01 	sts	0x01CD, r19
     ef8:	20 93 cc 01 	sts	0x01CC, r18
    threads[NTHREADS-1].next = NULL;
     efc:	10 92 ea 01 	sts	0x01EA, r1
     f00:	10 92 e9 01 	sts	0x01E9, r1
     f04:	9c 01       	movw	r18, r24
     f06:	2c 5f       	subi	r18, 0xFC	; 252
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	3e 83       	std	Y+6, r19	; 0x06
     f0c:	2d 83       	std	Y+5, r18	; 0x05
    
    for (i=0; i<NTHREADS; i++) {
     f0e:	1a 82       	std	Y+2, r1	; 0x02
     f10:	19 82       	std	Y+1, r1	; 0x01
        setjmp( threads[i].context );
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	9c 01       	movw	r18, r24
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	22 0f       	add	r18, r18
     f2a:	33 1f       	adc	r19, r19
     f2c:	28 1b       	sub	r18, r24
     f2e:	39 0b       	sbc	r19, r25
     f30:	49 81       	ldd	r20, Y+1	; 0x01
     f32:	5a 81       	ldd	r21, Y+2	; 0x02
     f34:	24 0f       	add	r18, r20
     f36:	35 1f       	adc	r19, r21
     f38:	c9 01       	movw	r24, r18
     f3a:	88 56       	subi	r24, 0x68	; 104
     f3c:	9e 4f       	sbci	r25, 0xFE	; 254
     f3e:	9c 83       	std	Y+4, r25	; 0x04
     f40:	8b 83       	std	Y+3, r24	; 0x03
     f42:	0e 94 76 16 	call	0x2cec	; 0x2cec <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     f46:	e9 81       	ldd	r30, Y+1	; 0x01
     f48:	fa 81       	ldd	r31, Y+2	; 0x02
     f4a:	20 e6       	ldi	r18, 0x60	; 96
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	e2 9f       	mul	r30, r18
     f50:	c0 01       	movw	r24, r0
     f52:	e3 9f       	mul	r30, r19
     f54:	90 0d       	add	r25, r0
     f56:	f2 9f       	mul	r31, r18
     f58:	90 0d       	add	r25, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	8d 56       	subi	r24, 0x6D	; 109
     f5e:	9c 4f       	sbci	r25, 0xFC	; 252
     f60:	eb 81       	ldd	r30, Y+3	; 0x03
     f62:	fc 81       	ldd	r31, Y+4	; 0x04
     f64:	91 8b       	std	Z+17, r25	; 0x11
     f66:	80 8b       	std	Z+16, r24	; 0x10
     f68:	93 8b       	std	Z+19, r25	; 0x13
     f6a:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     f6c:	2e e9       	ldi	r18, 0x9E	; 158
     f6e:	33 e1       	ldi	r19, 0x13	; 19
     f70:	36 8b       	std	Z+22, r19	; 0x16
     f72:	25 8b       	std	Z+21, r18	; 0x15
        threads[i].waitsFor = NULL;
     f74:	ed 81       	ldd	r30, Y+5	; 0x05
     f76:	fe 81       	ldd	r31, Y+6	; 0x06
     f78:	11 82       	std	Z+1, r1	; 0x01
     f7a:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     f7c:	29 81       	ldd	r18, Y+1	; 0x01
     f7e:	3a 81       	ldd	r19, Y+2	; 0x02
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	3a 83       	std	Y+2, r19	; 0x02
     f86:	29 83       	std	Y+1, r18	; 0x01
     f88:	7d 96       	adiw	r30, 0x1d	; 29
     f8a:	fe 83       	std	Y+6, r31	; 0x06
     f8c:	ed 83       	std	Y+5, r30	; 0x05
     f8e:	24 30       	cpi	r18, 0x04	; 4
     f90:	31 05       	cpc	r19, r1
     f92:	09 f0       	breq	.+2      	; 0xf96 <initialize+0x104>
     f94:	be cf       	rjmp	.-132    	; 0xf12 <initialize+0x80>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     f96:	10 92 2b 02 	sts	0x022B, r1
     f9a:	10 92 2a 02 	sts	0x022A, r1
    thread0.waitsFor = NULL;
     f9e:	10 92 2f 02 	sts	0x022F, r1
     fa2:	10 92 2e 02 	sts	0x022E, r1
    thread0.msg = NULL;
     fa6:	10 92 2d 02 	sts	0x022D, r1
     faa:	10 92 2c 02 	sts	0x022C, r1
    
    DUMP("\n\rTinyTimber ");
     fae:	8e e1       	ldi	r24, 0x1E	; 30
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 40 07 	call	0xe80	; 0xe80 <DUMP>
    DUMP(TINYTIMBER_VERSION);
     fb6:	8c e2       	ldi	r24, 0x2C	; 44
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 40 07 	call	0xe80	; 0xe80 <DUMP>
    DUMP("\n\r");
     fbe:	8f e3       	ldi	r24, 0x3F	; 63
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	0e 94 40 07 	call	0xe80	; 0xe80 <DUMP>
    TIMER_INIT();
     fc6:	e1 e6       	ldi	r30, 0x61	; 97
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 e8       	ldi	r24, 0x80	; 128
     fcc:	80 83       	st	Z, r24
     fce:	10 82       	st	Z, r1
     fd0:	10 92 85 00 	sts	0x0085, r1
     fd4:	10 92 84 00 	sts	0x0084, r1
     fd8:	84 e0       	ldi	r24, 0x04	; 4
     fda:	80 93 81 00 	sts	0x0081, r24
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 6f 00 	sts	0x006F, r24
}
     fe4:	26 96       	adiw	r28, 0x06	; 6
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <DUMPH>:

char hex[] = "0123456789ABCDEF";

void DUMPH(unsigned int val) {
    char buf[8];
    int i = 0;
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
    do {
        buf[i++] = hex[val & 0x0F];
     ffa:	2f 5f       	subi	r18, 0xFF	; 255
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
        val = val >> 4;
     ffe:	92 95       	swap	r25
    1000:	82 95       	swap	r24
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	89 27       	eor	r24, r25
    1006:	9f 70       	andi	r25, 0x0F	; 15
    1008:	89 27       	eor	r24, r25
    } while (val);
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	b1 f7       	brne	.-20     	; 0xffa <DUMPH+0x4>
    while (i)
    100e:	21 15       	cp	r18, r1
    1010:	31 05       	cpc	r19, r1
    1012:	19 f0       	breq	.+6      	; 0x101a <DUMPH+0x24>
        DUMPC(buf[--i]);
    1014:	21 50       	subi	r18, 0x01	; 1
    1016:	30 40       	sbci	r19, 0x00	; 0
    int i = 0;
    do {
        buf[i++] = hex[val & 0x0F];
        val = val >> 4;
    } while (val);
    while (i)
    1018:	e9 f7       	brne	.-6      	; 0x1014 <DUMPH+0x1e>
    101a:	08 95       	ret

0000101c <DUMP_INIT>:
#define INFINITY        0x7fffffffL
#define INF(a)          ( (a)==0 ? INFINITY : (a) )

void DUMP_INIT() {

}
    101c:	08 95       	ret

0000101e <DUMPC>:

void DUMPC(char c) {
    
}
    101e:	08 95       	ret

00001020 <enqueueByDeadline>:
#pragma	DATA default

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	9c 01       	movw	r18, r24
    102a:	8b 01       	movw	r16, r22
    Msg prev = NULL, q = *queue;
    102c:	db 01       	movw	r26, r22
    102e:	cd 91       	ld	r28, X+
    1030:	dc 91       	ld	r29, X
    1032:	11 97       	sbiw	r26, 0x01	; 1
    while (q && (q->deadline <= p->deadline)) {
    1034:	20 97       	sbiw	r28, 0x00	; 0
    1036:	51 f1       	breq	.+84     	; 0x108c <enqueueByDeadline+0x6c>
    1038:	fc 01       	movw	r30, r24
    103a:	46 81       	ldd	r20, Z+6	; 0x06
    103c:	57 81       	ldd	r21, Z+7	; 0x07
    103e:	60 85       	ldd	r22, Z+8	; 0x08
    1040:	71 85       	ldd	r23, Z+9	; 0x09
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	9f 81       	ldd	r25, Y+7	; 0x07
    1046:	a8 85       	ldd	r26, Y+8	; 0x08
    1048:	b9 85       	ldd	r27, Y+9	; 0x09
    104a:	48 17       	cp	r20, r24
    104c:	59 07       	cpc	r21, r25
    104e:	6a 07       	cpc	r22, r26
    1050:	7b 07       	cpc	r23, r27
    1052:	14 f4       	brge	.+4      	; 0x1058 <enqueueByDeadline+0x38>
    1054:	1b c0       	rjmp	.+54     	; 0x108c <enqueueByDeadline+0x6c>
        prev = q;
        q = q->next;
    1056:	ef 01       	movw	r28, r30
    1058:	e8 81       	ld	r30, Y
    105a:	f9 81       	ldd	r31, Y+1	; 0x01
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    105c:	30 97       	sbiw	r30, 0x00	; 0
    105e:	49 f0       	breq	.+18     	; 0x1072 <enqueueByDeadline+0x52>
    1060:	86 81       	ldd	r24, Z+6	; 0x06
    1062:	97 81       	ldd	r25, Z+7	; 0x07
    1064:	a0 85       	ldd	r26, Z+8	; 0x08
    1066:	b1 85       	ldd	r27, Z+9	; 0x09
    1068:	48 17       	cp	r20, r24
    106a:	59 07       	cpc	r21, r25
    106c:	6a 07       	cpc	r22, r26
    106e:	7b 07       	cpc	r23, r27
    1070:	94 f7       	brge	.-28     	; 0x1056 <enqueueByDeadline+0x36>
        prev = q;
        q = q->next;
    }
    p->next = q;
    1072:	d9 01       	movw	r26, r18
    1074:	11 96       	adiw	r26, 0x01	; 1
    1076:	fc 93       	st	X, r31
    1078:	ee 93       	st	-X, r30
    if (prev == NULL)
    107a:	20 97       	sbiw	r28, 0x00	; 0
    107c:	21 f4       	brne	.+8      	; 0x1086 <enqueueByDeadline+0x66>
        *queue = p;
    107e:	f8 01       	movw	r30, r16
    1080:	31 83       	std	Z+1, r19	; 0x01
    1082:	20 83       	st	Z, r18
    1084:	08 c0       	rjmp	.+16     	; 0x1096 <enqueueByDeadline+0x76>
    else
        prev->next = p;
    1086:	39 83       	std	Y+1, r19	; 0x01
    1088:	28 83       	st	Y, r18
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <enqueueByDeadline+0x76>
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    108c:	d9 01       	movw	r26, r18
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	dc 93       	st	X, r29
    1092:	ce 93       	st	-X, r28
    1094:	f4 cf       	rjmp	.-24     	; 0x107e <enqueueByDeadline+0x5e>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	9c 01       	movw	r18, r24
    10aa:	8b 01       	movw	r16, r22
    Msg prev = NULL, q = *queue;
    10ac:	db 01       	movw	r26, r22
    10ae:	cd 91       	ld	r28, X+
    10b0:	dc 91       	ld	r29, X
    10b2:	11 97       	sbiw	r26, 0x01	; 1
    while (q && (q->baseline <= p->baseline )) {
    10b4:	20 97       	sbiw	r28, 0x00	; 0
    10b6:	51 f1       	breq	.+84     	; 0x110c <enqueueByBaseline+0x6c>
    10b8:	fc 01       	movw	r30, r24
    10ba:	42 81       	ldd	r20, Z+2	; 0x02
    10bc:	53 81       	ldd	r21, Z+3	; 0x03
    10be:	64 81       	ldd	r22, Z+4	; 0x04
    10c0:	75 81       	ldd	r23, Z+5	; 0x05
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	ac 81       	ldd	r26, Y+4	; 0x04
    10c8:	bd 81       	ldd	r27, Y+5	; 0x05
    10ca:	48 17       	cp	r20, r24
    10cc:	59 07       	cpc	r21, r25
    10ce:	6a 07       	cpc	r22, r26
    10d0:	7b 07       	cpc	r23, r27
    10d2:	14 f4       	brge	.+4      	; 0x10d8 <enqueueByBaseline+0x38>
    10d4:	1b c0       	rjmp	.+54     	; 0x110c <enqueueByBaseline+0x6c>
        prev = q;
        q = q->next;
    10d6:	ef 01       	movw	r28, r30
    10d8:	e8 81       	ld	r30, Y
    10da:	f9 81       	ldd	r31, Y+1	; 0x01
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
    10dc:	30 97       	sbiw	r30, 0x00	; 0
    10de:	49 f0       	breq	.+18     	; 0x10f2 <enqueueByBaseline+0x52>
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	a4 81       	ldd	r26, Z+4	; 0x04
    10e6:	b5 81       	ldd	r27, Z+5	; 0x05
    10e8:	48 17       	cp	r20, r24
    10ea:	59 07       	cpc	r21, r25
    10ec:	6a 07       	cpc	r22, r26
    10ee:	7b 07       	cpc	r23, r27
    10f0:	94 f7       	brge	.-28     	; 0x10d6 <enqueueByBaseline+0x36>
        prev = q;
        q = q->next;
    }
    p->next = q;
    10f2:	d9 01       	movw	r26, r18
    10f4:	11 96       	adiw	r26, 0x01	; 1
    10f6:	fc 93       	st	X, r31
    10f8:	ee 93       	st	-X, r30
    if (prev == NULL)
    10fa:	20 97       	sbiw	r28, 0x00	; 0
    10fc:	21 f4       	brne	.+8      	; 0x1106 <enqueueByBaseline+0x66>
        *queue = p;
    10fe:	f8 01       	movw	r30, r16
    1100:	31 83       	std	Z+1, r19	; 0x01
    1102:	20 83       	st	Z, r18
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <enqueueByBaseline+0x76>
    else
        prev->next = p;
    1106:	39 83       	std	Y+1, r19	; 0x01
    1108:	28 83       	st	Y, r18
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <enqueueByBaseline+0x76>
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    110c:	d9 01       	movw	r26, r18
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	dc 93       	st	X, r29
    1112:	ce 93       	st	-X, r28
    1114:	f4 cf       	rjmp	.-24     	; 0x10fe <enqueueByBaseline+0x5e>
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <dequeue>:

Msg dequeue(Msg *queue) {
    1120:	dc 01       	movw	r26, r24
    Msg m = *queue;
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	41 f0       	breq	.+16     	; 0x113c <dequeue+0x1c>
        *queue = m->next;
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	9c 93       	st	X, r25
    1134:	8e 93       	st	-X, r24
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
    1136:	8e 2f       	mov	r24, r30
    1138:	9f 2f       	mov	r25, r31
    113a:	08 95       	ret
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	80 93 ec 00 	sts	0x00EC, r24
    1142:	80 93 ed 00 	sts	0x00ED, r24
    1146:	80 93 ee 00 	sts	0x00EE, r24
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	83 bf       	out	0x33, r24	; 51
    114e:	88 95       	sleep
    1150:	fd cf       	rjmp	.-6      	; 0x114c <dequeue+0x2c>

00001152 <insert>:
    return m;
}

void insert(Msg m, Msg *queue) {
    1152:	fb 01       	movw	r30, r22
    m->next = *queue;
    1154:	20 81       	ld	r18, Z
    1156:	31 81       	ldd	r19, Z+1	; 0x01
    1158:	dc 01       	movw	r26, r24
    115a:	11 96       	adiw	r26, 0x01	; 1
    115c:	3c 93       	st	X, r19
    115e:	2e 93       	st	-X, r18
    *queue = m;
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	80 83       	st	Z, r24
}
    1164:	08 95       	ret

00001166 <push>:

void push(Thread t, Thread *stack) {
    1166:	fb 01       	movw	r30, r22
    t->next = *stack;
    1168:	20 81       	ld	r18, Z
    116a:	31 81       	ldd	r19, Z+1	; 0x01
    116c:	dc 01       	movw	r26, r24
    116e:	11 96       	adiw	r26, 0x01	; 1
    1170:	3c 93       	st	X, r19
    1172:	2e 93       	st	-X, r18
    *stack = t;
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
}
    1178:	08 95       	ret

0000117a <pop>:

Thread pop(Thread *stack) {
    117a:	dc 01       	movw	r26, r24
    Thread t = *stack;
    117c:	ed 91       	ld	r30, X+
    117e:	fc 91       	ld	r31, X
    1180:	11 97       	sbiw	r26, 0x01	; 1
    *stack = t->next;
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	9c 93       	st	X, r25
    118a:	8e 93       	st	-X, r24
    return t;
}
    118c:	8e 2f       	mov	r24, r30
    118e:	9f 2f       	mov	r25, r31
    1190:	08 95       	ret

00001192 <schedule>:
        SLEEP();
    }
}

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    1192:	e0 91 44 01 	lds	r30, 0x0144
    1196:	f0 91 45 01 	lds	r31, 0x0145
    119a:	02 80       	ldd	r0, Z+2	; 0x02
    119c:	f3 81       	ldd	r31, Z+3	; 0x03
    119e:	e0 2d       	mov	r30, r0
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
    11a0:	a0 91 6c 01 	lds	r26, 0x016C
    11a4:	b0 91 6d 01 	lds	r27, 0x016D
    11a8:	10 97       	sbiw	r26, 0x00	; 0
    11aa:	29 f1       	breq	.+74     	; 0x11f6 <schedule+0x64>
    11ac:	80 91 46 01 	lds	r24, 0x0146
    11b0:	90 91 47 01 	lds	r25, 0x0147
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	f9 f0       	breq	.+62     	; 0x11f6 <schedule+0x64>
    11b8:	30 97       	sbiw	r30, 0x00	; 0
    11ba:	79 f0       	breq	.+30     	; 0x11da <schedule+0x48>
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	8d 91       	ld	r24, X+
    11c0:	9d 91       	ld	r25, X+
    11c2:	0d 90       	ld	r0, X+
    11c4:	bc 91       	ld	r27, X
    11c6:	a0 2d       	mov	r26, r0
    11c8:	46 81       	ldd	r20, Z+6	; 0x06
    11ca:	57 81       	ldd	r21, Z+7	; 0x07
    11cc:	60 85       	ldd	r22, Z+8	; 0x08
    11ce:	71 85       	ldd	r23, Z+9	; 0x09
    11d0:	84 1b       	sub	r24, r20
    11d2:	95 0b       	sbc	r25, r21
    11d4:	a6 0b       	sbc	r26, r22
    11d6:	b7 0b       	sbc	r27, r23
    11d8:	72 f4       	brpl	.+28     	; 0x11f6 <schedule+0x64>
        push(pop(&threadPool), &activeStack);
    11da:	86 e4       	ldi	r24, 0x46	; 70
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	0e 94 bd 08 	call	0x117a	; 0x117a <pop>
    11e2:	64 e4       	ldi	r22, 0x44	; 68
    11e4:	71 e0       	ldi	r23, 0x01	; 1
    11e6:	0e 94 b3 08 	call	0x1166	; 0x1166 <push>
        dispatch(activeStack);
    11ea:	80 91 44 01 	lds	r24, 0x0144
    11ee:	90 91 45 01 	lds	r25, 0x0145
    11f2:	0e 94 20 07 	call	0xe40	; 0xe40 <dispatch>
    11f6:	08 95       	ret

000011f8 <__vector_22>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
IRQ(IRQ_LCD,             LCD_vect);
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	2f 93       	push	r18
    1208:	3f 93       	push	r19
    120a:	4f 93       	push	r20
    120c:	5f 93       	push	r21
    120e:	6f 93       	push	r22
    1210:	7f 93       	push	r23
    1212:	8f 93       	push	r24
    1214:	9f 93       	push	r25
    1216:	af 93       	push	r26
    1218:	bf 93       	push	r27
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31
    121e:	80 91 64 01 	lds	r24, 0x0164
    1222:	90 91 65 01 	lds	r25, 0x0165
    1226:	20 91 84 00 	lds	r18, 0x0084
    122a:	30 91 85 00 	lds	r19, 0x0085
    122e:	ac 01       	movw	r20, r24
    1230:	66 27       	eor	r22, r22
    1232:	57 fd       	sbrc	r21, 7
    1234:	60 95       	com	r22
    1236:	76 2f       	mov	r23, r22
    1238:	ba 01       	movw	r22, r20
    123a:	55 27       	eor	r21, r21
    123c:	44 27       	eor	r20, r20
    123e:	89 01       	movw	r16, r18
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 2b       	or	r20, r16
    1246:	51 2b       	or	r21, r17
    1248:	62 2b       	or	r22, r18
    124a:	73 2b       	or	r23, r19
    124c:	40 93 66 01 	sts	0x0166, r20
    1250:	50 93 67 01 	sts	0x0167, r21
    1254:	60 93 68 01 	sts	0x0168, r22
    1258:	70 93 69 01 	sts	0x0169, r23
    125c:	b0 9b       	sbis	0x16, 0	; 22
    125e:	1a c0       	rjmp	.+52     	; 0x1294 <__vector_22+0x9c>
    1260:	40 91 84 00 	lds	r20, 0x0084
    1264:	50 91 85 00 	lds	r21, 0x0085
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	aa 27       	eor	r26, r26
    126c:	97 fd       	sbrc	r25, 7
    126e:	a0 95       	com	r26
    1270:	ba 2f       	mov	r27, r26
    1272:	dc 01       	movw	r26, r24
    1274:	99 27       	eor	r25, r25
    1276:	88 27       	eor	r24, r24
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	84 2b       	or	r24, r20
    127e:	95 2b       	or	r25, r21
    1280:	a6 2b       	or	r26, r22
    1282:	b7 2b       	or	r27, r23
    1284:	80 93 66 01 	sts	0x0166, r24
    1288:	90 93 67 01 	sts	0x0167, r25
    128c:	a0 93 68 01 	sts	0x0168, r26
    1290:	b0 93 69 01 	sts	0x0169, r27
    1294:	e0 91 28 02 	lds	r30, 0x0228
    1298:	f0 91 29 02 	lds	r31, 0x0229
    129c:	30 97       	sbiw	r30, 0x00	; 0
    129e:	39 f0       	breq	.+14     	; 0x12ae <__vector_22+0xb6>
    12a0:	80 91 90 01 	lds	r24, 0x0190
    12a4:	90 91 91 01 	lds	r25, 0x0191
    12a8:	61 e1       	ldi	r22, 0x11	; 17
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	09 95       	icall
    12ae:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_21>:
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
    12fe:	80 91 64 01 	lds	r24, 0x0164
    1302:	90 91 65 01 	lds	r25, 0x0165
    1306:	20 91 84 00 	lds	r18, 0x0084
    130a:	30 91 85 00 	lds	r19, 0x0085
    130e:	ac 01       	movw	r20, r24
    1310:	66 27       	eor	r22, r22
    1312:	57 fd       	sbrc	r21, 7
    1314:	60 95       	com	r22
    1316:	76 2f       	mov	r23, r22
    1318:	ba 01       	movw	r22, r20
    131a:	55 27       	eor	r21, r21
    131c:	44 27       	eor	r20, r20
    131e:	89 01       	movw	r16, r18
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 2b       	or	r20, r16
    1326:	51 2b       	or	r21, r17
    1328:	62 2b       	or	r22, r18
    132a:	73 2b       	or	r23, r19
    132c:	40 93 66 01 	sts	0x0166, r20
    1330:	50 93 67 01 	sts	0x0167, r21
    1334:	60 93 68 01 	sts	0x0168, r22
    1338:	70 93 69 01 	sts	0x0169, r23
    133c:	b0 9b       	sbis	0x16, 0	; 22
    133e:	1a c0       	rjmp	.+52     	; 0x1374 <__vector_21+0x9c>
    1340:	40 91 84 00 	lds	r20, 0x0084
    1344:	50 91 85 00 	lds	r21, 0x0085
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	aa 27       	eor	r26, r26
    134c:	97 fd       	sbrc	r25, 7
    134e:	a0 95       	com	r26
    1350:	ba 2f       	mov	r27, r26
    1352:	dc 01       	movw	r26, r24
    1354:	99 27       	eor	r25, r25
    1356:	88 27       	eor	r24, r24
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	84 2b       	or	r24, r20
    135e:	95 2b       	or	r25, r21
    1360:	a6 2b       	or	r26, r22
    1362:	b7 2b       	or	r27, r23
    1364:	80 93 66 01 	sts	0x0166, r24
    1368:	90 93 67 01 	sts	0x0167, r25
    136c:	a0 93 68 01 	sts	0x0168, r26
    1370:	b0 93 69 01 	sts	0x0169, r27
    1374:	e0 91 26 02 	lds	r30, 0x0226
    1378:	f0 91 27 02 	lds	r31, 0x0227
    137c:	30 97       	sbiw	r30, 0x00	; 0
    137e:	39 f0       	breq	.+14     	; 0x138e <__vector_21+0xb6>
    1380:	80 91 8e 01 	lds	r24, 0x018E
    1384:	90 91 8f 01 	lds	r25, 0x018F
    1388:	60 e1       	ldi	r22, 0x10	; 16
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	09 95       	icall
    138e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	4f 91       	pop	r20
    13a6:	3f 91       	pop	r19
    13a8:	2f 91       	pop	r18
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <__vector_20>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	80 91 64 01 	lds	r24, 0x0164
    13e2:	90 91 65 01 	lds	r25, 0x0165
    13e6:	20 91 84 00 	lds	r18, 0x0084
    13ea:	30 91 85 00 	lds	r19, 0x0085
    13ee:	ac 01       	movw	r20, r24
    13f0:	66 27       	eor	r22, r22
    13f2:	57 fd       	sbrc	r21, 7
    13f4:	60 95       	com	r22
    13f6:	76 2f       	mov	r23, r22
    13f8:	ba 01       	movw	r22, r20
    13fa:	55 27       	eor	r21, r21
    13fc:	44 27       	eor	r20, r20
    13fe:	89 01       	movw	r16, r18
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 2b       	or	r20, r16
    1406:	51 2b       	or	r21, r17
    1408:	62 2b       	or	r22, r18
    140a:	73 2b       	or	r23, r19
    140c:	40 93 66 01 	sts	0x0166, r20
    1410:	50 93 67 01 	sts	0x0167, r21
    1414:	60 93 68 01 	sts	0x0168, r22
    1418:	70 93 69 01 	sts	0x0169, r23
    141c:	b0 9b       	sbis	0x16, 0	; 22
    141e:	1a c0       	rjmp	.+52     	; 0x1454 <__vector_20+0x9c>
    1420:	40 91 84 00 	lds	r20, 0x0084
    1424:	50 91 85 00 	lds	r21, 0x0085
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	aa 27       	eor	r26, r26
    142c:	97 fd       	sbrc	r25, 7
    142e:	a0 95       	com	r26
    1430:	ba 2f       	mov	r27, r26
    1432:	dc 01       	movw	r26, r24
    1434:	99 27       	eor	r25, r25
    1436:	88 27       	eor	r24, r24
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	84 2b       	or	r24, r20
    143e:	95 2b       	or	r25, r21
    1440:	a6 2b       	or	r26, r22
    1442:	b7 2b       	or	r27, r23
    1444:	80 93 66 01 	sts	0x0166, r24
    1448:	90 93 67 01 	sts	0x0167, r25
    144c:	a0 93 68 01 	sts	0x0168, r26
    1450:	b0 93 69 01 	sts	0x0169, r27
    1454:	e0 91 24 02 	lds	r30, 0x0224
    1458:	f0 91 25 02 	lds	r31, 0x0225
    145c:	30 97       	sbiw	r30, 0x00	; 0
    145e:	39 f0       	breq	.+14     	; 0x146e <__vector_20+0xb6>
    1460:	80 91 8c 01 	lds	r24, 0x018C
    1464:	90 91 8d 01 	lds	r25, 0x018D
    1468:	6f e0       	ldi	r22, 0x0F	; 15
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	09 95       	icall
    146e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_19>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	80 91 64 01 	lds	r24, 0x0164
    14c2:	90 91 65 01 	lds	r25, 0x0165
    14c6:	20 91 84 00 	lds	r18, 0x0084
    14ca:	30 91 85 00 	lds	r19, 0x0085
    14ce:	ac 01       	movw	r20, r24
    14d0:	66 27       	eor	r22, r22
    14d2:	57 fd       	sbrc	r21, 7
    14d4:	60 95       	com	r22
    14d6:	76 2f       	mov	r23, r22
    14d8:	ba 01       	movw	r22, r20
    14da:	55 27       	eor	r21, r21
    14dc:	44 27       	eor	r20, r20
    14de:	89 01       	movw	r16, r18
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 2b       	or	r20, r16
    14e6:	51 2b       	or	r21, r17
    14e8:	62 2b       	or	r22, r18
    14ea:	73 2b       	or	r23, r19
    14ec:	40 93 66 01 	sts	0x0166, r20
    14f0:	50 93 67 01 	sts	0x0167, r21
    14f4:	60 93 68 01 	sts	0x0168, r22
    14f8:	70 93 69 01 	sts	0x0169, r23
    14fc:	b0 9b       	sbis	0x16, 0	; 22
    14fe:	1a c0       	rjmp	.+52     	; 0x1534 <__vector_19+0x9c>
    1500:	40 91 84 00 	lds	r20, 0x0084
    1504:	50 91 85 00 	lds	r21, 0x0085
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	aa 27       	eor	r26, r26
    150c:	97 fd       	sbrc	r25, 7
    150e:	a0 95       	com	r26
    1510:	ba 2f       	mov	r27, r26
    1512:	dc 01       	movw	r26, r24
    1514:	99 27       	eor	r25, r25
    1516:	88 27       	eor	r24, r24
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	84 2b       	or	r24, r20
    151e:	95 2b       	or	r25, r21
    1520:	a6 2b       	or	r26, r22
    1522:	b7 2b       	or	r27, r23
    1524:	80 93 66 01 	sts	0x0166, r24
    1528:	90 93 67 01 	sts	0x0167, r25
    152c:	a0 93 68 01 	sts	0x0168, r26
    1530:	b0 93 69 01 	sts	0x0169, r27
    1534:	e0 91 22 02 	lds	r30, 0x0222
    1538:	f0 91 23 02 	lds	r31, 0x0223
    153c:	30 97       	sbiw	r30, 0x00	; 0
    153e:	39 f0       	breq	.+14     	; 0x154e <__vector_19+0xb6>
    1540:	80 91 8a 01 	lds	r24, 0x018A
    1544:	90 91 8b 01 	lds	r25, 0x018B
    1548:	6e e0       	ldi	r22, 0x0E	; 14
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	09 95       	icall
    154e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__vector_18>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	2f 93       	push	r18
    1588:	3f 93       	push	r19
    158a:	4f 93       	push	r20
    158c:	5f 93       	push	r21
    158e:	6f 93       	push	r22
    1590:	7f 93       	push	r23
    1592:	8f 93       	push	r24
    1594:	9f 93       	push	r25
    1596:	af 93       	push	r26
    1598:	bf 93       	push	r27
    159a:	ef 93       	push	r30
    159c:	ff 93       	push	r31
    159e:	80 91 64 01 	lds	r24, 0x0164
    15a2:	90 91 65 01 	lds	r25, 0x0165
    15a6:	20 91 84 00 	lds	r18, 0x0084
    15aa:	30 91 85 00 	lds	r19, 0x0085
    15ae:	ac 01       	movw	r20, r24
    15b0:	66 27       	eor	r22, r22
    15b2:	57 fd       	sbrc	r21, 7
    15b4:	60 95       	com	r22
    15b6:	76 2f       	mov	r23, r22
    15b8:	ba 01       	movw	r22, r20
    15ba:	55 27       	eor	r21, r21
    15bc:	44 27       	eor	r20, r20
    15be:	89 01       	movw	r16, r18
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 2b       	or	r20, r16
    15c6:	51 2b       	or	r21, r17
    15c8:	62 2b       	or	r22, r18
    15ca:	73 2b       	or	r23, r19
    15cc:	40 93 66 01 	sts	0x0166, r20
    15d0:	50 93 67 01 	sts	0x0167, r21
    15d4:	60 93 68 01 	sts	0x0168, r22
    15d8:	70 93 69 01 	sts	0x0169, r23
    15dc:	b0 9b       	sbis	0x16, 0	; 22
    15de:	1a c0       	rjmp	.+52     	; 0x1614 <__vector_18+0x9c>
    15e0:	40 91 84 00 	lds	r20, 0x0084
    15e4:	50 91 85 00 	lds	r21, 0x0085
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	aa 27       	eor	r26, r26
    15ec:	97 fd       	sbrc	r25, 7
    15ee:	a0 95       	com	r26
    15f0:	ba 2f       	mov	r27, r26
    15f2:	dc 01       	movw	r26, r24
    15f4:	99 27       	eor	r25, r25
    15f6:	88 27       	eor	r24, r24
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	84 2b       	or	r24, r20
    15fe:	95 2b       	or	r25, r21
    1600:	a6 2b       	or	r26, r22
    1602:	b7 2b       	or	r27, r23
    1604:	80 93 66 01 	sts	0x0166, r24
    1608:	90 93 67 01 	sts	0x0167, r25
    160c:	a0 93 68 01 	sts	0x0168, r26
    1610:	b0 93 69 01 	sts	0x0169, r27
    1614:	e0 91 20 02 	lds	r30, 0x0220
    1618:	f0 91 21 02 	lds	r31, 0x0221
    161c:	30 97       	sbiw	r30, 0x00	; 0
    161e:	39 f0       	breq	.+14     	; 0x162e <__vector_18+0xb6>
    1620:	80 91 88 01 	lds	r24, 0x0188
    1624:	90 91 89 01 	lds	r25, 0x0189
    1628:	6d e0       	ldi	r22, 0x0D	; 13
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	09 95       	icall
    162e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1632:	ff 91       	pop	r31
    1634:	ef 91       	pop	r30
    1636:	bf 91       	pop	r27
    1638:	af 91       	pop	r26
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	7f 91       	pop	r23
    1640:	6f 91       	pop	r22
    1642:	5f 91       	pop	r21
    1644:	4f 91       	pop	r20
    1646:	3f 91       	pop	r19
    1648:	2f 91       	pop	r18
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <__vector_17>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
    167e:	80 91 64 01 	lds	r24, 0x0164
    1682:	90 91 65 01 	lds	r25, 0x0165
    1686:	20 91 84 00 	lds	r18, 0x0084
    168a:	30 91 85 00 	lds	r19, 0x0085
    168e:	ac 01       	movw	r20, r24
    1690:	66 27       	eor	r22, r22
    1692:	57 fd       	sbrc	r21, 7
    1694:	60 95       	com	r22
    1696:	76 2f       	mov	r23, r22
    1698:	ba 01       	movw	r22, r20
    169a:	55 27       	eor	r21, r21
    169c:	44 27       	eor	r20, r20
    169e:	89 01       	movw	r16, r18
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 2b       	or	r20, r16
    16a6:	51 2b       	or	r21, r17
    16a8:	62 2b       	or	r22, r18
    16aa:	73 2b       	or	r23, r19
    16ac:	40 93 66 01 	sts	0x0166, r20
    16b0:	50 93 67 01 	sts	0x0167, r21
    16b4:	60 93 68 01 	sts	0x0168, r22
    16b8:	70 93 69 01 	sts	0x0169, r23
    16bc:	b0 9b       	sbis	0x16, 0	; 22
    16be:	1a c0       	rjmp	.+52     	; 0x16f4 <__vector_17+0x9c>
    16c0:	40 91 84 00 	lds	r20, 0x0084
    16c4:	50 91 85 00 	lds	r21, 0x0085
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	aa 27       	eor	r26, r26
    16cc:	97 fd       	sbrc	r25, 7
    16ce:	a0 95       	com	r26
    16d0:	ba 2f       	mov	r27, r26
    16d2:	dc 01       	movw	r26, r24
    16d4:	99 27       	eor	r25, r25
    16d6:	88 27       	eor	r24, r24
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	84 2b       	or	r24, r20
    16de:	95 2b       	or	r25, r21
    16e0:	a6 2b       	or	r26, r22
    16e2:	b7 2b       	or	r27, r23
    16e4:	80 93 66 01 	sts	0x0166, r24
    16e8:	90 93 67 01 	sts	0x0167, r25
    16ec:	a0 93 68 01 	sts	0x0168, r26
    16f0:	b0 93 69 01 	sts	0x0169, r27
    16f4:	e0 91 1e 02 	lds	r30, 0x021E
    16f8:	f0 91 1f 02 	lds	r31, 0x021F
    16fc:	30 97       	sbiw	r30, 0x00	; 0
    16fe:	39 f0       	breq	.+14     	; 0x170e <__vector_17+0xb6>
    1700:	80 91 86 01 	lds	r24, 0x0186
    1704:	90 91 87 01 	lds	r25, 0x0187
    1708:	6c e0       	ldi	r22, 0x0C	; 12
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	09 95       	icall
    170e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1712:	ff 91       	pop	r31
    1714:	ef 91       	pop	r30
    1716:	bf 91       	pop	r27
    1718:	af 91       	pop	r26
    171a:	9f 91       	pop	r25
    171c:	8f 91       	pop	r24
    171e:	7f 91       	pop	r23
    1720:	6f 91       	pop	r22
    1722:	5f 91       	pop	r21
    1724:	4f 91       	pop	r20
    1726:	3f 91       	pop	r19
    1728:	2f 91       	pop	r18
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	0f 90       	pop	r0
    1734:	1f 90       	pop	r1
    1736:	18 95       	reti

00001738 <__vector_16>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
    1738:	1f 92       	push	r1
    173a:	0f 92       	push	r0
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	0f 92       	push	r0
    1740:	11 24       	eor	r1, r1
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	2f 93       	push	r18
    1748:	3f 93       	push	r19
    174a:	4f 93       	push	r20
    174c:	5f 93       	push	r21
    174e:	6f 93       	push	r22
    1750:	7f 93       	push	r23
    1752:	8f 93       	push	r24
    1754:	9f 93       	push	r25
    1756:	af 93       	push	r26
    1758:	bf 93       	push	r27
    175a:	ef 93       	push	r30
    175c:	ff 93       	push	r31
    175e:	80 91 64 01 	lds	r24, 0x0164
    1762:	90 91 65 01 	lds	r25, 0x0165
    1766:	20 91 84 00 	lds	r18, 0x0084
    176a:	30 91 85 00 	lds	r19, 0x0085
    176e:	ac 01       	movw	r20, r24
    1770:	66 27       	eor	r22, r22
    1772:	57 fd       	sbrc	r21, 7
    1774:	60 95       	com	r22
    1776:	76 2f       	mov	r23, r22
    1778:	ba 01       	movw	r22, r20
    177a:	55 27       	eor	r21, r21
    177c:	44 27       	eor	r20, r20
    177e:	89 01       	movw	r16, r18
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 2b       	or	r20, r16
    1786:	51 2b       	or	r21, r17
    1788:	62 2b       	or	r22, r18
    178a:	73 2b       	or	r23, r19
    178c:	40 93 66 01 	sts	0x0166, r20
    1790:	50 93 67 01 	sts	0x0167, r21
    1794:	60 93 68 01 	sts	0x0168, r22
    1798:	70 93 69 01 	sts	0x0169, r23
    179c:	b0 9b       	sbis	0x16, 0	; 22
    179e:	1a c0       	rjmp	.+52     	; 0x17d4 <__vector_16+0x9c>
    17a0:	40 91 84 00 	lds	r20, 0x0084
    17a4:	50 91 85 00 	lds	r21, 0x0085
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	aa 27       	eor	r26, r26
    17ac:	97 fd       	sbrc	r25, 7
    17ae:	a0 95       	com	r26
    17b0:	ba 2f       	mov	r27, r26
    17b2:	dc 01       	movw	r26, r24
    17b4:	99 27       	eor	r25, r25
    17b6:	88 27       	eor	r24, r24
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	84 2b       	or	r24, r20
    17be:	95 2b       	or	r25, r21
    17c0:	a6 2b       	or	r26, r22
    17c2:	b7 2b       	or	r27, r23
    17c4:	80 93 66 01 	sts	0x0166, r24
    17c8:	90 93 67 01 	sts	0x0167, r25
    17cc:	a0 93 68 01 	sts	0x0168, r26
    17d0:	b0 93 69 01 	sts	0x0169, r27
    17d4:	e0 91 1c 02 	lds	r30, 0x021C
    17d8:	f0 91 1d 02 	lds	r31, 0x021D
    17dc:	30 97       	sbiw	r30, 0x00	; 0
    17de:	39 f0       	breq	.+14     	; 0x17ee <__vector_16+0xb6>
    17e0:	80 91 84 01 	lds	r24, 0x0184
    17e4:	90 91 85 01 	lds	r25, 0x0185
    17e8:	6b e0       	ldi	r22, 0x0B	; 11
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	09 95       	icall
    17ee:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	7f 91       	pop	r23
    1800:	6f 91       	pop	r22
    1802:	5f 91       	pop	r21
    1804:	4f 91       	pop	r20
    1806:	3f 91       	pop	r19
    1808:	2f 91       	pop	r18
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	0f 90       	pop	r0
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	0f 90       	pop	r0
    1814:	1f 90       	pop	r1
    1816:	18 95       	reti

00001818 <__vector_15>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
    1818:	1f 92       	push	r1
    181a:	0f 92       	push	r0
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	0f 92       	push	r0
    1820:	11 24       	eor	r1, r1
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	2f 93       	push	r18
    1828:	3f 93       	push	r19
    182a:	4f 93       	push	r20
    182c:	5f 93       	push	r21
    182e:	6f 93       	push	r22
    1830:	7f 93       	push	r23
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	af 93       	push	r26
    1838:	bf 93       	push	r27
    183a:	ef 93       	push	r30
    183c:	ff 93       	push	r31
    183e:	80 91 64 01 	lds	r24, 0x0164
    1842:	90 91 65 01 	lds	r25, 0x0165
    1846:	20 91 84 00 	lds	r18, 0x0084
    184a:	30 91 85 00 	lds	r19, 0x0085
    184e:	ac 01       	movw	r20, r24
    1850:	66 27       	eor	r22, r22
    1852:	57 fd       	sbrc	r21, 7
    1854:	60 95       	com	r22
    1856:	76 2f       	mov	r23, r22
    1858:	ba 01       	movw	r22, r20
    185a:	55 27       	eor	r21, r21
    185c:	44 27       	eor	r20, r20
    185e:	89 01       	movw	r16, r18
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 2b       	or	r20, r16
    1866:	51 2b       	or	r21, r17
    1868:	62 2b       	or	r22, r18
    186a:	73 2b       	or	r23, r19
    186c:	40 93 66 01 	sts	0x0166, r20
    1870:	50 93 67 01 	sts	0x0167, r21
    1874:	60 93 68 01 	sts	0x0168, r22
    1878:	70 93 69 01 	sts	0x0169, r23
    187c:	b0 9b       	sbis	0x16, 0	; 22
    187e:	1a c0       	rjmp	.+52     	; 0x18b4 <__vector_15+0x9c>
    1880:	40 91 84 00 	lds	r20, 0x0084
    1884:	50 91 85 00 	lds	r21, 0x0085
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	aa 27       	eor	r26, r26
    188c:	97 fd       	sbrc	r25, 7
    188e:	a0 95       	com	r26
    1890:	ba 2f       	mov	r27, r26
    1892:	dc 01       	movw	r26, r24
    1894:	99 27       	eor	r25, r25
    1896:	88 27       	eor	r24, r24
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	84 2b       	or	r24, r20
    189e:	95 2b       	or	r25, r21
    18a0:	a6 2b       	or	r26, r22
    18a2:	b7 2b       	or	r27, r23
    18a4:	80 93 66 01 	sts	0x0166, r24
    18a8:	90 93 67 01 	sts	0x0167, r25
    18ac:	a0 93 68 01 	sts	0x0168, r26
    18b0:	b0 93 69 01 	sts	0x0169, r27
    18b4:	e0 91 1a 02 	lds	r30, 0x021A
    18b8:	f0 91 1b 02 	lds	r31, 0x021B
    18bc:	30 97       	sbiw	r30, 0x00	; 0
    18be:	39 f0       	breq	.+14     	; 0x18ce <__vector_15+0xb6>
    18c0:	80 91 82 01 	lds	r24, 0x0182
    18c4:	90 91 83 01 	lds	r25, 0x0183
    18c8:	6a e0       	ldi	r22, 0x0A	; 10
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	09 95       	icall
    18ce:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    18d2:	ff 91       	pop	r31
    18d4:	ef 91       	pop	r30
    18d6:	bf 91       	pop	r27
    18d8:	af 91       	pop	r26
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	7f 91       	pop	r23
    18e0:	6f 91       	pop	r22
    18e2:	5f 91       	pop	r21
    18e4:	4f 91       	pop	r20
    18e6:	3f 91       	pop	r19
    18e8:	2f 91       	pop	r18
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	0f 90       	pop	r0
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	0f 90       	pop	r0
    18f4:	1f 90       	pop	r1
    18f6:	18 95       	reti

000018f8 <__vector_14>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    18f8:	1f 92       	push	r1
    18fa:	0f 92       	push	r0
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	0f 92       	push	r0
    1900:	11 24       	eor	r1, r1
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	2f 93       	push	r18
    1908:	3f 93       	push	r19
    190a:	4f 93       	push	r20
    190c:	5f 93       	push	r21
    190e:	6f 93       	push	r22
    1910:	7f 93       	push	r23
    1912:	8f 93       	push	r24
    1914:	9f 93       	push	r25
    1916:	af 93       	push	r26
    1918:	bf 93       	push	r27
    191a:	ef 93       	push	r30
    191c:	ff 93       	push	r31
    191e:	80 91 64 01 	lds	r24, 0x0164
    1922:	90 91 65 01 	lds	r25, 0x0165
    1926:	20 91 84 00 	lds	r18, 0x0084
    192a:	30 91 85 00 	lds	r19, 0x0085
    192e:	ac 01       	movw	r20, r24
    1930:	66 27       	eor	r22, r22
    1932:	57 fd       	sbrc	r21, 7
    1934:	60 95       	com	r22
    1936:	76 2f       	mov	r23, r22
    1938:	ba 01       	movw	r22, r20
    193a:	55 27       	eor	r21, r21
    193c:	44 27       	eor	r20, r20
    193e:	89 01       	movw	r16, r18
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 2b       	or	r20, r16
    1946:	51 2b       	or	r21, r17
    1948:	62 2b       	or	r22, r18
    194a:	73 2b       	or	r23, r19
    194c:	40 93 66 01 	sts	0x0166, r20
    1950:	50 93 67 01 	sts	0x0167, r21
    1954:	60 93 68 01 	sts	0x0168, r22
    1958:	70 93 69 01 	sts	0x0169, r23
    195c:	b0 9b       	sbis	0x16, 0	; 22
    195e:	1a c0       	rjmp	.+52     	; 0x1994 <__vector_14+0x9c>
    1960:	40 91 84 00 	lds	r20, 0x0084
    1964:	50 91 85 00 	lds	r21, 0x0085
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	aa 27       	eor	r26, r26
    196c:	97 fd       	sbrc	r25, 7
    196e:	a0 95       	com	r26
    1970:	ba 2f       	mov	r27, r26
    1972:	dc 01       	movw	r26, r24
    1974:	99 27       	eor	r25, r25
    1976:	88 27       	eor	r24, r24
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	84 2b       	or	r24, r20
    197e:	95 2b       	or	r25, r21
    1980:	a6 2b       	or	r26, r22
    1982:	b7 2b       	or	r27, r23
    1984:	80 93 66 01 	sts	0x0166, r24
    1988:	90 93 67 01 	sts	0x0167, r25
    198c:	a0 93 68 01 	sts	0x0168, r26
    1990:	b0 93 69 01 	sts	0x0169, r27
    1994:	e0 91 18 02 	lds	r30, 0x0218
    1998:	f0 91 19 02 	lds	r31, 0x0219
    199c:	30 97       	sbiw	r30, 0x00	; 0
    199e:	39 f0       	breq	.+14     	; 0x19ae <__vector_14+0xb6>
    19a0:	80 91 80 01 	lds	r24, 0x0180
    19a4:	90 91 81 01 	lds	r25, 0x0181
    19a8:	69 e0       	ldi	r22, 0x09	; 9
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	09 95       	icall
    19ae:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_13>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	2f 93       	push	r18
    19e8:	3f 93       	push	r19
    19ea:	4f 93       	push	r20
    19ec:	5f 93       	push	r21
    19ee:	6f 93       	push	r22
    19f0:	7f 93       	push	r23
    19f2:	8f 93       	push	r24
    19f4:	9f 93       	push	r25
    19f6:	af 93       	push	r26
    19f8:	bf 93       	push	r27
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
    19fe:	80 91 64 01 	lds	r24, 0x0164
    1a02:	90 91 65 01 	lds	r25, 0x0165
    1a06:	20 91 84 00 	lds	r18, 0x0084
    1a0a:	30 91 85 00 	lds	r19, 0x0085
    1a0e:	ac 01       	movw	r20, r24
    1a10:	66 27       	eor	r22, r22
    1a12:	57 fd       	sbrc	r21, 7
    1a14:	60 95       	com	r22
    1a16:	76 2f       	mov	r23, r22
    1a18:	ba 01       	movw	r22, r20
    1a1a:	55 27       	eor	r21, r21
    1a1c:	44 27       	eor	r20, r20
    1a1e:	89 01       	movw	r16, r18
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 2b       	or	r20, r16
    1a26:	51 2b       	or	r21, r17
    1a28:	62 2b       	or	r22, r18
    1a2a:	73 2b       	or	r23, r19
    1a2c:	40 93 66 01 	sts	0x0166, r20
    1a30:	50 93 67 01 	sts	0x0167, r21
    1a34:	60 93 68 01 	sts	0x0168, r22
    1a38:	70 93 69 01 	sts	0x0169, r23
    1a3c:	b0 9b       	sbis	0x16, 0	; 22
    1a3e:	1a c0       	rjmp	.+52     	; 0x1a74 <__vector_13+0x9c>
    1a40:	40 91 84 00 	lds	r20, 0x0084
    1a44:	50 91 85 00 	lds	r21, 0x0085
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	aa 27       	eor	r26, r26
    1a4c:	97 fd       	sbrc	r25, 7
    1a4e:	a0 95       	com	r26
    1a50:	ba 2f       	mov	r27, r26
    1a52:	dc 01       	movw	r26, r24
    1a54:	99 27       	eor	r25, r25
    1a56:	88 27       	eor	r24, r24
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	84 2b       	or	r24, r20
    1a5e:	95 2b       	or	r25, r21
    1a60:	a6 2b       	or	r26, r22
    1a62:	b7 2b       	or	r27, r23
    1a64:	80 93 66 01 	sts	0x0166, r24
    1a68:	90 93 67 01 	sts	0x0167, r25
    1a6c:	a0 93 68 01 	sts	0x0168, r26
    1a70:	b0 93 69 01 	sts	0x0169, r27
    1a74:	e0 91 16 02 	lds	r30, 0x0216
    1a78:	f0 91 17 02 	lds	r31, 0x0217
    1a7c:	30 97       	sbiw	r30, 0x00	; 0
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <__vector_13+0xb6>
    1a80:	80 91 7e 01 	lds	r24, 0x017E
    1a84:	90 91 7f 01 	lds	r25, 0x017F
    1a88:	68 e0       	ldi	r22, 0x08	; 8
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	09 95       	icall
    1a8e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <__vector_12>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	ef 93       	push	r30
    1adc:	ff 93       	push	r31
    1ade:	80 91 64 01 	lds	r24, 0x0164
    1ae2:	90 91 65 01 	lds	r25, 0x0165
    1ae6:	20 91 84 00 	lds	r18, 0x0084
    1aea:	30 91 85 00 	lds	r19, 0x0085
    1aee:	ac 01       	movw	r20, r24
    1af0:	66 27       	eor	r22, r22
    1af2:	57 fd       	sbrc	r21, 7
    1af4:	60 95       	com	r22
    1af6:	76 2f       	mov	r23, r22
    1af8:	ba 01       	movw	r22, r20
    1afa:	55 27       	eor	r21, r21
    1afc:	44 27       	eor	r20, r20
    1afe:	89 01       	movw	r16, r18
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 2b       	or	r20, r16
    1b06:	51 2b       	or	r21, r17
    1b08:	62 2b       	or	r22, r18
    1b0a:	73 2b       	or	r23, r19
    1b0c:	40 93 66 01 	sts	0x0166, r20
    1b10:	50 93 67 01 	sts	0x0167, r21
    1b14:	60 93 68 01 	sts	0x0168, r22
    1b18:	70 93 69 01 	sts	0x0169, r23
    1b1c:	b0 9b       	sbis	0x16, 0	; 22
    1b1e:	1a c0       	rjmp	.+52     	; 0x1b54 <__vector_12+0x9c>
    1b20:	40 91 84 00 	lds	r20, 0x0084
    1b24:	50 91 85 00 	lds	r21, 0x0085
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	aa 27       	eor	r26, r26
    1b2c:	97 fd       	sbrc	r25, 7
    1b2e:	a0 95       	com	r26
    1b30:	ba 2f       	mov	r27, r26
    1b32:	dc 01       	movw	r26, r24
    1b34:	99 27       	eor	r25, r25
    1b36:	88 27       	eor	r24, r24
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	84 2b       	or	r24, r20
    1b3e:	95 2b       	or	r25, r21
    1b40:	a6 2b       	or	r26, r22
    1b42:	b7 2b       	or	r27, r23
    1b44:	80 93 66 01 	sts	0x0166, r24
    1b48:	90 93 67 01 	sts	0x0167, r25
    1b4c:	a0 93 68 01 	sts	0x0168, r26
    1b50:	b0 93 69 01 	sts	0x0169, r27
    1b54:	e0 91 14 02 	lds	r30, 0x0214
    1b58:	f0 91 15 02 	lds	r31, 0x0215
    1b5c:	30 97       	sbiw	r30, 0x00	; 0
    1b5e:	39 f0       	breq	.+14     	; 0x1b6e <__vector_12+0xb6>
    1b60:	80 91 7c 01 	lds	r24, 0x017C
    1b64:	90 91 7d 01 	lds	r25, 0x017D
    1b68:	67 e0       	ldi	r22, 0x07	; 7
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	09 95       	icall
    1b6e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	7f 91       	pop	r23
    1b80:	6f 91       	pop	r22
    1b82:	5f 91       	pop	r21
    1b84:	4f 91       	pop	r20
    1b86:	3f 91       	pop	r19
    1b88:	2f 91       	pop	r18
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_11>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	2f 93       	push	r18
    1ba8:	3f 93       	push	r19
    1baa:	4f 93       	push	r20
    1bac:	5f 93       	push	r21
    1bae:	6f 93       	push	r22
    1bb0:	7f 93       	push	r23
    1bb2:	8f 93       	push	r24
    1bb4:	9f 93       	push	r25
    1bb6:	af 93       	push	r26
    1bb8:	bf 93       	push	r27
    1bba:	ef 93       	push	r30
    1bbc:	ff 93       	push	r31
    1bbe:	80 91 64 01 	lds	r24, 0x0164
    1bc2:	90 91 65 01 	lds	r25, 0x0165
    1bc6:	20 91 84 00 	lds	r18, 0x0084
    1bca:	30 91 85 00 	lds	r19, 0x0085
    1bce:	ac 01       	movw	r20, r24
    1bd0:	66 27       	eor	r22, r22
    1bd2:	57 fd       	sbrc	r21, 7
    1bd4:	60 95       	com	r22
    1bd6:	76 2f       	mov	r23, r22
    1bd8:	ba 01       	movw	r22, r20
    1bda:	55 27       	eor	r21, r21
    1bdc:	44 27       	eor	r20, r20
    1bde:	89 01       	movw	r16, r18
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 2b       	or	r20, r16
    1be6:	51 2b       	or	r21, r17
    1be8:	62 2b       	or	r22, r18
    1bea:	73 2b       	or	r23, r19
    1bec:	40 93 66 01 	sts	0x0166, r20
    1bf0:	50 93 67 01 	sts	0x0167, r21
    1bf4:	60 93 68 01 	sts	0x0168, r22
    1bf8:	70 93 69 01 	sts	0x0169, r23
    1bfc:	b0 9b       	sbis	0x16, 0	; 22
    1bfe:	1a c0       	rjmp	.+52     	; 0x1c34 <__vector_11+0x9c>
    1c00:	40 91 84 00 	lds	r20, 0x0084
    1c04:	50 91 85 00 	lds	r21, 0x0085
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	aa 27       	eor	r26, r26
    1c0c:	97 fd       	sbrc	r25, 7
    1c0e:	a0 95       	com	r26
    1c10:	ba 2f       	mov	r27, r26
    1c12:	dc 01       	movw	r26, r24
    1c14:	99 27       	eor	r25, r25
    1c16:	88 27       	eor	r24, r24
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	84 2b       	or	r24, r20
    1c1e:	95 2b       	or	r25, r21
    1c20:	a6 2b       	or	r26, r22
    1c22:	b7 2b       	or	r27, r23
    1c24:	80 93 66 01 	sts	0x0166, r24
    1c28:	90 93 67 01 	sts	0x0167, r25
    1c2c:	a0 93 68 01 	sts	0x0168, r26
    1c30:	b0 93 69 01 	sts	0x0169, r27
    1c34:	e0 91 12 02 	lds	r30, 0x0212
    1c38:	f0 91 13 02 	lds	r31, 0x0213
    1c3c:	30 97       	sbiw	r30, 0x00	; 0
    1c3e:	39 f0       	breq	.+14     	; 0x1c4e <__vector_11+0xb6>
    1c40:	80 91 7a 01 	lds	r24, 0x017A
    1c44:	90 91 7b 01 	lds	r25, 0x017B
    1c48:	66 e0       	ldi	r22, 0x06	; 6
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	09 95       	icall
    1c4e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <__vector_10>:
IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31
    1c9e:	80 91 64 01 	lds	r24, 0x0164
    1ca2:	90 91 65 01 	lds	r25, 0x0165
    1ca6:	20 91 84 00 	lds	r18, 0x0084
    1caa:	30 91 85 00 	lds	r19, 0x0085
    1cae:	ac 01       	movw	r20, r24
    1cb0:	66 27       	eor	r22, r22
    1cb2:	57 fd       	sbrc	r21, 7
    1cb4:	60 95       	com	r22
    1cb6:	76 2f       	mov	r23, r22
    1cb8:	ba 01       	movw	r22, r20
    1cba:	55 27       	eor	r21, r21
    1cbc:	44 27       	eor	r20, r20
    1cbe:	89 01       	movw	r16, r18
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 2b       	or	r20, r16
    1cc6:	51 2b       	or	r21, r17
    1cc8:	62 2b       	or	r22, r18
    1cca:	73 2b       	or	r23, r19
    1ccc:	40 93 66 01 	sts	0x0166, r20
    1cd0:	50 93 67 01 	sts	0x0167, r21
    1cd4:	60 93 68 01 	sts	0x0168, r22
    1cd8:	70 93 69 01 	sts	0x0169, r23
    1cdc:	b0 9b       	sbis	0x16, 0	; 22
    1cde:	1a c0       	rjmp	.+52     	; 0x1d14 <__vector_10+0x9c>
    1ce0:	40 91 84 00 	lds	r20, 0x0084
    1ce4:	50 91 85 00 	lds	r21, 0x0085
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	aa 27       	eor	r26, r26
    1cec:	97 fd       	sbrc	r25, 7
    1cee:	a0 95       	com	r26
    1cf0:	ba 2f       	mov	r27, r26
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	99 27       	eor	r25, r25
    1cf6:	88 27       	eor	r24, r24
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	84 2b       	or	r24, r20
    1cfe:	95 2b       	or	r25, r21
    1d00:	a6 2b       	or	r26, r22
    1d02:	b7 2b       	or	r27, r23
    1d04:	80 93 66 01 	sts	0x0166, r24
    1d08:	90 93 67 01 	sts	0x0167, r25
    1d0c:	a0 93 68 01 	sts	0x0168, r26
    1d10:	b0 93 69 01 	sts	0x0169, r27
    1d14:	e0 91 10 02 	lds	r30, 0x0210
    1d18:	f0 91 11 02 	lds	r31, 0x0211
    1d1c:	30 97       	sbiw	r30, 0x00	; 0
    1d1e:	39 f0       	breq	.+14     	; 0x1d2e <__vector_10+0xb6>
    1d20:	80 91 78 01 	lds	r24, 0x0178
    1d24:	90 91 79 01 	lds	r25, 0x0179
    1d28:	65 e0       	ldi	r22, 0x05	; 5
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	09 95       	icall
    1d2e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	0f 90       	pop	r0
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	0f 90       	pop	r0
    1d54:	1f 90       	pop	r1
    1d56:	18 95       	reti

00001d58 <__vector_5>:

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
    1d58:	1f 92       	push	r1
    1d5a:	0f 92       	push	r0
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	0f 92       	push	r0
    1d60:	11 24       	eor	r1, r1
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	2f 93       	push	r18
    1d68:	3f 93       	push	r19
    1d6a:	4f 93       	push	r20
    1d6c:	5f 93       	push	r21
    1d6e:	6f 93       	push	r22
    1d70:	7f 93       	push	r23
    1d72:	8f 93       	push	r24
    1d74:	9f 93       	push	r25
    1d76:	af 93       	push	r26
    1d78:	bf 93       	push	r27
    1d7a:	ef 93       	push	r30
    1d7c:	ff 93       	push	r31
    1d7e:	80 91 64 01 	lds	r24, 0x0164
    1d82:	90 91 65 01 	lds	r25, 0x0165
    1d86:	20 91 84 00 	lds	r18, 0x0084
    1d8a:	30 91 85 00 	lds	r19, 0x0085
    1d8e:	ac 01       	movw	r20, r24
    1d90:	66 27       	eor	r22, r22
    1d92:	57 fd       	sbrc	r21, 7
    1d94:	60 95       	com	r22
    1d96:	76 2f       	mov	r23, r22
    1d98:	ba 01       	movw	r22, r20
    1d9a:	55 27       	eor	r21, r21
    1d9c:	44 27       	eor	r20, r20
    1d9e:	89 01       	movw	r16, r18
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 2b       	or	r20, r16
    1da6:	51 2b       	or	r21, r17
    1da8:	62 2b       	or	r22, r18
    1daa:	73 2b       	or	r23, r19
    1dac:	40 93 66 01 	sts	0x0166, r20
    1db0:	50 93 67 01 	sts	0x0167, r21
    1db4:	60 93 68 01 	sts	0x0168, r22
    1db8:	70 93 69 01 	sts	0x0169, r23
    1dbc:	b0 9b       	sbis	0x16, 0	; 22
    1dbe:	1a c0       	rjmp	.+52     	; 0x1df4 <__vector_5+0x9c>
    1dc0:	40 91 84 00 	lds	r20, 0x0084
    1dc4:	50 91 85 00 	lds	r21, 0x0085
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	aa 27       	eor	r26, r26
    1dcc:	97 fd       	sbrc	r25, 7
    1dce:	a0 95       	com	r26
    1dd0:	ba 2f       	mov	r27, r26
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	99 27       	eor	r25, r25
    1dd6:	88 27       	eor	r24, r24
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	84 2b       	or	r24, r20
    1dde:	95 2b       	or	r25, r21
    1de0:	a6 2b       	or	r26, r22
    1de2:	b7 2b       	or	r27, r23
    1de4:	80 93 66 01 	sts	0x0166, r24
    1de8:	90 93 67 01 	sts	0x0167, r25
    1dec:	a0 93 68 01 	sts	0x0168, r26
    1df0:	b0 93 69 01 	sts	0x0169, r27
    1df4:	e0 91 0e 02 	lds	r30, 0x020E
    1df8:	f0 91 0f 02 	lds	r31, 0x020F
    1dfc:	30 97       	sbiw	r30, 0x00	; 0
    1dfe:	39 f0       	breq	.+14     	; 0x1e0e <__vector_5+0xb6>
    1e00:	80 91 76 01 	lds	r24, 0x0176
    1e04:	90 91 77 01 	lds	r25, 0x0177
    1e08:	64 e0       	ldi	r22, 0x04	; 4
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	09 95       	icall
    1e0e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1e12:	ff 91       	pop	r31
    1e14:	ef 91       	pop	r30
    1e16:	bf 91       	pop	r27
    1e18:	af 91       	pop	r26
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	7f 91       	pop	r23
    1e20:	6f 91       	pop	r22
    1e22:	5f 91       	pop	r21
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <__vector_4>:
#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
    1e38:	1f 92       	push	r1
    1e3a:	0f 92       	push	r0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	0f 92       	push	r0
    1e40:	11 24       	eor	r1, r1
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	2f 93       	push	r18
    1e48:	3f 93       	push	r19
    1e4a:	4f 93       	push	r20
    1e4c:	5f 93       	push	r21
    1e4e:	6f 93       	push	r22
    1e50:	7f 93       	push	r23
    1e52:	8f 93       	push	r24
    1e54:	9f 93       	push	r25
    1e56:	af 93       	push	r26
    1e58:	bf 93       	push	r27
    1e5a:	ef 93       	push	r30
    1e5c:	ff 93       	push	r31
    1e5e:	80 91 64 01 	lds	r24, 0x0164
    1e62:	90 91 65 01 	lds	r25, 0x0165
    1e66:	20 91 84 00 	lds	r18, 0x0084
    1e6a:	30 91 85 00 	lds	r19, 0x0085
    1e6e:	ac 01       	movw	r20, r24
    1e70:	66 27       	eor	r22, r22
    1e72:	57 fd       	sbrc	r21, 7
    1e74:	60 95       	com	r22
    1e76:	76 2f       	mov	r23, r22
    1e78:	ba 01       	movw	r22, r20
    1e7a:	55 27       	eor	r21, r21
    1e7c:	44 27       	eor	r20, r20
    1e7e:	89 01       	movw	r16, r18
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 2b       	or	r20, r16
    1e86:	51 2b       	or	r21, r17
    1e88:	62 2b       	or	r22, r18
    1e8a:	73 2b       	or	r23, r19
    1e8c:	40 93 66 01 	sts	0x0166, r20
    1e90:	50 93 67 01 	sts	0x0167, r21
    1e94:	60 93 68 01 	sts	0x0168, r22
    1e98:	70 93 69 01 	sts	0x0169, r23
    1e9c:	b0 9b       	sbis	0x16, 0	; 22
    1e9e:	1a c0       	rjmp	.+52     	; 0x1ed4 <__vector_4+0x9c>
    1ea0:	40 91 84 00 	lds	r20, 0x0084
    1ea4:	50 91 85 00 	lds	r21, 0x0085
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	aa 27       	eor	r26, r26
    1eac:	97 fd       	sbrc	r25, 7
    1eae:	a0 95       	com	r26
    1eb0:	ba 2f       	mov	r27, r26
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	99 27       	eor	r25, r25
    1eb6:	88 27       	eor	r24, r24
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	84 2b       	or	r24, r20
    1ebe:	95 2b       	or	r25, r21
    1ec0:	a6 2b       	or	r26, r22
    1ec2:	b7 2b       	or	r27, r23
    1ec4:	80 93 66 01 	sts	0x0166, r24
    1ec8:	90 93 67 01 	sts	0x0167, r25
    1ecc:	a0 93 68 01 	sts	0x0168, r26
    1ed0:	b0 93 69 01 	sts	0x0169, r27
    1ed4:	e0 91 0c 02 	lds	r30, 0x020C
    1ed8:	f0 91 0d 02 	lds	r31, 0x020D
    1edc:	30 97       	sbiw	r30, 0x00	; 0
    1ede:	39 f0       	breq	.+14     	; 0x1eee <__vector_4+0xb6>
    1ee0:	80 91 74 01 	lds	r24, 0x0174
    1ee4:	90 91 75 01 	lds	r25, 0x0175
    1ee8:	63 e0       	ldi	r22, 0x03	; 3
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	09 95       	icall
    1eee:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1ef2:	ff 91       	pop	r31
    1ef4:	ef 91       	pop	r30
    1ef6:	bf 91       	pop	r27
    1ef8:	af 91       	pop	r26
    1efa:	9f 91       	pop	r25
    1efc:	8f 91       	pop	r24
    1efe:	7f 91       	pop	r23
    1f00:	6f 91       	pop	r22
    1f02:	5f 91       	pop	r21
    1f04:	4f 91       	pop	r20
    1f06:	3f 91       	pop	r19
    1f08:	2f 91       	pop	r18
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	0f 90       	pop	r0
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	0f 90       	pop	r0
    1f14:	1f 90       	pop	r1
    1f16:	18 95       	reti

00001f18 <__vector_3>:

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
    1f18:	1f 92       	push	r1
    1f1a:	0f 92       	push	r0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	0f 92       	push	r0
    1f20:	11 24       	eor	r1, r1
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	2f 93       	push	r18
    1f28:	3f 93       	push	r19
    1f2a:	4f 93       	push	r20
    1f2c:	5f 93       	push	r21
    1f2e:	6f 93       	push	r22
    1f30:	7f 93       	push	r23
    1f32:	8f 93       	push	r24
    1f34:	9f 93       	push	r25
    1f36:	af 93       	push	r26
    1f38:	bf 93       	push	r27
    1f3a:	ef 93       	push	r30
    1f3c:	ff 93       	push	r31
    1f3e:	80 91 64 01 	lds	r24, 0x0164
    1f42:	90 91 65 01 	lds	r25, 0x0165
    1f46:	20 91 84 00 	lds	r18, 0x0084
    1f4a:	30 91 85 00 	lds	r19, 0x0085
    1f4e:	ac 01       	movw	r20, r24
    1f50:	66 27       	eor	r22, r22
    1f52:	57 fd       	sbrc	r21, 7
    1f54:	60 95       	com	r22
    1f56:	76 2f       	mov	r23, r22
    1f58:	ba 01       	movw	r22, r20
    1f5a:	55 27       	eor	r21, r21
    1f5c:	44 27       	eor	r20, r20
    1f5e:	89 01       	movw	r16, r18
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 2b       	or	r20, r16
    1f66:	51 2b       	or	r21, r17
    1f68:	62 2b       	or	r22, r18
    1f6a:	73 2b       	or	r23, r19
    1f6c:	40 93 66 01 	sts	0x0166, r20
    1f70:	50 93 67 01 	sts	0x0167, r21
    1f74:	60 93 68 01 	sts	0x0168, r22
    1f78:	70 93 69 01 	sts	0x0169, r23
    1f7c:	b0 9b       	sbis	0x16, 0	; 22
    1f7e:	1a c0       	rjmp	.+52     	; 0x1fb4 <__vector_3+0x9c>
    1f80:	40 91 84 00 	lds	r20, 0x0084
    1f84:	50 91 85 00 	lds	r21, 0x0085
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	aa 27       	eor	r26, r26
    1f8c:	97 fd       	sbrc	r25, 7
    1f8e:	a0 95       	com	r26
    1f90:	ba 2f       	mov	r27, r26
    1f92:	dc 01       	movw	r26, r24
    1f94:	99 27       	eor	r25, r25
    1f96:	88 27       	eor	r24, r24
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	84 2b       	or	r24, r20
    1f9e:	95 2b       	or	r25, r21
    1fa0:	a6 2b       	or	r26, r22
    1fa2:	b7 2b       	or	r27, r23
    1fa4:	80 93 66 01 	sts	0x0166, r24
    1fa8:	90 93 67 01 	sts	0x0167, r25
    1fac:	a0 93 68 01 	sts	0x0168, r26
    1fb0:	b0 93 69 01 	sts	0x0169, r27
    1fb4:	e0 91 0a 02 	lds	r30, 0x020A
    1fb8:	f0 91 0b 02 	lds	r31, 0x020B
    1fbc:	30 97       	sbiw	r30, 0x00	; 0
    1fbe:	39 f0       	breq	.+14     	; 0x1fce <__vector_3+0xb6>
    1fc0:	80 91 72 01 	lds	r24, 0x0172
    1fc4:	90 91 73 01 	lds	r25, 0x0173
    1fc8:	62 e0       	ldi	r22, 0x02	; 2
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	09 95       	icall
    1fce:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    1fd2:	ff 91       	pop	r31
    1fd4:	ef 91       	pop	r30
    1fd6:	bf 91       	pop	r27
    1fd8:	af 91       	pop	r26
    1fda:	9f 91       	pop	r25
    1fdc:	8f 91       	pop	r24
    1fde:	7f 91       	pop	r23
    1fe0:	6f 91       	pop	r22
    1fe2:	5f 91       	pop	r21
    1fe4:	4f 91       	pop	r20
    1fe6:	3f 91       	pop	r19
    1fe8:	2f 91       	pop	r18
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	0f 90       	pop	r0
    1ff4:	1f 90       	pop	r1
    1ff6:	18 95       	reti

00001ff8 <__vector_2>:
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
    1ff8:	1f 92       	push	r1
    1ffa:	0f 92       	push	r0
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	0f 92       	push	r0
    2000:	11 24       	eor	r1, r1
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	2f 93       	push	r18
    2008:	3f 93       	push	r19
    200a:	4f 93       	push	r20
    200c:	5f 93       	push	r21
    200e:	6f 93       	push	r22
    2010:	7f 93       	push	r23
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	af 93       	push	r26
    2018:	bf 93       	push	r27
    201a:	ef 93       	push	r30
    201c:	ff 93       	push	r31
    201e:	80 91 64 01 	lds	r24, 0x0164
    2022:	90 91 65 01 	lds	r25, 0x0165
    2026:	20 91 84 00 	lds	r18, 0x0084
    202a:	30 91 85 00 	lds	r19, 0x0085
    202e:	ac 01       	movw	r20, r24
    2030:	66 27       	eor	r22, r22
    2032:	57 fd       	sbrc	r21, 7
    2034:	60 95       	com	r22
    2036:	76 2f       	mov	r23, r22
    2038:	ba 01       	movw	r22, r20
    203a:	55 27       	eor	r21, r21
    203c:	44 27       	eor	r20, r20
    203e:	89 01       	movw	r16, r18
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 2b       	or	r20, r16
    2046:	51 2b       	or	r21, r17
    2048:	62 2b       	or	r22, r18
    204a:	73 2b       	or	r23, r19
    204c:	40 93 66 01 	sts	0x0166, r20
    2050:	50 93 67 01 	sts	0x0167, r21
    2054:	60 93 68 01 	sts	0x0168, r22
    2058:	70 93 69 01 	sts	0x0169, r23
    205c:	b0 9b       	sbis	0x16, 0	; 22
    205e:	1a c0       	rjmp	.+52     	; 0x2094 <__vector_2+0x9c>
    2060:	40 91 84 00 	lds	r20, 0x0084
    2064:	50 91 85 00 	lds	r21, 0x0085
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	aa 27       	eor	r26, r26
    206c:	97 fd       	sbrc	r25, 7
    206e:	a0 95       	com	r26
    2070:	ba 2f       	mov	r27, r26
    2072:	dc 01       	movw	r26, r24
    2074:	99 27       	eor	r25, r25
    2076:	88 27       	eor	r24, r24
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	84 2b       	or	r24, r20
    207e:	95 2b       	or	r25, r21
    2080:	a6 2b       	or	r26, r22
    2082:	b7 2b       	or	r27, r23
    2084:	80 93 66 01 	sts	0x0166, r24
    2088:	90 93 67 01 	sts	0x0167, r25
    208c:	a0 93 68 01 	sts	0x0168, r26
    2090:	b0 93 69 01 	sts	0x0169, r27
    2094:	e0 91 08 02 	lds	r30, 0x0208
    2098:	f0 91 09 02 	lds	r31, 0x0209
    209c:	30 97       	sbiw	r30, 0x00	; 0
    209e:	39 f0       	breq	.+14     	; 0x20ae <__vector_2+0xb6>
    20a0:	80 91 70 01 	lds	r24, 0x0170
    20a4:	90 91 71 01 	lds	r25, 0x0171
    20a8:	61 e0       	ldi	r22, 0x01	; 1
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	09 95       	icall
    20ae:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	bf 91       	pop	r27
    20b8:	af 91       	pop	r26
    20ba:	9f 91       	pop	r25
    20bc:	8f 91       	pop	r24
    20be:	7f 91       	pop	r23
    20c0:	6f 91       	pop	r22
    20c2:	5f 91       	pop	r21
    20c4:	4f 91       	pop	r20
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	2f 93       	push	r18
    20e8:	3f 93       	push	r19
    20ea:	4f 93       	push	r20
    20ec:	5f 93       	push	r21
    20ee:	6f 93       	push	r22
    20f0:	7f 93       	push	r23
    20f2:	8f 93       	push	r24
    20f4:	9f 93       	push	r25
    20f6:	af 93       	push	r26
    20f8:	bf 93       	push	r27
    20fa:	ef 93       	push	r30
    20fc:	ff 93       	push	r31
    20fe:	80 91 64 01 	lds	r24, 0x0164
    2102:	90 91 65 01 	lds	r25, 0x0165
    2106:	20 91 84 00 	lds	r18, 0x0084
    210a:	30 91 85 00 	lds	r19, 0x0085
    210e:	ac 01       	movw	r20, r24
    2110:	66 27       	eor	r22, r22
    2112:	57 fd       	sbrc	r21, 7
    2114:	60 95       	com	r22
    2116:	76 2f       	mov	r23, r22
    2118:	ba 01       	movw	r22, r20
    211a:	55 27       	eor	r21, r21
    211c:	44 27       	eor	r20, r20
    211e:	89 01       	movw	r16, r18
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 2b       	or	r20, r16
    2126:	51 2b       	or	r21, r17
    2128:	62 2b       	or	r22, r18
    212a:	73 2b       	or	r23, r19
    212c:	40 93 66 01 	sts	0x0166, r20
    2130:	50 93 67 01 	sts	0x0167, r21
    2134:	60 93 68 01 	sts	0x0168, r22
    2138:	70 93 69 01 	sts	0x0169, r23
    213c:	b0 9b       	sbis	0x16, 0	; 22
    213e:	1a c0       	rjmp	.+52     	; 0x2174 <__vector_1+0x9c>
    2140:	40 91 84 00 	lds	r20, 0x0084
    2144:	50 91 85 00 	lds	r21, 0x0085
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	aa 27       	eor	r26, r26
    214c:	97 fd       	sbrc	r25, 7
    214e:	a0 95       	com	r26
    2150:	ba 2f       	mov	r27, r26
    2152:	dc 01       	movw	r26, r24
    2154:	99 27       	eor	r25, r25
    2156:	88 27       	eor	r24, r24
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	84 2b       	or	r24, r20
    215e:	95 2b       	or	r25, r21
    2160:	a6 2b       	or	r26, r22
    2162:	b7 2b       	or	r27, r23
    2164:	80 93 66 01 	sts	0x0166, r24
    2168:	90 93 67 01 	sts	0x0167, r25
    216c:	a0 93 68 01 	sts	0x0168, r26
    2170:	b0 93 69 01 	sts	0x0169, r27
    2174:	e0 91 06 02 	lds	r30, 0x0206
    2178:	f0 91 07 02 	lds	r31, 0x0207
    217c:	30 97       	sbiw	r30, 0x00	; 0
    217e:	39 f0       	breq	.+14     	; 0x218e <__vector_1+0xb6>
    2180:	80 91 6e 01 	lds	r24, 0x016E
    2184:	90 91 6f 01 	lds	r25, 0x016F
    2188:	60 e0       	ldi	r22, 0x00	; 0
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	09 95       	icall
    218e:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    2192:	ff 91       	pop	r31
    2194:	ef 91       	pop	r30
    2196:	bf 91       	pop	r27
    2198:	af 91       	pop	r26
    219a:	9f 91       	pop	r25
    219c:	8f 91       	pop	r24
    219e:	7f 91       	pop	r23
    21a0:	6f 91       	pop	r22
    21a2:	5f 91       	pop	r21
    21a4:	4f 91       	pop	r20
    21a6:	3f 91       	pop	r19
    21a8:	2f 91       	pop	r18
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	0f 90       	pop	r0
    21b4:	1f 90       	pop	r1
    21b6:	18 95       	reti

000021b8 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	2f 93       	push	r18
    21c4:	3f 93       	push	r19
    21c6:	8f 93       	push	r24
    21c8:	9f 93       	push	r25
    21ca:	af 93       	push	r26
    21cc:	bf 93       	push	r27
    21ce:	ef 93       	push	r30
    21d0:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    21d2:	20 91 64 01 	lds	r18, 0x0164
    21d6:	30 91 65 01 	lds	r19, 0x0165
    21da:	2f 5f       	subi	r18, 0xFF	; 255
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	30 93 65 01 	sts	0x0165, r19
    21e2:	20 93 64 01 	sts	0x0164, r18
    TIMERSET(timerQ);
    21e6:	e0 91 6a 01 	lds	r30, 0x016A
    21ea:	f0 91 6b 01 	lds	r31, 0x016B
    21ee:	30 97       	sbiw	r30, 0x00	; 0
    21f0:	09 f1       	breq	.+66     	; 0x2234 <__vector_9+0x7c>
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	a4 81       	ldd	r26, Z+4	; 0x04
    21f8:	b5 81       	ldd	r27, Z+5	; 0x05
    21fa:	2a 17       	cp	r18, r26
    21fc:	3b 07       	cpc	r19, r27
    21fe:	d1 f4       	brne	.+52     	; 0x2234 <__vector_9+0x7c>
    2200:	20 91 84 00 	lds	r18, 0x0084
    2204:	30 91 85 00 	lds	r19, 0x0085
    2208:	20 95       	com	r18
    220a:	30 95       	com	r19
    220c:	28 0f       	add	r18, r24
    220e:	39 1f       	adc	r19, r25
    2210:	21 15       	cp	r18, r1
    2212:	31 05       	cpc	r19, r1
    2214:	29 f4       	brne	.+10     	; 0x2220 <__vector_9+0x68>
    2216:	80 91 84 00 	lds	r24, 0x0084
    221a:	90 91 85 00 	lds	r25, 0x0085
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	90 93 89 00 	sts	0x0089, r25
    2224:	80 93 88 00 	sts	0x0088, r24
    2228:	ef e6       	ldi	r30, 0x6F	; 111
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	82 60       	ori	r24, 0x02	; 2
    2230:	80 83       	st	Z, r24
    2232:	05 c0       	rjmp	.+10     	; 0x223e <__vector_9+0x86>
    2234:	ef e6       	ldi	r30, 0x6F	; 111
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8d 7f       	andi	r24, 0xFD	; 253
    223c:	80 83       	st	Z, r24
}
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	bf 91       	pop	r27
    2244:	af 91       	pop	r26
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	3f 91       	pop	r19
    224c:	2f 91       	pop	r18
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	0f 90       	pop	r0
    2254:	1f 90       	pop	r1
    2256:	18 95       	reti

00002258 <__vector_7>:

TIMER_COMPARE_INTERRUPT {
    2258:	1f 92       	push	r1
    225a:	0f 92       	push	r0
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	0f 92       	push	r0
    2260:	11 24       	eor	r1, r1
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	2f 93       	push	r18
    2270:	3f 93       	push	r19
    2272:	4f 93       	push	r20
    2274:	5f 93       	push	r21
    2276:	6f 93       	push	r22
    2278:	7f 93       	push	r23
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	ef 93       	push	r30
    2288:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    228a:	c0 90 64 01 	lds	r12, 0x0164
    228e:	d0 90 65 01 	lds	r13, 0x0165
    2292:	80 91 84 00 	lds	r24, 0x0084
    2296:	90 91 85 00 	lds	r25, 0x0085
    229a:	b0 99       	sbic	0x16, 0	; 22
    229c:	0e c0       	rjmp	.+28     	; 0x22ba <__vector_7+0x62>
    229e:	ee 24       	eor	r14, r14
    22a0:	d7 fc       	sbrc	r13, 7
    22a2:	e0 94       	com	r14
    22a4:	fe 2c       	mov	r15, r14
    22a6:	76 01       	movw	r14, r12
    22a8:	dd 24       	eor	r13, r13
    22aa:	cc 24       	eor	r12, r12
    22ac:	a0 e0       	ldi	r26, 0x00	; 0
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	c8 2a       	or	r12, r24
    22b2:	d9 2a       	or	r13, r25
    22b4:	ea 2a       	or	r14, r26
    22b6:	fb 2a       	or	r15, r27
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <__vector_7+0x8a>
    22ba:	80 91 84 00 	lds	r24, 0x0084
    22be:	90 91 85 00 	lds	r25, 0x0085
    22c2:	08 94       	sec
    22c4:	c1 1c       	adc	r12, r1
    22c6:	d1 1c       	adc	r13, r1
    22c8:	ee 24       	eor	r14, r14
    22ca:	d7 fc       	sbrc	r13, 7
    22cc:	e0 94       	com	r14
    22ce:	fe 2c       	mov	r15, r14
    22d0:	76 01       	movw	r14, r12
    22d2:	dd 24       	eor	r13, r13
    22d4:	cc 24       	eor	r12, r12
    22d6:	a0 e0       	ldi	r26, 0x00	; 0
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	c8 2a       	or	r12, r24
    22dc:	d9 2a       	or	r13, r25
    22de:	ea 2a       	or	r14, r26
    22e0:	fb 2a       	or	r15, r27
    while (timerQ && (timerQ->baseline - now <= 0))
    22e2:	e0 91 6a 01 	lds	r30, 0x016A
    22e6:	f0 91 6b 01 	lds	r31, 0x016B
    22ea:	30 97       	sbiw	r30, 0x00	; 0
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <__vector_7+0x98>
    22ee:	46 c0       	rjmp	.+140    	; 0x237c <__vector_7+0x124>
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	a4 81       	ldd	r26, Z+4	; 0x04
    22f6:	b5 81       	ldd	r27, Z+5	; 0x05
    22f8:	8c 19       	sub	r24, r12
    22fa:	9d 09       	sbc	r25, r13
    22fc:	ae 09       	sbc	r26, r14
    22fe:	bf 09       	sbc	r27, r15
    2300:	18 16       	cp	r1, r24
    2302:	19 06       	cpc	r1, r25
    2304:	1a 06       	cpc	r1, r26
    2306:	1b 06       	cpc	r1, r27
    2308:	0c f4       	brge	.+2      	; 0x230c <__vector_7+0xb4>
    230a:	58 c0       	rjmp	.+176    	; 0x23bc <__vector_7+0x164>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    230c:	ca e6       	ldi	r28, 0x6A	; 106
    230e:	d1 e0       	ldi	r29, 0x01	; 1
    2310:	0c e6       	ldi	r16, 0x6C	; 108
    2312:	11 e0       	ldi	r17, 0x01	; 1
    2314:	ce 01       	movw	r24, r28
    2316:	0e 94 90 08 	call	0x1120	; 0x1120 <dequeue>
    231a:	b8 01       	movw	r22, r16
    231c:	0e 94 10 08 	call	0x1020	; 0x1020 <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    2320:	e0 91 6a 01 	lds	r30, 0x016A
    2324:	f0 91 6b 01 	lds	r31, 0x016B
    2328:	30 97       	sbiw	r30, 0x00	; 0
    232a:	41 f1       	breq	.+80     	; 0x237c <__vector_7+0x124>
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	a4 81       	ldd	r26, Z+4	; 0x04
    2332:	b5 81       	ldd	r27, Z+5	; 0x05
    2334:	8c 19       	sub	r24, r12
    2336:	9d 09       	sbc	r25, r13
    2338:	ae 09       	sbc	r26, r14
    233a:	bf 09       	sbc	r27, r15
    233c:	18 16       	cp	r1, r24
    233e:	19 06       	cpc	r1, r25
    2340:	1a 06       	cpc	r1, r26
    2342:	1b 06       	cpc	r1, r27
    2344:	3c f7       	brge	.-50     	; 0x2314 <__vector_7+0xbc>
    2346:	3a c0       	rjmp	.+116    	; 0x23bc <__vector_7+0x164>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    2348:	20 91 84 00 	lds	r18, 0x0084
    234c:	30 91 85 00 	lds	r19, 0x0085
    2350:	20 95       	com	r18
    2352:	30 95       	com	r19
    2354:	28 0f       	add	r18, r24
    2356:	39 1f       	adc	r19, r25
    2358:	21 15       	cp	r18, r1
    235a:	31 05       	cpc	r19, r1
    235c:	29 f4       	brne	.+10     	; 0x2368 <__vector_7+0x110>
    235e:	80 91 84 00 	lds	r24, 0x0084
    2362:	90 91 85 00 	lds	r25, 0x0085
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	90 93 89 00 	sts	0x0089, r25
    236c:	80 93 88 00 	sts	0x0088, r24
    2370:	ef e6       	ldi	r30, 0x6F	; 111
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	82 60       	ori	r24, 0x02	; 2
    2378:	80 83       	st	Z, r24
    237a:	05 c0       	rjmp	.+10     	; 0x2386 <__vector_7+0x12e>
    237c:	ef e6       	ldi	r30, 0x6F	; 111
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8d 7f       	andi	r24, 0xFD	; 253
    2384:	80 83       	st	Z, r24
    schedule();
    2386:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
}
    238a:	ff 91       	pop	r31
    238c:	ef 91       	pop	r30
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	bf 91       	pop	r27
    2394:	af 91       	pop	r26
    2396:	9f 91       	pop	r25
    2398:	8f 91       	pop	r24
    239a:	7f 91       	pop	r23
    239c:	6f 91       	pop	r22
    239e:	5f 91       	pop	r21
    23a0:	4f 91       	pop	r20
    23a2:	3f 91       	pop	r19
    23a4:	2f 91       	pop	r18
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	0f 90       	pop	r0
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	0f 90       	pop	r0
    23b8:	1f 90       	pop	r1
    23ba:	18 95       	reti
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	93 81       	ldd	r25, Z+3	; 0x03
    23c0:	a4 81       	ldd	r26, Z+4	; 0x04
    23c2:	b5 81       	ldd	r27, Z+5	; 0x05
    23c4:	20 91 64 01 	lds	r18, 0x0164
    23c8:	30 91 65 01 	lds	r19, 0x0165
    23cc:	2a 17       	cp	r18, r26
    23ce:	3b 07       	cpc	r19, r27
    23d0:	a9 f6       	brne	.-86     	; 0x237c <__vector_7+0x124>
    23d2:	ba cf       	rjmp	.-140    	; 0x2348 <__vector_7+0xf0>

000023d4 <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    23d4:	3f 92       	push	r3
    23d6:	4f 92       	push	r4
    23d8:	5f 92       	push	r5
    23da:	6f 92       	push	r6
    23dc:	7f 92       	push	r7
    23de:	8f 92       	push	r8
    23e0:	9f 92       	push	r9
    23e2:	af 92       	push	r10
    23e4:	bf 92       	push	r11
    23e6:	cf 92       	push	r12
    23e8:	df 92       	push	r13
    23ea:	ef 92       	push	r14
    23ec:	ff 92       	push	r15
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	2b 01       	movw	r4, r22
    23f8:	3c 01       	movw	r6, r24
    23fa:	49 01       	movw	r8, r18
    23fc:	5a 01       	movw	r10, r20
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    23fe:	8f b7       	in	r24, 0x3f	; 63
    2400:	0f 2e       	mov	r0, r31
    2402:	f0 e8       	ldi	r31, 0x80	; 128
    2404:	3f 2e       	mov	r3, r31
    2406:	f0 2d       	mov	r31, r0
    2408:	38 22       	and	r3, r24
    240a:	f8 94       	cli
    m = dequeue(&msgPool);
    240c:	88 e4       	ldi	r24, 0x48	; 72
    240e:	91 e0       	ldi	r25, 0x01	; 1
    2410:	0e 94 90 08 	call	0x1120	; 0x1120 <dequeue>
    2414:	ec 01       	movw	r28, r24
    m->to = to; 
    2416:	1b 87       	std	Y+11, r17	; 0x0b
    2418:	0a 87       	std	Y+10, r16	; 0x0a
    m->method = meth; 
    241a:	fd 86       	std	Y+13, r15	; 0x0d
    241c:	ec 86       	std	Y+12, r14	; 0x0c
    m->arg = arg;
    241e:	df 86       	std	Y+15, r13	; 0x0f
    2420:	ce 86       	std	Y+14, r12	; 0x0e
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    2422:	33 20       	and	r3, r3
    2424:	61 f0       	breq	.+24     	; 0x243e <async+0x6a>
    2426:	e0 91 42 01 	lds	r30, 0x0142
    242a:	f0 91 43 01 	lds	r31, 0x0143
    242e:	02 80       	ldd	r0, Z+2	; 0x02
    2430:	f3 81       	ldd	r31, Z+3	; 0x03
    2432:	e0 2d       	mov	r30, r0
    2434:	42 81       	ldd	r20, Z+2	; 0x02
    2436:	53 81       	ldd	r21, Z+3	; 0x03
    2438:	64 81       	ldd	r22, Z+4	; 0x04
    243a:	75 81       	ldd	r23, Z+5	; 0x05
    243c:	08 c0       	rjmp	.+16     	; 0x244e <async+0x7a>
    243e:	40 91 66 01 	lds	r20, 0x0166
    2442:	50 91 67 01 	lds	r21, 0x0167
    2446:	60 91 68 01 	lds	r22, 0x0168
    244a:	70 91 69 01 	lds	r23, 0x0169
    244e:	44 0d       	add	r20, r4
    2450:	55 1d       	adc	r21, r5
    2452:	66 1d       	adc	r22, r6
    2454:	77 1d       	adc	r23, r7
    2456:	4a 83       	std	Y+2, r20	; 0x02
    2458:	5b 83       	std	Y+3, r21	; 0x03
    245a:	6c 83       	std	Y+4, r22	; 0x04
    245c:	7d 83       	std	Y+5, r23	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    245e:	18 14       	cp	r1, r8
    2460:	19 04       	cpc	r1, r9
    2462:	1a 04       	cpc	r1, r10
    2464:	1b 04       	cpc	r1, r11
    2466:	54 f0       	brlt	.+20     	; 0x247c <async+0xa8>
    2468:	0f 2e       	mov	r0, r31
    246a:	ff ef       	ldi	r31, 0xFF	; 255
    246c:	8f 2e       	mov	r8, r31
    246e:	ff ef       	ldi	r31, 0xFF	; 255
    2470:	9f 2e       	mov	r9, r31
    2472:	ff ef       	ldi	r31, 0xFF	; 255
    2474:	af 2e       	mov	r10, r31
    2476:	ff e7       	ldi	r31, 0x7F	; 127
    2478:	bf 2e       	mov	r11, r31
    247a:	f0 2d       	mov	r31, r0
    247c:	84 0e       	add	r8, r20
    247e:	95 1e       	adc	r9, r21
    2480:	a6 1e       	adc	r10, r22
    2482:	b7 1e       	adc	r11, r23
    2484:	8e 82       	std	Y+6, r8	; 0x06
    2486:	9f 82       	std	Y+7, r9	; 0x07
    2488:	a8 86       	std	Y+8, r10	; 0x08
    248a:	b9 86       	std	Y+9, r11	; 0x09
    
    TIMERGET(now);
    248c:	80 91 64 01 	lds	r24, 0x0164
    2490:	90 91 65 01 	lds	r25, 0x0165
    2494:	e0 91 84 00 	lds	r30, 0x0084
    2498:	f0 91 85 00 	lds	r31, 0x0085
    249c:	b0 99       	sbic	0x16, 0	; 22
    249e:	0f c0       	rjmp	.+30     	; 0x24be <async+0xea>
    24a0:	aa 27       	eor	r26, r26
    24a2:	97 fd       	sbrc	r25, 7
    24a4:	a0 95       	com	r26
    24a6:	ba 2f       	mov	r27, r26
    24a8:	9c 01       	movw	r18, r24
    24aa:	11 27       	eor	r17, r17
    24ac:	00 27       	eor	r16, r16
    24ae:	cf 01       	movw	r24, r30
    24b0:	a0 e0       	ldi	r26, 0x00	; 0
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	80 2b       	or	r24, r16
    24b6:	91 2b       	or	r25, r17
    24b8:	a2 2b       	or	r26, r18
    24ba:	b3 2b       	or	r27, r19
    24bc:	13 c0       	rjmp	.+38     	; 0x24e4 <async+0x110>
    24be:	e0 91 84 00 	lds	r30, 0x0084
    24c2:	f0 91 85 00 	lds	r31, 0x0085
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	aa 27       	eor	r26, r26
    24ca:	97 fd       	sbrc	r25, 7
    24cc:	a0 95       	com	r26
    24ce:	ba 2f       	mov	r27, r26
    24d0:	9c 01       	movw	r18, r24
    24d2:	11 27       	eor	r17, r17
    24d4:	00 27       	eor	r16, r16
    24d6:	cf 01       	movw	r24, r30
    24d8:	a0 e0       	ldi	r26, 0x00	; 0
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	80 2b       	or	r24, r16
    24de:	91 2b       	or	r25, r17
    24e0:	a2 2b       	or	r26, r18
    24e2:	b3 2b       	or	r27, r19
    if (m->baseline - now > 0) {        // baseline has not yet passed
    24e4:	48 1b       	sub	r20, r24
    24e6:	59 0b       	sbc	r21, r25
    24e8:	6a 0b       	sbc	r22, r26
    24ea:	7b 0b       	sbc	r23, r27
    24ec:	14 16       	cp	r1, r20
    24ee:	15 06       	cpc	r1, r21
    24f0:	16 06       	cpc	r1, r22
    24f2:	17 06       	cpc	r1, r23
    24f4:	b4 f5       	brge	.+108    	; 0x2562 <async+0x18e>
        enqueueByBaseline(m, &timerQ);
    24f6:	ce 01       	movw	r24, r28
    24f8:	6a e6       	ldi	r22, 0x6A	; 106
    24fa:	71 e0       	ldi	r23, 0x01	; 1
    24fc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <enqueueByBaseline>
        TIMERSET(timerQ);
    2500:	e0 91 6a 01 	lds	r30, 0x016A
    2504:	f0 91 6b 01 	lds	r31, 0x016B
    2508:	30 97       	sbiw	r30, 0x00	; 0
    250a:	29 f1       	breq	.+74     	; 0x2556 <async+0x182>
    250c:	42 81       	ldd	r20, Z+2	; 0x02
    250e:	53 81       	ldd	r21, Z+3	; 0x03
    2510:	64 81       	ldd	r22, Z+4	; 0x04
    2512:	75 81       	ldd	r23, Z+5	; 0x05
    2514:	80 91 64 01 	lds	r24, 0x0164
    2518:	90 91 65 01 	lds	r25, 0x0165
    251c:	86 17       	cp	r24, r22
    251e:	97 07       	cpc	r25, r23
    2520:	d1 f4       	brne	.+52     	; 0x2556 <async+0x182>
    2522:	80 91 84 00 	lds	r24, 0x0084
    2526:	90 91 85 00 	lds	r25, 0x0085
    252a:	80 95       	com	r24
    252c:	90 95       	com	r25
    252e:	84 0f       	add	r24, r20
    2530:	95 1f       	adc	r25, r21
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	31 f4       	brne	.+12     	; 0x2542 <async+0x16e>
    2536:	40 91 84 00 	lds	r20, 0x0084
    253a:	50 91 85 00 	lds	r21, 0x0085
    253e:	4f 5f       	subi	r20, 0xFF	; 255
    2540:	5f 4f       	sbci	r21, 0xFF	; 255
    2542:	50 93 89 00 	sts	0x0089, r21
    2546:	40 93 88 00 	sts	0x0088, r20
    254a:	ef e6       	ldi	r30, 0x6F	; 111
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	82 60       	ori	r24, 0x02	; 2
    2552:	80 83       	st	Z, r24
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <async+0x200>
    2556:	ef e6       	ldi	r30, 0x6F	; 111
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	8d 7f       	andi	r24, 0xFD	; 253
    255e:	80 83       	st	Z, r24
    2560:	39 c0       	rjmp	.+114    	; 0x25d4 <async+0x200>
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
    2562:	ce 01       	movw	r24, r28
    2564:	6c e6       	ldi	r22, 0x6C	; 108
    2566:	71 e0       	ldi	r23, 0x01	; 1
    2568:	0e 94 10 08 	call	0x1020	; 0x1020 <enqueueByDeadline>
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    256c:	33 20       	and	r3, r3
    256e:	a9 f1       	breq	.+106    	; 0x25da <async+0x206>
    2570:	80 91 46 01 	lds	r24, 0x0146
    2574:	90 91 47 01 	lds	r25, 0x0147
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	71 f1       	breq	.+92     	; 0x25d8 <async+0x204>
    257c:	e0 91 6c 01 	lds	r30, 0x016C
    2580:	f0 91 6d 01 	lds	r31, 0x016D
    2584:	a0 91 44 01 	lds	r26, 0x0144
    2588:	b0 91 45 01 	lds	r27, 0x0145
    258c:	12 96       	adiw	r26, 0x02	; 2
    258e:	0d 90       	ld	r0, X+
    2590:	bc 91       	ld	r27, X
    2592:	a0 2d       	mov	r26, r0
    2594:	46 81       	ldd	r20, Z+6	; 0x06
    2596:	57 81       	ldd	r21, Z+7	; 0x07
    2598:	60 85       	ldd	r22, Z+8	; 0x08
    259a:	71 85       	ldd	r23, Z+9	; 0x09
    259c:	16 96       	adiw	r26, 0x06	; 6
    259e:	8d 91       	ld	r24, X+
    25a0:	9d 91       	ld	r25, X+
    25a2:	0d 90       	ld	r0, X+
    25a4:	bc 91       	ld	r27, X
    25a6:	a0 2d       	mov	r26, r0
    25a8:	8a 01       	movw	r16, r20
    25aa:	9b 01       	movw	r18, r22
    25ac:	08 1b       	sub	r16, r24
    25ae:	19 0b       	sbc	r17, r25
    25b0:	2a 0b       	sbc	r18, r26
    25b2:	3b 0b       	sbc	r19, r27
    25b4:	8a f4       	brpl	.+34     	; 0x25d8 <async+0x204>
            push(pop(&threadPool), &activeStack);
    25b6:	86 e4       	ldi	r24, 0x46	; 70
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    25ba:	0e 94 bd 08 	call	0x117a	; 0x117a <pop>
    25be:	64 e4       	ldi	r22, 0x44	; 68
    25c0:	71 e0       	ldi	r23, 0x01	; 1
    25c2:	0e 94 b3 08 	call	0x1166	; 0x1166 <push>
            dispatch(activeStack);
    25c6:	80 91 44 01 	lds	r24, 0x0144
    25ca:	90 91 45 01 	lds	r25, 0x0145
    25ce:	0e 94 20 07 	call	0xe40	; 0xe40 <dispatch>
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <async+0x204>
        }
    }
    
    ENABLE(status);
    25d4:	33 20       	and	r3, r3
    25d6:	09 f0       	breq	.+2      	; 0x25da <async+0x206>
    25d8:	78 94       	sei
    return m;
}
    25da:	8c 2f       	mov	r24, r28
    25dc:	9d 2f       	mov	r25, r29
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	bf 90       	pop	r11
    25f0:	af 90       	pop	r10
    25f2:	9f 90       	pop	r9
    25f4:	8f 90       	pop	r8
    25f6:	7f 90       	pop	r7
    25f8:	6f 90       	pop	r6
    25fa:	5f 90       	pop	r5
    25fc:	4f 90       	pop	r4
    25fe:	3f 90       	pop	r3
    2600:	08 95       	ret

00002602 <sync>:

int sync(Object *to, Method meth, int arg) {
    2602:	af 92       	push	r10
    2604:	bf 92       	push	r11
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ff 92       	push	r15
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	8c 01       	movw	r16, r24
    2616:	5b 01       	movw	r10, r22
    2618:	6a 01       	movw	r12, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    261a:	8f b7       	in	r24, 0x3f	; 63
    261c:	0f 2e       	mov	r0, r31
    261e:	f0 e8       	ldi	r31, 0x80	; 128
    2620:	ff 2e       	mov	r15, r31
    2622:	f0 2d       	mov	r31, r0
    2624:	f8 22       	and	r15, r24
    2626:	f8 94       	cli
    t = to->ownedBy;
    2628:	d8 01       	movw	r26, r16
    262a:	cd 91       	ld	r28, X+
    262c:	dc 91       	ld	r29, X
    262e:	11 97       	sbiw	r26, 0x01	; 1
    if (t) {                            // to is already locked
    2630:	20 97       	sbiw	r28, 0x00	; 0
    2632:	09 f4       	brne	.+2      	; 0x2636 <sync+0x34>
    2634:	3f c0       	rjmp	.+126    	; 0x26b4 <sync+0xb2>
        while (t->waitsFor) 
    2636:	ec 81       	ldd	r30, Y+4	; 0x04
    2638:	fd 81       	ldd	r31, Y+5	; 0x05
    263a:	30 97       	sbiw	r30, 0x00	; 0
    263c:	31 f0       	breq	.+12     	; 0x264a <sync+0x48>
            t = t->waitsFor->ownedBy;
    263e:	c0 81       	ld	r28, Z
    2640:	d1 81       	ldd	r29, Z+1	; 0x01
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    2642:	ec 81       	ldd	r30, Y+4	; 0x04
    2644:	fd 81       	ldd	r31, Y+5	; 0x05
    2646:	30 97       	sbiw	r30, 0x00	; 0
    2648:	d1 f7       	brne	.-12     	; 0x263e <sync+0x3c>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    264a:	e0 91 42 01 	lds	r30, 0x0142
    264e:	f0 91 43 01 	lds	r31, 0x0143
    2652:	ce 17       	cp	r28, r30
    2654:	df 07       	cpc	r29, r31
    2656:	21 f0       	breq	.+8      	; 0x2660 <sync+0x5e>
    2658:	ff 20       	and	r15, r15
    265a:	09 f4       	brne	.+2      	; 0x265e <sync+0x5c>
    265c:	59 c0       	rjmp	.+178    	; 0x2710 <sync+0x10e>
    265e:	07 c0       	rjmp	.+14     	; 0x266e <sync+0x6c>
            ENABLE(status);
    2660:	ff 20       	and	r15, r15
    2662:	09 f4       	brne	.+2      	; 0x2666 <sync+0x64>
    2664:	58 c0       	rjmp	.+176    	; 0x2716 <sync+0x114>
    2666:	78 94       	sei
            return -1;
    2668:	cf ef       	ldi	r28, 0xFF	; 255
    266a:	df ef       	ldi	r29, 0xFF	; 255
    266c:	56 c0       	rjmp	.+172    	; 0x271a <sync+0x118>
        }
        if (to->wantedBy)               // must be a lower priority thread
    266e:	d8 01       	movw	r26, r16
    2670:	12 96       	adiw	r26, 0x02	; 2
    2672:	8d 91       	ld	r24, X+
    2674:	9c 91       	ld	r25, X
    2676:	13 97       	sbiw	r26, 0x03	; 3
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	29 f0       	breq	.+10     	; 0x2686 <sync+0x84>
            to->wantedBy->waitsFor = NULL;
    267c:	dc 01       	movw	r26, r24
    267e:	15 96       	adiw	r26, 0x05	; 5
    2680:	1c 92       	st	X, r1
    2682:	1e 92       	st	-X, r1
    2684:	14 97       	sbiw	r26, 0x04	; 4
        to->wantedBy = current;
    2686:	d8 01       	movw	r26, r16
    2688:	13 96       	adiw	r26, 0x03	; 3
    268a:	fc 93       	st	X, r31
    268c:	ee 93       	st	-X, r30
    268e:	12 97       	sbiw	r26, 0x02	; 2
        current->waitsFor = to;
    2690:	15 83       	std	Z+5, r17	; 0x05
    2692:	04 83       	std	Z+4, r16	; 0x04
        dispatch(t);
    2694:	ce 01       	movw	r24, r28
    2696:	0e 94 20 07 	call	0xe40	; 0xe40 <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    269a:	e0 91 42 01 	lds	r30, 0x0142
    269e:	f0 91 43 01 	lds	r31, 0x0143
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	09 f0       	breq	.+2      	; 0x26ac <sync+0xaa>
    26aa:	43 c0       	rjmp	.+134    	; 0x2732 <sync+0x130>
            ENABLE(status);
    26ac:	78 94       	sei
            return 0;
    26ae:	c0 e0       	ldi	r28, 0x00	; 0
    26b0:	d0 e0       	ldi	r29, 0x00	; 0
    26b2:	33 c0       	rjmp	.+102    	; 0x271a <sync+0x118>
        }
    }
    to->ownedBy = current;
    26b4:	80 91 42 01 	lds	r24, 0x0142
    26b8:	90 91 43 01 	lds	r25, 0x0143
    26bc:	f8 01       	movw	r30, r16
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    26c2:	ff 20       	and	r15, r15
    26c4:	49 f0       	breq	.+18     	; 0x26d8 <sync+0xd6>
    26c6:	d8 01       	movw	r26, r16
    26c8:	12 96       	adiw	r26, 0x02	; 2
    26ca:	8d 91       	ld	r24, X+
    26cc:	9c 91       	ld	r25, X
    26ce:	13 97       	sbiw	r26, 0x03	; 3
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	91 05       	cpc	r25, r1
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <sync+0xd6>
    26d6:	78 94       	sei
    result = meth(to, arg);
    26d8:	c8 01       	movw	r24, r16
    26da:	b6 01       	movw	r22, r12
    26dc:	f5 01       	movw	r30, r10
    26de:	09 95       	icall
    26e0:	ec 01       	movw	r28, r24
    DISABLE(status_ignore);
    26e2:	8f b7       	in	r24, 0x3f	; 63
    26e4:	f8 94       	cli
    to->ownedBy = NULL; 
    26e6:	f8 01       	movw	r30, r16
    26e8:	11 82       	std	Z+1, r1	; 0x01
    26ea:	10 82       	st	Z, r1
    t = to->wantedBy;
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	91 05       	cpc	r25, r1
    26f4:	48 f0       	brcs	.+18     	; 0x2708 <sync+0x106>
        to->wantedBy = NULL; 
    26f6:	13 82       	std	Z+3, r1	; 0x03
    26f8:	12 82       	std	Z+2, r1	; 0x02
        t->waitsFor = NULL;
    26fa:	dc 01       	movw	r26, r24
    26fc:	15 96       	adiw	r26, 0x05	; 5
    26fe:	1c 92       	st	X, r1
    2700:	1e 92       	st	-X, r1
    2702:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    2704:	0e 94 20 07 	call	0xe40	; 0xe40 <dispatch>
    }
    ENABLE(status);
    2708:	ff 20       	and	r15, r15
    270a:	39 f0       	breq	.+14     	; 0x271a <sync+0x118>
    270c:	78 94       	sei
    270e:	05 c0       	rjmp	.+10     	; 0x271a <sync+0x118>
    if (t) {                            // to is already locked
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
            ENABLE(status);
            return -1;
    2710:	cf ef       	ldi	r28, 0xFF	; 255
    2712:	df ef       	ldi	r29, 0xFF	; 255
    2714:	02 c0       	rjmp	.+4      	; 0x271a <sync+0x118>
    2716:	cf ef       	ldi	r28, 0xFF	; 255
    2718:	df ef       	ldi	r29, 0xFF	; 255
        t->waitsFor = NULL;
        dispatch(t);
    }
    ENABLE(status);
    return result;
}
    271a:	8c 2f       	mov	r24, r28
    271c:	9d 2f       	mov	r25, r29
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	df 90       	pop	r13
    272a:	cf 90       	pop	r12
    272c:	bf 90       	pop	r11
    272e:	af 90       	pop	r10
    2730:	08 95       	ret
        if (current->msg == NULL) {     // message was aborted (when called from run)
            ENABLE(status);
            return 0;
        }
    }
    to->ownedBy = current;
    2732:	d8 01       	movw	r26, r16
    2734:	11 96       	adiw	r26, 0x01	; 1
    2736:	fc 93       	st	X, r31
    2738:	ee 93       	st	-X, r30
    273a:	c5 cf       	rjmp	.-118    	; 0x26c6 <sync+0xc4>

0000273c <run>:
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    273c:	0f 2e       	mov	r0, r31
    273e:	fc e6       	ldi	r31, 0x6C	; 108
    2740:	ef 2e       	mov	r14, r31
    2742:	f1 e0       	ldi	r31, 0x01	; 1
    2744:	ff 2e       	mov	r15, r31
    2746:	f0 2d       	mov	r31, r0
        char status = 1;
        
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
    2748:	0f 2e       	mov	r0, r31
    274a:	f8 e4       	ldi	r31, 0x48	; 72
    274c:	cf 2e       	mov	r12, r31
    274e:	f1 e0       	ldi	r31, 0x01	; 1
    2750:	df 2e       	mov	r13, r31
    2752:	f0 2d       	mov	r31, r0
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
    2754:	0f 2e       	mov	r0, r31
    2756:	f4 e4       	ldi	r31, 0x44	; 68
    2758:	af 2e       	mov	r10, r31
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    275c:	bf 2e       	mov	r11, r31
    275e:	f0 2d       	mov	r31, r0
    2760:	0f 2e       	mov	r0, r31
    2762:	f6 e4       	ldi	r31, 0x46	; 70
    2764:	8f 2e       	mov	r8, r31
    2766:	f1 e0       	ldi	r31, 0x01	; 1
    2768:	9f 2e       	mov	r9, r31
    276a:	f0 2d       	mov	r31, r0
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    276c:	c0 91 42 01 	lds	r28, 0x0142
    2770:	d0 91 43 01 	lds	r29, 0x0143
    2774:	c7 01       	movw	r24, r14
    2776:	0e 94 90 08 	call	0x1120	; 0x1120 <dequeue>
    277a:	8c 01       	movw	r16, r24
    277c:	9b 83       	std	Y+3, r25	; 0x03
    277e:	8a 83       	std	Y+2, r24	; 0x02
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    2780:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    2782:	fc 01       	movw	r30, r24
    2784:	64 85       	ldd	r22, Z+12	; 0x0c
    2786:	75 85       	ldd	r23, Z+13	; 0x0d
    2788:	46 85       	ldd	r20, Z+14	; 0x0e
    278a:	57 85       	ldd	r21, Z+15	; 0x0f
    278c:	82 85       	ldd	r24, Z+10	; 0x0a
    278e:	93 85       	ldd	r25, Z+11	; 0x0b
    2790:	0e 94 01 13 	call	0x2602	; 0x2602 <sync>
        DISABLE(status);
    2794:	8f b7       	in	r24, 0x3f	; 63
    2796:	f8 94       	cli
        insert(this, &msgPool);
    2798:	c8 01       	movw	r24, r16
    279a:	b6 01       	movw	r22, r12
    279c:	0e 94 a9 08 	call	0x1152	; 0x1152 <insert>
       
        oldMsg = activeStack->next->msg;
    27a0:	e0 91 44 01 	lds	r30, 0x0144
    27a4:	f0 91 45 01 	lds	r31, 0x0145
    27a8:	01 90       	ld	r0, Z+
    27aa:	f0 81       	ld	r31, Z
    27ac:	e0 2d       	mov	r30, r0
    27ae:	a2 81       	ldd	r26, Z+2	; 0x02
    27b0:	b3 81       	ldd	r27, Z+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    27b2:	e0 91 6c 01 	lds	r30, 0x016C
    27b6:	f0 91 6d 01 	lds	r31, 0x016D
    27ba:	30 97       	sbiw	r30, 0x00	; 0
    27bc:	b1 f0       	breq	.+44     	; 0x27ea <run+0xae>
    27be:	10 97       	sbiw	r26, 0x00	; 0
    27c0:	a9 f2       	breq	.-86     	; 0x276c <run+0x30>
    27c2:	46 81       	ldd	r20, Z+6	; 0x06
    27c4:	57 81       	ldd	r21, Z+7	; 0x07
    27c6:	60 85       	ldd	r22, Z+8	; 0x08
    27c8:	71 85       	ldd	r23, Z+9	; 0x09
    27ca:	16 96       	adiw	r26, 0x06	; 6
    27cc:	8d 91       	ld	r24, X+
    27ce:	9d 91       	ld	r25, X+
    27d0:	0d 90       	ld	r0, X+
    27d2:	bc 91       	ld	r27, X
    27d4:	a0 2d       	mov	r26, r0
    27d6:	48 1b       	sub	r20, r24
    27d8:	59 0b       	sbc	r21, r25
    27da:	6a 0b       	sbc	r22, r26
    27dc:	7b 0b       	sbc	r23, r27
    27de:	14 16       	cp	r1, r20
    27e0:	15 06       	cpc	r1, r21
    27e2:	16 06       	cpc	r1, r22
    27e4:	17 06       	cpc	r1, r23
    27e6:	0c f0       	brlt	.+2      	; 0x27ea <run+0xae>
    27e8:	c1 cf       	rjmp	.-126    	; 0x276c <run+0x30>
            Thread t;
            push(pop(&activeStack), &threadPool);
    27ea:	c5 01       	movw	r24, r10
    27ec:	0e 94 bd 08 	call	0x117a	; 0x117a <pop>
    27f0:	b4 01       	movw	r22, r8
    27f2:	0e 94 b3 08 	call	0x1166	; 0x1166 <push>
            t = activeStack;  // can't be NULL, may be &thread0
    27f6:	a0 91 44 01 	lds	r26, 0x0144
    27fa:	b0 91 45 01 	lds	r27, 0x0145
            while (t->waitsFor) 
    27fe:	14 96       	adiw	r26, 0x04	; 4
    2800:	ed 91       	ld	r30, X+
    2802:	fc 91       	ld	r31, X
    2804:	15 97       	sbiw	r26, 0x05	; 5
    2806:	30 97       	sbiw	r30, 0x00	; 0
    2808:	41 f0       	breq	.+16     	; 0x281a <run+0xde>
	            t = t->waitsFor->ownedBy;
    280a:	a0 81       	ld	r26, Z
    280c:	b1 81       	ldd	r27, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    280e:	14 96       	adiw	r26, 0x04	; 4
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	15 97       	sbiw	r26, 0x05	; 5
    2816:	30 97       	sbiw	r30, 0x00	; 0
    2818:	c1 f7       	brne	.-16     	; 0x280a <run+0xce>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 20 07 	call	0xe40	; 0xe40 <dispatch>
    2820:	a5 cf       	rjmp	.-182    	; 0x276c <run+0x30>

00002822 <ABORT>:
    }
    ENABLE(status);
    return result;
}

void ABORT(Msg m) {
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	ec 01       	movw	r28, r24
    char status;
    DISABLE(status);
    282a:	1f b7       	in	r17, 0x3f	; 63
    282c:	10 78       	andi	r17, 0x80	; 128
    282e:	f8 94       	cli
    if (remove(m, &timerQ) || remove(m, &msgQ))
    2830:	6a e6       	ldi	r22, 0x6A	; 106
    2832:	71 e0       	ldi	r23, 0x01	; 1
    2834:	0e 94 f2 06 	call	0xde4	; 0xde4 <remove>
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	39 f4       	brne	.+14     	; 0x284a <ABORT+0x28>
    283c:	ce 01       	movw	r24, r28
    283e:	6c e6       	ldi	r22, 0x6C	; 108
    2840:	71 e0       	ldi	r23, 0x01	; 1
    2842:	0e 94 f2 06 	call	0xde4	; 0xde4 <remove>
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	31 f0       	breq	.+12     	; 0x2856 <ABORT+0x34>
        insert(m, &msgPool);
    284a:	ce 01       	movw	r24, r28
    284c:	68 e4       	ldi	r22, 0x48	; 72
    284e:	71 e0       	ldi	r23, 0x01	; 1
    2850:	0e 94 a9 08 	call	0x1152	; 0x1152 <insert>
    2854:	26 c0       	rjmp	.+76     	; 0x28a2 <ABORT+0x80>
    else {
        Thread t = activeStack;
    2856:	e0 91 44 01 	lds	r30, 0x0144
    285a:	f0 91 45 01 	lds	r31, 0x0145
        while (t) {
    285e:	30 97       	sbiw	r30, 0x00	; 0
    2860:	01 f1       	breq	.+64     	; 0x28a2 <ABORT+0x80>
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
    2862:	40 91 42 01 	lds	r20, 0x0142
    2866:	50 91 43 01 	lds	r21, 0x0143
    286a:	e4 17       	cp	r30, r20
    286c:	f5 07       	cpc	r31, r21
    286e:	a1 f0       	breq	.+40     	; 0x2898 <ABORT+0x76>
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	8c 17       	cp	r24, r28
    2876:	9d 07       	cpc	r25, r29
    2878:	79 f4       	brne	.+30     	; 0x2898 <ABORT+0x76>
    287a:	84 81       	ldd	r24, Z+4	; 0x04
    287c:	95 81       	ldd	r25, Z+5	; 0x05
    287e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2880:	3b 85       	ldd	r19, Y+11	; 0x0b
    2882:	82 17       	cp	r24, r18
    2884:	93 07       	cpc	r25, r19
    2886:	41 f4       	brne	.+16     	; 0x2898 <ABORT+0x76>
	            t->msg = NULL;
    2888:	13 82       	std	Z+3, r1	; 0x03
    288a:	12 82       	std	Z+2, r1	; 0x02
	            insert(m, &msgPool);
    288c:	ce 01       	movw	r24, r28
    288e:	68 e4       	ldi	r22, 0x48	; 72
    2890:	71 e0       	ldi	r23, 0x01	; 1
    2892:	0e 94 a9 08 	call	0x1152	; 0x1152 <insert>
	            break;
    2896:	05 c0       	rjmp	.+10     	; 0x28a2 <ABORT+0x80>
            }
            t = t->next;
    2898:	01 90       	ld	r0, Z+
    289a:	f0 81       	ld	r31, Z
    289c:	e0 2d       	mov	r30, r0
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
        while (t) {
    289e:	30 97       	sbiw	r30, 0x00	; 0
    28a0:	21 f7       	brne	.-56     	; 0x286a <ABORT+0x48>
	            break;
            }
            t = t->next;
        }
    }
    ENABLE(status);
    28a2:	11 23       	and	r17, r17
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <ABORT+0x86>
    28a6:	78 94       	sei
}
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	08 95       	ret

000028b0 <T_RESET>:

void T_RESET(Timer *t) {
    t->accum = STATUS() ? current->msg->baseline : timestamp;
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	07 fe       	sbrs	r0, 7
    28b4:	0c c0       	rjmp	.+24     	; 0x28ce <T_RESET+0x1e>
    28b6:	e0 91 42 01 	lds	r30, 0x0142
    28ba:	f0 91 43 01 	lds	r31, 0x0143
    28be:	02 80       	ldd	r0, Z+2	; 0x02
    28c0:	f3 81       	ldd	r31, Z+3	; 0x03
    28c2:	e0 2d       	mov	r30, r0
    28c4:	42 81       	ldd	r20, Z+2	; 0x02
    28c6:	53 81       	ldd	r21, Z+3	; 0x03
    28c8:	64 81       	ldd	r22, Z+4	; 0x04
    28ca:	75 81       	ldd	r23, Z+5	; 0x05
    28cc:	08 c0       	rjmp	.+16     	; 0x28de <T_RESET+0x2e>
    28ce:	40 91 66 01 	lds	r20, 0x0166
    28d2:	50 91 67 01 	lds	r21, 0x0167
    28d6:	60 91 68 01 	lds	r22, 0x0168
    28da:	70 91 69 01 	lds	r23, 0x0169
    28de:	fc 01       	movw	r30, r24
    28e0:	40 83       	st	Z, r20
    28e2:	51 83       	std	Z+1, r21	; 0x01
    28e4:	62 83       	std	Z+2, r22	; 0x02
    28e6:	73 83       	std	Z+3, r23	; 0x03
}
    28e8:	08 95       	ret

000028ea <T_SAMPLE>:

Time T_SAMPLE(Timer *t) {
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	07 fe       	sbrs	r0, 7
    28f2:	0c c0       	rjmp	.+24     	; 0x290c <T_SAMPLE+0x22>
    28f4:	e0 91 42 01 	lds	r30, 0x0142
    28f8:	f0 91 43 01 	lds	r31, 0x0143
    28fc:	02 80       	ldd	r0, Z+2	; 0x02
    28fe:	f3 81       	ldd	r31, Z+3	; 0x03
    2900:	e0 2d       	mov	r30, r0
    2902:	02 81       	ldd	r16, Z+2	; 0x02
    2904:	13 81       	ldd	r17, Z+3	; 0x03
    2906:	24 81       	ldd	r18, Z+4	; 0x04
    2908:	35 81       	ldd	r19, Z+5	; 0x05
    290a:	08 c0       	rjmp	.+16     	; 0x291c <T_SAMPLE+0x32>
    290c:	00 91 66 01 	lds	r16, 0x0166
    2910:	10 91 67 01 	lds	r17, 0x0167
    2914:	20 91 68 01 	lds	r18, 0x0168
    2918:	30 91 69 01 	lds	r19, 0x0169
    291c:	fc 01       	movw	r30, r24
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	a2 81       	ldd	r26, Z+2	; 0x02
    2924:	b3 81       	ldd	r27, Z+3	; 0x03
    2926:	08 1b       	sub	r16, r24
    2928:	19 0b       	sbc	r17, r25
    292a:	2a 0b       	sbc	r18, r26
    292c:	3b 0b       	sbc	r19, r27
}
    292e:	60 2f       	mov	r22, r16
    2930:	71 2f       	mov	r23, r17
    2932:	82 2f       	mov	r24, r18
    2934:	93 2f       	mov	r25, r19
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	08 95       	ret

0000293c <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    char status;
    Time now;
    DISABLE(status);
    2940:	4f b7       	in	r20, 0x3f	; 63
    2942:	40 78       	andi	r20, 0x80	; 128
    2944:	f8 94       	cli
    TIMERGET(now);
    2946:	00 91 64 01 	lds	r16, 0x0164
    294a:	10 91 65 01 	lds	r17, 0x0165
    294e:	80 91 84 00 	lds	r24, 0x0084
    2952:	90 91 85 00 	lds	r25, 0x0085
    2956:	b0 99       	sbic	0x16, 0	; 22
    2958:	0e c0       	rjmp	.+28     	; 0x2976 <CURRENT_OFFSET+0x3a>
    295a:	22 27       	eor	r18, r18
    295c:	17 fd       	sbrc	r17, 7
    295e:	20 95       	com	r18
    2960:	32 2f       	mov	r19, r18
    2962:	98 01       	movw	r18, r16
    2964:	11 27       	eor	r17, r17
    2966:	00 27       	eor	r16, r16
    2968:	a0 e0       	ldi	r26, 0x00	; 0
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	08 2b       	or	r16, r24
    296e:	19 2b       	or	r17, r25
    2970:	2a 2b       	or	r18, r26
    2972:	3b 2b       	or	r19, r27
    2974:	13 c0       	rjmp	.+38     	; 0x299c <CURRENT_OFFSET+0x60>
    2976:	80 91 84 00 	lds	r24, 0x0084
    297a:	90 91 85 00 	lds	r25, 0x0085
    297e:	0f 5f       	subi	r16, 0xFF	; 255
    2980:	1f 4f       	sbci	r17, 0xFF	; 255
    2982:	22 27       	eor	r18, r18
    2984:	17 fd       	sbrc	r17, 7
    2986:	20 95       	com	r18
    2988:	32 2f       	mov	r19, r18
    298a:	98 01       	movw	r18, r16
    298c:	11 27       	eor	r17, r17
    298e:	00 27       	eor	r16, r16
    2990:	a0 e0       	ldi	r26, 0x00	; 0
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	08 2b       	or	r16, r24
    2996:	19 2b       	or	r17, r25
    2998:	2a 2b       	or	r18, r26
    299a:	3b 2b       	or	r19, r27
    ENABLE(status);
    299c:	44 23       	and	r20, r20
    299e:	69 f0       	breq	.+26     	; 0x29ba <CURRENT_OFFSET+0x7e>
    29a0:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
    29a2:	e0 91 42 01 	lds	r30, 0x0142
    29a6:	f0 91 43 01 	lds	r31, 0x0143
    29aa:	02 80       	ldd	r0, Z+2	; 0x02
    29ac:	f3 81       	ldd	r31, Z+3	; 0x03
    29ae:	e0 2d       	mov	r30, r0
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	a4 81       	ldd	r26, Z+4	; 0x04
    29b6:	b5 81       	ldd	r27, Z+5	; 0x05
    29b8:	08 c0       	rjmp	.+16     	; 0x29ca <CURRENT_OFFSET+0x8e>
    29ba:	80 91 66 01 	lds	r24, 0x0166
    29be:	90 91 67 01 	lds	r25, 0x0167
    29c2:	a0 91 68 01 	lds	r26, 0x0168
    29c6:	b0 91 69 01 	lds	r27, 0x0169
    29ca:	08 1b       	sub	r16, r24
    29cc:	19 0b       	sbc	r17, r25
    29ce:	2a 0b       	sbc	r18, r26
    29d0:	3b 0b       	sbc	r19, r27
}
    29d2:	60 2f       	mov	r22, r16
    29d4:	71 2f       	mov	r23, r17
    29d6:	82 2f       	mov	r24, r18
    29d8:	93 2f       	mov	r25, r19
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	08 95       	ret

000029e0 <install>:
    DUMP("\n\r");
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    29e0:	42 31       	cpi	r20, 0x12	; 18
    29e2:	b8 f4       	brcc	.+46     	; 0x2a12 <install+0x32>
        char status;
        DISABLE(status);
    29e4:	af b7       	in	r26, 0x3f	; 63
    29e6:	f8 94       	cli
        otable[i] = obj;
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	44 0f       	add	r20, r20
    29ec:	55 1f       	adc	r21, r21
    29ee:	fa 01       	movw	r30, r20
    29f0:	e2 59       	subi	r30, 0x92	; 146
    29f2:	fe 4f       	sbci	r31, 0xFE	; 254
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	80 83       	st	Z, r24
        mtable[i] = m;
    29f8:	4a 5f       	subi	r20, 0xFA	; 250
    29fa:	5d 4f       	sbci	r21, 0xFD	; 253
    29fc:	fa 01       	movw	r30, r20
    29fe:	71 83       	std	Z+1, r23	; 0x01
    2a00:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2a02:	21 e0       	ldi	r18, 0x01	; 1
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	fc 01       	movw	r30, r24
    2a08:	33 83       	std	Z+3, r19	; 0x03
    2a0a:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2a0c:	aa 23       	and	r26, r26
    2a0e:	0c f4       	brge	.+2      	; 0x2a12 <install+0x32>
    2a10:	78 94       	sei
    2a12:	08 95       	ret

00002a14 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2a14:	8c 01       	movw	r16, r24
    2a16:	eb 01       	movw	r28, r22
    2a18:	7a 01       	movw	r14, r20
    char status;
    DISABLE(status);
    2a1a:	8f b7       	in	r24, 0x3f	; 63
    2a1c:	f8 94       	cli
    initialize();
    2a1e:	0e 94 49 07 	call	0xe92	; 0xe92 <initialize>
    ENABLE(1);
    2a22:	78 94       	sei
    if (m != NULL)
    2a24:	20 97       	sbiw	r28, 0x00	; 0
    2a26:	21 f0       	breq	.+8      	; 0x2a30 <tinytimber+0x1c>
        m(obj, arg);
    2a28:	c8 01       	movw	r24, r16
    2a2a:	b7 01       	movw	r22, r14
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	09 95       	icall
    DISABLE(status);
    2a30:	8f b7       	in	r24, 0x3f	; 63
    2a32:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2a34:	0e 94 c9 08 	call	0x1192	; 0x1192 <schedule>
    ENABLE(1);
    2a38:	78 94       	sei
    while (1) {
        SLEEP();
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	83 bf       	out	0x33, r24	; 51
    2a3e:	88 95       	sleep
    2a40:	fd cf       	rjmp	.-6      	; 0x2a3c <tinytimber+0x28>

00002a42 <__fixsfsi>:
    2a42:	04 d0       	rcall	.+8      	; 0x2a4c <__fixunssfsi>
    2a44:	68 94       	set
    2a46:	b1 11       	cpse	r27, r1
    2a48:	8d c0       	rjmp	.+282    	; 0x2b64 <__fp_szero>
    2a4a:	08 95       	ret

00002a4c <__fixunssfsi>:
    2a4c:	70 d0       	rcall	.+224    	; 0x2b2e <__fp_splitA>
    2a4e:	88 f0       	brcs	.+34     	; 0x2a72 <__fixunssfsi+0x26>
    2a50:	9f 57       	subi	r25, 0x7F	; 127
    2a52:	90 f0       	brcs	.+36     	; 0x2a78 <__fixunssfsi+0x2c>
    2a54:	b9 2f       	mov	r27, r25
    2a56:	99 27       	eor	r25, r25
    2a58:	b7 51       	subi	r27, 0x17	; 23
    2a5a:	a0 f0       	brcs	.+40     	; 0x2a84 <__fixunssfsi+0x38>
    2a5c:	d1 f0       	breq	.+52     	; 0x2a92 <__fixunssfsi+0x46>
    2a5e:	66 0f       	add	r22, r22
    2a60:	77 1f       	adc	r23, r23
    2a62:	88 1f       	adc	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	1a f0       	brmi	.+6      	; 0x2a6e <__fixunssfsi+0x22>
    2a68:	ba 95       	dec	r27
    2a6a:	c9 f7       	brne	.-14     	; 0x2a5e <__fixunssfsi+0x12>
    2a6c:	12 c0       	rjmp	.+36     	; 0x2a92 <__fixunssfsi+0x46>
    2a6e:	b1 30       	cpi	r27, 0x01	; 1
    2a70:	81 f0       	breq	.+32     	; 0x2a92 <__fixunssfsi+0x46>
    2a72:	77 d0       	rcall	.+238    	; 0x2b62 <__fp_zero>
    2a74:	b1 e0       	ldi	r27, 0x01	; 1
    2a76:	08 95       	ret
    2a78:	74 c0       	rjmp	.+232    	; 0x2b62 <__fp_zero>
    2a7a:	67 2f       	mov	r22, r23
    2a7c:	78 2f       	mov	r23, r24
    2a7e:	88 27       	eor	r24, r24
    2a80:	b8 5f       	subi	r27, 0xF8	; 248
    2a82:	39 f0       	breq	.+14     	; 0x2a92 <__fixunssfsi+0x46>
    2a84:	b9 3f       	cpi	r27, 0xF9	; 249
    2a86:	cc f3       	brlt	.-14     	; 0x2a7a <__fixunssfsi+0x2e>
    2a88:	86 95       	lsr	r24
    2a8a:	77 95       	ror	r23
    2a8c:	67 95       	ror	r22
    2a8e:	b3 95       	inc	r27
    2a90:	d9 f7       	brne	.-10     	; 0x2a88 <__fixunssfsi+0x3c>
    2a92:	3e f4       	brtc	.+14     	; 0x2aa2 <__fixunssfsi+0x56>
    2a94:	90 95       	com	r25
    2a96:	80 95       	com	r24
    2a98:	70 95       	com	r23
    2a9a:	61 95       	neg	r22
    2a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa2:	08 95       	ret

00002aa4 <__floatunsisf>:
    2aa4:	e8 94       	clt
    2aa6:	09 c0       	rjmp	.+18     	; 0x2aba <__floatsisf+0x12>

00002aa8 <__floatsisf>:
    2aa8:	97 fb       	bst	r25, 7
    2aaa:	3e f4       	brtc	.+14     	; 0x2aba <__floatsisf+0x12>
    2aac:	90 95       	com	r25
    2aae:	80 95       	com	r24
    2ab0:	70 95       	com	r23
    2ab2:	61 95       	neg	r22
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aba:	99 23       	and	r25, r25
    2abc:	a9 f0       	breq	.+42     	; 0x2ae8 <__floatsisf+0x40>
    2abe:	f9 2f       	mov	r31, r25
    2ac0:	96 e9       	ldi	r25, 0x96	; 150
    2ac2:	bb 27       	eor	r27, r27
    2ac4:	93 95       	inc	r25
    2ac6:	f6 95       	lsr	r31
    2ac8:	87 95       	ror	r24
    2aca:	77 95       	ror	r23
    2acc:	67 95       	ror	r22
    2ace:	b7 95       	ror	r27
    2ad0:	f1 11       	cpse	r31, r1
    2ad2:	f8 cf       	rjmp	.-16     	; 0x2ac4 <__floatsisf+0x1c>
    2ad4:	fa f4       	brpl	.+62     	; 0x2b14 <__floatsisf+0x6c>
    2ad6:	bb 0f       	add	r27, r27
    2ad8:	11 f4       	brne	.+4      	; 0x2ade <__floatsisf+0x36>
    2ada:	60 ff       	sbrs	r22, 0
    2adc:	1b c0       	rjmp	.+54     	; 0x2b14 <__floatsisf+0x6c>
    2ade:	6f 5f       	subi	r22, 0xFF	; 255
    2ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	16 c0       	rjmp	.+44     	; 0x2b14 <__floatsisf+0x6c>
    2ae8:	88 23       	and	r24, r24
    2aea:	11 f0       	breq	.+4      	; 0x2af0 <__floatsisf+0x48>
    2aec:	96 e9       	ldi	r25, 0x96	; 150
    2aee:	11 c0       	rjmp	.+34     	; 0x2b12 <__floatsisf+0x6a>
    2af0:	77 23       	and	r23, r23
    2af2:	21 f0       	breq	.+8      	; 0x2afc <__floatsisf+0x54>
    2af4:	9e e8       	ldi	r25, 0x8E	; 142
    2af6:	87 2f       	mov	r24, r23
    2af8:	76 2f       	mov	r23, r22
    2afa:	05 c0       	rjmp	.+10     	; 0x2b06 <__floatsisf+0x5e>
    2afc:	66 23       	and	r22, r22
    2afe:	71 f0       	breq	.+28     	; 0x2b1c <__floatsisf+0x74>
    2b00:	96 e8       	ldi	r25, 0x86	; 134
    2b02:	86 2f       	mov	r24, r22
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	2a f0       	brmi	.+10     	; 0x2b14 <__floatsisf+0x6c>
    2b0a:	9a 95       	dec	r25
    2b0c:	66 0f       	add	r22, r22
    2b0e:	77 1f       	adc	r23, r23
    2b10:	88 1f       	adc	r24, r24
    2b12:	da f7       	brpl	.-10     	; 0x2b0a <__floatsisf+0x62>
    2b14:	88 0f       	add	r24, r24
    2b16:	96 95       	lsr	r25
    2b18:	87 95       	ror	r24
    2b1a:	97 f9       	bld	r25, 7
    2b1c:	08 95       	ret

00002b1e <__fp_split3>:
    2b1e:	57 fd       	sbrc	r21, 7
    2b20:	90 58       	subi	r25, 0x80	; 128
    2b22:	44 0f       	add	r20, r20
    2b24:	55 1f       	adc	r21, r21
    2b26:	59 f0       	breq	.+22     	; 0x2b3e <__fp_splitA+0x10>
    2b28:	5f 3f       	cpi	r21, 0xFF	; 255
    2b2a:	71 f0       	breq	.+28     	; 0x2b48 <__fp_splitA+0x1a>
    2b2c:	47 95       	ror	r20

00002b2e <__fp_splitA>:
    2b2e:	88 0f       	add	r24, r24
    2b30:	97 fb       	bst	r25, 7
    2b32:	99 1f       	adc	r25, r25
    2b34:	61 f0       	breq	.+24     	; 0x2b4e <__fp_splitA+0x20>
    2b36:	9f 3f       	cpi	r25, 0xFF	; 255
    2b38:	79 f0       	breq	.+30     	; 0x2b58 <__fp_splitA+0x2a>
    2b3a:	87 95       	ror	r24
    2b3c:	08 95       	ret
    2b3e:	12 16       	cp	r1, r18
    2b40:	13 06       	cpc	r1, r19
    2b42:	14 06       	cpc	r1, r20
    2b44:	55 1f       	adc	r21, r21
    2b46:	f2 cf       	rjmp	.-28     	; 0x2b2c <__fp_split3+0xe>
    2b48:	46 95       	lsr	r20
    2b4a:	f1 df       	rcall	.-30     	; 0x2b2e <__fp_splitA>
    2b4c:	08 c0       	rjmp	.+16     	; 0x2b5e <__fp_splitA+0x30>
    2b4e:	16 16       	cp	r1, r22
    2b50:	17 06       	cpc	r1, r23
    2b52:	18 06       	cpc	r1, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	f1 cf       	rjmp	.-30     	; 0x2b3a <__fp_splitA+0xc>
    2b58:	86 95       	lsr	r24
    2b5a:	71 05       	cpc	r23, r1
    2b5c:	61 05       	cpc	r22, r1
    2b5e:	08 94       	sec
    2b60:	08 95       	ret

00002b62 <__fp_zero>:
    2b62:	e8 94       	clt

00002b64 <__fp_szero>:
    2b64:	bb 27       	eor	r27, r27
    2b66:	66 27       	eor	r22, r22
    2b68:	77 27       	eor	r23, r23
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	97 f9       	bld	r25, 7
    2b6e:	08 95       	ret
    2b70:	11 f4       	brne	.+4      	; 0x2b76 <__fp_szero+0x12>
    2b72:	0e f4       	brtc	.+2      	; 0x2b76 <__fp_szero+0x12>
    2b74:	4d c0       	rjmp	.+154    	; 0x2c10 <__fp_nan>
    2b76:	3e c0       	rjmp	.+124    	; 0x2bf4 <__fp_mpack>

00002b78 <sqrt>:
    2b78:	da df       	rcall	.-76     	; 0x2b2e <__fp_splitA>
    2b7a:	d0 f3       	brcs	.-12     	; 0x2b70 <__fp_szero+0xc>
    2b7c:	99 23       	and	r25, r25
    2b7e:	d9 f3       	breq	.-10     	; 0x2b76 <__fp_szero+0x12>
    2b80:	ce f3       	brts	.-14     	; 0x2b74 <__fp_szero+0x10>
    2b82:	9f 57       	subi	r25, 0x7F	; 127
    2b84:	55 0b       	sbc	r21, r21
    2b86:	87 ff       	sbrs	r24, 7
    2b88:	46 d0       	rcall	.+140    	; 0x2c16 <__fp_norm2>
    2b8a:	00 24       	eor	r0, r0
    2b8c:	a0 e6       	ldi	r26, 0x60	; 96
    2b8e:	40 ea       	ldi	r20, 0xA0	; 160
    2b90:	90 01       	movw	r18, r0
    2b92:	80 58       	subi	r24, 0x80	; 128
    2b94:	56 95       	lsr	r21
    2b96:	97 95       	ror	r25
    2b98:	28 f4       	brcc	.+10     	; 0x2ba4 <sqrt+0x2c>
    2b9a:	80 5c       	subi	r24, 0xC0	; 192
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	88 1f       	adc	r24, r24
    2ba2:	20 f0       	brcs	.+8      	; 0x2bac <sqrt+0x34>
    2ba4:	26 17       	cp	r18, r22
    2ba6:	37 07       	cpc	r19, r23
    2ba8:	48 07       	cpc	r20, r24
    2baa:	30 f4       	brcc	.+12     	; 0x2bb8 <sqrt+0x40>
    2bac:	62 1b       	sub	r22, r18
    2bae:	73 0b       	sbc	r23, r19
    2bb0:	84 0b       	sbc	r24, r20
    2bb2:	20 29       	or	r18, r0
    2bb4:	31 29       	or	r19, r1
    2bb6:	4a 2b       	or	r20, r26
    2bb8:	a6 95       	lsr	r26
    2bba:	17 94       	ror	r1
    2bbc:	07 94       	ror	r0
    2bbe:	20 25       	eor	r18, r0
    2bc0:	31 25       	eor	r19, r1
    2bc2:	4a 27       	eor	r20, r26
    2bc4:	58 f7       	brcc	.-42     	; 0x2b9c <sqrt+0x24>
    2bc6:	66 0f       	add	r22, r22
    2bc8:	77 1f       	adc	r23, r23
    2bca:	88 1f       	adc	r24, r24
    2bcc:	20 f0       	brcs	.+8      	; 0x2bd6 <sqrt+0x5e>
    2bce:	26 17       	cp	r18, r22
    2bd0:	37 07       	cpc	r19, r23
    2bd2:	48 07       	cpc	r20, r24
    2bd4:	30 f4       	brcc	.+12     	; 0x2be2 <sqrt+0x6a>
    2bd6:	62 0b       	sbc	r22, r18
    2bd8:	73 0b       	sbc	r23, r19
    2bda:	84 0b       	sbc	r24, r20
    2bdc:	20 0d       	add	r18, r0
    2bde:	31 1d       	adc	r19, r1
    2be0:	41 1d       	adc	r20, r1
    2be2:	a0 95       	com	r26
    2be4:	81 f7       	brne	.-32     	; 0x2bc6 <sqrt+0x4e>
    2be6:	b9 01       	movw	r22, r18
    2be8:	84 2f       	mov	r24, r20
    2bea:	91 58       	subi	r25, 0x81	; 129
    2bec:	88 0f       	add	r24, r24
    2bee:	96 95       	lsr	r25
    2bf0:	87 95       	ror	r24
    2bf2:	08 95       	ret

00002bf4 <__fp_mpack>:
    2bf4:	9f 3f       	cpi	r25, 0xFF	; 255
    2bf6:	31 f0       	breq	.+12     	; 0x2c04 <__fp_mpack_finite+0xc>

00002bf8 <__fp_mpack_finite>:
    2bf8:	91 50       	subi	r25, 0x01	; 1
    2bfa:	20 f4       	brcc	.+8      	; 0x2c04 <__fp_mpack_finite+0xc>
    2bfc:	87 95       	ror	r24
    2bfe:	77 95       	ror	r23
    2c00:	67 95       	ror	r22
    2c02:	b7 95       	ror	r27
    2c04:	88 0f       	add	r24, r24
    2c06:	91 1d       	adc	r25, r1
    2c08:	96 95       	lsr	r25
    2c0a:	87 95       	ror	r24
    2c0c:	97 f9       	bld	r25, 7
    2c0e:	08 95       	ret

00002c10 <__fp_nan>:
    2c10:	9f ef       	ldi	r25, 0xFF	; 255
    2c12:	80 ec       	ldi	r24, 0xC0	; 192
    2c14:	08 95       	ret

00002c16 <__fp_norm2>:
    2c16:	91 50       	subi	r25, 0x01	; 1
    2c18:	50 40       	sbci	r21, 0x00	; 0
    2c1a:	66 0f       	add	r22, r22
    2c1c:	77 1f       	adc	r23, r23
    2c1e:	88 1f       	adc	r24, r24
    2c20:	d2 f7       	brpl	.-12     	; 0x2c16 <__fp_norm2>
    2c22:	08 95       	ret

00002c24 <__divmodhi4>:
    2c24:	97 fb       	bst	r25, 7
    2c26:	09 2e       	mov	r0, r25
    2c28:	07 26       	eor	r0, r23
    2c2a:	0a d0       	rcall	.+20     	; 0x2c40 <__divmodhi4_neg1>
    2c2c:	77 fd       	sbrc	r23, 7
    2c2e:	04 d0       	rcall	.+8      	; 0x2c38 <__divmodhi4_neg2>
    2c30:	27 d0       	rcall	.+78     	; 0x2c80 <__udivmodhi4>
    2c32:	06 d0       	rcall	.+12     	; 0x2c40 <__divmodhi4_neg1>
    2c34:	00 20       	and	r0, r0
    2c36:	1a f4       	brpl	.+6      	; 0x2c3e <__divmodhi4_exit>

00002c38 <__divmodhi4_neg2>:
    2c38:	70 95       	com	r23
    2c3a:	61 95       	neg	r22
    2c3c:	7f 4f       	sbci	r23, 0xFF	; 255

00002c3e <__divmodhi4_exit>:
    2c3e:	08 95       	ret

00002c40 <__divmodhi4_neg1>:
    2c40:	f6 f7       	brtc	.-4      	; 0x2c3e <__divmodhi4_exit>
    2c42:	90 95       	com	r25
    2c44:	81 95       	neg	r24
    2c46:	9f 4f       	sbci	r25, 0xFF	; 255
    2c48:	08 95       	ret

00002c4a <__divmodsi4>:
    2c4a:	97 fb       	bst	r25, 7
    2c4c:	09 2e       	mov	r0, r25
    2c4e:	05 26       	eor	r0, r21
    2c50:	0e d0       	rcall	.+28     	; 0x2c6e <__divmodsi4_neg1>
    2c52:	57 fd       	sbrc	r21, 7
    2c54:	04 d0       	rcall	.+8      	; 0x2c5e <__divmodsi4_neg2>
    2c56:	28 d0       	rcall	.+80     	; 0x2ca8 <__udivmodsi4>
    2c58:	0a d0       	rcall	.+20     	; 0x2c6e <__divmodsi4_neg1>
    2c5a:	00 1c       	adc	r0, r0
    2c5c:	38 f4       	brcc	.+14     	; 0x2c6c <__divmodsi4_exit>

00002c5e <__divmodsi4_neg2>:
    2c5e:	50 95       	com	r21
    2c60:	40 95       	com	r20
    2c62:	30 95       	com	r19
    2c64:	21 95       	neg	r18
    2c66:	3f 4f       	sbci	r19, 0xFF	; 255
    2c68:	4f 4f       	sbci	r20, 0xFF	; 255
    2c6a:	5f 4f       	sbci	r21, 0xFF	; 255

00002c6c <__divmodsi4_exit>:
    2c6c:	08 95       	ret

00002c6e <__divmodsi4_neg1>:
    2c6e:	f6 f7       	brtc	.-4      	; 0x2c6c <__divmodsi4_exit>
    2c70:	90 95       	com	r25
    2c72:	80 95       	com	r24
    2c74:	70 95       	com	r23
    2c76:	61 95       	neg	r22
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	08 95       	ret

00002c80 <__udivmodhi4>:
    2c80:	aa 1b       	sub	r26, r26
    2c82:	bb 1b       	sub	r27, r27
    2c84:	51 e1       	ldi	r21, 0x11	; 17
    2c86:	07 c0       	rjmp	.+14     	; 0x2c96 <__udivmodhi4_ep>

00002c88 <__udivmodhi4_loop>:
    2c88:	aa 1f       	adc	r26, r26
    2c8a:	bb 1f       	adc	r27, r27
    2c8c:	a6 17       	cp	r26, r22
    2c8e:	b7 07       	cpc	r27, r23
    2c90:	10 f0       	brcs	.+4      	; 0x2c96 <__udivmodhi4_ep>
    2c92:	a6 1b       	sub	r26, r22
    2c94:	b7 0b       	sbc	r27, r23

00002c96 <__udivmodhi4_ep>:
    2c96:	88 1f       	adc	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	5a 95       	dec	r21
    2c9c:	a9 f7       	brne	.-22     	; 0x2c88 <__udivmodhi4_loop>
    2c9e:	80 95       	com	r24
    2ca0:	90 95       	com	r25
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	08 95       	ret

00002ca8 <__udivmodsi4>:
    2ca8:	a1 e2       	ldi	r26, 0x21	; 33
    2caa:	1a 2e       	mov	r1, r26
    2cac:	aa 1b       	sub	r26, r26
    2cae:	bb 1b       	sub	r27, r27
    2cb0:	fd 01       	movw	r30, r26
    2cb2:	0d c0       	rjmp	.+26     	; 0x2cce <__udivmodsi4_ep>

00002cb4 <__udivmodsi4_loop>:
    2cb4:	aa 1f       	adc	r26, r26
    2cb6:	bb 1f       	adc	r27, r27
    2cb8:	ee 1f       	adc	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	a2 17       	cp	r26, r18
    2cbe:	b3 07       	cpc	r27, r19
    2cc0:	e4 07       	cpc	r30, r20
    2cc2:	f5 07       	cpc	r31, r21
    2cc4:	20 f0       	brcs	.+8      	; 0x2cce <__udivmodsi4_ep>
    2cc6:	a2 1b       	sub	r26, r18
    2cc8:	b3 0b       	sbc	r27, r19
    2cca:	e4 0b       	sbc	r30, r20
    2ccc:	f5 0b       	sbc	r31, r21

00002cce <__udivmodsi4_ep>:
    2cce:	66 1f       	adc	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	1a 94       	dec	r1
    2cd8:	69 f7       	brne	.-38     	; 0x2cb4 <__udivmodsi4_loop>
    2cda:	60 95       	com	r22
    2cdc:	70 95       	com	r23
    2cde:	80 95       	com	r24
    2ce0:	90 95       	com	r25
    2ce2:	9b 01       	movw	r18, r22
    2ce4:	ac 01       	movw	r20, r24
    2ce6:	bd 01       	movw	r22, r26
    2ce8:	cf 01       	movw	r24, r30
    2cea:	08 95       	ret

00002cec <setjmp>:
    2cec:	dc 01       	movw	r26, r24
    2cee:	2d 92       	st	X+, r2
    2cf0:	3d 92       	st	X+, r3
    2cf2:	4d 92       	st	X+, r4
    2cf4:	5d 92       	st	X+, r5
    2cf6:	6d 92       	st	X+, r6
    2cf8:	7d 92       	st	X+, r7
    2cfa:	8d 92       	st	X+, r8
    2cfc:	9d 92       	st	X+, r9
    2cfe:	ad 92       	st	X+, r10
    2d00:	bd 92       	st	X+, r11
    2d02:	cd 92       	st	X+, r12
    2d04:	dd 92       	st	X+, r13
    2d06:	ed 92       	st	X+, r14
    2d08:	fd 92       	st	X+, r15
    2d0a:	0d 93       	st	X+, r16
    2d0c:	1d 93       	st	X+, r17
    2d0e:	cd 93       	st	X+, r28
    2d10:	dd 93       	st	X+, r29
    2d12:	ff 91       	pop	r31
    2d14:	ef 91       	pop	r30
    2d16:	8d b7       	in	r24, 0x3d	; 61
    2d18:	8d 93       	st	X+, r24
    2d1a:	8e b7       	in	r24, 0x3e	; 62
    2d1c:	8d 93       	st	X+, r24
    2d1e:	8f b7       	in	r24, 0x3f	; 63
    2d20:	8d 93       	st	X+, r24
    2d22:	ed 93       	st	X+, r30
    2d24:	fd 93       	st	X+, r31
    2d26:	88 27       	eor	r24, r24
    2d28:	99 27       	eor	r25, r25
    2d2a:	09 94       	ijmp

00002d2c <longjmp>:
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	91 05       	cpc	r25, r1
    2d34:	81 1d       	adc	r24, r1
    2d36:	2d 90       	ld	r2, X+
    2d38:	3d 90       	ld	r3, X+
    2d3a:	4d 90       	ld	r4, X+
    2d3c:	5d 90       	ld	r5, X+
    2d3e:	6d 90       	ld	r6, X+
    2d40:	7d 90       	ld	r7, X+
    2d42:	8d 90       	ld	r8, X+
    2d44:	9d 90       	ld	r9, X+
    2d46:	ad 90       	ld	r10, X+
    2d48:	bd 90       	ld	r11, X+
    2d4a:	cd 90       	ld	r12, X+
    2d4c:	dd 90       	ld	r13, X+
    2d4e:	ed 90       	ld	r14, X+
    2d50:	fd 90       	ld	r15, X+
    2d52:	0d 91       	ld	r16, X+
    2d54:	1d 91       	ld	r17, X+
    2d56:	cd 91       	ld	r28, X+
    2d58:	dd 91       	ld	r29, X+
    2d5a:	ed 91       	ld	r30, X+
    2d5c:	fd 91       	ld	r31, X+
    2d5e:	0d 90       	ld	r0, X+
    2d60:	f8 94       	cli
    2d62:	fe bf       	out	0x3e, r31	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	ed bf       	out	0x3d, r30	; 61
    2d68:	ed 91       	ld	r30, X+
    2d6a:	fd 91       	ld	r31, X+
    2d6c:	09 94       	ijmp

00002d6e <_exit>:
    2d6e:	f8 94       	cli

00002d70 <__stop_program>:
    2d70:	ff cf       	rjmp	.-2      	; 0x2d70 <__stop_program>

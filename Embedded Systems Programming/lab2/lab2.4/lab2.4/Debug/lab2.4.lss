
lab2.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000f18  00000fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800104  00800104  00000fb0  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000045e  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  000029a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6c  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b3  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ed  00000000  00000000  0000399f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000205  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b96  00000000  00000000  00004435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 e1       	ldi	r30, 0x18	; 24
  70:	ff e0       	ldi	r31, 0x0F	; 15
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 30       	cpi	r26, 0x04	; 4
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	13 e0       	ldi	r17, 0x03	; 3
  80:	a4 e0       	ldi	r26, 0x04	; 4
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 32       	cpi	r26, 0x2F	; 47
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 10 05 	call	0xa20	; 0xa20 <main>
  92:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <delay>:
mutex m = MUTEX_INIT;
int pp;

void delay()
{
	TCNT0=0x00;
  9a:	16 bc       	out	0x26, r1	; 38
	TCCR0A=0x02;
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	84 bd       	out	0x24, r24	; 36
	while(TCNT0!=0xb0);
  a0:	86 b5       	in	r24, 0x26	; 38
  a2:	80 3b       	cpi	r24, 0xB0	; 176
  a4:	e9 f7       	brne	.-6      	; 0xa0 <delay+0x6>
	TCCR0A=0x00;
  a6:	14 bc       	out	0x24, r1	; 36
}
  a8:	08 95       	ret

000000aa <beep>:


void beep()
{
  aa:	cf 93       	push	r28
	unsigned int length=50;
	unsigned char i;
	DDRB |=1<<5;
  ac:	25 9a       	sbi	0x04, 5	; 4
  ae:	c2 e3       	ldi	r28, 0x32	; 50
	for(i=0;i<length;i++)
	{
		beep_on;
  b0:	2d 9a       	sbi	0x05, 5	; 5
		delay();
  b2:	0e 94 4d 00 	call	0x9a	; 0x9a <delay>
		beep_off;
  b6:	2d 98       	cbi	0x05, 5	; 5
		delay();
  b8:	0e 94 4d 00 	call	0x9a	; 0x9a <delay>
  bc:	c1 50       	subi	r28, 0x01	; 1
void beep()
{
	unsigned int length=50;
	unsigned char i;
	DDRB |=1<<5;
	for(i=0;i<length;i++)
  be:	c1 f7       	brne	.-16     	; 0xb0 <beep+0x6>
		beep_on;
		delay();
		beep_off;
		delay();
	}
	DDRB &=~(1<<5);
  c0:	25 98       	cbi	0x04, 5	; 4
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <writeChar>:
DR15   0001   0000   0001   0001   0000   0001   0001   0000   0001   0001
       1551   8110   11E1   11B1   05B0   14B1   14F1   1110   15F1   15B1

*/
void writeChar(char ch, int pos)
{
  c6:	af 92       	push	r10
  c8:	bf 92       	push	r11
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	int n1,n2,n3,n4;
	switch(ch)
  da:	84 33       	cpi	r24, 0x34	; 52
  dc:	09 f4       	brne	.+2      	; 0xe0 <writeChar+0x1a>
  de:	46 c0       	rjmp	.+140    	; 0x16c <writeChar+0xa6>
  e0:	85 33       	cpi	r24, 0x35	; 53
  e2:	70 f4       	brcc	.+28     	; 0x100 <writeChar+0x3a>
  e4:	81 33       	cpi	r24, 0x31	; 49
  e6:	f1 f0       	breq	.+60     	; 0x124 <writeChar+0x5e>
  e8:	82 33       	cpi	r24, 0x32	; 50
  ea:	20 f4       	brcc	.+8      	; 0xf4 <writeChar+0x2e>
  ec:	80 33       	cpi	r24, 0x30	; 48
  ee:	09 f0       	breq	.+2      	; 0xf2 <writeChar+0x2c>
  f0:	93 c0       	rjmp	.+294    	; 0x218 <writeChar+0x152>
  f2:	86 c0       	rjmp	.+268    	; 0x200 <writeChar+0x13a>
  f4:	82 33       	cpi	r24, 0x32	; 50
  f6:	01 f1       	breq	.+64     	; 0x138 <writeChar+0x72>
  f8:	83 33       	cpi	r24, 0x33	; 51
  fa:	09 f0       	breq	.+2      	; 0xfe <writeChar+0x38>
  fc:	8d c0       	rjmp	.+282    	; 0x218 <writeChar+0x152>
  fe:	29 c0       	rjmp	.+82     	; 0x152 <writeChar+0x8c>
 100:	87 33       	cpi	r24, 0x37	; 55
 102:	09 f4       	brne	.+2      	; 0x106 <writeChar+0x40>
 104:	59 c0       	rjmp	.+178    	; 0x1b8 <writeChar+0xf2>
 106:	88 33       	cpi	r24, 0x38	; 56
 108:	30 f4       	brcc	.+12     	; 0x116 <writeChar+0x50>
 10a:	85 33       	cpi	r24, 0x35	; 53
 10c:	d9 f1       	breq	.+118    	; 0x184 <writeChar+0xbe>
 10e:	86 33       	cpi	r24, 0x36	; 54
 110:	09 f0       	breq	.+2      	; 0x114 <writeChar+0x4e>
 112:	82 c0       	rjmp	.+260    	; 0x218 <writeChar+0x152>
 114:	44 c0       	rjmp	.+136    	; 0x19e <writeChar+0xd8>
 116:	88 33       	cpi	r24, 0x38	; 56
 118:	09 f4       	brne	.+2      	; 0x11c <writeChar+0x56>
 11a:	58 c0       	rjmp	.+176    	; 0x1cc <writeChar+0x106>
 11c:	89 33       	cpi	r24, 0x39	; 57
 11e:	09 f0       	breq	.+2      	; 0x122 <writeChar+0x5c>
 120:	7b c0       	rjmp	.+246    	; 0x218 <writeChar+0x152>
 122:	61 c0       	rjmp	.+194    	; 0x1e6 <writeChar+0x120>
	{
		case '0': n1=1; n2=5; n3=5; n4=1;break;
		case '1': n1=8; n2=1; n3=1; n4=0;break;
 124:	cc 24       	eor	r12, r12
 126:	dd 24       	eor	r13, r13
 128:	ee 24       	eor	r14, r14
 12a:	ff 24       	eor	r15, r15
 12c:	e3 94       	inc	r14
 12e:	01 e0       	ldi	r16, 0x01	; 1
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	48 e0       	ldi	r20, 0x08	; 8
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	70 c0       	rjmp	.+224    	; 0x218 <writeChar+0x152>
		case '2': n1=1; n2=1; n3=0xE; n4=1;break;
 138:	cc 24       	eor	r12, r12
 13a:	dd 24       	eor	r13, r13
 13c:	c3 94       	inc	r12
 13e:	0f 2e       	mov	r0, r31
 140:	fe e0       	ldi	r31, 0x0E	; 14
 142:	ef 2e       	mov	r14, r31
 144:	ff 24       	eor	r15, r15
 146:	f0 2d       	mov	r31, r0
 148:	01 e0       	ldi	r16, 0x01	; 1
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	63 c0       	rjmp	.+198    	; 0x218 <writeChar+0x152>
		case '3': n1=1; n2=1; n3=0xB; n4=1;break;
 152:	cc 24       	eor	r12, r12
 154:	dd 24       	eor	r13, r13
 156:	c3 94       	inc	r12
 158:	0f 2e       	mov	r0, r31
 15a:	fb e0       	ldi	r31, 0x0B	; 11
 15c:	ef 2e       	mov	r14, r31
 15e:	ff 24       	eor	r15, r15
 160:	f0 2d       	mov	r31, r0
 162:	01 e0       	ldi	r16, 0x01	; 1
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	56 c0       	rjmp	.+172    	; 0x218 <writeChar+0x152>
		case '4': n1=0; n2=5; n3=0xB; n4=0;break;
 16c:	cc 24       	eor	r12, r12
 16e:	dd 24       	eor	r13, r13
 170:	0f 2e       	mov	r0, r31
 172:	fb e0       	ldi	r31, 0x0B	; 11
 174:	ef 2e       	mov	r14, r31
 176:	ff 24       	eor	r15, r15
 178:	f0 2d       	mov	r31, r0
 17a:	05 e0       	ldi	r16, 0x05	; 5
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	4a c0       	rjmp	.+148    	; 0x218 <writeChar+0x152>
		case '5': n1=1; n2=4; n3=0xB; n4=1;break;
 184:	cc 24       	eor	r12, r12
 186:	dd 24       	eor	r13, r13
 188:	c3 94       	inc	r12
 18a:	0f 2e       	mov	r0, r31
 18c:	fb e0       	ldi	r31, 0x0B	; 11
 18e:	ef 2e       	mov	r14, r31
 190:	ff 24       	eor	r15, r15
 192:	f0 2d       	mov	r31, r0
 194:	04 e0       	ldi	r16, 0x04	; 4
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	3d c0       	rjmp	.+122    	; 0x218 <writeChar+0x152>
		case '6': n1=1; n2=4; n3=0xF; n4=1;break;
 19e:	cc 24       	eor	r12, r12
 1a0:	dd 24       	eor	r13, r13
 1a2:	c3 94       	inc	r12
 1a4:	0f 2e       	mov	r0, r31
 1a6:	ff e0       	ldi	r31, 0x0F	; 15
 1a8:	ef 2e       	mov	r14, r31
 1aa:	ff 24       	eor	r15, r15
 1ac:	f0 2d       	mov	r31, r0
 1ae:	04 e0       	ldi	r16, 0x04	; 4
 1b0:	10 e0       	ldi	r17, 0x00	; 0
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	30 c0       	rjmp	.+96     	; 0x218 <writeChar+0x152>
		case '7': n1=1; n2=1; n3=0x1; n4=0;break;
 1b8:	cc 24       	eor	r12, r12
 1ba:	dd 24       	eor	r13, r13
 1bc:	ee 24       	eor	r14, r14
 1be:	ff 24       	eor	r15, r15
 1c0:	e3 94       	inc	r14
 1c2:	01 e0       	ldi	r16, 0x01	; 1
 1c4:	10 e0       	ldi	r17, 0x00	; 0
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	26 c0       	rjmp	.+76     	; 0x218 <writeChar+0x152>
		case '8': n1=1; n2=5; n3=0xF; n4=1;break;
 1cc:	cc 24       	eor	r12, r12
 1ce:	dd 24       	eor	r13, r13
 1d0:	c3 94       	inc	r12
 1d2:	0f 2e       	mov	r0, r31
 1d4:	ff e0       	ldi	r31, 0x0F	; 15
 1d6:	ef 2e       	mov	r14, r31
 1d8:	ff 24       	eor	r15, r15
 1da:	f0 2d       	mov	r31, r0
 1dc:	05 e0       	ldi	r16, 0x05	; 5
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	19 c0       	rjmp	.+50     	; 0x218 <writeChar+0x152>
		case '9': n1=1; n2=5; n3=0xB; n4=1;break;
 1e6:	cc 24       	eor	r12, r12
 1e8:	dd 24       	eor	r13, r13
 1ea:	c3 94       	inc	r12
 1ec:	0f 2e       	mov	r0, r31
 1ee:	fb e0       	ldi	r31, 0x0B	; 11
 1f0:	ef 2e       	mov	r14, r31
 1f2:	ff 24       	eor	r15, r15
 1f4:	f0 2d       	mov	r31, r0
 1f6:	05 e0       	ldi	r16, 0x05	; 5
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	0c c0       	rjmp	.+24     	; 0x218 <writeChar+0x152>
void writeChar(char ch, int pos)
{
	int n1,n2,n3,n4;
	switch(ch)
	{
		case '0': n1=1; n2=5; n3=5; n4=1;break;
 200:	cc 24       	eor	r12, r12
 202:	dd 24       	eor	r13, r13
 204:	c3 94       	inc	r12
 206:	0f 2e       	mov	r0, r31
 208:	f5 e0       	ldi	r31, 0x05	; 5
 20a:	ef 2e       	mov	r14, r31
 20c:	ff 24       	eor	r15, r15
 20e:	f0 2d       	mov	r31, r0
 210:	05 e0       	ldi	r16, 0x05	; 5
 212:	10 e0       	ldi	r17, 0x00	; 0
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	50 e0       	ldi	r21, 0x00	; 0
		case '6': n1=1; n2=4; n3=0xF; n4=1;break;
		case '7': n1=1; n2=1; n3=0x1; n4=0;break;
		case '8': n1=1; n2=5; n3=0xF; n4=1;break;
		case '9': n1=1; n2=5; n3=0xB; n4=1;break;
	}
	switch(pos)
 218:	62 30       	cpi	r22, 0x02	; 2
 21a:	71 05       	cpc	r23, r1
 21c:	09 f4       	brne	.+2      	; 0x220 <writeChar+0x15a>
 21e:	82 c0       	rjmp	.+260    	; 0x324 <writeChar+0x25e>
 220:	63 30       	cpi	r22, 0x03	; 3
 222:	71 05       	cpc	r23, r1
 224:	44 f4       	brge	.+16     	; 0x236 <writeChar+0x170>
 226:	61 15       	cp	r22, r1
 228:	71 05       	cpc	r23, r1
 22a:	91 f0       	breq	.+36     	; 0x250 <writeChar+0x18a>
 22c:	61 30       	cpi	r22, 0x01	; 1
 22e:	71 05       	cpc	r23, r1
 230:	09 f0       	breq	.+2      	; 0x234 <writeChar+0x16e>
 232:	4b c1       	rjmp	.+662    	; 0x4ca <writeChar+0x404>
 234:	32 c0       	rjmp	.+100    	; 0x29a <writeChar+0x1d4>
 236:	64 30       	cpi	r22, 0x04	; 4
 238:	71 05       	cpc	r23, r1
 23a:	09 f4       	brne	.+2      	; 0x23e <writeChar+0x178>
 23c:	dd c0       	rjmp	.+442    	; 0x3f8 <writeChar+0x332>
 23e:	64 30       	cpi	r22, 0x04	; 4
 240:	71 05       	cpc	r23, r1
 242:	0c f4       	brge	.+2      	; 0x246 <writeChar+0x180>
 244:	94 c0       	rjmp	.+296    	; 0x36e <writeChar+0x2a8>
 246:	65 30       	cpi	r22, 0x05	; 5
 248:	71 05       	cpc	r23, r1
 24a:	09 f0       	breq	.+2      	; 0x24e <writeChar+0x188>
 24c:	3e c1       	rjmp	.+636    	; 0x4ca <writeChar+0x404>
 24e:	f9 c0       	rjmp	.+498    	; 0x442 <writeChar+0x37c>
	{
		case 0: LCDDR0  = LCDDR0&0xf0;
 250:	6c ee       	ldi	r22, 0xEC	; 236
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	fb 01       	movw	r30, r22
 256:	80 81       	ld	r24, Z
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5&0xf0;
 25c:	a1 ef       	ldi	r26, 0xF1	; 241
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	8c 91       	ld	r24, X
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10&0xf0;
 266:	c6 ef       	ldi	r28, 0xF6	; 246
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	88 81       	ld	r24, Y
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15&0xf0;
 270:	2b ef       	ldi	r18, 0xFB	; 251
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	80 81       	ld	r24, Z
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	80 83       	st	Z, r24
		        LCDDR0  = LCDDR0|n1;
 27c:	fb 01       	movw	r30, r22
 27e:	80 81       	ld	r24, Z
 280:	48 2b       	or	r20, r24
 282:	40 83       	st	Z, r20
		        LCDDR5  = LCDDR5|n2;
 284:	8c 91       	ld	r24, X
 286:	08 2b       	or	r16, r24
 288:	0c 93       	st	X, r16
		        LCDDR10 = LCDDR10|n3;
 28a:	88 81       	ld	r24, Y
 28c:	e8 2a       	or	r14, r24
 28e:	e8 82       	st	Y, r14
		        LCDDR15 = LCDDR15|n4;
 290:	f9 01       	movw	r30, r18
 292:	80 81       	ld	r24, Z
 294:	c8 2a       	or	r12, r24
 296:	c0 82       	st	Z, r12
				break;
 298:	18 c1       	rjmp	.+560    	; 0x4ca <writeChar+0x404>
		case 1: LCDDR0  = LCDDR0&0x0f;
 29a:	0f 2e       	mov	r0, r31
 29c:	fc ee       	ldi	r31, 0xEC	; 236
 29e:	af 2e       	mov	r10, r31
 2a0:	bb 24       	eor	r11, r11
 2a2:	f0 2d       	mov	r31, r0
 2a4:	f5 01       	movw	r30, r10
 2a6:	80 81       	ld	r24, Z
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5&0x0f;
 2ac:	a1 ef       	ldi	r26, 0xF1	; 241
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	8c 91       	ld	r24, X
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10&0x0f;
 2b6:	c6 ef       	ldi	r28, 0xF6	; 246
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	88 81       	ld	r24, Y
 2bc:	8f 70       	andi	r24, 0x0F	; 15
 2be:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15&0x0f;
 2c0:	2b ef       	ldi	r18, 0xFB	; 251
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	f9 01       	movw	r30, r18
 2c6:	80 81       	ld	r24, Z
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	80 83       	st	Z, r24
		        LCDDR0  = LCDDR0|(n1<<4);
 2cc:	f5 01       	movw	r30, r10
 2ce:	60 81       	ld	r22, Z
 2d0:	ca 01       	movw	r24, r20
 2d2:	82 95       	swap	r24
 2d4:	92 95       	swap	r25
 2d6:	90 7f       	andi	r25, 0xF0	; 240
 2d8:	98 27       	eor	r25, r24
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	98 27       	eor	r25, r24
 2de:	86 2b       	or	r24, r22
 2e0:	80 83       	st	Z, r24
		        LCDDR5  = LCDDR5|(n2<<4);
 2e2:	4c 91       	ld	r20, X
 2e4:	c8 01       	movw	r24, r16
 2e6:	82 95       	swap	r24
 2e8:	92 95       	swap	r25
 2ea:	90 7f       	andi	r25, 0xF0	; 240
 2ec:	98 27       	eor	r25, r24
 2ee:	80 7f       	andi	r24, 0xF0	; 240
 2f0:	98 27       	eor	r25, r24
 2f2:	84 2b       	or	r24, r20
 2f4:	8c 93       	st	X, r24
		        LCDDR10 = LCDDR10|(n3<<4);
 2f6:	48 81       	ld	r20, Y
 2f8:	c7 01       	movw	r24, r14
 2fa:	82 95       	swap	r24
 2fc:	92 95       	swap	r25
 2fe:	90 7f       	andi	r25, 0xF0	; 240
 300:	98 27       	eor	r25, r24
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	98 27       	eor	r25, r24
 306:	84 2b       	or	r24, r20
 308:	88 83       	st	Y, r24
		        LCDDR15 = LCDDR15|(n4<<4);
 30a:	f9 01       	movw	r30, r18
 30c:	80 81       	ld	r24, Z
 30e:	cc 0c       	add	r12, r12
 310:	dd 1c       	adc	r13, r13
 312:	cc 0c       	add	r12, r12
 314:	dd 1c       	adc	r13, r13
 316:	cc 0c       	add	r12, r12
 318:	dd 1c       	adc	r13, r13
 31a:	cc 0c       	add	r12, r12
 31c:	dd 1c       	adc	r13, r13
 31e:	c8 2a       	or	r12, r24
 320:	c0 82       	st	Z, r12
				break;
 322:	d3 c0       	rjmp	.+422    	; 0x4ca <writeChar+0x404>
		case 2: LCDDR1  = LCDDR1&0xf0;
 324:	6d ee       	ldi	r22, 0xED	; 237
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	fb 01       	movw	r30, r22
 32a:	80 81       	ld	r24, Z
 32c:	80 7f       	andi	r24, 0xF0	; 240
 32e:	80 83       	st	Z, r24
		        LCDDR6  = LCDDR6&0xf0;
 330:	a2 ef       	ldi	r26, 0xF2	; 242
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	8c 91       	ld	r24, X
 336:	80 7f       	andi	r24, 0xF0	; 240
 338:	8c 93       	st	X, r24
		        LCDDR11 = LCDDR11&0xf0;
 33a:	c7 ef       	ldi	r28, 0xF7	; 247
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	88 81       	ld	r24, Y
 340:	80 7f       	andi	r24, 0xF0	; 240
 342:	88 83       	st	Y, r24
		        LCDDR16 = LCDDR16&0xf0;
 344:	2c ef       	ldi	r18, 0xFC	; 252
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	f9 01       	movw	r30, r18
 34a:	80 81       	ld	r24, Z
 34c:	80 7f       	andi	r24, 0xF0	; 240
 34e:	80 83       	st	Z, r24
		        LCDDR1  = LCDDR1|n1;
 350:	fb 01       	movw	r30, r22
 352:	80 81       	ld	r24, Z
 354:	48 2b       	or	r20, r24
 356:	40 83       	st	Z, r20
		        LCDDR6  = LCDDR6|n2;
 358:	8c 91       	ld	r24, X
 35a:	08 2b       	or	r16, r24
 35c:	0c 93       	st	X, r16
		        LCDDR11 = LCDDR11|n3;
 35e:	88 81       	ld	r24, Y
 360:	e8 2a       	or	r14, r24
 362:	e8 82       	st	Y, r14
		        LCDDR16 = LCDDR16|n4;
 364:	f9 01       	movw	r30, r18
 366:	80 81       	ld	r24, Z
 368:	c8 2a       	or	r12, r24
 36a:	c0 82       	st	Z, r12
				break;
 36c:	ae c0       	rjmp	.+348    	; 0x4ca <writeChar+0x404>
        case 3: LCDDR1  = LCDDR1&0x0f;
 36e:	0f 2e       	mov	r0, r31
 370:	fd ee       	ldi	r31, 0xED	; 237
 372:	af 2e       	mov	r10, r31
 374:	bb 24       	eor	r11, r11
 376:	f0 2d       	mov	r31, r0
 378:	f5 01       	movw	r30, r10
 37a:	80 81       	ld	r24, Z
 37c:	8f 70       	andi	r24, 0x0F	; 15
 37e:	80 83       	st	Z, r24
                LCDDR6  = LCDDR6&0x0f;
 380:	a2 ef       	ldi	r26, 0xF2	; 242
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	8c 91       	ld	r24, X
 386:	8f 70       	andi	r24, 0x0F	; 15
 388:	8c 93       	st	X, r24
                LCDDR11 = LCDDR11&0x0f;
 38a:	c7 ef       	ldi	r28, 0xF7	; 247
 38c:	d0 e0       	ldi	r29, 0x00	; 0
 38e:	88 81       	ld	r24, Y
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	88 83       	st	Y, r24
                LCDDR16 = LCDDR16&0x0f;
 394:	2c ef       	ldi	r18, 0xFC	; 252
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	80 81       	ld	r24, Z
 39c:	8f 70       	andi	r24, 0x0F	; 15
 39e:	80 83       	st	Z, r24
		        LCDDR1  = LCDDR1|(n1<<4);
 3a0:	f5 01       	movw	r30, r10
 3a2:	60 81       	ld	r22, Z
 3a4:	ca 01       	movw	r24, r20
 3a6:	82 95       	swap	r24
 3a8:	92 95       	swap	r25
 3aa:	90 7f       	andi	r25, 0xF0	; 240
 3ac:	98 27       	eor	r25, r24
 3ae:	80 7f       	andi	r24, 0xF0	; 240
 3b0:	98 27       	eor	r25, r24
 3b2:	86 2b       	or	r24, r22
 3b4:	80 83       	st	Z, r24
                LCDDR6  = LCDDR6|(n2<<4);
 3b6:	4c 91       	ld	r20, X
 3b8:	c8 01       	movw	r24, r16
 3ba:	82 95       	swap	r24
 3bc:	92 95       	swap	r25
 3be:	90 7f       	andi	r25, 0xF0	; 240
 3c0:	98 27       	eor	r25, r24
 3c2:	80 7f       	andi	r24, 0xF0	; 240
 3c4:	98 27       	eor	r25, r24
 3c6:	84 2b       	or	r24, r20
 3c8:	8c 93       	st	X, r24
                LCDDR11 = LCDDR11|(n3<<4);
 3ca:	48 81       	ld	r20, Y
 3cc:	c7 01       	movw	r24, r14
 3ce:	82 95       	swap	r24
 3d0:	92 95       	swap	r25
 3d2:	90 7f       	andi	r25, 0xF0	; 240
 3d4:	98 27       	eor	r25, r24
 3d6:	80 7f       	andi	r24, 0xF0	; 240
 3d8:	98 27       	eor	r25, r24
 3da:	84 2b       	or	r24, r20
 3dc:	88 83       	st	Y, r24
                LCDDR16 = LCDDR16|(n4<<4);
 3de:	f9 01       	movw	r30, r18
 3e0:	80 81       	ld	r24, Z
 3e2:	cc 0c       	add	r12, r12
 3e4:	dd 1c       	adc	r13, r13
 3e6:	cc 0c       	add	r12, r12
 3e8:	dd 1c       	adc	r13, r13
 3ea:	cc 0c       	add	r12, r12
 3ec:	dd 1c       	adc	r13, r13
 3ee:	cc 0c       	add	r12, r12
 3f0:	dd 1c       	adc	r13, r13
 3f2:	c8 2a       	or	r12, r24
 3f4:	c0 82       	st	Z, r12
				break;
 3f6:	69 c0       	rjmp	.+210    	; 0x4ca <writeChar+0x404>
		case 4: LCDDR2  = LCDDR2&0xf0;
 3f8:	6e ee       	ldi	r22, 0xEE	; 238
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	fb 01       	movw	r30, r22
 3fe:	80 81       	ld	r24, Z
 400:	80 7f       	andi	r24, 0xF0	; 240
 402:	80 83       	st	Z, r24
		        LCDDR7  = LCDDR7&0xf0;
 404:	a3 ef       	ldi	r26, 0xF3	; 243
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	8c 91       	ld	r24, X
 40a:	80 7f       	andi	r24, 0xF0	; 240
 40c:	8c 93       	st	X, r24
		        LCDDR12 = LCDDR12&0xf0;
 40e:	c8 ef       	ldi	r28, 0xF8	; 248
 410:	d0 e0       	ldi	r29, 0x00	; 0
 412:	88 81       	ld	r24, Y
 414:	80 7f       	andi	r24, 0xF0	; 240
 416:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17&0xf0;
 418:	2d ef       	ldi	r18, 0xFD	; 253
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	f9 01       	movw	r30, r18
 41e:	80 81       	ld	r24, Z
 420:	80 7f       	andi	r24, 0xF0	; 240
 422:	80 83       	st	Z, r24
		        LCDDR2  = LCDDR2|n1;
 424:	fb 01       	movw	r30, r22
 426:	80 81       	ld	r24, Z
 428:	48 2b       	or	r20, r24
 42a:	40 83       	st	Z, r20
	        	LCDDR7 = LCDDR7|n2;
 42c:	8c 91       	ld	r24, X
 42e:	08 2b       	or	r16, r24
 430:	0c 93       	st	X, r16
		        LCDDR12  = LCDDR12|n3;
 432:	88 81       	ld	r24, Y
 434:	e8 2a       	or	r14, r24
 436:	e8 82       	st	Y, r14
		        LCDDR17 = LCDDR17|n4;
 438:	f9 01       	movw	r30, r18
 43a:	80 81       	ld	r24, Z
 43c:	c8 2a       	or	r12, r24
 43e:	c0 82       	st	Z, r12
				break;
 440:	44 c0       	rjmp	.+136    	; 0x4ca <writeChar+0x404>
		case 5: LCDDR2  = LCDDR2&0x0f;
 442:	0f 2e       	mov	r0, r31
 444:	fe ee       	ldi	r31, 0xEE	; 238
 446:	af 2e       	mov	r10, r31
 448:	bb 24       	eor	r11, r11
 44a:	f0 2d       	mov	r31, r0
 44c:	f5 01       	movw	r30, r10
 44e:	80 81       	ld	r24, Z
 450:	8f 70       	andi	r24, 0x0F	; 15
 452:	80 83       	st	Z, r24
		        LCDDR7  = LCDDR7&0x0f;
 454:	a3 ef       	ldi	r26, 0xF3	; 243
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	8c 91       	ld	r24, X
 45a:	8f 70       	andi	r24, 0x0F	; 15
 45c:	8c 93       	st	X, r24
		        LCDDR12 = LCDDR12&0x0f;
 45e:	c8 ef       	ldi	r28, 0xF8	; 248
 460:	d0 e0       	ldi	r29, 0x00	; 0
 462:	88 81       	ld	r24, Y
 464:	8f 70       	andi	r24, 0x0F	; 15
 466:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17&0x0f;
 468:	2d ef       	ldi	r18, 0xFD	; 253
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	80 81       	ld	r24, Z
 470:	8f 70       	andi	r24, 0x0F	; 15
 472:	80 83       	st	Z, r24
		        LCDDR2  = LCDDR2|(n1<<4);
 474:	f5 01       	movw	r30, r10
 476:	60 81       	ld	r22, Z
 478:	ca 01       	movw	r24, r20
 47a:	82 95       	swap	r24
 47c:	92 95       	swap	r25
 47e:	90 7f       	andi	r25, 0xF0	; 240
 480:	98 27       	eor	r25, r24
 482:	80 7f       	andi	r24, 0xF0	; 240
 484:	98 27       	eor	r25, r24
 486:	86 2b       	or	r24, r22
 488:	80 83       	st	Z, r24
		        LCDDR7 = LCDDR7|(n2<<4);
 48a:	4c 91       	ld	r20, X
 48c:	c8 01       	movw	r24, r16
 48e:	82 95       	swap	r24
 490:	92 95       	swap	r25
 492:	90 7f       	andi	r25, 0xF0	; 240
 494:	98 27       	eor	r25, r24
 496:	80 7f       	andi	r24, 0xF0	; 240
 498:	98 27       	eor	r25, r24
 49a:	84 2b       	or	r24, r20
 49c:	8c 93       	st	X, r24
		        LCDDR12  = LCDDR12|(n3<<4);
 49e:	48 81       	ld	r20, Y
 4a0:	c7 01       	movw	r24, r14
 4a2:	82 95       	swap	r24
 4a4:	92 95       	swap	r25
 4a6:	90 7f       	andi	r25, 0xF0	; 240
 4a8:	98 27       	eor	r25, r24
 4aa:	80 7f       	andi	r24, 0xF0	; 240
 4ac:	98 27       	eor	r25, r24
 4ae:	84 2b       	or	r24, r20
 4b0:	88 83       	st	Y, r24
		        LCDDR17 = LCDDR17|(n4<<4);
 4b2:	f9 01       	movw	r30, r18
 4b4:	80 81       	ld	r24, Z
 4b6:	cc 0c       	add	r12, r12
 4b8:	dd 1c       	adc	r13, r13
 4ba:	cc 0c       	add	r12, r12
 4bc:	dd 1c       	adc	r13, r13
 4be:	cc 0c       	add	r12, r12
 4c0:	dd 1c       	adc	r13, r13
 4c2:	cc 0c       	add	r12, r12
 4c4:	dd 1c       	adc	r13, r13
 4c6:	c8 2a       	or	r12, r24
 4c8:	c0 82       	st	Z, r12
				break;
	}
}	
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	08 95       	ret

000004e0 <longSize>:

int longSize(long i)
{
 4e0:	cf 92       	push	r12
 4e2:	df 92       	push	r13
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	6b 01       	movw	r12, r22
 4ea:	7c 01       	movw	r14, r24
	if (i%10==i)
 4ec:	2a e0       	ldi	r18, 0x0A	; 10
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e0       	ldi	r20, 0x00	; 0
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 4f8:	dc 01       	movw	r26, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	8c 15       	cp	r24, r12
 4fe:	9d 05       	cpc	r25, r13
 500:	ae 05       	cpc	r26, r14
 502:	bf 05       	cpc	r27, r15
 504:	09 f4       	brne	.+2      	; 0x508 <__stack+0x9>
 506:	3f c0       	rjmp	.+126    	; 0x586 <__stack+0x87>
	{
		return 1;
	}
	else if (i%100==i)
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	24 e6       	ldi	r18, 0x64	; 100
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 518:	dc 01       	movw	r26, r24
 51a:	cb 01       	movw	r24, r22
 51c:	8c 15       	cp	r24, r12
 51e:	9d 05       	cpc	r25, r13
 520:	ae 05       	cpc	r26, r14
 522:	bf 05       	cpc	r27, r15
 524:	99 f1       	breq	.+102    	; 0x58c <__stack+0x8d>
	{
		return 2;
	}
	else if (i%1000==i)
 526:	c7 01       	movw	r24, r14
 528:	b6 01       	movw	r22, r12
 52a:	28 ee       	ldi	r18, 0xE8	; 232
 52c:	33 e0       	ldi	r19, 0x03	; 3
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 536:	dc 01       	movw	r26, r24
 538:	cb 01       	movw	r24, r22
 53a:	8c 15       	cp	r24, r12
 53c:	9d 05       	cpc	r25, r13
 53e:	ae 05       	cpc	r26, r14
 540:	bf 05       	cpc	r27, r15
 542:	39 f1       	breq	.+78     	; 0x592 <__stack+0x93>
	{
		return 3;
	}
	else if (i%10000==i)
 544:	c7 01       	movw	r24, r14
 546:	b6 01       	movw	r22, r12
 548:	20 e1       	ldi	r18, 0x10	; 16
 54a:	37 e2       	ldi	r19, 0x27	; 39
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 554:	dc 01       	movw	r26, r24
 556:	cb 01       	movw	r24, r22
 558:	8c 15       	cp	r24, r12
 55a:	9d 05       	cpc	r25, r13
 55c:	ae 05       	cpc	r26, r14
 55e:	bf 05       	cpc	r27, r15
 560:	d9 f0       	breq	.+54     	; 0x598 <__stack+0x99>
	{
		return 4;
	}
	else if (i%100000==i)
 562:	c7 01       	movw	r24, r14
 564:	b6 01       	movw	r22, r12
 566:	20 ea       	ldi	r18, 0xA0	; 160
 568:	36 e8       	ldi	r19, 0x86	; 134
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 572:	dc 01       	movw	r26, r24
 574:	cb 01       	movw	r24, r22
 576:	8c 15       	cp	r24, r12
 578:	9d 05       	cpc	r25, r13
 57a:	ae 05       	cpc	r26, r14
 57c:	bf 05       	cpc	r27, r15
 57e:	79 f4       	brne	.+30     	; 0x59e <__stack+0x9f>
	{
		return 5;
 580:	85 e0       	ldi	r24, 0x05	; 5
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <__stack+0xa3>

int longSize(long i)
{
	if (i%10==i)
	{
		return 1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <__stack+0xa3>
	}
	else if (i%100==i)
	{
		return 2;
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	08 c0       	rjmp	.+16     	; 0x5a2 <__stack+0xa3>
	}
	else if (i%1000==i)
	{
		return 3;
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <__stack+0xa3>
	}
	else if (i%10000==i)
	{
		return 4;
 598:	84 e0       	ldi	r24, 0x04	; 4
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__stack+0xa3>
	else if (i%100000==i)
	{
		return 5;
	}
	else
	return 6;
 59e:	86 e0       	ldi	r24, 0x06	; 6
 5a0:	90 e0       	ldi	r25, 0x00	; 0
}
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	cf 90       	pop	r12
 5aa:	08 95       	ret

000005ac <writeLong>:


void writeLong(long i)
{
 5ac:	2f 92       	push	r2
 5ae:	3f 92       	push	r3
 5b0:	4f 92       	push	r4
 5b2:	5f 92       	push	r5
 5b4:	6f 92       	push	r6
 5b6:	7f 92       	push	r7
 5b8:	8f 92       	push	r8
 5ba:	9f 92       	push	r9
 5bc:	af 92       	push	r10
 5be:	bf 92       	push	r11
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	27 97       	sbiw	r28, 0x07	; 7
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	6b 01       	movw	r12, r22
 5e2:	7c 01       	movw	r14, r24
	int position = 0;
	char number = '0';
	int num = 0;
	int numsize;
	numsize = longSize(i);
 5e4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <longSize>
 5e8:	1c 01       	movw	r2, r24
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
 5ea:	18 16       	cp	r1, r24
 5ec:	19 06       	cpc	r1, r25
 5ee:	0c f0       	brlt	.+2      	; 0x5f2 <writeLong+0x46>
 5f0:	2e c1       	rjmp	.+604    	; 0x84e <writeLong+0x2a2>
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
 5f2:	0f 2e       	mov	r0, r31
 5f4:	f0 ea       	ldi	r31, 0xA0	; 160
 5f6:	8f 2e       	mov	r8, r31
 5f8:	f6 e8       	ldi	r31, 0x86	; 134
 5fa:	9f 2e       	mov	r9, r31
 5fc:	f1 e0       	ldi	r31, 0x01	; 1
 5fe:	af 2e       	mov	r10, r31
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	bf 2e       	mov	r11, r31
 604:	f0 2d       	mov	r31, r0
 606:	c7 01       	movw	r24, r14
 608:	b6 01       	movw	r22, r12
 60a:	a5 01       	movw	r20, r10
 60c:	94 01       	movw	r18, r8
 60e:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 612:	69 83       	std	Y+1, r22	; 0x01
 614:	7a 83       	std	Y+2, r23	; 0x02
 616:	8b 83       	std	Y+3, r24	; 0x03
 618:	9c 83       	std	Y+4, r25	; 0x04
 61a:	c7 01       	movw	r24, r14
 61c:	b6 01       	movw	r22, r12
 61e:	20 e4       	ldi	r18, 0x40	; 64
 620:	32 e4       	ldi	r19, 0x42	; 66
 622:	4f e0       	ldi	r20, 0x0F	; 15
 624:	50 e0       	ldi	r21, 0x00	; 0
 626:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 62a:	29 81       	ldd	r18, Y+1	; 0x01
 62c:	3a 81       	ldd	r19, Y+2	; 0x02
 62e:	4b 81       	ldd	r20, Y+3	; 0x03
 630:	5c 81       	ldd	r21, Y+4	; 0x04
 632:	62 1b       	sub	r22, r18
 634:	73 0b       	sbc	r23, r19
 636:	84 0b       	sbc	r24, r20
 638:	95 0b       	sbc	r25, r21
 63a:	a5 01       	movw	r20, r10
 63c:	94 01       	movw	r18, r8
 63e:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 642:	2d 83       	std	Y+5, r18	; 0x05
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
 644:	0f 2e       	mov	r0, r31
 646:	f0 e1       	ldi	r31, 0x10	; 16
 648:	8f 2e       	mov	r8, r31
 64a:	f7 e2       	ldi	r31, 0x27	; 39
 64c:	9f 2e       	mov	r9, r31
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	af 2e       	mov	r10, r31
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	bf 2e       	mov	r11, r31
 656:	f0 2d       	mov	r31, r0
 658:	c7 01       	movw	r24, r14
 65a:	b6 01       	movw	r22, r12
 65c:	a5 01       	movw	r20, r10
 65e:	94 01       	movw	r18, r8
 660:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 664:	2b 01       	movw	r4, r22
 666:	3c 01       	movw	r6, r24
 668:	69 81       	ldd	r22, Y+1	; 0x01
 66a:	7a 81       	ldd	r23, Y+2	; 0x02
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	9c 81       	ldd	r25, Y+4	; 0x04
 670:	64 19       	sub	r22, r4
 672:	75 09       	sbc	r23, r5
 674:	86 09       	sbc	r24, r6
 676:	97 09       	sbc	r25, r7
 678:	a5 01       	movw	r20, r10
 67a:	94 01       	movw	r18, r8
 67c:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 680:	2e 83       	std	Y+6, r18	; 0x06
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
 682:	0f 2e       	mov	r0, r31
 684:	f8 ee       	ldi	r31, 0xE8	; 232
 686:	8f 2e       	mov	r8, r31
 688:	f3 e0       	ldi	r31, 0x03	; 3
 68a:	9f 2e       	mov	r9, r31
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	af 2e       	mov	r10, r31
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	bf 2e       	mov	r11, r31
 694:	f0 2d       	mov	r31, r0
 696:	c7 01       	movw	r24, r14
 698:	b6 01       	movw	r22, r12
 69a:	a5 01       	movw	r20, r10
 69c:	94 01       	movw	r18, r8
 69e:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 6a2:	69 83       	std	Y+1, r22	; 0x01
 6a4:	7a 83       	std	Y+2, r23	; 0x02
 6a6:	8b 83       	std	Y+3, r24	; 0x03
 6a8:	9c 83       	std	Y+4, r25	; 0x04
 6aa:	c3 01       	movw	r24, r6
 6ac:	b2 01       	movw	r22, r4
 6ae:	29 81       	ldd	r18, Y+1	; 0x01
 6b0:	3a 81       	ldd	r19, Y+2	; 0x02
 6b2:	4b 81       	ldd	r20, Y+3	; 0x03
 6b4:	5c 81       	ldd	r21, Y+4	; 0x04
 6b6:	62 1b       	sub	r22, r18
 6b8:	73 0b       	sbc	r23, r19
 6ba:	84 0b       	sbc	r24, r20
 6bc:	95 0b       	sbc	r25, r21
 6be:	a5 01       	movw	r20, r10
 6c0:	94 01       	movw	r18, r8
 6c2:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 6c6:	2f 83       	std	Y+7, r18	; 0x07
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
 6c8:	0f 2e       	mov	r0, r31
 6ca:	f4 e6       	ldi	r31, 0x64	; 100
 6cc:	8f 2e       	mov	r8, r31
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	9f 2e       	mov	r9, r31
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	af 2e       	mov	r10, r31
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	bf 2e       	mov	r11, r31
 6da:	f0 2d       	mov	r31, r0
 6dc:	c7 01       	movw	r24, r14
 6de:	b6 01       	movw	r22, r12
 6e0:	a5 01       	movw	r20, r10
 6e2:	94 01       	movw	r18, r8
 6e4:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 6e8:	2b 01       	movw	r4, r22
 6ea:	3c 01       	movw	r6, r24
 6ec:	69 81       	ldd	r22, Y+1	; 0x01
 6ee:	7a 81       	ldd	r23, Y+2	; 0x02
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	9c 81       	ldd	r25, Y+4	; 0x04
 6f4:	64 19       	sub	r22, r4
 6f6:	75 09       	sbc	r23, r5
 6f8:	86 09       	sbc	r24, r6
 6fa:	97 09       	sbc	r25, r7
 6fc:	a5 01       	movw	r20, r10
 6fe:	94 01       	movw	r18, r8
 700:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 704:	02 2f       	mov	r16, r18
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
 706:	0f 2e       	mov	r0, r31
 708:	fa e0       	ldi	r31, 0x0A	; 10
 70a:	8f 2e       	mov	r8, r31
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	9f 2e       	mov	r9, r31
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	af 2e       	mov	r10, r31
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	bf 2e       	mov	r11, r31
 718:	f0 2d       	mov	r31, r0
 71a:	c7 01       	movw	r24, r14
 71c:	b6 01       	movw	r22, r12
 71e:	a5 01       	movw	r20, r10
 720:	94 01       	movw	r18, r8
 722:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 726:	69 83       	std	Y+1, r22	; 0x01
 728:	7a 83       	std	Y+2, r23	; 0x02
 72a:	8b 83       	std	Y+3, r24	; 0x03
 72c:	9c 83       	std	Y+4, r25	; 0x04
 72e:	c3 01       	movw	r24, r6
 730:	b2 01       	movw	r22, r4
 732:	29 81       	ldd	r18, Y+1	; 0x01
 734:	3a 81       	ldd	r19, Y+2	; 0x02
 736:	4b 81       	ldd	r20, Y+3	; 0x03
 738:	5c 81       	ldd	r21, Y+4	; 0x04
 73a:	62 1b       	sub	r22, r18
 73c:	73 0b       	sbc	r23, r19
 73e:	84 0b       	sbc	r24, r20
 740:	95 0b       	sbc	r25, r21
 742:	a5 01       	movw	r20, r10
 744:	94 01       	movw	r18, r8
 746:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>


void writeLong(long i)
{
	int position = 0;
	char number = '0';
 74a:	10 e3       	ldi	r17, 0x30	; 48
	int numsize;
	numsize = longSize(i);
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
 74c:	44 24       	eor	r4, r4
 74e:	55 24       	eor	r5, r5
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
 750:	00 5d       	subi	r16, 0xD0	; 208
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
 752:	ce 80       	ldd	r12, Y+6	; 0x06
 754:	c1 0e       	add	r12, r17
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
 756:	8f 80       	ldd	r8, Y+7	; 0x07
 758:	81 0e       	add	r8, r17
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
 75a:	0f 2e       	mov	r0, r31
 75c:	f0 e3       	ldi	r31, 0x30	; 48
 75e:	ff 2e       	mov	r15, r31
 760:	f0 2d       	mov	r31, r0
 762:	3d 81       	ldd	r19, Y+5	; 0x05
 764:	f3 0e       	add	r15, r19
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
 766:	e9 80       	ldd	r14, Y+1	; 0x01
 768:	40 e3       	ldi	r20, 0x30	; 48
 76a:	e4 0e       	add	r14, r20
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
 76c:	0f 2e       	mov	r0, r31
 76e:	f0 e3       	ldi	r31, 0x30	; 48
 770:	df 2e       	mov	r13, r31
 772:	f0 2d       	mov	r31, r0
 774:	d2 0e       	add	r13, r18
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
 776:	52 e0       	ldi	r21, 0x02	; 2
 778:	45 16       	cp	r4, r21
 77a:	51 04       	cpc	r5, r1
 77c:	09 f4       	brne	.+2      	; 0x780 <writeLong+0x1d4>
 77e:	45 c0       	rjmp	.+138    	; 0x80a <writeLong+0x25e>
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	48 16       	cp	r4, r24
 784:	51 04       	cpc	r5, r1
 786:	44 f4       	brge	.+16     	; 0x798 <writeLong+0x1ec>
 788:	41 14       	cp	r4, r1
 78a:	51 04       	cpc	r5, r1
 78c:	81 f1       	breq	.+96     	; 0x7ee <writeLong+0x242>
 78e:	e1 e0       	ldi	r30, 0x01	; 1
 790:	4e 16       	cp	r4, r30
 792:	51 04       	cpc	r5, r1
 794:	79 f4       	brne	.+30     	; 0x7b4 <writeLong+0x208>
 796:	32 c0       	rjmp	.+100    	; 0x7fc <writeLong+0x250>
 798:	f4 e0       	ldi	r31, 0x04	; 4
 79a:	4f 16       	cp	r4, r31
 79c:	51 04       	cpc	r5, r1
 79e:	09 f4       	brne	.+2      	; 0x7a2 <writeLong+0x1f6>
 7a0:	42 c0       	rjmp	.+132    	; 0x826 <writeLong+0x27a>
 7a2:	24 e0       	ldi	r18, 0x04	; 4
 7a4:	42 16       	cp	r4, r18
 7a6:	51 04       	cpc	r5, r1
 7a8:	bc f1       	brlt	.+110    	; 0x818 <writeLong+0x26c>
 7aa:	35 e0       	ldi	r19, 0x05	; 5
 7ac:	43 16       	cp	r4, r19
 7ae:	51 04       	cpc	r5, r1
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <writeLong+0x208>
 7b2:	40 c0       	rjmp	.+128    	; 0x834 <writeLong+0x288>
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
		}
		switch (position)
 7b4:	42 e0       	ldi	r20, 0x02	; 2
 7b6:	44 16       	cp	r4, r20
 7b8:	51 04       	cpc	r5, r1
 7ba:	41 f1       	breq	.+80     	; 0x80c <writeLong+0x260>
 7bc:	53 e0       	ldi	r21, 0x03	; 3
 7be:	45 16       	cp	r4, r21
 7c0:	51 04       	cpc	r5, r1
 7c2:	44 f4       	brge	.+16     	; 0x7d4 <writeLong+0x228>
 7c4:	41 14       	cp	r4, r1
 7c6:	51 04       	cpc	r5, r1
 7c8:	99 f0       	breq	.+38     	; 0x7f0 <writeLong+0x244>
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	48 16       	cp	r4, r24
 7ce:	51 04       	cpc	r5, r1
 7d0:	b9 f5       	brne	.+110    	; 0x840 <writeLong+0x294>
 7d2:	15 c0       	rjmp	.+42     	; 0x7fe <writeLong+0x252>
 7d4:	e4 e0       	ldi	r30, 0x04	; 4
 7d6:	4e 16       	cp	r4, r30
 7d8:	51 04       	cpc	r5, r1
 7da:	31 f1       	breq	.+76     	; 0x828 <writeLong+0x27c>
 7dc:	f4 e0       	ldi	r31, 0x04	; 4
 7de:	4f 16       	cp	r4, r31
 7e0:	51 04       	cpc	r5, r1
 7e2:	dc f0       	brlt	.+54     	; 0x81a <writeLong+0x26e>
 7e4:	25 e0       	ldi	r18, 0x05	; 5
 7e6:	42 16       	cp	r4, r18
 7e8:	51 04       	cpc	r5, r1
 7ea:	51 f5       	brne	.+84     	; 0x840 <writeLong+0x294>
 7ec:	24 c0       	rjmp	.+72     	; 0x836 <writeLong+0x28a>
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
			case 0: num = i%10; number = num+'0';break;
 7ee:	1e 2d       	mov	r17, r14
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
 7f0:	81 2f       	mov	r24, r17
 7f2:	65 e0       	ldi	r22, 0x05	; 5
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
 7fa:	22 c0       	rjmp	.+68     	; 0x840 <writeLong+0x294>
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
			case 1: num = (i%100-i%10)/10; number = num+'0';break;
 7fc:	1d 2d       	mov	r17, r13
			case 0: num = i%10; number = num+'0';break;
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
 7fe:	81 2f       	mov	r24, r17
 800:	64 e0       	ldi	r22, 0x04	; 4
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
 808:	1b c0       	rjmp	.+54     	; 0x840 <writeLong+0x294>
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
			case 2: num = (i%1000-i%100)/100; number = num+'0';break;
 80a:	10 2f       	mov	r17, r16
		}
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
 80c:	81 2f       	mov	r24, r17
 80e:	63 e0       	ldi	r22, 0x03	; 3
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
 816:	14 c0       	rjmp	.+40     	; 0x840 <writeLong+0x294>
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
			case 3: num = (i%10000-i%1000)/1000; number = num+'0';break;
 818:	18 2d       	mov	r17, r8
		switch (position)
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
 81a:	81 2f       	mov	r24, r17
 81c:	62 e0       	ldi	r22, 0x02	; 2
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
 824:	0d c0       	rjmp	.+26     	; 0x840 <writeLong+0x294>
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
			case 4: num = (i%100000-i%10000)/10000; number = num+'0';break;
 826:	1c 2d       	mov	r17, r12
		{
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
			case 4:writeChar(number,1);break;
 828:	81 2f       	mov	r24, r17
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
 832:	06 c0       	rjmp	.+12     	; 0x840 <writeLong+0x294>
	
	for (position=0; position<numsize; position++)
	{
        switch (position)
		{
			case 5: num = (i%1000000-i%100000)/100000; number = num+'0';break;
 834:	1f 2d       	mov	r17, r15
			case 0:writeChar(number,5);break;
			case 1:writeChar(number,4);break;
			case 2:writeChar(number,3);break;
			case 3:writeChar(number,2);break;
			case 4:writeChar(number,1);break;
			case 5:writeChar(number,0);break;
 836:	81 2f       	mov	r24, r17
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
	int numsize;
	numsize = longSize(i);
	int j;
	int temp=1;
	
	for (position=0; position<numsize; position++)
 840:	08 94       	sec
 842:	41 1c       	adc	r4, r1
 844:	51 1c       	adc	r5, r1
 846:	42 14       	cp	r4, r2
 848:	53 04       	cpc	r5, r3
 84a:	09 f0       	breq	.+2      	; 0x84e <writeLong+0x2a2>
 84c:	94 cf       	rjmp	.-216    	; 0x776 <writeLong+0x1ca>
			case 4:writeChar(number,1);break;
			case 5:writeChar(number,0);break;
		}
		
	}
}
 84e:	27 96       	adiw	r28, 0x07	; 7
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	1f 91       	pop	r17
 860:	0f 91       	pop	r16
 862:	ff 90       	pop	r15
 864:	ef 90       	pop	r14
 866:	df 90       	pop	r13
 868:	cf 90       	pop	r12
 86a:	bf 90       	pop	r11
 86c:	af 90       	pop	r10
 86e:	9f 90       	pop	r9
 870:	8f 90       	pop	r8
 872:	7f 90       	pop	r7
 874:	6f 90       	pop	r6
 876:	5f 90       	pop	r5
 878:	4f 90       	pop	r4
 87a:	3f 90       	pop	r3
 87c:	2f 90       	pop	r2
 87e:	08 95       	ret

00000880 <is_prime>:

int is_prime(long i)
{
 880:	af 92       	push	r10
 882:	bf 92       	push	r11
 884:	cf 92       	push	r12
 886:	df 92       	push	r13
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	6b 01       	movw	r12, r22
 896:	7c 01       	movw	r14, r24
	int loop;
	loop = sqrt(i);
 898:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__floatsisf>
 89c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <sqrt>
 8a0:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fixsfsi>
 8a4:	8b 01       	movw	r16, r22
 8a6:	9c 01       	movw	r18, r24
	int j = 0;
	int amount = 0;
	for (j=2; j<=loop+1; j++)
 8a8:	0f 5f       	subi	r16, 0xFF	; 255
 8aa:	1f 4f       	sbci	r17, 0xFF	; 255
 8ac:	02 30       	cpi	r16, 0x02	; 2
 8ae:	11 05       	cpc	r17, r1
 8b0:	dc f0       	brlt	.+54     	; 0x8e8 <is_prime+0x68>
int is_prime(long i)
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
 8b2:	aa 24       	eor	r10, r10
 8b4:	bb 24       	eor	r11, r11
	for (j=2; j<=loop+1; j++)
 8b6:	c2 e0       	ldi	r28, 0x02	; 2
 8b8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i%j == 0)
 8ba:	9e 01       	movw	r18, r28
 8bc:	44 27       	eor	r20, r20
 8be:	37 fd       	sbrc	r19, 7
 8c0:	40 95       	com	r20
 8c2:	54 2f       	mov	r21, r20
 8c4:	c7 01       	movw	r24, r14
 8c6:	b6 01       	movw	r22, r12
 8c8:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 8cc:	dc 01       	movw	r26, r24
 8ce:	cb 01       	movw	r24, r22
 8d0:	00 97       	sbiw	r24, 0x00	; 0
 8d2:	a1 05       	cpc	r26, r1
 8d4:	b1 05       	cpc	r27, r1
 8d6:	19 f4       	brne	.+6      	; 0x8de <is_prime+0x5e>
		{
			amount++;
 8d8:	08 94       	sec
 8da:	a1 1c       	adc	r10, r1
 8dc:	b1 1c       	adc	r11, r1
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
	for (j=2; j<=loop+1; j++)
 8de:	21 96       	adiw	r28, 0x01	; 1
 8e0:	0c 17       	cp	r16, r28
 8e2:	1d 07       	cpc	r17, r29
 8e4:	54 f7       	brge	.-44     	; 0x8ba <is_prime+0x3a>
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <is_prime+0x6c>
int is_prime(long i)
{
	int loop;
	loop = sqrt(i);
	int j = 0;
	int amount = 0;
 8e8:	aa 24       	eor	r10, r10
 8ea:	bb 24       	eor	r11, r11
			amount++;
		}
	}
	if (amount != 0)
	{
		return 0;
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	a1 14       	cp	r10, r1
 8f2:	b1 04       	cpc	r11, r1
 8f4:	11 f0       	breq	.+4      	; 0x8fa <is_prime+0x7a>
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	return 1;
}
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	ff 90       	pop	r15
 904:	ef 90       	pop	r14
 906:	df 90       	pop	r13
 908:	cf 90       	pop	r12
 90a:	bf 90       	pop	r11
 90c:	af 90       	pop	r10
 90e:	08 95       	ret

00000910 <primes>:

void primes()
{
 910:	cf 92       	push	r12
 912:	df 92       	push	r13
 914:	ef 92       	push	r14
 916:	ff 92       	push	r15
	
	long i = 0;
	for (i=2; i<1000000; i++)
 918:	cc 24       	eor	r12, r12
 91a:	dd 24       	eor	r13, r13
 91c:	76 01       	movw	r14, r12
 91e:	68 94       	set
 920:	c1 f8       	bld	r12, 1
	{
		if ((is_prime(i))==1)
 922:	c7 01       	movw	r24, r14
 924:	b6 01       	movw	r22, r12
 926:	0e 94 40 04 	call	0x880	; 0x880 <is_prime>
 92a:	81 30       	cpi	r24, 0x01	; 1
 92c:	91 05       	cpc	r25, r1
 92e:	21 f4       	brne	.+8      	; 0x938 <primes+0x28>
		{
			writeLong(i);
 930:	c7 01       	movw	r24, r14
 932:	b6 01       	movw	r22, r12
 934:	0e 94 d6 02 	call	0x5ac	; 0x5ac <writeLong>

void primes()
{
	
	long i = 0;
	for (i=2; i<1000000; i++)
 938:	08 94       	sec
 93a:	c1 1c       	adc	r12, r1
 93c:	d1 1c       	adc	r13, r1
 93e:	e1 1c       	adc	r14, r1
 940:	f1 1c       	adc	r15, r1
 942:	80 e4       	ldi	r24, 0x40	; 64
 944:	c8 16       	cp	r12, r24
 946:	82 e4       	ldi	r24, 0x42	; 66
 948:	d8 06       	cpc	r13, r24
 94a:	8f e0       	ldi	r24, 0x0F	; 15
 94c:	e8 06       	cpc	r14, r24
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	f8 06       	cpc	r15, r24
 952:	39 f7       	brne	.-50     	; 0x922 <primes+0x12>
		if ((is_prime(i))==1)
		{
			writeLong(i);
		}
	}
}
 954:	ff 90       	pop	r15
 956:	ef 90       	pop	r14
 958:	df 90       	pop	r13
 95a:	cf 90       	pop	r12
 95c:	08 95       	ret

0000095e <printAt>:


void printAt(long num, int pos) {
 95e:	8f 92       	push	r8
 960:	9f 92       	push	r9
 962:	af 92       	push	r10
 964:	bf 92       	push	r11
 966:	cf 92       	push	r12
 968:	df 92       	push	r13
 96a:	ef 92       	push	r14
 96c:	ff 92       	push	r15
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	4b 01       	movw	r8, r22
 974:	5c 01       	movw	r10, r24
 976:	ea 01       	movw	r28, r20
	//lock(&m);
    pp = pos;
 978:	50 93 0d 01 	sts	0x010D, r21
 97c:	40 93 0c 01 	sts	0x010C, r20
	writeChar( (num % 100) / 10 + '0', pp);
 980:	24 e6       	ldi	r18, 0x64	; 100
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	40 e0       	ldi	r20, 0x00	; 0
 986:	50 e0       	ldi	r21, 0x00	; 0
 988:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 98c:	0f 2e       	mov	r0, r31
 98e:	fa e0       	ldi	r31, 0x0A	; 10
 990:	cf 2e       	mov	r12, r31
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	df 2e       	mov	r13, r31
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	ef 2e       	mov	r14, r31
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	ff 2e       	mov	r15, r31
 99e:	f0 2d       	mov	r31, r0
 9a0:	a7 01       	movw	r20, r14
 9a2:	96 01       	movw	r18, r12
 9a4:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 9a8:	82 2f       	mov	r24, r18
 9aa:	80 5d       	subi	r24, 0xD0	; 208
 9ac:	be 01       	movw	r22, r28
 9ae:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
	pp++;
 9b2:	c0 91 0c 01 	lds	r28, 0x010C
 9b6:	d0 91 0d 01 	lds	r29, 0x010D
 9ba:	21 96       	adiw	r28, 0x01	; 1
 9bc:	d0 93 0d 01 	sts	0x010D, r29
 9c0:	c0 93 0c 01 	sts	0x010C, r28
	writeChar( num % 10 + '0', pp);
 9c4:	c5 01       	movw	r24, r10
 9c6:	b4 01       	movw	r22, r8
 9c8:	a7 01       	movw	r20, r14
 9ca:	96 01       	movw	r18, r12
 9cc:	0e 94 0c 07 	call	0xe18	; 0xe18 <__divmodsi4>
 9d0:	86 2f       	mov	r24, r22
 9d2:	80 5d       	subi	r24, 0xD0	; 208
 9d4:	be 01       	movw	r22, r28
 9d6:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar>
	//unlock(&m);
}
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	bf 90       	pop	r11
 9e8:	af 90       	pop	r10
 9ea:	9f 90       	pop	r9
 9ec:	8f 90       	pop	r8
 9ee:	08 95       	ret

000009f0 <computePrimes>:

void computePrimes(int pos) {
 9f0:	ec 01       	movw	r28, r24
	long n;
	for(n = 1; ; n++) {
 9f2:	cc 24       	eor	r12, r12
 9f4:	dd 24       	eor	r13, r13
 9f6:	76 01       	movw	r14, r12
 9f8:	c3 94       	inc	r12
		if (is_prime(n)) {
 9fa:	c7 01       	movw	r24, r14
 9fc:	b6 01       	movw	r22, r12
 9fe:	0e 94 40 04 	call	0x880	; 0x880 <is_prime>
 a02:	00 97       	sbiw	r24, 0x00	; 0
 a04:	39 f0       	breq	.+14     	; 0xa14 <computePrimes+0x24>
			printAt(n, pos);
 a06:	c7 01       	movw	r24, r14
 a08:	b6 01       	movw	r22, r12
 a0a:	ae 01       	movw	r20, r28
 a0c:	0e 94 af 04 	call	0x95e	; 0x95e <printAt>
			//_delay_ms(2000);
			yield();
 a10:	0e 94 de 05 	call	0xbbc	; 0xbbc <yield>
	//unlock(&m);
}

void computePrimes(int pos) {
	long n;
	for(n = 1; ; n++) {
 a14:	08 94       	sec
 a16:	c1 1c       	adc	r12, r1
 a18:	d1 1c       	adc	r13, r1
 a1a:	e1 1c       	adc	r14, r1
 a1c:	f1 1c       	adc	r15, r1
		if (is_prime(n)) {
			printAt(n, pos);
			//_delay_ms(2000);
			yield();
		}
	}
 a1e:	ed cf       	rjmp	.-38     	; 0x9fa <computePrimes+0xa>

00000a20 <main>:
}

int main() {
	spawn(computePrimes,0);
 a20:	88 ef       	ldi	r24, 0xF8	; 248
 a22:	94 e0       	ldi	r25, 0x04	; 4
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	70 e0       	ldi	r23, 0x00	; 0
 a28:	0e 94 5f 05 	call	0xabe	; 0xabe <spawn>
	computePrimes(3);
 a2c:	83 e0       	ldi	r24, 0x03	; 3
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <computePrimes>

00000a34 <enqueue>:


    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
 a34:	db 01       	movw	r26, r22
    p->next = NULL;
 a36:	fc 01       	movw	r30, r24
 a38:	15 82       	std	Z+5, r1	; 0x05
 a3a:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 a3c:	ed 91       	ld	r30, X+
 a3e:	fc 91       	ld	r31, X
 a40:	11 97       	sbiw	r26, 0x01	; 1
 a42:	30 97       	sbiw	r30, 0x00	; 0
 a44:	29 f4       	brne	.+10     	; 0xa50 <enqueue+0x1c>
        *queue = p;
 a46:	11 96       	adiw	r26, 0x01	; 1
 a48:	9c 93       	st	X, r25
 a4a:	8e 93       	st	-X, r24
 a4c:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 a4e:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 a50:	24 81       	ldd	r18, Z+4	; 0x04
 a52:	35 81       	ldd	r19, Z+5	; 0x05
 a54:	21 15       	cp	r18, r1
 a56:	31 05       	cpc	r19, r1
 a58:	d1 f7       	brne	.-12     	; 0xa4e <enqueue+0x1a>
            q = q->next;
        q->next = p;
 a5a:	95 83       	std	Z+5, r25	; 0x05
 a5c:	84 83       	std	Z+4, r24	; 0x04
 a5e:	08 95       	ret

00000a60 <dequeue>:
    }
}

static thread dequeue(thread *queue) {
 a60:	dc 01       	movw	r26, r24
    thread p = *queue;
 a62:	ed 91       	ld	r30, X+
 a64:	fc 91       	ld	r31, X
 a66:	11 97       	sbiw	r26, 0x01	; 1
    if (*queue) {
 a68:	30 97       	sbiw	r30, 0x00	; 0
 a6a:	41 f0       	breq	.+16     	; 0xa7c <dequeue+0x1c>
        *queue = (*queue)->next;
 a6c:	84 81       	ldd	r24, Z+4	; 0x04
 a6e:	95 81       	ldd	r25, Z+5	; 0x05
 a70:	11 96       	adiw	r26, 0x01	; 1
 a72:	9c 93       	st	X, r25
 a74:	8e 93       	st	-X, r24
    } else {
        // Empty queue, kernel panic!!!
        while (1) ;  // not much else to do...
    }
    return p;
}
 a76:	8e 2f       	mov	r24, r30
 a78:	9f 2f       	mov	r25, r31
 a7a:	08 95       	ret
 a7c:	ff cf       	rjmp	.-2      	; 0xa7c <dequeue+0x1c>

00000a7e <dispatch>:

static void dispatch(thread next) {
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	00 d0       	rcall	.+0      	; 0xa84 <dispatch+0x6>
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
 a88:	9a 83       	std	Y+2, r25	; 0x02
 a8a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 a8c:	80 91 00 01 	lds	r24, 0x0100
 a90:	90 91 01 01 	lds	r25, 0x0101
 a94:	06 96       	adiw	r24, 0x06	; 6
 a96:	0e 94 49 07 	call	0xe92	; 0xe92 <setjmp>
 a9a:	00 97       	sbiw	r24, 0x00	; 0
 a9c:	59 f4       	brne	.+22     	; 0xab4 <dispatch+0x36>
        current = next;
 a9e:	89 81       	ldd	r24, Y+1	; 0x01
 aa0:	9a 81       	ldd	r25, Y+2	; 0x02
 aa2:	90 93 01 01 	sts	0x0101, r25
 aa6:	80 93 00 01 	sts	0x0100, r24
        longjmp(next->context,1);
 aaa:	06 96       	adiw	r24, 0x06	; 6
 aac:	61 e0       	ldi	r22, 0x01	; 1
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	0e 94 69 07 	call	0xed2	; 0xed2 <longjmp>
    }
}
 ab4:	0f 90       	pop	r0
 ab6:	0f 90       	pop	r0
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	08 95       	ret

00000abe <spawn>:

void spawn(void (* function)(int), int arg) {
 abe:	ef 92       	push	r14
 ac0:	ff 92       	push	r15
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	00 d0       	rcall	.+0      	; 0xacc <spawn+0xe>
 acc:	cd b7       	in	r28, 0x3d	; 61
 ace:	de b7       	in	r29, 0x3e	; 62
 ad0:	7c 01       	movw	r14, r24
 ad2:	8b 01       	movw	r16, r22
   thread newp;

   DISABLE();
 ad4:	f8 94       	cli
   if (!initialized) initialize();
 ad6:	80 91 08 01 	lds	r24, 0x0108
 ada:	90 91 09 01 	lds	r25, 0x0109
 ade:	00 97       	sbiw	r24, 0x00	; 0
 ae0:	29 f5       	brne	.+74     	; 0xb2c <spawn+0x6e>
int initialized = 0;

static void initialize(void) {
    int i;
	
	LCDCRA  = 0x80;
 ae2:	80 e8       	ldi	r24, 0x80	; 128
 ae4:	80 93 e4 00 	sts	0x00E4, r24
	LCDCRB  = 0xb7;
 ae8:	87 eb       	ldi	r24, 0xB7	; 183
 aea:	80 93 e5 00 	sts	0x00E5, r24
	TCCR1B  = 0x04;
 aee:	84 e0       	ldi	r24, 0x04	; 4
 af0:	80 93 81 00 	sts	0x0081, r24
	
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 af4:	88 ee       	ldi	r24, 0xE8	; 232
 af6:	91 e0       	ldi	r25, 0x01	; 1
 af8:	90 93 80 01 	sts	0x0180, r25
 afc:	80 93 7f 01 	sts	0x017F, r24
 b00:	85 e5       	ldi	r24, 0x55	; 85
 b02:	92 e0       	ldi	r25, 0x02	; 2
 b04:	90 93 ed 01 	sts	0x01ED, r25
 b08:	80 93 ec 01 	sts	0x01EC, r24
 b0c:	82 ec       	ldi	r24, 0xC2	; 194
 b0e:	92 e0       	ldi	r25, 0x02	; 2
 b10:	90 93 5a 02 	sts	0x025A, r25
 b14:	80 93 59 02 	sts	0x0259, r24
    threads[NTHREADS-1].next = NULL;
 b18:	10 92 c7 02 	sts	0x02C7, r1
 b1c:	10 92 c6 02 	sts	0x02C6, r1


    initialized = 1;
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	90 93 09 01 	sts	0x0109, r25
 b28:	80 93 08 01 	sts	0x0108, r24
   thread newp;

   DISABLE();
   if (!initialized) initialize();

   newp = dequeue(&freeQ);
 b2c:	82 e0       	ldi	r24, 0x02	; 2
 b2e:	91 e0       	ldi	r25, 0x01	; 1
 b30:	0e 94 30 05 	call	0xa60	; 0xa60 <dequeue>
 b34:	9a 83       	std	Y+2, r25	; 0x02
 b36:	89 83       	std	Y+1, r24	; 0x01
   newp->function = function;
 b38:	fc 01       	movw	r30, r24
 b3a:	f1 82       	std	Z+1, r15	; 0x01
 b3c:	e0 82       	st	Z, r14
   newp->arg = arg;
 b3e:	13 83       	std	Z+3, r17	; 0x03
 b40:	02 83       	std	Z+2, r16	; 0x02
   newp->next = NULL;
 b42:	15 82       	std	Z+5, r1	; 0x05
 b44:	14 82       	std	Z+4, r1	; 0x04
   if (setjmp(newp->context) == 1) {
 b46:	06 96       	adiw	r24, 0x06	; 6
 b48:	0e 94 49 07 	call	0xe92	; 0xe92 <setjmp>
 b4c:	81 30       	cpi	r24, 0x01	; 1
 b4e:	91 05       	cpc	r25, r1
 b50:	e1 f4       	brne	.+56     	; 0xb8a <spawn+0xcc>
	   ENABLE();
 b52:	78 94       	sei
	   current->function(current->arg);
 b54:	a0 91 00 01 	lds	r26, 0x0100
 b58:	b0 91 01 01 	lds	r27, 0x0101
 b5c:	ed 91       	ld	r30, X+
 b5e:	fc 91       	ld	r31, X
 b60:	11 97       	sbiw	r26, 0x01	; 1
 b62:	12 96       	adiw	r26, 0x02	; 2
 b64:	8d 91       	ld	r24, X+
 b66:	9c 91       	ld	r25, X
 b68:	13 97       	sbiw	r26, 0x03	; 3
 b6a:	09 95       	icall
	   DISABLE();
 b6c:	f8 94       	cli
	   enqueue(current, &freeQ);
 b6e:	80 91 00 01 	lds	r24, 0x0100
 b72:	90 91 01 01 	lds	r25, 0x0101
 b76:	62 e0       	ldi	r22, 0x02	; 2
 b78:	71 e0       	ldi	r23, 0x01	; 1
 b7a:	0e 94 1a 05 	call	0xa34	; 0xa34 <enqueue>
	   dispatch(dequeue(&readyQ));
 b7e:	8a e0       	ldi	r24, 0x0A	; 10
 b80:	91 e0       	ldi	r25, 0x01	; 1
 b82:	0e 94 30 05 	call	0xa60	; 0xa60 <dequeue>
 b86:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
   }
   SETSTACK(&newp->context, &newp->stack);
 b8a:	89 81       	ldd	r24, Y+1	; 0x01
 b8c:	9a 81       	ldd	r25, Y+2	; 0x02
 b8e:	87 59       	subi	r24, 0x97	; 151
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	e9 81       	ldd	r30, Y+1	; 0x01
 b94:	fa 81       	ldd	r31, Y+2	; 0x02
 b96:	97 8b       	std	Z+23, r25	; 0x17
 b98:	86 8b       	std	Z+22, r24	; 0x16
 b9a:	91 8f       	std	Z+25, r25	; 0x19
 b9c:	80 8f       	std	Z+24, r24	; 0x18

   enqueue(newp, &readyQ);
 b9e:	cf 01       	movw	r24, r30
 ba0:	6a e0       	ldi	r22, 0x0A	; 10
 ba2:	71 e0       	ldi	r23, 0x01	; 1
 ba4:	0e 94 1a 05 	call	0xa34	; 0xa34 <enqueue>
   ENABLE();
 ba8:	78 94       	sei
}
 baa:	0f 90       	pop	r0
 bac:	0f 90       	pop	r0
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	1f 91       	pop	r17
 bb4:	0f 91       	pop	r16
 bb6:	ff 90       	pop	r15
 bb8:	ef 90       	pop	r14
 bba:	08 95       	ret

00000bbc <yield>:

void yield(void) {
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29
	enqueue(current, &readyQ);
 bc0:	ca e0       	ldi	r28, 0x0A	; 10
 bc2:	d1 e0       	ldi	r29, 0x01	; 1
 bc4:	80 91 00 01 	lds	r24, 0x0100
 bc8:	90 91 01 01 	lds	r25, 0x0101
 bcc:	be 01       	movw	r22, r28
 bce:	0e 94 1a 05 	call	0xa34	; 0xa34 <enqueue>
	dispatch(dequeue(&readyQ));
 bd2:	ce 01       	movw	r24, r28
 bd4:	0e 94 30 05 	call	0xa60	; 0xa60 <dequeue>
 bd8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
}
 bdc:	df 91       	pop	r29
 bde:	cf 91       	pop	r28
 be0:	08 95       	ret

00000be2 <lock>:

void lock(mutex *m) {
 be2:	fc 01       	movw	r30, r24
	if(m->locked == 0) 
 be4:	80 81       	ld	r24, Z
 be6:	91 81       	ldd	r25, Z+1	; 0x01
 be8:	00 97       	sbiw	r24, 0x00	; 0
 bea:	29 f4       	brne	.+10     	; 0xbf6 <lock+0x14>
	m->locked = 1;
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	91 83       	std	Z+1, r25	; 0x01
 bf2:	80 83       	st	Z, r24
 bf4:	08 95       	ret
	else 
	{
		enqueue(current, m->waitQ);
 bf6:	62 81       	ldd	r22, Z+2	; 0x02
 bf8:	73 81       	ldd	r23, Z+3	; 0x03
 bfa:	80 91 00 01 	lds	r24, 0x0100
 bfe:	90 91 01 01 	lds	r25, 0x0101
 c02:	0e 94 1a 05 	call	0xa34	; 0xa34 <enqueue>
		dispatch(dequeue(&readyQ));
 c06:	8a e0       	ldi	r24, 0x0A	; 10
 c08:	91 e0       	ldi	r25, 0x01	; 1
 c0a:	0e 94 30 05 	call	0xa60	; 0xa60 <dequeue>
 c0e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
 c12:	08 95       	ret

00000c14 <unlock>:
	}
}

void unlock(mutex *m) {
 c14:	fc 01       	movw	r30, r24
	if((m->waitQ) != NULL) 
 c16:	22 81       	ldd	r18, Z+2	; 0x02
 c18:	33 81       	ldd	r19, Z+3	; 0x03
 c1a:	21 15       	cp	r18, r1
 c1c:	31 05       	cpc	r19, r1
 c1e:	41 f0       	breq	.+16     	; 0xc30 <unlock+0x1c>
	enqueue(dequeue(m->waitQ), &readyQ);
 c20:	c9 01       	movw	r24, r18
 c22:	0e 94 30 05 	call	0xa60	; 0xa60 <dequeue>
 c26:	6a e0       	ldi	r22, 0x0A	; 10
 c28:	71 e0       	ldi	r23, 0x01	; 1
 c2a:	0e 94 1a 05 	call	0xa34	; 0xa34 <enqueue>
 c2e:	08 95       	ret
	else 
	m->locked = 0;
 c30:	11 82       	std	Z+1, r1	; 0x01
 c32:	10 82       	st	Z, r1
 c34:	08 95       	ret

00000c36 <__fixsfsi>:
 c36:	04 d0       	rcall	.+8      	; 0xc40 <__fixunssfsi>
 c38:	68 94       	set
 c3a:	b1 11       	cpse	r27, r1
 c3c:	8d c0       	rjmp	.+282    	; 0xd58 <__fp_szero>
 c3e:	08 95       	ret

00000c40 <__fixunssfsi>:
 c40:	70 d0       	rcall	.+224    	; 0xd22 <__fp_splitA>
 c42:	88 f0       	brcs	.+34     	; 0xc66 <__fixunssfsi+0x26>
 c44:	9f 57       	subi	r25, 0x7F	; 127
 c46:	90 f0       	brcs	.+36     	; 0xc6c <__fixunssfsi+0x2c>
 c48:	b9 2f       	mov	r27, r25
 c4a:	99 27       	eor	r25, r25
 c4c:	b7 51       	subi	r27, 0x17	; 23
 c4e:	a0 f0       	brcs	.+40     	; 0xc78 <__fixunssfsi+0x38>
 c50:	d1 f0       	breq	.+52     	; 0xc86 <__fixunssfsi+0x46>
 c52:	66 0f       	add	r22, r22
 c54:	77 1f       	adc	r23, r23
 c56:	88 1f       	adc	r24, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	1a f0       	brmi	.+6      	; 0xc62 <__fixunssfsi+0x22>
 c5c:	ba 95       	dec	r27
 c5e:	c9 f7       	brne	.-14     	; 0xc52 <__fixunssfsi+0x12>
 c60:	12 c0       	rjmp	.+36     	; 0xc86 <__fixunssfsi+0x46>
 c62:	b1 30       	cpi	r27, 0x01	; 1
 c64:	81 f0       	breq	.+32     	; 0xc86 <__fixunssfsi+0x46>
 c66:	77 d0       	rcall	.+238    	; 0xd56 <__fp_zero>
 c68:	b1 e0       	ldi	r27, 0x01	; 1
 c6a:	08 95       	ret
 c6c:	74 c0       	rjmp	.+232    	; 0xd56 <__fp_zero>
 c6e:	67 2f       	mov	r22, r23
 c70:	78 2f       	mov	r23, r24
 c72:	88 27       	eor	r24, r24
 c74:	b8 5f       	subi	r27, 0xF8	; 248
 c76:	39 f0       	breq	.+14     	; 0xc86 <__fixunssfsi+0x46>
 c78:	b9 3f       	cpi	r27, 0xF9	; 249
 c7a:	cc f3       	brlt	.-14     	; 0xc6e <__fixunssfsi+0x2e>
 c7c:	86 95       	lsr	r24
 c7e:	77 95       	ror	r23
 c80:	67 95       	ror	r22
 c82:	b3 95       	inc	r27
 c84:	d9 f7       	brne	.-10     	; 0xc7c <__fixunssfsi+0x3c>
 c86:	3e f4       	brtc	.+14     	; 0xc96 <__fixunssfsi+0x56>
 c88:	90 95       	com	r25
 c8a:	80 95       	com	r24
 c8c:	70 95       	com	r23
 c8e:	61 95       	neg	r22
 c90:	7f 4f       	sbci	r23, 0xFF	; 255
 c92:	8f 4f       	sbci	r24, 0xFF	; 255
 c94:	9f 4f       	sbci	r25, 0xFF	; 255
 c96:	08 95       	ret

00000c98 <__floatunsisf>:
 c98:	e8 94       	clt
 c9a:	09 c0       	rjmp	.+18     	; 0xcae <__floatsisf+0x12>

00000c9c <__floatsisf>:
 c9c:	97 fb       	bst	r25, 7
 c9e:	3e f4       	brtc	.+14     	; 0xcae <__floatsisf+0x12>
 ca0:	90 95       	com	r25
 ca2:	80 95       	com	r24
 ca4:	70 95       	com	r23
 ca6:	61 95       	neg	r22
 ca8:	7f 4f       	sbci	r23, 0xFF	; 255
 caa:	8f 4f       	sbci	r24, 0xFF	; 255
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	99 23       	and	r25, r25
 cb0:	a9 f0       	breq	.+42     	; 0xcdc <__floatsisf+0x40>
 cb2:	f9 2f       	mov	r31, r25
 cb4:	96 e9       	ldi	r25, 0x96	; 150
 cb6:	bb 27       	eor	r27, r27
 cb8:	93 95       	inc	r25
 cba:	f6 95       	lsr	r31
 cbc:	87 95       	ror	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	b7 95       	ror	r27
 cc4:	f1 11       	cpse	r31, r1
 cc6:	f8 cf       	rjmp	.-16     	; 0xcb8 <__floatsisf+0x1c>
 cc8:	fa f4       	brpl	.+62     	; 0xd08 <__floatsisf+0x6c>
 cca:	bb 0f       	add	r27, r27
 ccc:	11 f4       	brne	.+4      	; 0xcd2 <__floatsisf+0x36>
 cce:	60 ff       	sbrs	r22, 0
 cd0:	1b c0       	rjmp	.+54     	; 0xd08 <__floatsisf+0x6c>
 cd2:	6f 5f       	subi	r22, 0xFF	; 255
 cd4:	7f 4f       	sbci	r23, 0xFF	; 255
 cd6:	8f 4f       	sbci	r24, 0xFF	; 255
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	16 c0       	rjmp	.+44     	; 0xd08 <__floatsisf+0x6c>
 cdc:	88 23       	and	r24, r24
 cde:	11 f0       	breq	.+4      	; 0xce4 <__floatsisf+0x48>
 ce0:	96 e9       	ldi	r25, 0x96	; 150
 ce2:	11 c0       	rjmp	.+34     	; 0xd06 <__floatsisf+0x6a>
 ce4:	77 23       	and	r23, r23
 ce6:	21 f0       	breq	.+8      	; 0xcf0 <__floatsisf+0x54>
 ce8:	9e e8       	ldi	r25, 0x8E	; 142
 cea:	87 2f       	mov	r24, r23
 cec:	76 2f       	mov	r23, r22
 cee:	05 c0       	rjmp	.+10     	; 0xcfa <__floatsisf+0x5e>
 cf0:	66 23       	and	r22, r22
 cf2:	71 f0       	breq	.+28     	; 0xd10 <__floatsisf+0x74>
 cf4:	96 e8       	ldi	r25, 0x86	; 134
 cf6:	86 2f       	mov	r24, r22
 cf8:	70 e0       	ldi	r23, 0x00	; 0
 cfa:	60 e0       	ldi	r22, 0x00	; 0
 cfc:	2a f0       	brmi	.+10     	; 0xd08 <__floatsisf+0x6c>
 cfe:	9a 95       	dec	r25
 d00:	66 0f       	add	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	da f7       	brpl	.-10     	; 0xcfe <__floatsisf+0x62>
 d08:	88 0f       	add	r24, r24
 d0a:	96 95       	lsr	r25
 d0c:	87 95       	ror	r24
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <__fp_split3>:
 d12:	57 fd       	sbrc	r21, 7
 d14:	90 58       	subi	r25, 0x80	; 128
 d16:	44 0f       	add	r20, r20
 d18:	55 1f       	adc	r21, r21
 d1a:	59 f0       	breq	.+22     	; 0xd32 <__fp_splitA+0x10>
 d1c:	5f 3f       	cpi	r21, 0xFF	; 255
 d1e:	71 f0       	breq	.+28     	; 0xd3c <__fp_splitA+0x1a>
 d20:	47 95       	ror	r20

00000d22 <__fp_splitA>:
 d22:	88 0f       	add	r24, r24
 d24:	97 fb       	bst	r25, 7
 d26:	99 1f       	adc	r25, r25
 d28:	61 f0       	breq	.+24     	; 0xd42 <__fp_splitA+0x20>
 d2a:	9f 3f       	cpi	r25, 0xFF	; 255
 d2c:	79 f0       	breq	.+30     	; 0xd4c <__fp_splitA+0x2a>
 d2e:	87 95       	ror	r24
 d30:	08 95       	ret
 d32:	12 16       	cp	r1, r18
 d34:	13 06       	cpc	r1, r19
 d36:	14 06       	cpc	r1, r20
 d38:	55 1f       	adc	r21, r21
 d3a:	f2 cf       	rjmp	.-28     	; 0xd20 <__fp_split3+0xe>
 d3c:	46 95       	lsr	r20
 d3e:	f1 df       	rcall	.-30     	; 0xd22 <__fp_splitA>
 d40:	08 c0       	rjmp	.+16     	; 0xd52 <__fp_splitA+0x30>
 d42:	16 16       	cp	r1, r22
 d44:	17 06       	cpc	r1, r23
 d46:	18 06       	cpc	r1, r24
 d48:	99 1f       	adc	r25, r25
 d4a:	f1 cf       	rjmp	.-30     	; 0xd2e <__fp_splitA+0xc>
 d4c:	86 95       	lsr	r24
 d4e:	71 05       	cpc	r23, r1
 d50:	61 05       	cpc	r22, r1
 d52:	08 94       	sec
 d54:	08 95       	ret

00000d56 <__fp_zero>:
 d56:	e8 94       	clt

00000d58 <__fp_szero>:
 d58:	bb 27       	eor	r27, r27
 d5a:	66 27       	eor	r22, r22
 d5c:	77 27       	eor	r23, r23
 d5e:	cb 01       	movw	r24, r22
 d60:	97 f9       	bld	r25, 7
 d62:	08 95       	ret
 d64:	11 f4       	brne	.+4      	; 0xd6a <__fp_szero+0x12>
 d66:	0e f4       	brtc	.+2      	; 0xd6a <__fp_szero+0x12>
 d68:	4d c0       	rjmp	.+154    	; 0xe04 <__fp_nan>
 d6a:	3e c0       	rjmp	.+124    	; 0xde8 <__fp_mpack>

00000d6c <sqrt>:
 d6c:	da df       	rcall	.-76     	; 0xd22 <__fp_splitA>
 d6e:	d0 f3       	brcs	.-12     	; 0xd64 <__fp_szero+0xc>
 d70:	99 23       	and	r25, r25
 d72:	d9 f3       	breq	.-10     	; 0xd6a <__fp_szero+0x12>
 d74:	ce f3       	brts	.-14     	; 0xd68 <__fp_szero+0x10>
 d76:	9f 57       	subi	r25, 0x7F	; 127
 d78:	55 0b       	sbc	r21, r21
 d7a:	87 ff       	sbrs	r24, 7
 d7c:	46 d0       	rcall	.+140    	; 0xe0a <__fp_norm2>
 d7e:	00 24       	eor	r0, r0
 d80:	a0 e6       	ldi	r26, 0x60	; 96
 d82:	40 ea       	ldi	r20, 0xA0	; 160
 d84:	90 01       	movw	r18, r0
 d86:	80 58       	subi	r24, 0x80	; 128
 d88:	56 95       	lsr	r21
 d8a:	97 95       	ror	r25
 d8c:	28 f4       	brcc	.+10     	; 0xd98 <sqrt+0x2c>
 d8e:	80 5c       	subi	r24, 0xC0	; 192
 d90:	66 0f       	add	r22, r22
 d92:	77 1f       	adc	r23, r23
 d94:	88 1f       	adc	r24, r24
 d96:	20 f0       	brcs	.+8      	; 0xda0 <sqrt+0x34>
 d98:	26 17       	cp	r18, r22
 d9a:	37 07       	cpc	r19, r23
 d9c:	48 07       	cpc	r20, r24
 d9e:	30 f4       	brcc	.+12     	; 0xdac <sqrt+0x40>
 da0:	62 1b       	sub	r22, r18
 da2:	73 0b       	sbc	r23, r19
 da4:	84 0b       	sbc	r24, r20
 da6:	20 29       	or	r18, r0
 da8:	31 29       	or	r19, r1
 daa:	4a 2b       	or	r20, r26
 dac:	a6 95       	lsr	r26
 dae:	17 94       	ror	r1
 db0:	07 94       	ror	r0
 db2:	20 25       	eor	r18, r0
 db4:	31 25       	eor	r19, r1
 db6:	4a 27       	eor	r20, r26
 db8:	58 f7       	brcc	.-42     	; 0xd90 <sqrt+0x24>
 dba:	66 0f       	add	r22, r22
 dbc:	77 1f       	adc	r23, r23
 dbe:	88 1f       	adc	r24, r24
 dc0:	20 f0       	brcs	.+8      	; 0xdca <sqrt+0x5e>
 dc2:	26 17       	cp	r18, r22
 dc4:	37 07       	cpc	r19, r23
 dc6:	48 07       	cpc	r20, r24
 dc8:	30 f4       	brcc	.+12     	; 0xdd6 <sqrt+0x6a>
 dca:	62 0b       	sbc	r22, r18
 dcc:	73 0b       	sbc	r23, r19
 dce:	84 0b       	sbc	r24, r20
 dd0:	20 0d       	add	r18, r0
 dd2:	31 1d       	adc	r19, r1
 dd4:	41 1d       	adc	r20, r1
 dd6:	a0 95       	com	r26
 dd8:	81 f7       	brne	.-32     	; 0xdba <sqrt+0x4e>
 dda:	b9 01       	movw	r22, r18
 ddc:	84 2f       	mov	r24, r20
 dde:	91 58       	subi	r25, 0x81	; 129
 de0:	88 0f       	add	r24, r24
 de2:	96 95       	lsr	r25
 de4:	87 95       	ror	r24
 de6:	08 95       	ret

00000de8 <__fp_mpack>:
 de8:	9f 3f       	cpi	r25, 0xFF	; 255
 dea:	31 f0       	breq	.+12     	; 0xdf8 <__fp_mpack_finite+0xc>

00000dec <__fp_mpack_finite>:
 dec:	91 50       	subi	r25, 0x01	; 1
 dee:	20 f4       	brcc	.+8      	; 0xdf8 <__fp_mpack_finite+0xc>
 df0:	87 95       	ror	r24
 df2:	77 95       	ror	r23
 df4:	67 95       	ror	r22
 df6:	b7 95       	ror	r27
 df8:	88 0f       	add	r24, r24
 dfa:	91 1d       	adc	r25, r1
 dfc:	96 95       	lsr	r25
 dfe:	87 95       	ror	r24
 e00:	97 f9       	bld	r25, 7
 e02:	08 95       	ret

00000e04 <__fp_nan>:
 e04:	9f ef       	ldi	r25, 0xFF	; 255
 e06:	80 ec       	ldi	r24, 0xC0	; 192
 e08:	08 95       	ret

00000e0a <__fp_norm2>:
 e0a:	91 50       	subi	r25, 0x01	; 1
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	66 0f       	add	r22, r22
 e10:	77 1f       	adc	r23, r23
 e12:	88 1f       	adc	r24, r24
 e14:	d2 f7       	brpl	.-12     	; 0xe0a <__fp_norm2>
 e16:	08 95       	ret

00000e18 <__divmodsi4>:
 e18:	97 fb       	bst	r25, 7
 e1a:	09 2e       	mov	r0, r25
 e1c:	05 26       	eor	r0, r21
 e1e:	0e d0       	rcall	.+28     	; 0xe3c <__divmodsi4_neg1>
 e20:	57 fd       	sbrc	r21, 7
 e22:	04 d0       	rcall	.+8      	; 0xe2c <__divmodsi4_neg2>
 e24:	14 d0       	rcall	.+40     	; 0xe4e <__udivmodsi4>
 e26:	0a d0       	rcall	.+20     	; 0xe3c <__divmodsi4_neg1>
 e28:	00 1c       	adc	r0, r0
 e2a:	38 f4       	brcc	.+14     	; 0xe3a <__divmodsi4_exit>

00000e2c <__divmodsi4_neg2>:
 e2c:	50 95       	com	r21
 e2e:	40 95       	com	r20
 e30:	30 95       	com	r19
 e32:	21 95       	neg	r18
 e34:	3f 4f       	sbci	r19, 0xFF	; 255
 e36:	4f 4f       	sbci	r20, 0xFF	; 255
 e38:	5f 4f       	sbci	r21, 0xFF	; 255

00000e3a <__divmodsi4_exit>:
 e3a:	08 95       	ret

00000e3c <__divmodsi4_neg1>:
 e3c:	f6 f7       	brtc	.-4      	; 0xe3a <__divmodsi4_exit>
 e3e:	90 95       	com	r25
 e40:	80 95       	com	r24
 e42:	70 95       	com	r23
 e44:	61 95       	neg	r22
 e46:	7f 4f       	sbci	r23, 0xFF	; 255
 e48:	8f 4f       	sbci	r24, 0xFF	; 255
 e4a:	9f 4f       	sbci	r25, 0xFF	; 255
 e4c:	08 95       	ret

00000e4e <__udivmodsi4>:
 e4e:	a1 e2       	ldi	r26, 0x21	; 33
 e50:	1a 2e       	mov	r1, r26
 e52:	aa 1b       	sub	r26, r26
 e54:	bb 1b       	sub	r27, r27
 e56:	fd 01       	movw	r30, r26
 e58:	0d c0       	rjmp	.+26     	; 0xe74 <__udivmodsi4_ep>

00000e5a <__udivmodsi4_loop>:
 e5a:	aa 1f       	adc	r26, r26
 e5c:	bb 1f       	adc	r27, r27
 e5e:	ee 1f       	adc	r30, r30
 e60:	ff 1f       	adc	r31, r31
 e62:	a2 17       	cp	r26, r18
 e64:	b3 07       	cpc	r27, r19
 e66:	e4 07       	cpc	r30, r20
 e68:	f5 07       	cpc	r31, r21
 e6a:	20 f0       	brcs	.+8      	; 0xe74 <__udivmodsi4_ep>
 e6c:	a2 1b       	sub	r26, r18
 e6e:	b3 0b       	sbc	r27, r19
 e70:	e4 0b       	sbc	r30, r20
 e72:	f5 0b       	sbc	r31, r21

00000e74 <__udivmodsi4_ep>:
 e74:	66 1f       	adc	r22, r22
 e76:	77 1f       	adc	r23, r23
 e78:	88 1f       	adc	r24, r24
 e7a:	99 1f       	adc	r25, r25
 e7c:	1a 94       	dec	r1
 e7e:	69 f7       	brne	.-38     	; 0xe5a <__udivmodsi4_loop>
 e80:	60 95       	com	r22
 e82:	70 95       	com	r23
 e84:	80 95       	com	r24
 e86:	90 95       	com	r25
 e88:	9b 01       	movw	r18, r22
 e8a:	ac 01       	movw	r20, r24
 e8c:	bd 01       	movw	r22, r26
 e8e:	cf 01       	movw	r24, r30
 e90:	08 95       	ret

00000e92 <setjmp>:
 e92:	dc 01       	movw	r26, r24
 e94:	2d 92       	st	X+, r2
 e96:	3d 92       	st	X+, r3
 e98:	4d 92       	st	X+, r4
 e9a:	5d 92       	st	X+, r5
 e9c:	6d 92       	st	X+, r6
 e9e:	7d 92       	st	X+, r7
 ea0:	8d 92       	st	X+, r8
 ea2:	9d 92       	st	X+, r9
 ea4:	ad 92       	st	X+, r10
 ea6:	bd 92       	st	X+, r11
 ea8:	cd 92       	st	X+, r12
 eaa:	dd 92       	st	X+, r13
 eac:	ed 92       	st	X+, r14
 eae:	fd 92       	st	X+, r15
 eb0:	0d 93       	st	X+, r16
 eb2:	1d 93       	st	X+, r17
 eb4:	cd 93       	st	X+, r28
 eb6:	dd 93       	st	X+, r29
 eb8:	ff 91       	pop	r31
 eba:	ef 91       	pop	r30
 ebc:	8d b7       	in	r24, 0x3d	; 61
 ebe:	8d 93       	st	X+, r24
 ec0:	8e b7       	in	r24, 0x3e	; 62
 ec2:	8d 93       	st	X+, r24
 ec4:	8f b7       	in	r24, 0x3f	; 63
 ec6:	8d 93       	st	X+, r24
 ec8:	ed 93       	st	X+, r30
 eca:	fd 93       	st	X+, r31
 ecc:	88 27       	eor	r24, r24
 ece:	99 27       	eor	r25, r25
 ed0:	09 94       	ijmp

00000ed2 <longjmp>:
 ed2:	dc 01       	movw	r26, r24
 ed4:	cb 01       	movw	r24, r22
 ed6:	81 30       	cpi	r24, 0x01	; 1
 ed8:	91 05       	cpc	r25, r1
 eda:	81 1d       	adc	r24, r1
 edc:	2d 90       	ld	r2, X+
 ede:	3d 90       	ld	r3, X+
 ee0:	4d 90       	ld	r4, X+
 ee2:	5d 90       	ld	r5, X+
 ee4:	6d 90       	ld	r6, X+
 ee6:	7d 90       	ld	r7, X+
 ee8:	8d 90       	ld	r8, X+
 eea:	9d 90       	ld	r9, X+
 eec:	ad 90       	ld	r10, X+
 eee:	bd 90       	ld	r11, X+
 ef0:	cd 90       	ld	r12, X+
 ef2:	dd 90       	ld	r13, X+
 ef4:	ed 90       	ld	r14, X+
 ef6:	fd 90       	ld	r15, X+
 ef8:	0d 91       	ld	r16, X+
 efa:	1d 91       	ld	r17, X+
 efc:	cd 91       	ld	r28, X+
 efe:	dd 91       	ld	r29, X+
 f00:	ed 91       	ld	r30, X+
 f02:	fd 91       	ld	r31, X+
 f04:	0d 90       	ld	r0, X+
 f06:	f8 94       	cli
 f08:	fe bf       	out	0x3e, r31	; 62
 f0a:	0f be       	out	0x3f, r0	; 63
 f0c:	ed bf       	out	0x3d, r30	; 61
 f0e:	ed 91       	ld	r30, X+
 f10:	fd 91       	ld	r31, X+
 f12:	09 94       	ijmp

00000f14 <_exit>:
 f14:	f8 94       	cli

00000f16 <__stop_program>:
 f16:	ff cf       	rjmp	.-2      	; 0xf16 <__stop_program>

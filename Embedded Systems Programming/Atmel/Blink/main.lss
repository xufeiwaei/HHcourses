
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000024a8  0000251c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  0080015c  00002504  00002578  2**0
                  ALLOC
  3 .stab         00001f74  00000000  00000000  00002578  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001246  00000000  00000000  000044ec  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_1>
       8:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__vector_2>
       c:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_3>
      10:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_4>
      14:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_9>
      28:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_10>
      2c:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_11>
      30:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_12>
      34:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_13>
      38:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_14>
      3c:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_15>
      40:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_16>
      44:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_17>
      48:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_18>
      4c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__vector_19>
      50:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_20>
      54:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_21>
      58:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 ea       	ldi	r30, 0xA8	; 168
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	ac 35       	cpi	r26, 0x5C	; 92
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	14 e0       	ldi	r17, 0x04	; 4
      80:	ac e5       	ldi	r26, 0x5C	; 92
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a3 3b       	cpi	r26, 0xB3	; 179
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
      92:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
LCD lcd = initLCD();
Blinker blinker = initBlinker(&lcd,1000,3);

int main()
{
	return TINYTIMBER(&blinker,blink,0);
      9a:	40 e0       	ldi	r20, 0x00	; 0
      9c:	50 e0       	ldi	r21, 0x00	; 0
      9e:	68 e3       	ldi	r22, 0x38	; 56
      a0:	71 e1       	ldi	r23, 0x11	; 17
      a2:	80 e0       	ldi	r24, 0x00	; 0
      a4:	91 e0       	ldi	r25, 0x01	; 1
      a6:	0e 94 97 03 	call	0x72e	; 0x72e <tinytimber>
      aa:	08 95       	ret

000000ac <DUMP>:

#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
      ac:	fc 01       	movw	r30, r24
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <DUMP+0x6>
  while (*s)
    DUMPC(*s++);
      b0:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
      b2:	80 81       	ld	r24, Z
      b4:	88 23       	and	r24, r24
      b6:	e1 f7       	brne	.-8      	; 0xb0 <DUMP+0x4>
    DUMPC(*s++);
}
      b8:	08 95       	ret

000000ba <DUMPH>:
void DUMPH(unsigned int val) {
    char buf[8];
    int i = 0;
    do {
        buf[i++] = hex[val & 0x0F];
        val = val >> 4;
      ba:	24 e0       	ldi	r18, 0x04	; 4
      bc:	96 95       	lsr	r25
      be:	87 95       	ror	r24
      c0:	2a 95       	dec	r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <DUMPH+0x2>
    } while (val);
      c4:	00 97       	sbiw	r24, 0x00	; 0
      c6:	c9 f7       	brne	.-14     	; 0xba <DUMPH>
    while (i)
        DUMPC(buf[--i]);
}
      c8:	08 95       	ret

000000ca <DUMP_INIT>:
#define INFINITY        0x7fffffffL
#define INF(a)          ( (a)==0 ? INFINITY : (a) )

void DUMP_INIT() {

}
      ca:	08 95       	ret

000000cc <DUMPC>:

void DUMPC(char c) {
    
}
      cc:	08 95       	ret

000000ce <enqueueByDeadline>:
#pragma	DATA default

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
      ce:	cf 92       	push	r12
      d0:	df 92       	push	r13
      d2:	ef 92       	push	r14
      d4:	ff 92       	push	r15
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
      e0:	db 01       	movw	r26, r22
      e2:	ed 91       	ld	r30, X+
      e4:	fc 91       	ld	r31, X
      e6:	c0 e0       	ldi	r28, 0x00	; 0
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	05 c0       	rjmp	.+10     	; 0xf6 <enqueueByDeadline+0x28>
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
      ec:	ef 01       	movw	r28, r30
      ee:	80 81       	ld	r24, Z
      f0:	91 81       	ldd	r25, Z+1	; 0x01
      f2:	9c 01       	movw	r18, r24
      f4:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
      f6:	30 97       	sbiw	r30, 0x00	; 0
      f8:	81 f0       	breq	.+32     	; 0x11a <enqueueByDeadline+0x4c>
      fa:	26 81       	ldd	r18, Z+6	; 0x06
      fc:	37 81       	ldd	r19, Z+7	; 0x07
      fe:	40 85       	ldd	r20, Z+8	; 0x08
     100:	51 85       	ldd	r21, Z+9	; 0x09
     102:	d8 01       	movw	r26, r16
     104:	16 96       	adiw	r26, 0x06	; 6
     106:	cd 90       	ld	r12, X+
     108:	dd 90       	ld	r13, X+
     10a:	ed 90       	ld	r14, X+
     10c:	fc 90       	ld	r15, X
     10e:	19 97       	sbiw	r26, 0x09	; 9
     110:	c2 16       	cp	r12, r18
     112:	d3 06       	cpc	r13, r19
     114:	e4 06       	cpc	r14, r20
     116:	f5 06       	cpc	r15, r21
     118:	4c f7       	brge	.-46     	; 0xec <enqueueByDeadline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     11a:	d8 01       	movw	r26, r16
     11c:	ed 93       	st	X+, r30
     11e:	fc 93       	st	X, r31
    if (prev == NULL)
     120:	20 97       	sbiw	r28, 0x00	; 0
     122:	21 f4       	brne	.+8      	; 0x12c <enqueueByDeadline+0x5e>
        *queue = p;
     124:	fb 01       	movw	r30, r22
     126:	11 83       	std	Z+1, r17	; 0x01
     128:	00 83       	st	Z, r16
     12a:	02 c0       	rjmp	.+4      	; 0x130 <enqueueByDeadline+0x62>
    else
        prev->next = p;
     12c:	19 83       	std	Y+1, r17	; 0x01
     12e:	08 83       	st	Y, r16
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	cf 90       	pop	r12
     140:	08 95       	ret

00000142 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
     142:	cf 92       	push	r12
     144:	df 92       	push	r13
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
     154:	db 01       	movw	r26, r22
     156:	ed 91       	ld	r30, X+
     158:	fc 91       	ld	r31, X
     15a:	c0 e0       	ldi	r28, 0x00	; 0
     15c:	d0 e0       	ldi	r29, 0x00	; 0
     15e:	05 c0       	rjmp	.+10     	; 0x16a <enqueueByBaseline+0x28>
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
     160:	ef 01       	movw	r28, r30
     162:	80 81       	ld	r24, Z
     164:	91 81       	ldd	r25, Z+1	; 0x01
     166:	9c 01       	movw	r18, r24
     168:	f9 01       	movw	r30, r18
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
     16a:	30 97       	sbiw	r30, 0x00	; 0
     16c:	81 f0       	breq	.+32     	; 0x18e <enqueueByBaseline+0x4c>
     16e:	22 81       	ldd	r18, Z+2	; 0x02
     170:	33 81       	ldd	r19, Z+3	; 0x03
     172:	44 81       	ldd	r20, Z+4	; 0x04
     174:	55 81       	ldd	r21, Z+5	; 0x05
     176:	d8 01       	movw	r26, r16
     178:	12 96       	adiw	r26, 0x02	; 2
     17a:	cd 90       	ld	r12, X+
     17c:	dd 90       	ld	r13, X+
     17e:	ed 90       	ld	r14, X+
     180:	fc 90       	ld	r15, X
     182:	15 97       	sbiw	r26, 0x05	; 5
     184:	c2 16       	cp	r12, r18
     186:	d3 06       	cpc	r13, r19
     188:	e4 06       	cpc	r14, r20
     18a:	f5 06       	cpc	r15, r21
     18c:	4c f7       	brge	.-46     	; 0x160 <enqueueByBaseline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     18e:	d8 01       	movw	r26, r16
     190:	ed 93       	st	X+, r30
     192:	fc 93       	st	X, r31
    if (prev == NULL)
     194:	20 97       	sbiw	r28, 0x00	; 0
     196:	21 f4       	brne	.+8      	; 0x1a0 <enqueueByBaseline+0x5e>
        *queue = p;
     198:	fb 01       	movw	r30, r22
     19a:	11 83       	std	Z+1, r17	; 0x01
     19c:	00 83       	st	Z, r16
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <enqueueByBaseline+0x62>
    else
        prev->next = p;
     1a0:	19 83       	std	Y+1, r17	; 0x01
     1a2:	08 83       	st	Y, r16
}
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	ff 90       	pop	r15
     1ae:	ef 90       	pop	r14
     1b0:	df 90       	pop	r13
     1b2:	cf 90       	pop	r12
     1b4:	08 95       	ret

000001b6 <dequeue>:

Msg dequeue(Msg *queue) {
     1b6:	dc 01       	movw	r26, r24
    Msg m = *queue;
     1b8:	ed 91       	ld	r30, X+
     1ba:	fc 91       	ld	r31, X
     1bc:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
     1be:	30 97       	sbiw	r30, 0x00	; 0
     1c0:	31 f0       	breq	.+12     	; 0x1ce <dequeue+0x18>
        *queue = m->next;
     1c2:	80 81       	ld	r24, Z
     1c4:	91 81       	ldd	r25, Z+1	; 0x01
     1c6:	8d 93       	st	X+, r24
     1c8:	9c 93       	st	X, r25
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
     1ca:	cf 01       	movw	r24, r30
     1cc:	08 95       	ret
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	80 93 ec 00 	sts	0x00EC, r24
     1d4:	80 93 ed 00 	sts	0x00ED, r24
     1d8:	80 93 ee 00 	sts	0x00EE, r24
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	83 bf       	out	0x33, r24	; 51
     1e0:	88 95       	sleep
     1e2:	fd cf       	rjmp	.-6      	; 0x1de <dequeue+0x28>

000001e4 <insert>:
    return m;
}

void insert(Msg m, Msg *queue) {
     1e4:	dc 01       	movw	r26, r24
     1e6:	fb 01       	movw	r30, r22
    m->next = *queue;
     1e8:	80 81       	ld	r24, Z
     1ea:	91 81       	ldd	r25, Z+1	; 0x01
     1ec:	11 96       	adiw	r26, 0x01	; 1
     1ee:	9c 93       	st	X, r25
     1f0:	8e 93       	st	-X, r24
    *queue = m;
     1f2:	b1 83       	std	Z+1, r27	; 0x01
     1f4:	a0 83       	st	Z, r26
}
     1f6:	08 95       	ret

000001f8 <push>:

void push(Thread t, Thread *stack) {
     1f8:	dc 01       	movw	r26, r24
     1fa:	fb 01       	movw	r30, r22
    t->next = *stack;
     1fc:	80 81       	ld	r24, Z
     1fe:	91 81       	ldd	r25, Z+1	; 0x01
     200:	11 96       	adiw	r26, 0x01	; 1
     202:	9c 93       	st	X, r25
     204:	8e 93       	st	-X, r24
    *stack = t;
     206:	b1 83       	std	Z+1, r27	; 0x01
     208:	a0 83       	st	Z, r26
}
     20a:	08 95       	ret

0000020c <pop>:

Thread pop(Thread *stack) {
     20c:	fc 01       	movw	r30, r24
    Thread t = *stack;
     20e:	a0 81       	ld	r26, Z
     210:	b1 81       	ldd	r27, Z+1	; 0x01
    *stack = t->next;
     212:	8d 91       	ld	r24, X+
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    return t;
}
     21c:	cd 01       	movw	r24, r26
     21e:	08 95       	ret

00000220 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	ef 93       	push	r30
     240:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
     242:	60 91 68 01 	lds	r22, 0x0168
     246:	70 91 69 01 	lds	r23, 0x0169
     24a:	6f 5f       	subi	r22, 0xFF	; 255
     24c:	7f 4f       	sbci	r23, 0xFF	; 255
     24e:	70 93 69 01 	sts	0x0169, r23
     252:	60 93 68 01 	sts	0x0168, r22
    TIMERSET(timerQ);
     256:	e0 91 62 01 	lds	r30, 0x0162
     25a:	f0 91 63 01 	lds	r31, 0x0163
     25e:	30 97       	sbiw	r30, 0x00	; 0
     260:	21 f1       	breq	.+72     	; 0x2aa <__vector_9+0x8a>
     262:	22 81       	ldd	r18, Z+2	; 0x02
     264:	33 81       	ldd	r19, Z+3	; 0x03
     266:	44 81       	ldd	r20, Z+4	; 0x04
     268:	55 81       	ldd	r21, Z+5	; 0x05
     26a:	ca 01       	movw	r24, r20
     26c:	bb 27       	eor	r27, r27
     26e:	97 fd       	sbrc	r25, 7
     270:	b0 95       	com	r27
     272:	ab 2f       	mov	r26, r27
     274:	68 17       	cp	r22, r24
     276:	79 07       	cpc	r23, r25
     278:	c1 f4       	brne	.+48     	; 0x2aa <__vector_9+0x8a>
     27a:	80 91 84 00 	lds	r24, 0x0084
     27e:	90 91 85 00 	lds	r25, 0x0085
     282:	80 95       	com	r24
     284:	90 95       	com	r25
     286:	82 0f       	add	r24, r18
     288:	93 1f       	adc	r25, r19
     28a:	89 2b       	or	r24, r25
     28c:	31 f4       	brne	.+12     	; 0x29a <__vector_9+0x7a>
     28e:	20 91 84 00 	lds	r18, 0x0084
     292:	30 91 85 00 	lds	r19, 0x0085
     296:	2f 5f       	subi	r18, 0xFF	; 255
     298:	3f 4f       	sbci	r19, 0xFF	; 255
     29a:	30 93 89 00 	sts	0x0089, r19
     29e:	20 93 88 00 	sts	0x0088, r18
     2a2:	80 91 6f 00 	lds	r24, 0x006F
     2a6:	82 60       	ori	r24, 0x02	; 2
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <__vector_9+0x90>
     2aa:	80 91 6f 00 	lds	r24, 0x006F
     2ae:	8d 7f       	andi	r24, 0xFD	; 253
     2b0:	80 93 6f 00 	sts	0x006F, r24
}
     2b4:	ff 91       	pop	r31
     2b6:	ef 91       	pop	r30
     2b8:	bf 91       	pop	r27
     2ba:	af 91       	pop	r26
     2bc:	9f 91       	pop	r25
     2be:	8f 91       	pop	r24
     2c0:	7f 91       	pop	r23
     2c2:	6f 91       	pop	r22
     2c4:	5f 91       	pop	r21
     2c6:	4f 91       	pop	r20
     2c8:	3f 91       	pop	r19
     2ca:	2f 91       	pop	r18
     2cc:	0f 90       	pop	r0
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	0f 90       	pop	r0
     2d2:	1f 90       	pop	r1
     2d4:	18 95       	reti

000002d6 <ABORT>:
    }
    ENABLE(status);
    return result;
}

void ABORT(Msg m) {
     2d6:	dc 01       	movw	r26, r24
    char status;
    DISABLE(status);
     2d8:	6f b7       	in	r22, 0x3f	; 63
     2da:	f8 94       	cli
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     2dc:	20 91 62 01 	lds	r18, 0x0162
     2e0:	30 91 63 01 	lds	r19, 0x0163
     2e4:	e0 e0       	ldi	r30, 0x00	; 0
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <ABORT+0x1c>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     2ea:	f9 01       	movw	r30, r18
     2ec:	80 81       	ld	r24, Z
     2ee:	91 81       	ldd	r25, Z+1	; 0x01
     2f0:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     2f2:	21 15       	cp	r18, r1
     2f4:	31 05       	cpc	r19, r1
     2f6:	69 f0       	breq	.+26     	; 0x312 <ABORT+0x3c>
     2f8:	2a 17       	cp	r18, r26
     2fa:	3b 07       	cpc	r19, r27
     2fc:	b1 f7       	brne	.-20     	; 0x2ea <ABORT+0x14>
     2fe:	8d 91       	ld	r24, X+
     300:	9c 91       	ld	r25, X
     302:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     304:	30 97       	sbiw	r30, 0x00	; 0
     306:	d9 f4       	brne	.+54     	; 0x33e <ABORT+0x68>
            prev->next = q->next;
        else
            *queue = q->next;
     308:	90 93 63 01 	sts	0x0163, r25
     30c:	80 93 62 01 	sts	0x0162, r24
     310:	3a c0       	rjmp	.+116    	; 0x386 <ABORT+0xb0>
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     312:	20 91 60 01 	lds	r18, 0x0160
     316:	30 91 61 01 	lds	r19, 0x0161
     31a:	e0 e0       	ldi	r30, 0x00	; 0
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	04 c0       	rjmp	.+8      	; 0x328 <ABORT+0x52>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     320:	f9 01       	movw	r30, r18
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     328:	21 15       	cp	r18, r1
     32a:	31 05       	cpc	r19, r1
     32c:	81 f0       	breq	.+32     	; 0x34e <ABORT+0x78>
     32e:	2a 17       	cp	r18, r26
     330:	3b 07       	cpc	r19, r27
     332:	b1 f7       	brne	.-20     	; 0x320 <ABORT+0x4a>
     334:	8d 91       	ld	r24, X+
     336:	9c 91       	ld	r25, X
     338:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     33a:	30 97       	sbiw	r30, 0x00	; 0
     33c:	19 f0       	breq	.+6      	; 0x344 <ABORT+0x6e>
            prev->next = q->next;
     33e:	91 83       	std	Z+1, r25	; 0x01
     340:	80 83       	st	Z, r24
     342:	21 c0       	rjmp	.+66     	; 0x386 <ABORT+0xb0>
        else
            *queue = q->next;
     344:	90 93 61 01 	sts	0x0161, r25
     348:	80 93 60 01 	sts	0x0160, r24
     34c:	1c c0       	rjmp	.+56     	; 0x386 <ABORT+0xb0>
    char status;
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
     34e:	e0 91 43 01 	lds	r30, 0x0143
     352:	f0 91 44 01 	lds	r31, 0x0144
        while (t) {
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
     356:	40 91 45 01 	lds	r20, 0x0145
     35a:	50 91 46 01 	lds	r21, 0x0146
     35e:	22 c0       	rjmp	.+68     	; 0x3a4 <ABORT+0xce>
     360:	e4 17       	cp	r30, r20
     362:	f5 07       	cpc	r31, r21
     364:	e1 f0       	breq	.+56     	; 0x39e <ABORT+0xc8>
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	8a 17       	cp	r24, r26
     36c:	9b 07       	cpc	r25, r27
     36e:	b9 f4       	brne	.+46     	; 0x39e <ABORT+0xc8>
     370:	24 81       	ldd	r18, Z+4	; 0x04
     372:	35 81       	ldd	r19, Z+5	; 0x05
     374:	1a 96       	adiw	r26, 0x0a	; 10
     376:	8d 91       	ld	r24, X+
     378:	9c 91       	ld	r25, X
     37a:	1b 97       	sbiw	r26, 0x0b	; 11
     37c:	28 17       	cp	r18, r24
     37e:	39 07       	cpc	r19, r25
     380:	71 f4       	brne	.+28     	; 0x39e <ABORT+0xc8>
	            t->msg = NULL;
     382:	13 82       	std	Z+3, r1	; 0x03
     384:	12 82       	std	Z+2, r1	; 0x02
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
     386:	80 91 3f 01 	lds	r24, 0x013F
     38a:	90 91 40 01 	lds	r25, 0x0140
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 93       	st	X, r25
     392:	8e 93       	st	-X, r24
    *queue = m;
     394:	b0 93 40 01 	sts	0x0140, r27
     398:	a0 93 3f 01 	sts	0x013F, r26
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <ABORT+0xd2>
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
	            t->msg = NULL;
	            insert(m, &msgPool);
	            break;
            }
            t = t->next;
     39e:	01 90       	ld	r0, Z+
     3a0:	f0 81       	ld	r31, Z
     3a2:	e0 2d       	mov	r30, r0
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
        while (t) {
     3a4:	30 97       	sbiw	r30, 0x00	; 0
     3a6:	e1 f6       	brne	.-72     	; 0x360 <ABORT+0x8a>
	            break;
            }
            t = t->next;
        }
    }
    ENABLE(status);
     3a8:	67 ff       	sbrs	r22, 7
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <ABORT+0xd8>
     3ac:	78 94       	sei
     3ae:	08 95       	ret

000003b0 <T_RESET>:
}

void T_RESET(Timer *t) {
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
    t->accum = STATUS() ? current->msg->baseline : timestamp;
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	07 fe       	sbrs	r0, 7
     3ba:	0c c0       	rjmp	.+24     	; 0x3d4 <T_RESET+0x24>
     3bc:	e0 91 45 01 	lds	r30, 0x0145
     3c0:	f0 91 46 01 	lds	r31, 0x0146
     3c4:	02 80       	ldd	r0, Z+2	; 0x02
     3c6:	f3 81       	ldd	r31, Z+3	; 0x03
     3c8:	e0 2d       	mov	r30, r0
     3ca:	82 81       	ldd	r24, Z+2	; 0x02
     3cc:	93 81       	ldd	r25, Z+3	; 0x03
     3ce:	a4 81       	ldd	r26, Z+4	; 0x04
     3d0:	b5 81       	ldd	r27, Z+5	; 0x05
     3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <T_RESET+0x34>
     3d4:	80 91 64 01 	lds	r24, 0x0164
     3d8:	90 91 65 01 	lds	r25, 0x0165
     3dc:	a0 91 66 01 	lds	r26, 0x0166
     3e0:	b0 91 67 01 	lds	r27, 0x0167
     3e4:	88 83       	st	Y, r24
     3e6:	99 83       	std	Y+1, r25	; 0x01
     3e8:	aa 83       	std	Y+2, r26	; 0x02
     3ea:	bb 83       	std	Y+3, r27	; 0x03
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <T_SAMPLE>:

Time T_SAMPLE(Timer *t) {
     3f2:	dc 01       	movw	r26, r24
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	0c c0       	rjmp	.+24     	; 0x412 <T_SAMPLE+0x20>
     3fa:	e0 91 45 01 	lds	r30, 0x0145
     3fe:	f0 91 46 01 	lds	r31, 0x0146
     402:	02 80       	ldd	r0, Z+2	; 0x02
     404:	f3 81       	ldd	r31, Z+3	; 0x03
     406:	e0 2d       	mov	r30, r0
     408:	22 81       	ldd	r18, Z+2	; 0x02
     40a:	33 81       	ldd	r19, Z+3	; 0x03
     40c:	44 81       	ldd	r20, Z+4	; 0x04
     40e:	55 81       	ldd	r21, Z+5	; 0x05
     410:	08 c0       	rjmp	.+16     	; 0x422 <T_SAMPLE+0x30>
     412:	20 91 64 01 	lds	r18, 0x0164
     416:	30 91 65 01 	lds	r19, 0x0165
     41a:	40 91 66 01 	lds	r20, 0x0166
     41e:	50 91 67 01 	lds	r21, 0x0167
     422:	8d 91       	ld	r24, X+
     424:	9d 91       	ld	r25, X+
     426:	0d 90       	ld	r0, X+
     428:	bc 91       	ld	r27, X
     42a:	a0 2d       	mov	r26, r0
     42c:	28 1b       	sub	r18, r24
     42e:	39 0b       	sbc	r19, r25
     430:	4a 0b       	sbc	r20, r26
     432:	5b 0b       	sbc	r21, r27
}
     434:	b9 01       	movw	r22, r18
     436:	ca 01       	movw	r24, r20
     438:	08 95       	ret

0000043a <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
    char status;
    Time now;
    DISABLE(status);
     442:	6f b7       	in	r22, 0x3f	; 63
     444:	f8 94       	cli
    TIMERGET(now);
     446:	40 91 68 01 	lds	r20, 0x0168
     44a:	50 91 69 01 	lds	r21, 0x0169
     44e:	20 91 84 00 	lds	r18, 0x0084
     452:	30 91 85 00 	lds	r19, 0x0085
     456:	b0 99       	sbic	0x16, 0	; 22
     458:	10 c0       	rjmp	.+32     	; 0x47a <CURRENT_OFFSET+0x40>
     45a:	ca 01       	movw	r24, r20
     45c:	aa 27       	eor	r26, r26
     45e:	97 fd       	sbrc	r25, 7
     460:	a0 95       	com	r26
     462:	ba 2f       	mov	r27, r26
     464:	8c 01       	movw	r16, r24
     466:	ff 24       	eor	r15, r15
     468:	ee 24       	eor	r14, r14
     46a:	c9 01       	movw	r24, r18
     46c:	a0 e0       	ldi	r26, 0x00	; 0
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e8 2a       	or	r14, r24
     472:	f9 2a       	or	r15, r25
     474:	0a 2b       	or	r16, r26
     476:	1b 2b       	or	r17, r27
     478:	14 c0       	rjmp	.+40     	; 0x4a2 <CURRENT_OFFSET+0x68>
     47a:	20 91 84 00 	lds	r18, 0x0084
     47e:	30 91 85 00 	lds	r19, 0x0085
     482:	4f 5f       	subi	r20, 0xFF	; 255
     484:	5f 4f       	sbci	r21, 0xFF	; 255
     486:	ca 01       	movw	r24, r20
     488:	aa 27       	eor	r26, r26
     48a:	97 fd       	sbrc	r25, 7
     48c:	a0 95       	com	r26
     48e:	ba 2f       	mov	r27, r26
     490:	8c 01       	movw	r16, r24
     492:	ff 24       	eor	r15, r15
     494:	ee 24       	eor	r14, r14
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	e2 2a       	or	r14, r18
     49c:	f3 2a       	or	r15, r19
     49e:	04 2b       	or	r16, r20
     4a0:	15 2b       	or	r17, r21
    ENABLE(status);
     4a2:	67 ff       	sbrs	r22, 7
     4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <CURRENT_OFFSET+0x86>
     4a6:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
     4a8:	e0 91 45 01 	lds	r30, 0x0145
     4ac:	f0 91 46 01 	lds	r31, 0x0146
     4b0:	02 80       	ldd	r0, Z+2	; 0x02
     4b2:	f3 81       	ldd	r31, Z+3	; 0x03
     4b4:	e0 2d       	mov	r30, r0
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	a4 81       	ldd	r26, Z+4	; 0x04
     4bc:	b5 81       	ldd	r27, Z+5	; 0x05
     4be:	08 c0       	rjmp	.+16     	; 0x4d0 <CURRENT_OFFSET+0x96>
     4c0:	80 91 64 01 	lds	r24, 0x0164
     4c4:	90 91 65 01 	lds	r25, 0x0165
     4c8:	a0 91 66 01 	lds	r26, 0x0166
     4cc:	b0 91 67 01 	lds	r27, 0x0167
     4d0:	a8 01       	movw	r20, r16
     4d2:	97 01       	movw	r18, r14
     4d4:	28 1b       	sub	r18, r24
     4d6:	39 0b       	sbc	r19, r25
     4d8:	4a 0b       	sbc	r20, r26
     4da:	5b 0b       	sbc	r21, r27
}
     4dc:	b9 01       	movw	r22, r18
     4de:	ca 01       	movw	r24, r20
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	08 95       	ret

000004ea <install>:
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
    if (i >= 0 && i < N_VECTORS) {
     4f0:	42 31       	cpi	r20, 0x12	; 18
     4f2:	b0 f4       	brcc	.+44     	; 0x520 <__stack+0x21>
        char status;
        DISABLE(status);
     4f4:	2f b7       	in	r18, 0x3f	; 63
     4f6:	f8 94       	cli
        otable[i] = obj;
     4f8:	e4 2f       	mov	r30, r20
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	df 01       	movw	r26, r30
     502:	a6 59       	subi	r26, 0x96	; 150
     504:	be 4f       	sbci	r27, 0xFE	; 254
     506:	cd 93       	st	X+, r28
     508:	dc 93       	st	X, r29
        mtable[i] = m;
     50a:	ee 5f       	subi	r30, 0xFE	; 254
     50c:	fd 4f       	sbci	r31, 0xFD	; 253
     50e:	71 83       	std	Z+1, r23	; 0x01
     510:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9b 83       	std	Y+3, r25	; 0x03
     518:	8a 83       	std	Y+2, r24	; 0x02
        ENABLE(status);
     51a:	27 ff       	sbrs	r18, 7
     51c:	01 c0       	rjmp	.+2      	; 0x520 <__stack+0x21>
     51e:	78 94       	sei
    }
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	00 d0       	rcall	.+0      	; 0x52c <initialize+0x6>
     52c:	00 d0       	rcall	.+0      	; 0x52e <initialize+0x8>
     52e:	00 d0       	rcall	.+0      	; 0x530 <initialize+0xa>
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	83 e5       	ldi	r24, 0x53	; 83
     536:	92 e0       	ldi	r25, 0x02	; 2
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     538:	23 e3       	ldi	r18, 0x33	; 51
     53a:	33 e0       	ldi	r19, 0x03	; 3
        messages[i].next = &messages[i+1];
     53c:	fc 01       	movw	r30, r24
     53e:	70 97       	sbiw	r30, 0x10	; 16
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	80 83       	st	Z, r24
     544:	40 96       	adiw	r24, 0x10	; 16
static void initialize(void) {
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     546:	82 17       	cp	r24, r18
     548:	93 07       	cpc	r25, r19
     54a:	c1 f7       	brne	.-16     	; 0x53c <initialize+0x16>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     54c:	10 92 24 03 	sts	0x0324, r1
     550:	10 92 23 03 	sts	0x0323, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     554:	8b ea       	ldi	r24, 0xAB	; 171
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 8f 01 	sts	0x018F, r25
     55c:	80 93 8e 01 	sts	0x018E, r24
     560:	4d 96       	adiw	r24, 0x1d	; 29
     562:	90 93 ac 01 	sts	0x01AC, r25
     566:	80 93 ab 01 	sts	0x01AB, r24
     56a:	ca 97       	sbiw	r24, 0x3a	; 58
     56c:	25 ee       	ldi	r18, 0xE5	; 229
     56e:	31 e0       	ldi	r19, 0x01	; 1
     570:	30 93 c9 01 	sts	0x01C9, r19
     574:	20 93 c8 01 	sts	0x01C8, r18
    threads[NTHREADS-1].next = NULL;
     578:	10 92 e6 01 	sts	0x01E6, r1
     57c:	10 92 e5 01 	sts	0x01E5, r1
     580:	2f e8       	ldi	r18, 0x8F	; 143
     582:	33 e0       	ldi	r19, 0x03	; 3
     584:	3c 83       	std	Y+4, r19	; 0x04
     586:	2b 83       	std	Y+3, r18	; 0x03
     588:	ac 01       	movw	r20, r24
     58a:	4c 5f       	subi	r20, 0xFC	; 252
     58c:	5f 4f       	sbci	r21, 0xFF	; 255
     58e:	5a 83       	std	Y+2, r21	; 0x02
     590:	49 83       	std	Y+1, r20	; 0x01
     592:	1e 82       	std	Y+6, r1	; 0x06
     594:	1d 82       	std	Y+5, r1	; 0x05
    
    for (i=0; i<NTHREADS; i++) {
        setjmp( threads[i].context );
     596:	ad 81       	ldd	r26, Y+5	; 0x05
     598:	be 81       	ldd	r27, Y+6	; 0x06
     59a:	ed e1       	ldi	r30, 0x1D	; 29
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	ae 9f       	mul	r26, r30
     5a0:	c0 01       	movw	r24, r0
     5a2:	af 9f       	mul	r26, r31
     5a4:	90 0d       	add	r25, r0
     5a6:	be 9f       	mul	r27, r30
     5a8:	90 0d       	add	r25, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	06 96       	adiw	r24, 0x06	; 6
     5ae:	82 57       	subi	r24, 0x72	; 114
     5b0:	9e 4f       	sbci	r25, 0xFE	; 254
     5b2:	0e 94 8e 11 	call	0x231c	; 0x231c <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     5b6:	2d 81       	ldd	r18, Y+5	; 0x05
     5b8:	3e 81       	ldd	r19, Y+6	; 0x06
     5ba:	4d e1       	ldi	r20, 0x1D	; 29
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	24 9f       	mul	r18, r20
     5c0:	f0 01       	movw	r30, r0
     5c2:	25 9f       	mul	r18, r21
     5c4:	f0 0d       	add	r31, r0
     5c6:	34 9f       	mul	r19, r20
     5c8:	f0 0d       	add	r31, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	36 96       	adiw	r30, 0x06	; 6
     5ce:	e2 57       	subi	r30, 0x72	; 114
     5d0:	fe 4f       	sbci	r31, 0xFE	; 254
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	91 8b       	std	Z+17, r25	; 0x11
     5d8:	80 8b       	std	Z+16, r24	; 0x10
     5da:	93 8b       	std	Z+19, r25	; 0x13
     5dc:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     5de:	aa eb       	ldi	r26, 0xBA	; 186
     5e0:	bc e0       	ldi	r27, 0x0C	; 12
     5e2:	b6 8b       	std	Z+22, r27	; 0x16
     5e4:	a5 8b       	std	Z+21, r26	; 0x15
        threads[i].waitsFor = NULL;
     5e6:	e9 81       	ldd	r30, Y+1	; 0x01
     5e8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ea:	11 82       	std	Z+1, r1	; 0x01
     5ec:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     5ee:	2f 5f       	subi	r18, 0xFF	; 255
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
     5f2:	3e 83       	std	Y+6, r19	; 0x06
     5f4:	2d 83       	std	Y+5, r18	; 0x05
     5f6:	80 5a       	subi	r24, 0xA0	; 160
     5f8:	9f 4f       	sbci	r25, 0xFF	; 255
     5fa:	9c 83       	std	Y+4, r25	; 0x04
     5fc:	8b 83       	std	Y+3, r24	; 0x03
     5fe:	7d 96       	adiw	r30, 0x1d	; 29
     600:	fa 83       	std	Y+2, r31	; 0x02
     602:	e9 83       	std	Y+1, r30	; 0x01
     604:	24 30       	cpi	r18, 0x04	; 4
     606:	31 05       	cpc	r19, r1
     608:	31 f6       	brne	.-116    	; 0x596 <initialize+0x70>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     60a:	10 92 27 02 	sts	0x0227, r1
     60e:	10 92 26 02 	sts	0x0226, r1
    thread0.waitsFor = NULL;
     612:	10 92 2b 02 	sts	0x022B, r1
     616:	10 92 2a 02 	sts	0x022A, r1
    thread0.msg = NULL;
     61a:	10 92 29 02 	sts	0x0229, r1
     61e:	10 92 28 02 	sts	0x0228, r1
     622:	ea e0       	ldi	r30, 0x0A	; 10
     624:	f1 e0       	ldi	r31, 0x01	; 1
     626:	01 c0       	rjmp	.+2      	; 0x62a <initialize+0x104>

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
    DUMPC(*s++);
     628:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     62a:	80 81       	ld	r24, Z
     62c:	88 23       	and	r24, r24
     62e:	e1 f7       	brne	.-8      	; 0x628 <initialize+0x102>
     630:	e8 e1       	ldi	r30, 0x18	; 24
     632:	f1 e0       	ldi	r31, 0x01	; 1
     634:	01 c0       	rjmp	.+2      	; 0x638 <initialize+0x112>
    DUMPC(*s++);
     636:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     638:	80 81       	ld	r24, Z
     63a:	88 23       	and	r24, r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <initialize+0x110>
     63e:	eb e2       	ldi	r30, 0x2B	; 43
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	01 c0       	rjmp	.+2      	; 0x646 <initialize+0x120>
    DUMPC(*s++);
     644:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     646:	80 81       	ld	r24, Z
     648:	88 23       	and	r24, r24
     64a:	e1 f7       	brne	.-8      	; 0x644 <initialize+0x11e>
    thread0.msg = NULL;
    
    DUMP("\n\rTinyTimber ");
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
     64c:	e1 e6       	ldi	r30, 0x61	; 97
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 e8       	ldi	r24, 0x80	; 128
     652:	80 83       	st	Z, r24
     654:	10 82       	st	Z, r1
     656:	10 92 85 00 	sts	0x0085, r1
     65a:	10 92 84 00 	sts	0x0084, r1
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	80 93 81 00 	sts	0x0081, r24
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 6f 00 	sts	0x006F, r24
}
     66a:	26 96       	adiw	r28, 0x06	; 6
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	08 95       	ret

0000067c <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	00 d0       	rcall	.+0      	; 0x682 <dispatch+0x6>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	9a 83       	std	Y+2, r25	; 0x02
     688:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     68a:	80 91 45 01 	lds	r24, 0x0145
     68e:	90 91 46 01 	lds	r25, 0x0146
     692:	06 96       	adiw	r24, 0x06	; 6
     694:	0e 94 8e 11 	call	0x231c	; 0x231c <setjmp>
     698:	89 2b       	or	r24, r25
     69a:	59 f4       	brne	.+22     	; 0x6b2 <dispatch+0x36>
        current = next;
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	9a 81       	ldd	r25, Y+2	; 0x02
     6a0:	90 93 46 01 	sts	0x0146, r25
     6a4:	80 93 45 01 	sts	0x0145, r24
        longjmp( next->context, 1 );
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	06 96       	adiw	r24, 0x06	; 6
     6ae:	0e 94 ae 11 	call	0x235c	; 0x235c <longjmp>
    }
}
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <schedule>:
    while (1) {
        SLEEP();
    }
}

static void schedule(void) {
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
    Msg topMsg = activeStack->msg;
     6c0:	60 91 43 01 	lds	r22, 0x0143
     6c4:	70 91 44 01 	lds	r23, 0x0144
     6c8:	fb 01       	movw	r30, r22
     6ca:	c2 81       	ldd	r28, Z+2	; 0x02
     6cc:	d3 81       	ldd	r29, Z+3	; 0x03
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     6ce:	a0 91 60 01 	lds	r26, 0x0160
     6d2:	b0 91 61 01 	lds	r27, 0x0161
     6d6:	10 97       	sbiw	r26, 0x00	; 0
     6d8:	39 f1       	breq	.+78     	; 0x728 <schedule+0x6c>
     6da:	e0 91 41 01 	lds	r30, 0x0141
     6de:	f0 91 42 01 	lds	r31, 0x0142
     6e2:	30 97       	sbiw	r30, 0x00	; 0
     6e4:	09 f1       	breq	.+66     	; 0x728 <schedule+0x6c>
     6e6:	20 97       	sbiw	r28, 0x00	; 0
     6e8:	81 f0       	breq	.+32     	; 0x70a <schedule+0x4e>
     6ea:	16 96       	adiw	r26, 0x06	; 6
     6ec:	8d 91       	ld	r24, X+
     6ee:	9d 91       	ld	r25, X+
     6f0:	0d 90       	ld	r0, X+
     6f2:	bc 91       	ld	r27, X
     6f4:	a0 2d       	mov	r26, r0
     6f6:	2e 81       	ldd	r18, Y+6	; 0x06
     6f8:	3f 81       	ldd	r19, Y+7	; 0x07
     6fa:	48 85       	ldd	r20, Y+8	; 0x08
     6fc:	59 85       	ldd	r21, Y+9	; 0x09
     6fe:	82 1b       	sub	r24, r18
     700:	93 0b       	sbc	r25, r19
     702:	a4 0b       	sbc	r26, r20
     704:	b5 0b       	sbc	r27, r21
     706:	b7 ff       	sbrs	r27, 7
     708:	0f c0       	rjmp	.+30     	; 0x728 <schedule+0x6c>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	90 93 42 01 	sts	0x0142, r25
     712:	80 93 41 01 	sts	0x0141, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
     716:	71 83       	std	Z+1, r23	; 0x01
     718:	60 83       	st	Z, r22
    *stack = t;
     71a:	f0 93 44 01 	sts	0x0144, r31
     71e:	e0 93 43 01 	sts	0x0143, r30

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
        push(pop(&threadPool), &activeStack);
        dispatch(activeStack);
     722:	cf 01       	movw	r24, r30
     724:	0e 94 3e 03 	call	0x67c	; 0x67c <dispatch>
    }
}
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <tinytimber>:
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
        ENABLE(status);
    }
}

int tinytimber(Object *obj, Method m, int arg) {
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	7c 01       	movw	r14, r24
     73c:	eb 01       	movw	r28, r22
     73e:	8a 01       	movw	r16, r20
    char status;
    DISABLE(status);
     740:	8f b7       	in	r24, 0x3f	; 63
     742:	f8 94       	cli
    initialize();
     744:	0e 94 93 02 	call	0x526	; 0x526 <initialize>
    ENABLE(1);
     748:	78 94       	sei
    if (m != NULL)
     74a:	20 97       	sbiw	r28, 0x00	; 0
     74c:	21 f0       	breq	.+8      	; 0x756 <tinytimber+0x28>
        m(obj, arg);
     74e:	b8 01       	movw	r22, r16
     750:	c7 01       	movw	r24, r14
     752:	fe 01       	movw	r30, r28
     754:	09 95       	icall
    DISABLE(status);
     756:	8f b7       	in	r24, 0x3f	; 63
     758:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
     75a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    ENABLE(1);
     75e:	78 94       	sei
    while (1) {
        SLEEP();
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	83 bf       	out	0x33, r24	; 51
     764:	88 95       	sleep
     766:	fd cf       	rjmp	.-6      	; 0x762 <tinytimber+0x34>

00000768 <__vector_7>:
    TIMER_OCLR();
    overflows++;
    TIMERSET(timerQ);
}

TIMER_COMPARE_INTERRUPT {
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	8f 92       	push	r8
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
     7a2:	c0 90 68 01 	lds	r12, 0x0168
     7a6:	d0 90 69 01 	lds	r13, 0x0169
     7aa:	20 91 84 00 	lds	r18, 0x0084
     7ae:	30 91 85 00 	lds	r19, 0x0085
     7b2:	b0 99       	sbic	0x16, 0	; 22
     7b4:	0a c0       	rjmp	.+20     	; 0x7ca <__vector_7+0x62>
     7b6:	c6 01       	movw	r24, r12
     7b8:	aa 27       	eor	r26, r26
     7ba:	97 fd       	sbrc	r25, 7
     7bc:	a0 95       	com	r26
     7be:	ba 2f       	mov	r27, r26
     7c0:	8c 01       	movw	r16, r24
     7c2:	ff 24       	eor	r15, r15
     7c4:	ee 24       	eor	r14, r14
     7c6:	c9 01       	movw	r24, r18
     7c8:	12 c0       	rjmp	.+36     	; 0x7ee <__vector_7+0x86>
     7ca:	80 91 84 00 	lds	r24, 0x0084
     7ce:	90 91 85 00 	lds	r25, 0x0085
     7d2:	08 94       	sec
     7d4:	c1 1c       	adc	r12, r1
     7d6:	d1 1c       	adc	r13, r1
     7d8:	96 01       	movw	r18, r12
     7da:	44 27       	eor	r20, r20
     7dc:	37 fd       	sbrc	r19, 7
     7de:	40 95       	com	r20
     7e0:	54 2f       	mov	r21, r20
     7e2:	08 94       	sec
     7e4:	c1 08       	sbc	r12, r1
     7e6:	d1 08       	sbc	r13, r1
     7e8:	89 01       	movw	r16, r18
     7ea:	ff 24       	eor	r15, r15
     7ec:	ee 24       	eor	r14, r14
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	e8 2a       	or	r14, r24
     7f4:	f9 2a       	or	r15, r25
     7f6:	0a 2b       	or	r16, r26
     7f8:	1b 2b       	or	r17, r27
     7fa:	b0 90 60 01 	lds	r11, 0x0160
     7fe:	a0 90 61 01 	lds	r10, 0x0161
     802:	c0 91 62 01 	lds	r28, 0x0162
     806:	d0 91 63 01 	lds	r29, 0x0163
     80a:	2c c0       	rjmp	.+88     	; 0x864 <__vector_7+0xfc>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
     80c:	98 80       	ld	r9, Y
     80e:	89 80       	ldd	r8, Y+1	; 0x01
     810:	8b 2d       	mov	r24, r11
     812:	9a 2d       	mov	r25, r10
     814:	9c 01       	movw	r18, r24
     816:	f9 01       	movw	r30, r18
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	05 c0       	rjmp	.+10     	; 0x828 <__vector_7+0xc0>
/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
     81e:	bf 01       	movw	r22, r30
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	9c 01       	movw	r18, r24
     826:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
     828:	30 97       	sbiw	r30, 0x00	; 0
     82a:	69 f0       	breq	.+26     	; 0x846 <__vector_7+0xde>
     82c:	26 81       	ldd	r18, Z+6	; 0x06
     82e:	37 81       	ldd	r19, Z+7	; 0x07
     830:	40 85       	ldd	r20, Z+8	; 0x08
     832:	51 85       	ldd	r21, Z+9	; 0x09
     834:	8e 81       	ldd	r24, Y+6	; 0x06
     836:	9f 81       	ldd	r25, Y+7	; 0x07
     838:	a8 85       	ldd	r26, Y+8	; 0x08
     83a:	b9 85       	ldd	r27, Y+9	; 0x09
     83c:	82 17       	cp	r24, r18
     83e:	93 07       	cpc	r25, r19
     840:	a4 07       	cpc	r26, r20
     842:	b5 07       	cpc	r27, r21
     844:	64 f7       	brge	.-40     	; 0x81e <__vector_7+0xb6>
        prev = q;
        q = q->next;
    }
    p->next = q;
     846:	f9 83       	std	Y+1, r31	; 0x01
     848:	e8 83       	st	Y, r30
    if (prev == NULL)
     84a:	61 15       	cp	r22, r1
     84c:	71 05       	cpc	r23, r1
     84e:	19 f4       	brne	.+6      	; 0x856 <__vector_7+0xee>
     850:	bc 2e       	mov	r11, r28
     852:	ad 2e       	mov	r10, r29
     854:	03 c0       	rjmp	.+6      	; 0x85c <__vector_7+0xf4>
        *queue = p;
    else
        prev->next = p;
     856:	fb 01       	movw	r30, r22
     858:	d1 83       	std	Z+1, r29	; 0x01
     85a:	c0 83       	st	Z, r28
     85c:	89 2d       	mov	r24, r9
     85e:	98 2d       	mov	r25, r8
     860:	9c 01       	movw	r18, r24
     862:	e9 01       	movw	r28, r18

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
     864:	20 97       	sbiw	r28, 0x00	; 0
     866:	41 f1       	breq	.+80     	; 0x8b8 <__vector_7+0x150>
     868:	2a 81       	ldd	r18, Y+2	; 0x02
     86a:	3b 81       	ldd	r19, Y+3	; 0x03
     86c:	4c 81       	ldd	r20, Y+4	; 0x04
     86e:	5d 81       	ldd	r21, Y+5	; 0x05
     870:	da 01       	movw	r26, r20
     872:	c9 01       	movw	r24, r18
     874:	8e 19       	sub	r24, r14
     876:	9f 09       	sbc	r25, r15
     878:	a0 0b       	sbc	r26, r16
     87a:	b1 0b       	sbc	r27, r17
     87c:	18 16       	cp	r1, r24
     87e:	19 06       	cpc	r1, r25
     880:	1a 06       	cpc	r1, r26
     882:	1b 06       	cpc	r1, r27
     884:	1c f6       	brge	.-122    	; 0x80c <__vector_7+0xa4>
     886:	44 c0       	rjmp	.+136    	; 0x910 <__vector_7+0x1a8>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     888:	80 91 84 00 	lds	r24, 0x0084
     88c:	90 91 85 00 	lds	r25, 0x0085
     890:	80 95       	com	r24
     892:	90 95       	com	r25
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	89 2b       	or	r24, r25
     89a:	31 f4       	brne	.+12     	; 0x8a8 <__vector_7+0x140>
     89c:	20 91 84 00 	lds	r18, 0x0084
     8a0:	30 91 85 00 	lds	r19, 0x0085
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	30 93 89 00 	sts	0x0089, r19
     8ac:	20 93 88 00 	sts	0x0088, r18
     8b0:	80 91 6f 00 	lds	r24, 0x006F
     8b4:	82 60       	ori	r24, 0x02	; 2
     8b6:	0b c0       	rjmp	.+22     	; 0x8ce <__vector_7+0x166>
     8b8:	b0 92 60 01 	sts	0x0160, r11
     8bc:	a0 92 61 01 	sts	0x0161, r10
     8c0:	10 92 63 01 	sts	0x0163, r1
     8c4:	10 92 62 01 	sts	0x0162, r1
     8c8:	80 91 6f 00 	lds	r24, 0x006F
     8cc:	8d 7f       	andi	r24, 0xFD	; 253
     8ce:	80 93 6f 00 	sts	0x006F, r24
    schedule();
     8d2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti
     910:	b0 92 60 01 	sts	0x0160, r11
     914:	a0 92 61 01 	sts	0x0161, r10
     918:	d0 93 63 01 	sts	0x0163, r29
     91c:	c0 93 62 01 	sts	0x0162, r28
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     920:	ca 01       	movw	r24, r20
     922:	bb 27       	eor	r27, r27
     924:	97 fd       	sbrc	r25, 7
     926:	b0 95       	com	r27
     928:	ab 2f       	mov	r26, r27
     92a:	c8 16       	cp	r12, r24
     92c:	d9 06       	cpc	r13, r25
     92e:	61 f6       	brne	.-104    	; 0x8c8 <__vector_7+0x160>
     930:	ab cf       	rjmp	.-170    	; 0x888 <__vector_7+0x120>

00000932 <__vector_22>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
IRQ(IRQ_LCD,             LCD_vect);
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	2f 93       	push	r18
     93e:	3f 93       	push	r19
     940:	4f 93       	push	r20
     942:	5f 93       	push	r21
     944:	6f 93       	push	r22
     946:	7f 93       	push	r23
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	ef 93       	push	r30
     952:	ff 93       	push	r31
     954:	60 91 68 01 	lds	r22, 0x0168
     958:	70 91 69 01 	lds	r23, 0x0169
     95c:	20 91 84 00 	lds	r18, 0x0084
     960:	30 91 85 00 	lds	r19, 0x0085
     964:	cb 01       	movw	r24, r22
     966:	aa 27       	eor	r26, r26
     968:	97 fd       	sbrc	r25, 7
     96a:	a0 95       	com	r26
     96c:	ba 2f       	mov	r27, r26
     96e:	dc 01       	movw	r26, r24
     970:	99 27       	eor	r25, r25
     972:	88 27       	eor	r24, r24
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	82 2b       	or	r24, r18
     97a:	93 2b       	or	r25, r19
     97c:	a4 2b       	or	r26, r20
     97e:	b5 2b       	or	r27, r21
     980:	80 93 64 01 	sts	0x0164, r24
     984:	90 93 65 01 	sts	0x0165, r25
     988:	a0 93 66 01 	sts	0x0166, r26
     98c:	b0 93 67 01 	sts	0x0167, r27
     990:	b0 9b       	sbis	0x16, 0	; 22
     992:	1c c0       	rjmp	.+56     	; 0x9cc <__vector_22+0x9a>
     994:	20 91 84 00 	lds	r18, 0x0084
     998:	30 91 85 00 	lds	r19, 0x0085
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	cb 01       	movw	r24, r22
     9a2:	aa 27       	eor	r26, r26
     9a4:	97 fd       	sbrc	r25, 7
     9a6:	a0 95       	com	r26
     9a8:	ba 2f       	mov	r27, r26
     9aa:	dc 01       	movw	r26, r24
     9ac:	99 27       	eor	r25, r25
     9ae:	88 27       	eor	r24, r24
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	82 2b       	or	r24, r18
     9b6:	93 2b       	or	r25, r19
     9b8:	a4 2b       	or	r26, r20
     9ba:	b5 2b       	or	r27, r21
     9bc:	80 93 64 01 	sts	0x0164, r24
     9c0:	90 93 65 01 	sts	0x0165, r25
     9c4:	a0 93 66 01 	sts	0x0166, r26
     9c8:	b0 93 67 01 	sts	0x0167, r27
     9cc:	e0 91 24 02 	lds	r30, 0x0224
     9d0:	f0 91 25 02 	lds	r31, 0x0225
     9d4:	30 97       	sbiw	r30, 0x00	; 0
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <__vector_22+0xb4>
     9d8:	61 e1       	ldi	r22, 0x11	; 17
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 91 8c 01 	lds	r24, 0x018C
     9e0:	90 91 8d 01 	lds	r25, 0x018D
     9e4:	09 95       	icall
     9e6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     9ea:	ff 91       	pop	r31
     9ec:	ef 91       	pop	r30
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	7f 91       	pop	r23
     9f8:	6f 91       	pop	r22
     9fa:	5f 91       	pop	r21
     9fc:	4f 91       	pop	r20
     9fe:	3f 91       	pop	r19
     a00:	2f 91       	pop	r18
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_21>:
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
     a2e:	60 91 68 01 	lds	r22, 0x0168
     a32:	70 91 69 01 	lds	r23, 0x0169
     a36:	20 91 84 00 	lds	r18, 0x0084
     a3a:	30 91 85 00 	lds	r19, 0x0085
     a3e:	cb 01       	movw	r24, r22
     a40:	aa 27       	eor	r26, r26
     a42:	97 fd       	sbrc	r25, 7
     a44:	a0 95       	com	r26
     a46:	ba 2f       	mov	r27, r26
     a48:	dc 01       	movw	r26, r24
     a4a:	99 27       	eor	r25, r25
     a4c:	88 27       	eor	r24, r24
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	82 2b       	or	r24, r18
     a54:	93 2b       	or	r25, r19
     a56:	a4 2b       	or	r26, r20
     a58:	b5 2b       	or	r27, r21
     a5a:	80 93 64 01 	sts	0x0164, r24
     a5e:	90 93 65 01 	sts	0x0165, r25
     a62:	a0 93 66 01 	sts	0x0166, r26
     a66:	b0 93 67 01 	sts	0x0167, r27
     a6a:	b0 9b       	sbis	0x16, 0	; 22
     a6c:	1c c0       	rjmp	.+56     	; 0xaa6 <__vector_21+0x9a>
     a6e:	20 91 84 00 	lds	r18, 0x0084
     a72:	30 91 85 00 	lds	r19, 0x0085
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	cb 01       	movw	r24, r22
     a7c:	aa 27       	eor	r26, r26
     a7e:	97 fd       	sbrc	r25, 7
     a80:	a0 95       	com	r26
     a82:	ba 2f       	mov	r27, r26
     a84:	dc 01       	movw	r26, r24
     a86:	99 27       	eor	r25, r25
     a88:	88 27       	eor	r24, r24
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	82 2b       	or	r24, r18
     a90:	93 2b       	or	r25, r19
     a92:	a4 2b       	or	r26, r20
     a94:	b5 2b       	or	r27, r21
     a96:	80 93 64 01 	sts	0x0164, r24
     a9a:	90 93 65 01 	sts	0x0165, r25
     a9e:	a0 93 66 01 	sts	0x0166, r26
     aa2:	b0 93 67 01 	sts	0x0167, r27
     aa6:	e0 91 22 02 	lds	r30, 0x0222
     aaa:	f0 91 23 02 	lds	r31, 0x0223
     aae:	30 97       	sbiw	r30, 0x00	; 0
     ab0:	39 f0       	breq	.+14     	; 0xac0 <__vector_21+0xb4>
     ab2:	60 e1       	ldi	r22, 0x10	; 16
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 91 8a 01 	lds	r24, 0x018A
     aba:	90 91 8b 01 	lds	r25, 0x018B
     abe:	09 95       	icall
     ac0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	bf 91       	pop	r27
     aca:	af 91       	pop	r26
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	7f 91       	pop	r23
     ad2:	6f 91       	pop	r22
     ad4:	5f 91       	pop	r21
     ad6:	4f 91       	pop	r20
     ad8:	3f 91       	pop	r19
     ada:	2f 91       	pop	r18
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0
     ae2:	1f 90       	pop	r1
     ae4:	18 95       	reti

00000ae6 <__vector_20>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
     b08:	60 91 68 01 	lds	r22, 0x0168
     b0c:	70 91 69 01 	lds	r23, 0x0169
     b10:	20 91 84 00 	lds	r18, 0x0084
     b14:	30 91 85 00 	lds	r19, 0x0085
     b18:	cb 01       	movw	r24, r22
     b1a:	aa 27       	eor	r26, r26
     b1c:	97 fd       	sbrc	r25, 7
     b1e:	a0 95       	com	r26
     b20:	ba 2f       	mov	r27, r26
     b22:	dc 01       	movw	r26, r24
     b24:	99 27       	eor	r25, r25
     b26:	88 27       	eor	r24, r24
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	82 2b       	or	r24, r18
     b2e:	93 2b       	or	r25, r19
     b30:	a4 2b       	or	r26, r20
     b32:	b5 2b       	or	r27, r21
     b34:	80 93 64 01 	sts	0x0164, r24
     b38:	90 93 65 01 	sts	0x0165, r25
     b3c:	a0 93 66 01 	sts	0x0166, r26
     b40:	b0 93 67 01 	sts	0x0167, r27
     b44:	b0 9b       	sbis	0x16, 0	; 22
     b46:	1c c0       	rjmp	.+56     	; 0xb80 <__vector_20+0x9a>
     b48:	20 91 84 00 	lds	r18, 0x0084
     b4c:	30 91 85 00 	lds	r19, 0x0085
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	cb 01       	movw	r24, r22
     b56:	aa 27       	eor	r26, r26
     b58:	97 fd       	sbrc	r25, 7
     b5a:	a0 95       	com	r26
     b5c:	ba 2f       	mov	r27, r26
     b5e:	dc 01       	movw	r26, r24
     b60:	99 27       	eor	r25, r25
     b62:	88 27       	eor	r24, r24
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	82 2b       	or	r24, r18
     b6a:	93 2b       	or	r25, r19
     b6c:	a4 2b       	or	r26, r20
     b6e:	b5 2b       	or	r27, r21
     b70:	80 93 64 01 	sts	0x0164, r24
     b74:	90 93 65 01 	sts	0x0165, r25
     b78:	a0 93 66 01 	sts	0x0166, r26
     b7c:	b0 93 67 01 	sts	0x0167, r27
     b80:	e0 91 20 02 	lds	r30, 0x0220
     b84:	f0 91 21 02 	lds	r31, 0x0221
     b88:	30 97       	sbiw	r30, 0x00	; 0
     b8a:	39 f0       	breq	.+14     	; 0xb9a <__vector_20+0xb4>
     b8c:	6f e0       	ldi	r22, 0x0F	; 15
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 91 88 01 	lds	r24, 0x0188
     b94:	90 91 89 01 	lds	r25, 0x0189
     b98:	09 95       	icall
     b9a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <__vector_19>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
     be2:	60 91 68 01 	lds	r22, 0x0168
     be6:	70 91 69 01 	lds	r23, 0x0169
     bea:	20 91 84 00 	lds	r18, 0x0084
     bee:	30 91 85 00 	lds	r19, 0x0085
     bf2:	cb 01       	movw	r24, r22
     bf4:	aa 27       	eor	r26, r26
     bf6:	97 fd       	sbrc	r25, 7
     bf8:	a0 95       	com	r26
     bfa:	ba 2f       	mov	r27, r26
     bfc:	dc 01       	movw	r26, r24
     bfe:	99 27       	eor	r25, r25
     c00:	88 27       	eor	r24, r24
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	82 2b       	or	r24, r18
     c08:	93 2b       	or	r25, r19
     c0a:	a4 2b       	or	r26, r20
     c0c:	b5 2b       	or	r27, r21
     c0e:	80 93 64 01 	sts	0x0164, r24
     c12:	90 93 65 01 	sts	0x0165, r25
     c16:	a0 93 66 01 	sts	0x0166, r26
     c1a:	b0 93 67 01 	sts	0x0167, r27
     c1e:	b0 9b       	sbis	0x16, 0	; 22
     c20:	1c c0       	rjmp	.+56     	; 0xc5a <__vector_19+0x9a>
     c22:	20 91 84 00 	lds	r18, 0x0084
     c26:	30 91 85 00 	lds	r19, 0x0085
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	cb 01       	movw	r24, r22
     c30:	aa 27       	eor	r26, r26
     c32:	97 fd       	sbrc	r25, 7
     c34:	a0 95       	com	r26
     c36:	ba 2f       	mov	r27, r26
     c38:	dc 01       	movw	r26, r24
     c3a:	99 27       	eor	r25, r25
     c3c:	88 27       	eor	r24, r24
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	82 2b       	or	r24, r18
     c44:	93 2b       	or	r25, r19
     c46:	a4 2b       	or	r26, r20
     c48:	b5 2b       	or	r27, r21
     c4a:	80 93 64 01 	sts	0x0164, r24
     c4e:	90 93 65 01 	sts	0x0165, r25
     c52:	a0 93 66 01 	sts	0x0166, r26
     c56:	b0 93 67 01 	sts	0x0167, r27
     c5a:	e0 91 1e 02 	lds	r30, 0x021E
     c5e:	f0 91 1f 02 	lds	r31, 0x021F
     c62:	30 97       	sbiw	r30, 0x00	; 0
     c64:	39 f0       	breq	.+14     	; 0xc74 <__vector_19+0xb4>
     c66:	6e e0       	ldi	r22, 0x0E	; 14
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 91 86 01 	lds	r24, 0x0186
     c6e:	90 91 87 01 	lds	r25, 0x0187
     c72:	09 95       	icall
     c74:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_18>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
     cbc:	60 91 68 01 	lds	r22, 0x0168
     cc0:	70 91 69 01 	lds	r23, 0x0169
     cc4:	20 91 84 00 	lds	r18, 0x0084
     cc8:	30 91 85 00 	lds	r19, 0x0085
     ccc:	cb 01       	movw	r24, r22
     cce:	aa 27       	eor	r26, r26
     cd0:	97 fd       	sbrc	r25, 7
     cd2:	a0 95       	com	r26
     cd4:	ba 2f       	mov	r27, r26
     cd6:	dc 01       	movw	r26, r24
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	82 2b       	or	r24, r18
     ce2:	93 2b       	or	r25, r19
     ce4:	a4 2b       	or	r26, r20
     ce6:	b5 2b       	or	r27, r21
     ce8:	80 93 64 01 	sts	0x0164, r24
     cec:	90 93 65 01 	sts	0x0165, r25
     cf0:	a0 93 66 01 	sts	0x0166, r26
     cf4:	b0 93 67 01 	sts	0x0167, r27
     cf8:	b0 9b       	sbis	0x16, 0	; 22
     cfa:	1c c0       	rjmp	.+56     	; 0xd34 <__vector_18+0x9a>
     cfc:	20 91 84 00 	lds	r18, 0x0084
     d00:	30 91 85 00 	lds	r19, 0x0085
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	cb 01       	movw	r24, r22
     d0a:	aa 27       	eor	r26, r26
     d0c:	97 fd       	sbrc	r25, 7
     d0e:	a0 95       	com	r26
     d10:	ba 2f       	mov	r27, r26
     d12:	dc 01       	movw	r26, r24
     d14:	99 27       	eor	r25, r25
     d16:	88 27       	eor	r24, r24
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	82 2b       	or	r24, r18
     d1e:	93 2b       	or	r25, r19
     d20:	a4 2b       	or	r26, r20
     d22:	b5 2b       	or	r27, r21
     d24:	80 93 64 01 	sts	0x0164, r24
     d28:	90 93 65 01 	sts	0x0165, r25
     d2c:	a0 93 66 01 	sts	0x0166, r26
     d30:	b0 93 67 01 	sts	0x0167, r27
     d34:	e0 91 1c 02 	lds	r30, 0x021C
     d38:	f0 91 1d 02 	lds	r31, 0x021D
     d3c:	30 97       	sbiw	r30, 0x00	; 0
     d3e:	39 f0       	breq	.+14     	; 0xd4e <__vector_18+0xb4>
     d40:	6d e0       	ldi	r22, 0x0D	; 13
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	80 91 84 01 	lds	r24, 0x0184
     d48:	90 91 85 01 	lds	r25, 0x0185
     d4c:	09 95       	icall
     d4e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     d52:	ff 91       	pop	r31
     d54:	ef 91       	pop	r30
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_17>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
     d96:	60 91 68 01 	lds	r22, 0x0168
     d9a:	70 91 69 01 	lds	r23, 0x0169
     d9e:	20 91 84 00 	lds	r18, 0x0084
     da2:	30 91 85 00 	lds	r19, 0x0085
     da6:	cb 01       	movw	r24, r22
     da8:	aa 27       	eor	r26, r26
     daa:	97 fd       	sbrc	r25, 7
     dac:	a0 95       	com	r26
     dae:	ba 2f       	mov	r27, r26
     db0:	dc 01       	movw	r26, r24
     db2:	99 27       	eor	r25, r25
     db4:	88 27       	eor	r24, r24
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	82 2b       	or	r24, r18
     dbc:	93 2b       	or	r25, r19
     dbe:	a4 2b       	or	r26, r20
     dc0:	b5 2b       	or	r27, r21
     dc2:	80 93 64 01 	sts	0x0164, r24
     dc6:	90 93 65 01 	sts	0x0165, r25
     dca:	a0 93 66 01 	sts	0x0166, r26
     dce:	b0 93 67 01 	sts	0x0167, r27
     dd2:	b0 9b       	sbis	0x16, 0	; 22
     dd4:	1c c0       	rjmp	.+56     	; 0xe0e <__vector_17+0x9a>
     dd6:	20 91 84 00 	lds	r18, 0x0084
     dda:	30 91 85 00 	lds	r19, 0x0085
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	cb 01       	movw	r24, r22
     de4:	aa 27       	eor	r26, r26
     de6:	97 fd       	sbrc	r25, 7
     de8:	a0 95       	com	r26
     dea:	ba 2f       	mov	r27, r26
     dec:	dc 01       	movw	r26, r24
     dee:	99 27       	eor	r25, r25
     df0:	88 27       	eor	r24, r24
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	82 2b       	or	r24, r18
     df8:	93 2b       	or	r25, r19
     dfa:	a4 2b       	or	r26, r20
     dfc:	b5 2b       	or	r27, r21
     dfe:	80 93 64 01 	sts	0x0164, r24
     e02:	90 93 65 01 	sts	0x0165, r25
     e06:	a0 93 66 01 	sts	0x0166, r26
     e0a:	b0 93 67 01 	sts	0x0167, r27
     e0e:	e0 91 1a 02 	lds	r30, 0x021A
     e12:	f0 91 1b 02 	lds	r31, 0x021B
     e16:	30 97       	sbiw	r30, 0x00	; 0
     e18:	39 f0       	breq	.+14     	; 0xe28 <__vector_17+0xb4>
     e1a:	6c e0       	ldi	r22, 0x0C	; 12
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	80 91 82 01 	lds	r24, 0x0182
     e22:	90 91 83 01 	lds	r25, 0x0183
     e26:	09 95       	icall
     e28:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_16>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
     e70:	60 91 68 01 	lds	r22, 0x0168
     e74:	70 91 69 01 	lds	r23, 0x0169
     e78:	20 91 84 00 	lds	r18, 0x0084
     e7c:	30 91 85 00 	lds	r19, 0x0085
     e80:	cb 01       	movw	r24, r22
     e82:	aa 27       	eor	r26, r26
     e84:	97 fd       	sbrc	r25, 7
     e86:	a0 95       	com	r26
     e88:	ba 2f       	mov	r27, r26
     e8a:	dc 01       	movw	r26, r24
     e8c:	99 27       	eor	r25, r25
     e8e:	88 27       	eor	r24, r24
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	82 2b       	or	r24, r18
     e96:	93 2b       	or	r25, r19
     e98:	a4 2b       	or	r26, r20
     e9a:	b5 2b       	or	r27, r21
     e9c:	80 93 64 01 	sts	0x0164, r24
     ea0:	90 93 65 01 	sts	0x0165, r25
     ea4:	a0 93 66 01 	sts	0x0166, r26
     ea8:	b0 93 67 01 	sts	0x0167, r27
     eac:	b0 9b       	sbis	0x16, 0	; 22
     eae:	1c c0       	rjmp	.+56     	; 0xee8 <__vector_16+0x9a>
     eb0:	20 91 84 00 	lds	r18, 0x0084
     eb4:	30 91 85 00 	lds	r19, 0x0085
     eb8:	6f 5f       	subi	r22, 0xFF	; 255
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
     ebc:	cb 01       	movw	r24, r22
     ebe:	aa 27       	eor	r26, r26
     ec0:	97 fd       	sbrc	r25, 7
     ec2:	a0 95       	com	r26
     ec4:	ba 2f       	mov	r27, r26
     ec6:	dc 01       	movw	r26, r24
     ec8:	99 27       	eor	r25, r25
     eca:	88 27       	eor	r24, r24
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	82 2b       	or	r24, r18
     ed2:	93 2b       	or	r25, r19
     ed4:	a4 2b       	or	r26, r20
     ed6:	b5 2b       	or	r27, r21
     ed8:	80 93 64 01 	sts	0x0164, r24
     edc:	90 93 65 01 	sts	0x0165, r25
     ee0:	a0 93 66 01 	sts	0x0166, r26
     ee4:	b0 93 67 01 	sts	0x0167, r27
     ee8:	e0 91 18 02 	lds	r30, 0x0218
     eec:	f0 91 19 02 	lds	r31, 0x0219
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	39 f0       	breq	.+14     	; 0xf02 <__vector_16+0xb4>
     ef4:	6b e0       	ldi	r22, 0x0B	; 11
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	80 91 80 01 	lds	r24, 0x0180
     efc:	90 91 81 01 	lds	r25, 0x0181
     f00:	09 95       	icall
     f02:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <__vector_15>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
     f4a:	60 91 68 01 	lds	r22, 0x0168
     f4e:	70 91 69 01 	lds	r23, 0x0169
     f52:	20 91 84 00 	lds	r18, 0x0084
     f56:	30 91 85 00 	lds	r19, 0x0085
     f5a:	cb 01       	movw	r24, r22
     f5c:	aa 27       	eor	r26, r26
     f5e:	97 fd       	sbrc	r25, 7
     f60:	a0 95       	com	r26
     f62:	ba 2f       	mov	r27, r26
     f64:	dc 01       	movw	r26, r24
     f66:	99 27       	eor	r25, r25
     f68:	88 27       	eor	r24, r24
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	82 2b       	or	r24, r18
     f70:	93 2b       	or	r25, r19
     f72:	a4 2b       	or	r26, r20
     f74:	b5 2b       	or	r27, r21
     f76:	80 93 64 01 	sts	0x0164, r24
     f7a:	90 93 65 01 	sts	0x0165, r25
     f7e:	a0 93 66 01 	sts	0x0166, r26
     f82:	b0 93 67 01 	sts	0x0167, r27
     f86:	b0 9b       	sbis	0x16, 0	; 22
     f88:	1c c0       	rjmp	.+56     	; 0xfc2 <__vector_15+0x9a>
     f8a:	20 91 84 00 	lds	r18, 0x0084
     f8e:	30 91 85 00 	lds	r19, 0x0085
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	cb 01       	movw	r24, r22
     f98:	aa 27       	eor	r26, r26
     f9a:	97 fd       	sbrc	r25, 7
     f9c:	a0 95       	com	r26
     f9e:	ba 2f       	mov	r27, r26
     fa0:	dc 01       	movw	r26, r24
     fa2:	99 27       	eor	r25, r25
     fa4:	88 27       	eor	r24, r24
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	82 2b       	or	r24, r18
     fac:	93 2b       	or	r25, r19
     fae:	a4 2b       	or	r26, r20
     fb0:	b5 2b       	or	r27, r21
     fb2:	80 93 64 01 	sts	0x0164, r24
     fb6:	90 93 65 01 	sts	0x0165, r25
     fba:	a0 93 66 01 	sts	0x0166, r26
     fbe:	b0 93 67 01 	sts	0x0167, r27
     fc2:	e0 91 16 02 	lds	r30, 0x0216
     fc6:	f0 91 17 02 	lds	r31, 0x0217
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	39 f0       	breq	.+14     	; 0xfdc <__vector_15+0xb4>
     fce:	6a e0       	ldi	r22, 0x0A	; 10
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 91 7e 01 	lds	r24, 0x017E
     fd6:	90 91 7f 01 	lds	r25, 0x017F
     fda:	09 95       	icall
     fdc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
     fe0:	ff 91       	pop	r31
     fe2:	ef 91       	pop	r30
     fe4:	bf 91       	pop	r27
     fe6:	af 91       	pop	r26
     fe8:	9f 91       	pop	r25
     fea:	8f 91       	pop	r24
     fec:	7f 91       	pop	r23
     fee:	6f 91       	pop	r22
     ff0:	5f 91       	pop	r21
     ff2:	4f 91       	pop	r20
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <__vector_14>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	60 91 68 01 	lds	r22, 0x0168
    1028:	70 91 69 01 	lds	r23, 0x0169
    102c:	20 91 84 00 	lds	r18, 0x0084
    1030:	30 91 85 00 	lds	r19, 0x0085
    1034:	cb 01       	movw	r24, r22
    1036:	aa 27       	eor	r26, r26
    1038:	97 fd       	sbrc	r25, 7
    103a:	a0 95       	com	r26
    103c:	ba 2f       	mov	r27, r26
    103e:	dc 01       	movw	r26, r24
    1040:	99 27       	eor	r25, r25
    1042:	88 27       	eor	r24, r24
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	82 2b       	or	r24, r18
    104a:	93 2b       	or	r25, r19
    104c:	a4 2b       	or	r26, r20
    104e:	b5 2b       	or	r27, r21
    1050:	80 93 64 01 	sts	0x0164, r24
    1054:	90 93 65 01 	sts	0x0165, r25
    1058:	a0 93 66 01 	sts	0x0166, r26
    105c:	b0 93 67 01 	sts	0x0167, r27
    1060:	b0 9b       	sbis	0x16, 0	; 22
    1062:	1c c0       	rjmp	.+56     	; 0x109c <__vector_14+0x9a>
    1064:	20 91 84 00 	lds	r18, 0x0084
    1068:	30 91 85 00 	lds	r19, 0x0085
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	cb 01       	movw	r24, r22
    1072:	aa 27       	eor	r26, r26
    1074:	97 fd       	sbrc	r25, 7
    1076:	a0 95       	com	r26
    1078:	ba 2f       	mov	r27, r26
    107a:	dc 01       	movw	r26, r24
    107c:	99 27       	eor	r25, r25
    107e:	88 27       	eor	r24, r24
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	82 2b       	or	r24, r18
    1086:	93 2b       	or	r25, r19
    1088:	a4 2b       	or	r26, r20
    108a:	b5 2b       	or	r27, r21
    108c:	80 93 64 01 	sts	0x0164, r24
    1090:	90 93 65 01 	sts	0x0165, r25
    1094:	a0 93 66 01 	sts	0x0166, r26
    1098:	b0 93 67 01 	sts	0x0167, r27
    109c:	e0 91 14 02 	lds	r30, 0x0214
    10a0:	f0 91 15 02 	lds	r31, 0x0215
    10a4:	30 97       	sbiw	r30, 0x00	; 0
    10a6:	39 f0       	breq	.+14     	; 0x10b6 <__vector_14+0xb4>
    10a8:	69 e0       	ldi	r22, 0x09	; 9
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	80 91 7c 01 	lds	r24, 0x017C
    10b0:	90 91 7d 01 	lds	r25, 0x017D
    10b4:	09 95       	icall
    10b6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    10ba:	ff 91       	pop	r31
    10bc:	ef 91       	pop	r30
    10be:	bf 91       	pop	r27
    10c0:	af 91       	pop	r26
    10c2:	9f 91       	pop	r25
    10c4:	8f 91       	pop	r24
    10c6:	7f 91       	pop	r23
    10c8:	6f 91       	pop	r22
    10ca:	5f 91       	pop	r21
    10cc:	4f 91       	pop	r20
    10ce:	3f 91       	pop	r19
    10d0:	2f 91       	pop	r18
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_13>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	2f 93       	push	r18
    10e8:	3f 93       	push	r19
    10ea:	4f 93       	push	r20
    10ec:	5f 93       	push	r21
    10ee:	6f 93       	push	r22
    10f0:	7f 93       	push	r23
    10f2:	8f 93       	push	r24
    10f4:	9f 93       	push	r25
    10f6:	af 93       	push	r26
    10f8:	bf 93       	push	r27
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	60 91 68 01 	lds	r22, 0x0168
    1102:	70 91 69 01 	lds	r23, 0x0169
    1106:	20 91 84 00 	lds	r18, 0x0084
    110a:	30 91 85 00 	lds	r19, 0x0085
    110e:	cb 01       	movw	r24, r22
    1110:	aa 27       	eor	r26, r26
    1112:	97 fd       	sbrc	r25, 7
    1114:	a0 95       	com	r26
    1116:	ba 2f       	mov	r27, r26
    1118:	dc 01       	movw	r26, r24
    111a:	99 27       	eor	r25, r25
    111c:	88 27       	eor	r24, r24
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	82 2b       	or	r24, r18
    1124:	93 2b       	or	r25, r19
    1126:	a4 2b       	or	r26, r20
    1128:	b5 2b       	or	r27, r21
    112a:	80 93 64 01 	sts	0x0164, r24
    112e:	90 93 65 01 	sts	0x0165, r25
    1132:	a0 93 66 01 	sts	0x0166, r26
    1136:	b0 93 67 01 	sts	0x0167, r27
    113a:	b0 9b       	sbis	0x16, 0	; 22
    113c:	1c c0       	rjmp	.+56     	; 0x1176 <__vector_13+0x9a>
    113e:	20 91 84 00 	lds	r18, 0x0084
    1142:	30 91 85 00 	lds	r19, 0x0085
    1146:	6f 5f       	subi	r22, 0xFF	; 255
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	cb 01       	movw	r24, r22
    114c:	aa 27       	eor	r26, r26
    114e:	97 fd       	sbrc	r25, 7
    1150:	a0 95       	com	r26
    1152:	ba 2f       	mov	r27, r26
    1154:	dc 01       	movw	r26, r24
    1156:	99 27       	eor	r25, r25
    1158:	88 27       	eor	r24, r24
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	82 2b       	or	r24, r18
    1160:	93 2b       	or	r25, r19
    1162:	a4 2b       	or	r26, r20
    1164:	b5 2b       	or	r27, r21
    1166:	80 93 64 01 	sts	0x0164, r24
    116a:	90 93 65 01 	sts	0x0165, r25
    116e:	a0 93 66 01 	sts	0x0166, r26
    1172:	b0 93 67 01 	sts	0x0167, r27
    1176:	e0 91 12 02 	lds	r30, 0x0212
    117a:	f0 91 13 02 	lds	r31, 0x0213
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	39 f0       	breq	.+14     	; 0x1190 <__vector_13+0xb4>
    1182:	68 e0       	ldi	r22, 0x08	; 8
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 91 7a 01 	lds	r24, 0x017A
    118a:	90 91 7b 01 	lds	r25, 0x017B
    118e:	09 95       	icall
    1190:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_12>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	60 91 68 01 	lds	r22, 0x0168
    11dc:	70 91 69 01 	lds	r23, 0x0169
    11e0:	20 91 84 00 	lds	r18, 0x0084
    11e4:	30 91 85 00 	lds	r19, 0x0085
    11e8:	cb 01       	movw	r24, r22
    11ea:	aa 27       	eor	r26, r26
    11ec:	97 fd       	sbrc	r25, 7
    11ee:	a0 95       	com	r26
    11f0:	ba 2f       	mov	r27, r26
    11f2:	dc 01       	movw	r26, r24
    11f4:	99 27       	eor	r25, r25
    11f6:	88 27       	eor	r24, r24
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	82 2b       	or	r24, r18
    11fe:	93 2b       	or	r25, r19
    1200:	a4 2b       	or	r26, r20
    1202:	b5 2b       	or	r27, r21
    1204:	80 93 64 01 	sts	0x0164, r24
    1208:	90 93 65 01 	sts	0x0165, r25
    120c:	a0 93 66 01 	sts	0x0166, r26
    1210:	b0 93 67 01 	sts	0x0167, r27
    1214:	b0 9b       	sbis	0x16, 0	; 22
    1216:	1c c0       	rjmp	.+56     	; 0x1250 <__vector_12+0x9a>
    1218:	20 91 84 00 	lds	r18, 0x0084
    121c:	30 91 85 00 	lds	r19, 0x0085
    1220:	6f 5f       	subi	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	cb 01       	movw	r24, r22
    1226:	aa 27       	eor	r26, r26
    1228:	97 fd       	sbrc	r25, 7
    122a:	a0 95       	com	r26
    122c:	ba 2f       	mov	r27, r26
    122e:	dc 01       	movw	r26, r24
    1230:	99 27       	eor	r25, r25
    1232:	88 27       	eor	r24, r24
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	82 2b       	or	r24, r18
    123a:	93 2b       	or	r25, r19
    123c:	a4 2b       	or	r26, r20
    123e:	b5 2b       	or	r27, r21
    1240:	80 93 64 01 	sts	0x0164, r24
    1244:	90 93 65 01 	sts	0x0165, r25
    1248:	a0 93 66 01 	sts	0x0166, r26
    124c:	b0 93 67 01 	sts	0x0167, r27
    1250:	e0 91 10 02 	lds	r30, 0x0210
    1254:	f0 91 11 02 	lds	r31, 0x0211
    1258:	30 97       	sbiw	r30, 0x00	; 0
    125a:	39 f0       	breq	.+14     	; 0x126a <__vector_12+0xb4>
    125c:	67 e0       	ldi	r22, 0x07	; 7
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 91 78 01 	lds	r24, 0x0178
    1264:	90 91 79 01 	lds	r25, 0x0179
    1268:	09 95       	icall
    126a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_11>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
    12b2:	60 91 68 01 	lds	r22, 0x0168
    12b6:	70 91 69 01 	lds	r23, 0x0169
    12ba:	20 91 84 00 	lds	r18, 0x0084
    12be:	30 91 85 00 	lds	r19, 0x0085
    12c2:	cb 01       	movw	r24, r22
    12c4:	aa 27       	eor	r26, r26
    12c6:	97 fd       	sbrc	r25, 7
    12c8:	a0 95       	com	r26
    12ca:	ba 2f       	mov	r27, r26
    12cc:	dc 01       	movw	r26, r24
    12ce:	99 27       	eor	r25, r25
    12d0:	88 27       	eor	r24, r24
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	82 2b       	or	r24, r18
    12d8:	93 2b       	or	r25, r19
    12da:	a4 2b       	or	r26, r20
    12dc:	b5 2b       	or	r27, r21
    12de:	80 93 64 01 	sts	0x0164, r24
    12e2:	90 93 65 01 	sts	0x0165, r25
    12e6:	a0 93 66 01 	sts	0x0166, r26
    12ea:	b0 93 67 01 	sts	0x0167, r27
    12ee:	b0 9b       	sbis	0x16, 0	; 22
    12f0:	1c c0       	rjmp	.+56     	; 0x132a <__vector_11+0x9a>
    12f2:	20 91 84 00 	lds	r18, 0x0084
    12f6:	30 91 85 00 	lds	r19, 0x0085
    12fa:	6f 5f       	subi	r22, 0xFF	; 255
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	cb 01       	movw	r24, r22
    1300:	aa 27       	eor	r26, r26
    1302:	97 fd       	sbrc	r25, 7
    1304:	a0 95       	com	r26
    1306:	ba 2f       	mov	r27, r26
    1308:	dc 01       	movw	r26, r24
    130a:	99 27       	eor	r25, r25
    130c:	88 27       	eor	r24, r24
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	82 2b       	or	r24, r18
    1314:	93 2b       	or	r25, r19
    1316:	a4 2b       	or	r26, r20
    1318:	b5 2b       	or	r27, r21
    131a:	80 93 64 01 	sts	0x0164, r24
    131e:	90 93 65 01 	sts	0x0165, r25
    1322:	a0 93 66 01 	sts	0x0166, r26
    1326:	b0 93 67 01 	sts	0x0167, r27
    132a:	e0 91 0e 02 	lds	r30, 0x020E
    132e:	f0 91 0f 02 	lds	r31, 0x020F
    1332:	30 97       	sbiw	r30, 0x00	; 0
    1334:	39 f0       	breq	.+14     	; 0x1344 <__vector_11+0xb4>
    1336:	66 e0       	ldi	r22, 0x06	; 6
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	80 91 76 01 	lds	r24, 0x0176
    133e:	90 91 77 01 	lds	r25, 0x0177
    1342:	09 95       	icall
    1344:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <__vector_10>:
IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	60 91 68 01 	lds	r22, 0x0168
    1390:	70 91 69 01 	lds	r23, 0x0169
    1394:	20 91 84 00 	lds	r18, 0x0084
    1398:	30 91 85 00 	lds	r19, 0x0085
    139c:	cb 01       	movw	r24, r22
    139e:	aa 27       	eor	r26, r26
    13a0:	97 fd       	sbrc	r25, 7
    13a2:	a0 95       	com	r26
    13a4:	ba 2f       	mov	r27, r26
    13a6:	dc 01       	movw	r26, r24
    13a8:	99 27       	eor	r25, r25
    13aa:	88 27       	eor	r24, r24
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	82 2b       	or	r24, r18
    13b2:	93 2b       	or	r25, r19
    13b4:	a4 2b       	or	r26, r20
    13b6:	b5 2b       	or	r27, r21
    13b8:	80 93 64 01 	sts	0x0164, r24
    13bc:	90 93 65 01 	sts	0x0165, r25
    13c0:	a0 93 66 01 	sts	0x0166, r26
    13c4:	b0 93 67 01 	sts	0x0167, r27
    13c8:	b0 9b       	sbis	0x16, 0	; 22
    13ca:	1c c0       	rjmp	.+56     	; 0x1404 <__vector_10+0x9a>
    13cc:	20 91 84 00 	lds	r18, 0x0084
    13d0:	30 91 85 00 	lds	r19, 0x0085
    13d4:	6f 5f       	subi	r22, 0xFF	; 255
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	cb 01       	movw	r24, r22
    13da:	aa 27       	eor	r26, r26
    13dc:	97 fd       	sbrc	r25, 7
    13de:	a0 95       	com	r26
    13e0:	ba 2f       	mov	r27, r26
    13e2:	dc 01       	movw	r26, r24
    13e4:	99 27       	eor	r25, r25
    13e6:	88 27       	eor	r24, r24
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	82 2b       	or	r24, r18
    13ee:	93 2b       	or	r25, r19
    13f0:	a4 2b       	or	r26, r20
    13f2:	b5 2b       	or	r27, r21
    13f4:	80 93 64 01 	sts	0x0164, r24
    13f8:	90 93 65 01 	sts	0x0165, r25
    13fc:	a0 93 66 01 	sts	0x0166, r26
    1400:	b0 93 67 01 	sts	0x0167, r27
    1404:	e0 91 0c 02 	lds	r30, 0x020C
    1408:	f0 91 0d 02 	lds	r31, 0x020D
    140c:	30 97       	sbiw	r30, 0x00	; 0
    140e:	39 f0       	breq	.+14     	; 0x141e <__vector_10+0xb4>
    1410:	65 e0       	ldi	r22, 0x05	; 5
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	80 91 74 01 	lds	r24, 0x0174
    1418:	90 91 75 01 	lds	r25, 0x0175
    141c:	09 95       	icall
    141e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <__vector_5>:

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
    1466:	60 91 68 01 	lds	r22, 0x0168
    146a:	70 91 69 01 	lds	r23, 0x0169
    146e:	20 91 84 00 	lds	r18, 0x0084
    1472:	30 91 85 00 	lds	r19, 0x0085
    1476:	cb 01       	movw	r24, r22
    1478:	aa 27       	eor	r26, r26
    147a:	97 fd       	sbrc	r25, 7
    147c:	a0 95       	com	r26
    147e:	ba 2f       	mov	r27, r26
    1480:	dc 01       	movw	r26, r24
    1482:	99 27       	eor	r25, r25
    1484:	88 27       	eor	r24, r24
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	82 2b       	or	r24, r18
    148c:	93 2b       	or	r25, r19
    148e:	a4 2b       	or	r26, r20
    1490:	b5 2b       	or	r27, r21
    1492:	80 93 64 01 	sts	0x0164, r24
    1496:	90 93 65 01 	sts	0x0165, r25
    149a:	a0 93 66 01 	sts	0x0166, r26
    149e:	b0 93 67 01 	sts	0x0167, r27
    14a2:	b0 9b       	sbis	0x16, 0	; 22
    14a4:	1c c0       	rjmp	.+56     	; 0x14de <__vector_5+0x9a>
    14a6:	20 91 84 00 	lds	r18, 0x0084
    14aa:	30 91 85 00 	lds	r19, 0x0085
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	cb 01       	movw	r24, r22
    14b4:	aa 27       	eor	r26, r26
    14b6:	97 fd       	sbrc	r25, 7
    14b8:	a0 95       	com	r26
    14ba:	ba 2f       	mov	r27, r26
    14bc:	dc 01       	movw	r26, r24
    14be:	99 27       	eor	r25, r25
    14c0:	88 27       	eor	r24, r24
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	82 2b       	or	r24, r18
    14c8:	93 2b       	or	r25, r19
    14ca:	a4 2b       	or	r26, r20
    14cc:	b5 2b       	or	r27, r21
    14ce:	80 93 64 01 	sts	0x0164, r24
    14d2:	90 93 65 01 	sts	0x0165, r25
    14d6:	a0 93 66 01 	sts	0x0166, r26
    14da:	b0 93 67 01 	sts	0x0167, r27
    14de:	e0 91 0a 02 	lds	r30, 0x020A
    14e2:	f0 91 0b 02 	lds	r31, 0x020B
    14e6:	30 97       	sbiw	r30, 0x00	; 0
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <__vector_5+0xb4>
    14ea:	64 e0       	ldi	r22, 0x04	; 4
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	80 91 72 01 	lds	r24, 0x0172
    14f2:	90 91 73 01 	lds	r25, 0x0173
    14f6:	09 95       	icall
    14f8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
    1500:	bf 91       	pop	r27
    1502:	af 91       	pop	r26
    1504:	9f 91       	pop	r25
    1506:	8f 91       	pop	r24
    1508:	7f 91       	pop	r23
    150a:	6f 91       	pop	r22
    150c:	5f 91       	pop	r21
    150e:	4f 91       	pop	r20
    1510:	3f 91       	pop	r19
    1512:	2f 91       	pop	r18
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <__vector_4>:
#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	2f 93       	push	r18
    152a:	3f 93       	push	r19
    152c:	4f 93       	push	r20
    152e:	5f 93       	push	r21
    1530:	6f 93       	push	r22
    1532:	7f 93       	push	r23
    1534:	8f 93       	push	r24
    1536:	9f 93       	push	r25
    1538:	af 93       	push	r26
    153a:	bf 93       	push	r27
    153c:	ef 93       	push	r30
    153e:	ff 93       	push	r31
    1540:	60 91 68 01 	lds	r22, 0x0168
    1544:	70 91 69 01 	lds	r23, 0x0169
    1548:	20 91 84 00 	lds	r18, 0x0084
    154c:	30 91 85 00 	lds	r19, 0x0085
    1550:	cb 01       	movw	r24, r22
    1552:	aa 27       	eor	r26, r26
    1554:	97 fd       	sbrc	r25, 7
    1556:	a0 95       	com	r26
    1558:	ba 2f       	mov	r27, r26
    155a:	dc 01       	movw	r26, r24
    155c:	99 27       	eor	r25, r25
    155e:	88 27       	eor	r24, r24
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	82 2b       	or	r24, r18
    1566:	93 2b       	or	r25, r19
    1568:	a4 2b       	or	r26, r20
    156a:	b5 2b       	or	r27, r21
    156c:	80 93 64 01 	sts	0x0164, r24
    1570:	90 93 65 01 	sts	0x0165, r25
    1574:	a0 93 66 01 	sts	0x0166, r26
    1578:	b0 93 67 01 	sts	0x0167, r27
    157c:	b0 9b       	sbis	0x16, 0	; 22
    157e:	1c c0       	rjmp	.+56     	; 0x15b8 <__vector_4+0x9a>
    1580:	20 91 84 00 	lds	r18, 0x0084
    1584:	30 91 85 00 	lds	r19, 0x0085
    1588:	6f 5f       	subi	r22, 0xFF	; 255
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	cb 01       	movw	r24, r22
    158e:	aa 27       	eor	r26, r26
    1590:	97 fd       	sbrc	r25, 7
    1592:	a0 95       	com	r26
    1594:	ba 2f       	mov	r27, r26
    1596:	dc 01       	movw	r26, r24
    1598:	99 27       	eor	r25, r25
    159a:	88 27       	eor	r24, r24
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	82 2b       	or	r24, r18
    15a2:	93 2b       	or	r25, r19
    15a4:	a4 2b       	or	r26, r20
    15a6:	b5 2b       	or	r27, r21
    15a8:	80 93 64 01 	sts	0x0164, r24
    15ac:	90 93 65 01 	sts	0x0165, r25
    15b0:	a0 93 66 01 	sts	0x0166, r26
    15b4:	b0 93 67 01 	sts	0x0167, r27
    15b8:	e0 91 08 02 	lds	r30, 0x0208
    15bc:	f0 91 09 02 	lds	r31, 0x0209
    15c0:	30 97       	sbiw	r30, 0x00	; 0
    15c2:	39 f0       	breq	.+14     	; 0x15d2 <__vector_4+0xb4>
    15c4:	63 e0       	ldi	r22, 0x03	; 3
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	80 91 70 01 	lds	r24, 0x0170
    15cc:	90 91 71 01 	lds	r25, 0x0171
    15d0:	09 95       	icall
    15d2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    15d6:	ff 91       	pop	r31
    15d8:	ef 91       	pop	r30
    15da:	bf 91       	pop	r27
    15dc:	af 91       	pop	r26
    15de:	9f 91       	pop	r25
    15e0:	8f 91       	pop	r24
    15e2:	7f 91       	pop	r23
    15e4:	6f 91       	pop	r22
    15e6:	5f 91       	pop	r21
    15e8:	4f 91       	pop	r20
    15ea:	3f 91       	pop	r19
    15ec:	2f 91       	pop	r18
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_3>:

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	2f 93       	push	r18
    1604:	3f 93       	push	r19
    1606:	4f 93       	push	r20
    1608:	5f 93       	push	r21
    160a:	6f 93       	push	r22
    160c:	7f 93       	push	r23
    160e:	8f 93       	push	r24
    1610:	9f 93       	push	r25
    1612:	af 93       	push	r26
    1614:	bf 93       	push	r27
    1616:	ef 93       	push	r30
    1618:	ff 93       	push	r31
    161a:	60 91 68 01 	lds	r22, 0x0168
    161e:	70 91 69 01 	lds	r23, 0x0169
    1622:	20 91 84 00 	lds	r18, 0x0084
    1626:	30 91 85 00 	lds	r19, 0x0085
    162a:	cb 01       	movw	r24, r22
    162c:	aa 27       	eor	r26, r26
    162e:	97 fd       	sbrc	r25, 7
    1630:	a0 95       	com	r26
    1632:	ba 2f       	mov	r27, r26
    1634:	dc 01       	movw	r26, r24
    1636:	99 27       	eor	r25, r25
    1638:	88 27       	eor	r24, r24
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	82 2b       	or	r24, r18
    1640:	93 2b       	or	r25, r19
    1642:	a4 2b       	or	r26, r20
    1644:	b5 2b       	or	r27, r21
    1646:	80 93 64 01 	sts	0x0164, r24
    164a:	90 93 65 01 	sts	0x0165, r25
    164e:	a0 93 66 01 	sts	0x0166, r26
    1652:	b0 93 67 01 	sts	0x0167, r27
    1656:	b0 9b       	sbis	0x16, 0	; 22
    1658:	1c c0       	rjmp	.+56     	; 0x1692 <__vector_3+0x9a>
    165a:	20 91 84 00 	lds	r18, 0x0084
    165e:	30 91 85 00 	lds	r19, 0x0085
    1662:	6f 5f       	subi	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	cb 01       	movw	r24, r22
    1668:	aa 27       	eor	r26, r26
    166a:	97 fd       	sbrc	r25, 7
    166c:	a0 95       	com	r26
    166e:	ba 2f       	mov	r27, r26
    1670:	dc 01       	movw	r26, r24
    1672:	99 27       	eor	r25, r25
    1674:	88 27       	eor	r24, r24
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	82 2b       	or	r24, r18
    167c:	93 2b       	or	r25, r19
    167e:	a4 2b       	or	r26, r20
    1680:	b5 2b       	or	r27, r21
    1682:	80 93 64 01 	sts	0x0164, r24
    1686:	90 93 65 01 	sts	0x0165, r25
    168a:	a0 93 66 01 	sts	0x0166, r26
    168e:	b0 93 67 01 	sts	0x0167, r27
    1692:	e0 91 06 02 	lds	r30, 0x0206
    1696:	f0 91 07 02 	lds	r31, 0x0207
    169a:	30 97       	sbiw	r30, 0x00	; 0
    169c:	39 f0       	breq	.+14     	; 0x16ac <__vector_3+0xb4>
    169e:	62 e0       	ldi	r22, 0x02	; 2
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	80 91 6e 01 	lds	r24, 0x016E
    16a6:	90 91 6f 01 	lds	r25, 0x016F
    16aa:	09 95       	icall
    16ac:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <__vector_2>:
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
    16d2:	1f 92       	push	r1
    16d4:	0f 92       	push	r0
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
    16f4:	60 91 68 01 	lds	r22, 0x0168
    16f8:	70 91 69 01 	lds	r23, 0x0169
    16fc:	20 91 84 00 	lds	r18, 0x0084
    1700:	30 91 85 00 	lds	r19, 0x0085
    1704:	cb 01       	movw	r24, r22
    1706:	aa 27       	eor	r26, r26
    1708:	97 fd       	sbrc	r25, 7
    170a:	a0 95       	com	r26
    170c:	ba 2f       	mov	r27, r26
    170e:	dc 01       	movw	r26, r24
    1710:	99 27       	eor	r25, r25
    1712:	88 27       	eor	r24, r24
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	82 2b       	or	r24, r18
    171a:	93 2b       	or	r25, r19
    171c:	a4 2b       	or	r26, r20
    171e:	b5 2b       	or	r27, r21
    1720:	80 93 64 01 	sts	0x0164, r24
    1724:	90 93 65 01 	sts	0x0165, r25
    1728:	a0 93 66 01 	sts	0x0166, r26
    172c:	b0 93 67 01 	sts	0x0167, r27
    1730:	b0 9b       	sbis	0x16, 0	; 22
    1732:	1c c0       	rjmp	.+56     	; 0x176c <__vector_2+0x9a>
    1734:	20 91 84 00 	lds	r18, 0x0084
    1738:	30 91 85 00 	lds	r19, 0x0085
    173c:	6f 5f       	subi	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	cb 01       	movw	r24, r22
    1742:	aa 27       	eor	r26, r26
    1744:	97 fd       	sbrc	r25, 7
    1746:	a0 95       	com	r26
    1748:	ba 2f       	mov	r27, r26
    174a:	dc 01       	movw	r26, r24
    174c:	99 27       	eor	r25, r25
    174e:	88 27       	eor	r24, r24
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	82 2b       	or	r24, r18
    1756:	93 2b       	or	r25, r19
    1758:	a4 2b       	or	r26, r20
    175a:	b5 2b       	or	r27, r21
    175c:	80 93 64 01 	sts	0x0164, r24
    1760:	90 93 65 01 	sts	0x0165, r25
    1764:	a0 93 66 01 	sts	0x0166, r26
    1768:	b0 93 67 01 	sts	0x0167, r27
    176c:	e0 91 04 02 	lds	r30, 0x0204
    1770:	f0 91 05 02 	lds	r31, 0x0205
    1774:	30 97       	sbiw	r30, 0x00	; 0
    1776:	39 f0       	breq	.+14     	; 0x1786 <__vector_2+0xb4>
    1778:	61 e0       	ldi	r22, 0x01	; 1
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	80 91 6c 01 	lds	r24, 0x016C
    1780:	90 91 6d 01 	lds	r25, 0x016D
    1784:	09 95       	icall
    1786:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	60 91 68 01 	lds	r22, 0x0168
    17d2:	70 91 69 01 	lds	r23, 0x0169
    17d6:	20 91 84 00 	lds	r18, 0x0084
    17da:	30 91 85 00 	lds	r19, 0x0085
    17de:	cb 01       	movw	r24, r22
    17e0:	aa 27       	eor	r26, r26
    17e2:	97 fd       	sbrc	r25, 7
    17e4:	a0 95       	com	r26
    17e6:	ba 2f       	mov	r27, r26
    17e8:	dc 01       	movw	r26, r24
    17ea:	99 27       	eor	r25, r25
    17ec:	88 27       	eor	r24, r24
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	82 2b       	or	r24, r18
    17f4:	93 2b       	or	r25, r19
    17f6:	a4 2b       	or	r26, r20
    17f8:	b5 2b       	or	r27, r21
    17fa:	80 93 64 01 	sts	0x0164, r24
    17fe:	90 93 65 01 	sts	0x0165, r25
    1802:	a0 93 66 01 	sts	0x0166, r26
    1806:	b0 93 67 01 	sts	0x0167, r27
    180a:	b0 9b       	sbis	0x16, 0	; 22
    180c:	1c c0       	rjmp	.+56     	; 0x1846 <__vector_1+0x9a>
    180e:	20 91 84 00 	lds	r18, 0x0084
    1812:	30 91 85 00 	lds	r19, 0x0085
    1816:	6f 5f       	subi	r22, 0xFF	; 255
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	cb 01       	movw	r24, r22
    181c:	aa 27       	eor	r26, r26
    181e:	97 fd       	sbrc	r25, 7
    1820:	a0 95       	com	r26
    1822:	ba 2f       	mov	r27, r26
    1824:	dc 01       	movw	r26, r24
    1826:	99 27       	eor	r25, r25
    1828:	88 27       	eor	r24, r24
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	82 2b       	or	r24, r18
    1830:	93 2b       	or	r25, r19
    1832:	a4 2b       	or	r26, r20
    1834:	b5 2b       	or	r27, r21
    1836:	80 93 64 01 	sts	0x0164, r24
    183a:	90 93 65 01 	sts	0x0165, r25
    183e:	a0 93 66 01 	sts	0x0166, r26
    1842:	b0 93 67 01 	sts	0x0167, r27
    1846:	e0 91 02 02 	lds	r30, 0x0202
    184a:	f0 91 03 02 	lds	r31, 0x0203
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	39 f0       	breq	.+14     	; 0x1860 <__vector_1+0xb4>
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	80 91 6a 01 	lds	r24, 0x016A
    185a:	90 91 6b 01 	lds	r25, 0x016B
    185e:	09 95       	icall
    1860:	0e 94 5e 03 	call	0x6bc	; 0x6bc <schedule>
    1864:	ff 91       	pop	r31
    1866:	ef 91       	pop	r30
    1868:	bf 91       	pop	r27
    186a:	af 91       	pop	r26
    186c:	9f 91       	pop	r25
    186e:	8f 91       	pop	r24
    1870:	7f 91       	pop	r23
    1872:	6f 91       	pop	r22
    1874:	5f 91       	pop	r21
    1876:	4f 91       	pop	r20
    1878:	3f 91       	pop	r19
    187a:	2f 91       	pop	r18
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <sync>:
    
    ENABLE(status);
    return m;
}

int sync(Object *to, Method meth, int arg) {
    1886:	cf 92       	push	r12
    1888:	df 92       	push	r13
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	6b 01       	movw	r12, r22
    1898:	8a 01       	movw	r16, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    189a:	ff b6       	in	r15, 0x3f	; 63
    189c:	80 e8       	ldi	r24, 0x80	; 128
    189e:	f8 22       	and	r15, r24
    18a0:	f8 94       	cli
    t = to->ownedBy;
    18a2:	88 81       	ld	r24, Y
    18a4:	99 81       	ldd	r25, Y+1	; 0x01
    if (t) {                            // to is already locked
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <sync+0x2a>
    18aa:	33 c0       	rjmp	.+102    	; 0x1912 <sync+0x8c>
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    18b0:	dc 01       	movw	r26, r24
    18b2:	14 96       	adiw	r26, 0x04	; 4
    18b4:	ed 91       	ld	r30, X+
    18b6:	fc 91       	ld	r31, X
    18b8:	15 97       	sbiw	r26, 0x05	; 5
    18ba:	30 97       	sbiw	r30, 0x00	; 0
    18bc:	b9 f7       	brne	.-18     	; 0x18ac <sync+0x26>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    18be:	a0 91 45 01 	lds	r26, 0x0145
    18c2:	b0 91 46 01 	lds	r27, 0x0146
    18c6:	8a 17       	cp	r24, r26
    18c8:	9b 07       	cpc	r25, r27
    18ca:	21 f0       	breq	.+8      	; 0x18d4 <sync+0x4e>
    18cc:	ff 20       	and	r15, r15
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <sync+0x4c>
    18d0:	46 c0       	rjmp	.+140    	; 0x195e <sync+0xd8>
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <sync+0x58>
            ENABLE(status);
    18d4:	ff 20       	and	r15, r15
    18d6:	09 f4       	brne	.+2      	; 0x18da <sync+0x54>
    18d8:	42 c0       	rjmp	.+132    	; 0x195e <sync+0xd8>
    18da:	78 94       	sei
    18dc:	40 c0       	rjmp	.+128    	; 0x195e <sync+0xd8>
            return -1;
        }
        if (to->wantedBy)               // must be a lower priority thread
    18de:	ea 81       	ldd	r30, Y+2	; 0x02
    18e0:	fb 81       	ldd	r31, Y+3	; 0x03
    18e2:	30 97       	sbiw	r30, 0x00	; 0
    18e4:	11 f0       	breq	.+4      	; 0x18ea <sync+0x64>
            to->wantedBy->waitsFor = NULL;
    18e6:	15 82       	std	Z+5, r1	; 0x05
    18e8:	14 82       	std	Z+4, r1	; 0x04
        to->wantedBy = current;
    18ea:	bb 83       	std	Y+3, r27	; 0x03
    18ec:	aa 83       	std	Y+2, r26	; 0x02
        current->waitsFor = to;
    18ee:	15 96       	adiw	r26, 0x05	; 5
    18f0:	dc 93       	st	X, r29
    18f2:	ce 93       	st	-X, r28
    18f4:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    18f6:	0e 94 3e 03 	call	0x67c	; 0x67c <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    18fa:	e0 91 45 01 	lds	r30, 0x0145
    18fe:	f0 91 46 01 	lds	r31, 0x0146
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	89 2b       	or	r24, r25
    1908:	21 f4       	brne	.+8      	; 0x1912 <sync+0x8c>
            ENABLE(status);
    190a:	78 94       	sei
    190c:	00 e0       	ldi	r16, 0x00	; 0
    190e:	10 e0       	ldi	r17, 0x00	; 0
    1910:	28 c0       	rjmp	.+80     	; 0x1962 <sync+0xdc>
            return 0;
        }
    }
    to->ownedBy = current;
    1912:	80 91 45 01 	lds	r24, 0x0145
    1916:	90 91 46 01 	lds	r25, 0x0146
    191a:	99 83       	std	Y+1, r25	; 0x01
    191c:	88 83       	st	Y, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    191e:	ff 20       	and	r15, r15
    1920:	29 f0       	breq	.+10     	; 0x192c <sync+0xa6>
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	9b 81       	ldd	r25, Y+3	; 0x03
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	09 f0       	breq	.+2      	; 0x192c <sync+0xa6>
    192a:	78 94       	sei
    result = meth(to, arg);
    192c:	b8 01       	movw	r22, r16
    192e:	ce 01       	movw	r24, r28
    1930:	f6 01       	movw	r30, r12
    1932:	09 95       	icall
    1934:	8c 01       	movw	r16, r24
    DISABLE(status_ignore);
    1936:	8f b7       	in	r24, 0x3f	; 63
    1938:	f8 94       	cli
    to->ownedBy = NULL; 
    193a:	19 82       	std	Y+1, r1	; 0x01
    193c:	18 82       	st	Y, r1
    t = to->wantedBy;
    193e:	ea 81       	ldd	r30, Y+2	; 0x02
    1940:	fb 81       	ldd	r31, Y+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    1942:	e2 30       	cpi	r30, 0x02	; 2
    1944:	f1 05       	cpc	r31, r1
    1946:	38 f0       	brcs	.+14     	; 0x1956 <sync+0xd0>
        to->wantedBy = NULL; 
    1948:	1b 82       	std	Y+3, r1	; 0x03
    194a:	1a 82       	std	Y+2, r1	; 0x02
        t->waitsFor = NULL;
    194c:	15 82       	std	Z+5, r1	; 0x05
    194e:	14 82       	std	Z+4, r1	; 0x04
        dispatch(t);
    1950:	cf 01       	movw	r24, r30
    1952:	0e 94 3e 03 	call	0x67c	; 0x67c <dispatch>
    }
    ENABLE(status);
    1956:	ff 20       	and	r15, r15
    1958:	21 f0       	breq	.+8      	; 0x1962 <sync+0xdc>
    195a:	78 94       	sei
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <sync+0xdc>
    195e:	0f ef       	ldi	r16, 0xFF	; 255
    1960:	1f ef       	ldi	r17, 0xFF	; 255
    return result;
}
    1962:	c8 01       	movw	r24, r16
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	08 95       	ret

00001974 <run>:
        current = next;
        longjmp( next->context, 1 );
    }
}

static void run(void) {
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    1978:	e0 91 45 01 	lds	r30, 0x0145
    197c:	f0 91 46 01 	lds	r31, 0x0146
    else
        prev->next = p;
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1980:	c0 91 60 01 	lds	r28, 0x0160
    1984:	d0 91 61 01 	lds	r29, 0x0161
    if (m)
    1988:	20 97       	sbiw	r28, 0x00	; 0
    198a:	69 f1       	breq	.+90     	; 0x19e6 <run+0x72>
        *queue = m->next;
    198c:	88 81       	ld	r24, Y
    198e:	99 81       	ldd	r25, Y+1	; 0x01
    1990:	90 93 61 01 	sts	0x0161, r25
    1994:	80 93 60 01 	sts	0x0160, r24
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    1998:	d3 83       	std	Z+3, r29	; 0x03
    199a:	c2 83       	std	Z+2, r28	; 0x02
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    199c:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    199e:	4e 85       	ldd	r20, Y+14	; 0x0e
    19a0:	5f 85       	ldd	r21, Y+15	; 0x0f
    19a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    19a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    19a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19aa:	0e 94 43 0c 	call	0x1886	; 0x1886 <sync>
        DISABLE(status);
    19ae:	8f b7       	in	r24, 0x3f	; 63
    19b0:	f8 94       	cli
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
    19b2:	80 91 3f 01 	lds	r24, 0x013F
    19b6:	90 91 40 01 	lds	r25, 0x0140
    19ba:	99 83       	std	Y+1, r25	; 0x01
    19bc:	88 83       	st	Y, r24
    *queue = m;
    19be:	d0 93 40 01 	sts	0x0140, r29
    19c2:	c0 93 3f 01 	sts	0x013F, r28
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
    19c6:	60 91 43 01 	lds	r22, 0x0143
    19ca:	70 91 44 01 	lds	r23, 0x0144
    19ce:	fb 01       	movw	r30, r22
    19d0:	c0 81       	ld	r28, Z
    19d2:	d1 81       	ldd	r29, Z+1	; 0x01
    19d4:	2a 81       	ldd	r18, Y+2	; 0x02
    19d6:	3b 81       	ldd	r19, Y+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    19d8:	e0 91 60 01 	lds	r30, 0x0160
    19dc:	f0 91 61 01 	lds	r31, 0x0161
    19e0:	30 97       	sbiw	r30, 0x00	; 0
    19e2:	61 f4       	brne	.+24     	; 0x19fc <run+0x88>
    19e4:	22 c0       	rjmp	.+68     	; 0x1a2a <run+0xb6>
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    19e6:	8f ef       	ldi	r24, 0xFF	; 255
    19e8:	80 93 ec 00 	sts	0x00EC, r24
    19ec:	80 93 ed 00 	sts	0x00ED, r24
    19f0:	80 93 ee 00 	sts	0x00EE, r24
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	83 bf       	out	0x33, r24	; 51
    19f8:	88 95       	sleep
    19fa:	fd cf       	rjmp	.-6      	; 0x19f6 <run+0x82>
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    19fc:	21 15       	cp	r18, r1
    19fe:	31 05       	cpc	r19, r1
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <run+0x90>
    1a02:	ba cf       	rjmp	.-140    	; 0x1978 <run+0x4>
    1a04:	86 81       	ldd	r24, Z+6	; 0x06
    1a06:	97 81       	ldd	r25, Z+7	; 0x07
    1a08:	a0 85       	ldd	r26, Z+8	; 0x08
    1a0a:	b1 85       	ldd	r27, Z+9	; 0x09
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	26 81       	ldd	r18, Z+6	; 0x06
    1a10:	37 81       	ldd	r19, Z+7	; 0x07
    1a12:	40 85       	ldd	r20, Z+8	; 0x08
    1a14:	51 85       	ldd	r21, Z+9	; 0x09
    1a16:	82 1b       	sub	r24, r18
    1a18:	93 0b       	sbc	r25, r19
    1a1a:	a4 0b       	sbc	r26, r20
    1a1c:	b5 0b       	sbc	r27, r21
    1a1e:	18 16       	cp	r1, r24
    1a20:	19 06       	cpc	r1, r25
    1a22:	1a 06       	cpc	r1, r26
    1a24:	1b 06       	cpc	r1, r27
    1a26:	0c f0       	brlt	.+2      	; 0x1a2a <run+0xb6>
    1a28:	a7 cf       	rjmp	.-178    	; 0x1978 <run+0x4>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1a2a:	d0 93 44 01 	sts	0x0144, r29
    1a2e:	c0 93 43 01 	sts	0x0143, r28
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1a32:	80 91 41 01 	lds	r24, 0x0141
    1a36:	90 91 42 01 	lds	r25, 0x0142
    1a3a:	fb 01       	movw	r30, r22
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
    *stack = t;
    1a40:	70 93 42 01 	sts	0x0142, r23
    1a44:	60 93 41 01 	sts	0x0141, r22
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <run+0xda>
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
	            t = t->waitsFor->ownedBy;
    1a4a:	c0 81       	ld	r28, Z
    1a4c:	d1 81       	ldd	r29, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    1a4e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a50:	fd 81       	ldd	r31, Y+5	; 0x05
    1a52:	30 97       	sbiw	r30, 0x00	; 0
    1a54:	d1 f7       	brne	.-12     	; 0x1a4a <run+0xd6>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    1a56:	ce 01       	movw	r24, r28
    1a58:	0e 94 3e 03 	call	0x67c	; 0x67c <dispatch>
    1a5c:	8d cf       	rjmp	.-230    	; 0x1978 <run+0x4>

00001a5e <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    1a5e:	3f 92       	push	r3
    1a60:	4f 92       	push	r4
    1a62:	5f 92       	push	r5
    1a64:	6f 92       	push	r6
    1a66:	7f 92       	push	r7
    1a68:	8f 92       	push	r8
    1a6a:	9f 92       	push	r9
    1a6c:	af 92       	push	r10
    1a6e:	bf 92       	push	r11
    1a70:	cf 92       	push	r12
    1a72:	df 92       	push	r13
    1a74:	ef 92       	push	r14
    1a76:	ff 92       	push	r15
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	2b 01       	movw	r4, r22
    1a82:	3c 01       	movw	r6, r24
    1a84:	49 01       	movw	r8, r18
    1a86:	5a 01       	movw	r10, r20
    1a88:	98 01       	movw	r18, r16
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1a8a:	8f b7       	in	r24, 0x3f	; 63
    1a8c:	f8 94       	cli
    else
        prev->next = p;
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1a8e:	00 91 3f 01 	lds	r16, 0x013F
    1a92:	10 91 40 01 	lds	r17, 0x0140
    if (m)
    1a96:	01 15       	cp	r16, r1
    1a98:	11 05       	cpc	r17, r1
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <async+0x72>
/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1a9c:	70 e8       	ldi	r23, 0x80	; 128
    1a9e:	37 2e       	mov	r3, r23
    1aa0:	38 22       	and	r3, r24
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    1aa2:	d8 01       	movw	r26, r16
    1aa4:	8d 91       	ld	r24, X+
    1aa6:	9c 91       	ld	r25, X
    1aa8:	11 97       	sbiw	r26, 0x01	; 1
    1aaa:	90 93 40 01 	sts	0x0140, r25
    1aae:	80 93 3f 01 	sts	0x013F, r24
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    m = dequeue(&msgPool);
    m->to = to; 
    1ab2:	1b 96       	adiw	r26, 0x0b	; 11
    1ab4:	3c 93       	st	X, r19
    1ab6:	2e 93       	st	-X, r18
    1ab8:	1a 97       	sbiw	r26, 0x0a	; 10
    m->method = meth; 
    1aba:	1d 96       	adiw	r26, 0x0d	; 13
    1abc:	fc 92       	st	X, r15
    1abe:	ee 92       	st	-X, r14
    1ac0:	1c 97       	sbiw	r26, 0x0c	; 12
    m->arg = arg;
    1ac2:	1f 96       	adiw	r26, 0x0f	; 15
    1ac4:	dc 92       	st	X, r13
    1ac6:	ce 92       	st	-X, r12
    1ac8:	1e 97       	sbiw	r26, 0x0e	; 14
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1aca:	33 20       	and	r3, r3
    1acc:	61 f4       	brne	.+24     	; 0x1ae6 <async+0x88>
    1ace:	17 c0       	rjmp	.+46     	; 0x1afe <async+0xa0>
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	80 93 ec 00 	sts	0x00EC, r24
    1ad6:	80 93 ed 00 	sts	0x00ED, r24
    1ada:	80 93 ee 00 	sts	0x00EE, r24
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	83 bf       	out	0x33, r24	; 51
    1ae2:	88 95       	sleep
    1ae4:	fd cf       	rjmp	.-6      	; 0x1ae0 <async+0x82>
    DISABLE(status);
    m = dequeue(&msgPool);
    m->to = to; 
    m->method = meth; 
    m->arg = arg;
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1ae6:	e0 91 45 01 	lds	r30, 0x0145
    1aea:	f0 91 46 01 	lds	r31, 0x0146
    1aee:	02 80       	ldd	r0, Z+2	; 0x02
    1af0:	f3 81       	ldd	r31, Z+3	; 0x03
    1af2:	e0 2d       	mov	r30, r0
    1af4:	62 81       	ldd	r22, Z+2	; 0x02
    1af6:	73 81       	ldd	r23, Z+3	; 0x03
    1af8:	84 81       	ldd	r24, Z+4	; 0x04
    1afa:	95 81       	ldd	r25, Z+5	; 0x05
    1afc:	08 c0       	rjmp	.+16     	; 0x1b0e <async+0xb0>
    1afe:	60 91 64 01 	lds	r22, 0x0164
    1b02:	70 91 65 01 	lds	r23, 0x0165
    1b06:	80 91 66 01 	lds	r24, 0x0166
    1b0a:	90 91 67 01 	lds	r25, 0x0167
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	24 0d       	add	r18, r4
    1b14:	35 1d       	adc	r19, r5
    1b16:	46 1d       	adc	r20, r6
    1b18:	57 1d       	adc	r21, r7
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	22 83       	std	Z+2, r18	; 0x02
    1b1e:	33 83       	std	Z+3, r19	; 0x03
    1b20:	44 83       	std	Z+4, r20	; 0x04
    1b22:	55 83       	std	Z+5, r21	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    1b24:	18 14       	cp	r1, r8
    1b26:	19 04       	cpc	r1, r9
    1b28:	1a 04       	cpc	r1, r10
    1b2a:	1b 04       	cpc	r1, r11
    1b2c:	44 f0       	brlt	.+16     	; 0x1b3e <async+0xe0>
    1b2e:	6f ef       	ldi	r22, 0xFF	; 255
    1b30:	86 2e       	mov	r8, r22
    1b32:	6f ef       	ldi	r22, 0xFF	; 255
    1b34:	96 2e       	mov	r9, r22
    1b36:	6f ef       	ldi	r22, 0xFF	; 255
    1b38:	a6 2e       	mov	r10, r22
    1b3a:	6f e7       	ldi	r22, 0x7F	; 127
    1b3c:	b6 2e       	mov	r11, r22
    1b3e:	34 01       	movw	r6, r8
    1b40:	45 01       	movw	r8, r10
    1b42:	62 0e       	add	r6, r18
    1b44:	73 1e       	adc	r7, r19
    1b46:	84 1e       	adc	r8, r20
    1b48:	95 1e       	adc	r9, r21
    1b4a:	d8 01       	movw	r26, r16
    1b4c:	16 96       	adiw	r26, 0x06	; 6
    1b4e:	6d 92       	st	X+, r6
    1b50:	7d 92       	st	X+, r7
    1b52:	8d 92       	st	X+, r8
    1b54:	9c 92       	st	X, r9
    1b56:	19 97       	sbiw	r26, 0x09	; 9
    
    TIMERGET(now);
    1b58:	e0 90 68 01 	lds	r14, 0x0168
    1b5c:	f0 90 69 01 	lds	r15, 0x0169
    1b60:	e0 91 84 00 	lds	r30, 0x0084
    1b64:	f0 91 85 00 	lds	r31, 0x0085
    1b68:	b0 99       	sbic	0x16, 0	; 22
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <async+0x122>
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	aa 27       	eor	r26, r26
    1b70:	97 fd       	sbrc	r25, 7
    1b72:	a0 95       	com	r26
    1b74:	ba 2f       	mov	r27, r26
    1b76:	ac 01       	movw	r20, r24
    1b78:	33 27       	eor	r19, r19
    1b7a:	22 27       	eor	r18, r18
    1b7c:	cf 01       	movw	r24, r30
    1b7e:	12 c0       	rjmp	.+36     	; 0x1ba4 <async+0x146>
    1b80:	80 91 84 00 	lds	r24, 0x0084
    1b84:	90 91 85 00 	lds	r25, 0x0085
    1b88:	08 94       	sec
    1b8a:	e1 1c       	adc	r14, r1
    1b8c:	f1 1c       	adc	r15, r1
    1b8e:	97 01       	movw	r18, r14
    1b90:	44 27       	eor	r20, r20
    1b92:	37 fd       	sbrc	r19, 7
    1b94:	40 95       	com	r20
    1b96:	54 2f       	mov	r21, r20
    1b98:	08 94       	sec
    1b9a:	e1 08       	sbc	r14, r1
    1b9c:	f1 08       	sbc	r15, r1
    1b9e:	a9 01       	movw	r20, r18
    1ba0:	33 27       	eor	r19, r19
    1ba2:	22 27       	eor	r18, r18
    1ba4:	a0 e0       	ldi	r26, 0x00	; 0
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	28 2b       	or	r18, r24
    1baa:	39 2b       	or	r19, r25
    1bac:	4a 2b       	or	r20, r26
    1bae:	5b 2b       	or	r21, r27
    if (m->baseline - now > 0) {        // baseline has not yet passed
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	a2 80       	ldd	r10, Z+2	; 0x02
    1bb4:	b3 80       	ldd	r11, Z+3	; 0x03
    1bb6:	c4 80       	ldd	r12, Z+4	; 0x04
    1bb8:	d5 80       	ldd	r13, Z+5	; 0x05
    1bba:	d6 01       	movw	r26, r12
    1bbc:	c5 01       	movw	r24, r10
    1bbe:	82 1b       	sub	r24, r18
    1bc0:	93 0b       	sbc	r25, r19
    1bc2:	a4 0b       	sbc	r26, r20
    1bc4:	b5 0b       	sbc	r27, r21
    1bc6:	18 16       	cp	r1, r24
    1bc8:	19 06       	cpc	r1, r25
    1bca:	1a 06       	cpc	r1, r26
    1bcc:	1b 06       	cpc	r1, r27
    1bce:	0c f0       	brlt	.+2      	; 0x1bd2 <async+0x174>
    1bd0:	56 c0       	rjmp	.+172    	; 0x1c7e <async+0x220>
    else
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    1bd2:	e0 91 62 01 	lds	r30, 0x0162
    1bd6:	f0 91 63 01 	lds	r31, 0x0163
    1bda:	c0 e0       	ldi	r28, 0x00	; 0
    1bdc:	d0 e0       	ldi	r29, 0x00	; 0
    1bde:	05 c0       	rjmp	.+10     	; 0x1bea <async+0x18c>
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    1be0:	ef 01       	movw	r28, r30
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	9c 01       	movw	r18, r24
    1be8:	f9 01       	movw	r30, r18
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
    1bea:	30 97       	sbiw	r30, 0x00	; 0
    1bec:	49 f0       	breq	.+18     	; 0x1c00 <async+0x1a2>
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	a4 81       	ldd	r26, Z+4	; 0x04
    1bf4:	b5 81       	ldd	r27, Z+5	; 0x05
    1bf6:	a8 16       	cp	r10, r24
    1bf8:	b9 06       	cpc	r11, r25
    1bfa:	ca 06       	cpc	r12, r26
    1bfc:	db 06       	cpc	r13, r27
    1bfe:	84 f7       	brge	.-32     	; 0x1be0 <async+0x182>
        prev = q;
        q = q->next;
    }
    p->next = q;
    1c00:	d8 01       	movw	r26, r16
    1c02:	ed 93       	st	X+, r30
    1c04:	fc 93       	st	X, r31
    if (prev == NULL)
    1c06:	20 97       	sbiw	r28, 0x00	; 0
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <async+0x1b6>
        *queue = p;
    1c0a:	10 93 63 01 	sts	0x0163, r17
    1c0e:	00 93 62 01 	sts	0x0162, r16
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <async+0x1ba>
    else
        prev->next = p;
    1c14:	19 83       	std	Y+1, r17	; 0x01
    1c16:	08 83       	st	Y, r16
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    
    TIMERGET(now);
    if (m->baseline - now > 0) {        // baseline has not yet passed
        enqueueByBaseline(m, &timerQ);
        TIMERSET(timerQ);
    1c18:	e0 91 62 01 	lds	r30, 0x0162
    1c1c:	f0 91 63 01 	lds	r31, 0x0163
    1c20:	30 97       	sbiw	r30, 0x00	; 0
    1c22:	21 f1       	breq	.+72     	; 0x1c6c <async+0x20e>
    1c24:	22 81       	ldd	r18, Z+2	; 0x02
    1c26:	33 81       	ldd	r19, Z+3	; 0x03
    1c28:	44 81       	ldd	r20, Z+4	; 0x04
    1c2a:	55 81       	ldd	r21, Z+5	; 0x05
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	bb 27       	eor	r27, r27
    1c30:	97 fd       	sbrc	r25, 7
    1c32:	b0 95       	com	r27
    1c34:	ab 2f       	mov	r26, r27
    1c36:	e8 16       	cp	r14, r24
    1c38:	f9 06       	cpc	r15, r25
    1c3a:	c1 f4       	brne	.+48     	; 0x1c6c <async+0x20e>
    1c3c:	80 91 84 00 	lds	r24, 0x0084
    1c40:	90 91 85 00 	lds	r25, 0x0085
    1c44:	80 95       	com	r24
    1c46:	90 95       	com	r25
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	89 2b       	or	r24, r25
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <async+0x1fe>
    1c50:	20 91 84 00 	lds	r18, 0x0084
    1c54:	30 91 85 00 	lds	r19, 0x0085
    1c58:	2f 5f       	subi	r18, 0xFF	; 255
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	30 93 89 00 	sts	0x0089, r19
    1c60:	20 93 88 00 	sts	0x0088, r18
    1c64:	80 91 6f 00 	lds	r24, 0x006F
    1c68:	82 60       	ori	r24, 0x02	; 2
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <async+0x214>
    1c6c:	80 91 6f 00 	lds	r24, 0x006F
    1c70:	8d 7f       	andi	r24, 0xFD	; 253
    1c72:	80 93 6f 00 	sts	0x006F, r24
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
        }
    }
    
    ENABLE(status);
    1c76:	33 20       	and	r3, r3
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <async+0x21e>
    1c7a:	57 c0       	rjmp	.+174    	; 0x1d2a <async+0x2cc>
    1c7c:	57 c0       	rjmp	.+174    	; 0x1d2c <async+0x2ce>

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    1c7e:	e0 91 60 01 	lds	r30, 0x0160
    1c82:	f0 91 61 01 	lds	r31, 0x0161
    1c86:	c0 e0       	ldi	r28, 0x00	; 0
    1c88:	d0 e0       	ldi	r29, 0x00	; 0
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <async+0x238>
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    1c8c:	ef 01       	movw	r28, r30
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	9c 01       	movw	r18, r24
    1c94:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1c96:	30 97       	sbiw	r30, 0x00	; 0
    1c98:	49 f0       	breq	.+18     	; 0x1cac <async+0x24e>
    1c9a:	86 81       	ldd	r24, Z+6	; 0x06
    1c9c:	97 81       	ldd	r25, Z+7	; 0x07
    1c9e:	a0 85       	ldd	r26, Z+8	; 0x08
    1ca0:	b1 85       	ldd	r27, Z+9	; 0x09
    1ca2:	68 16       	cp	r6, r24
    1ca4:	79 06       	cpc	r7, r25
    1ca6:	8a 06       	cpc	r8, r26
    1ca8:	9b 06       	cpc	r9, r27
    1caa:	84 f7       	brge	.-32     	; 0x1c8c <async+0x22e>
        prev = q;
        q = q->next;
    }
    p->next = q;
    1cac:	d8 01       	movw	r26, r16
    1cae:	ed 93       	st	X+, r30
    1cb0:	fc 93       	st	X, r31
    if (prev == NULL)
    1cb2:	20 97       	sbiw	r28, 0x00	; 0
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <async+0x262>
        *queue = p;
    1cb6:	10 93 61 01 	sts	0x0161, r17
    1cba:	00 93 60 01 	sts	0x0160, r16
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <async+0x266>
    else
        prev->next = p;
    1cc0:	19 83       	std	Y+1, r17	; 0x01
    1cc2:	08 83       	st	Y, r16
    if (m->baseline - now > 0) {        // baseline has not yet passed
        enqueueByBaseline(m, &timerQ);
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    1cc4:	33 20       	and	r3, r3
    1cc6:	91 f1       	breq	.+100    	; 0x1d2c <async+0x2ce>
    1cc8:	c0 91 41 01 	lds	r28, 0x0141
    1ccc:	d0 91 42 01 	lds	r29, 0x0142
    1cd0:	20 97       	sbiw	r28, 0x00	; 0
    1cd2:	59 f1       	breq	.+86     	; 0x1d2a <async+0x2cc>
    1cd4:	60 91 43 01 	lds	r22, 0x0143
    1cd8:	70 91 44 01 	lds	r23, 0x0144
    1cdc:	e0 91 60 01 	lds	r30, 0x0160
    1ce0:	f0 91 61 01 	lds	r31, 0x0161
    1ce4:	db 01       	movw	r26, r22
    1ce6:	12 96       	adiw	r26, 0x02	; 2
    1ce8:	2d 91       	ld	r18, X+
    1cea:	3c 91       	ld	r19, X
    1cec:	13 97       	sbiw	r26, 0x03	; 3
    1cee:	86 81       	ldd	r24, Z+6	; 0x06
    1cf0:	97 81       	ldd	r25, Z+7	; 0x07
    1cf2:	a0 85       	ldd	r26, Z+8	; 0x08
    1cf4:	b1 85       	ldd	r27, Z+9	; 0x09
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	26 81       	ldd	r18, Z+6	; 0x06
    1cfa:	37 81       	ldd	r19, Z+7	; 0x07
    1cfc:	40 85       	ldd	r20, Z+8	; 0x08
    1cfe:	51 85       	ldd	r21, Z+9	; 0x09
    1d00:	82 1b       	sub	r24, r18
    1d02:	93 0b       	sbc	r25, r19
    1d04:	a4 0b       	sbc	r26, r20
    1d06:	b5 0b       	sbc	r27, r21
    1d08:	b7 ff       	sbrs	r27, 7
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <async+0x2cc>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1d0c:	88 81       	ld	r24, Y
    1d0e:	99 81       	ldd	r25, Y+1	; 0x01
    1d10:	90 93 42 01 	sts	0x0142, r25
    1d14:	80 93 41 01 	sts	0x0141, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1d18:	79 83       	std	Y+1, r23	; 0x01
    1d1a:	68 83       	st	Y, r22
    *stack = t;
    1d1c:	d0 93 44 01 	sts	0x0144, r29
    1d20:	c0 93 43 01 	sts	0x0143, r28
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
    1d24:	ce 01       	movw	r24, r28
    1d26:	0e 94 3e 03 	call	0x67c	; 0x67c <dispatch>
        }
    }
    
    ENABLE(status);
    1d2a:	78 94       	sei
    return m;
}
    1d2c:	c8 01       	movw	r24, r16
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	df 90       	pop	r13
    1d3c:	cf 90       	pop	r12
    1d3e:	bf 90       	pop	r11
    1d40:	af 90       	pop	r10
    1d42:	9f 90       	pop	r9
    1d44:	8f 90       	pop	r8
    1d46:	7f 90       	pop	r7
    1d48:	6f 90       	pop	r6
    1d4a:	5f 90       	pop	r5
    1d4c:	4f 90       	pop	r4
    1d4e:	3f 90       	pop	r3
    1d50:	08 95       	ret

00001d52 <writeDigit>:
#define clrscr {LCDDR0&=0x66;LCDDR1&=0x66;LCDDR2&=0x66;LCDDR5=0x00;LCDDR6=0x00;LCDDR7=0x00;LCDDR10=0x00;LCDDR11=0x00;LCDDR12=0x00;LCDDR15=0x00;LCDDR16=0x00;LCDDR17=0x00;}

static int seg[]={0x1551,0x8110,0x11e1,0x11b1,0x05b0,0x14b1,0x14f1,0x1110,0x15f1,0x15b1};

int  writeDigit(LCD *self, int digitPos)
{
    1d52:	fb 01       	movw	r30, r22
	switch(digitPos%10)
    1d54:	cb 01       	movw	r24, r22
    1d56:	6a e0       	ldi	r22, 0x0A	; 10
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	91 05       	cpc	r25, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <writeDigit+0x14>
    1d64:	82 c0       	rjmp	.+260    	; 0x1e6a <writeDigit+0x118>
    1d66:	83 30       	cpi	r24, 0x03	; 3
    1d68:	91 05       	cpc	r25, r1
    1d6a:	34 f4       	brge	.+12     	; 0x1d78 <writeDigit+0x26>
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	81 f0       	breq	.+32     	; 0x1d90 <writeDigit+0x3e>
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <writeDigit+0x24>
    1d74:	53 c1       	rjmp	.+678    	; 0x201c <writeDigit+0x2ca>
    1d76:	41 c0       	rjmp	.+130    	; 0x1dfa <writeDigit+0xa8>
    1d78:	84 30       	cpi	r24, 0x04	; 4
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <writeDigit+0x2e>
    1d7e:	e2 c0       	rjmp	.+452    	; 0x1f44 <writeDigit+0x1f2>
    1d80:	84 30       	cpi	r24, 0x04	; 4
    1d82:	91 05       	cpc	r25, r1
    1d84:	0c f4       	brge	.+2      	; 0x1d88 <writeDigit+0x36>
    1d86:	a6 c0       	rjmp	.+332    	; 0x1ed4 <writeDigit+0x182>
    1d88:	05 97       	sbiw	r24, 0x05	; 5
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <writeDigit+0x3c>
    1d8c:	47 c1       	rjmp	.+654    	; 0x201c <writeDigit+0x2ca>
    1d8e:	0f c1       	rjmp	.+542    	; 0x1fae <writeDigit+0x25c>
	{
		case 0:
		{
			LCDDR0 = (LCDDR0 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1d90:	40 91 ec 00 	lds	r20, 0x00EC
    1d94:	cf 01       	movw	r24, r30
    1d96:	6a e0       	ldi	r22, 0x0A	; 10
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1d9e:	fb 01       	movw	r30, r22
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	e9 5b       	subi	r30, 0xB9	; 185
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	20 81       	ld	r18, Z
    1daa:	31 81       	ldd	r19, Z+1	; 0x01
    1dac:	83 2f       	mov	r24, r19
    1dae:	82 95       	swap	r24
    1db0:	8f 70       	andi	r24, 0x0F	; 15
    1db2:	40 7f       	andi	r20, 0xF0	; 240
    1db4:	48 2b       	or	r20, r24
    1db6:	40 93 ec 00 	sts	0x00EC, r20
			LCDDR5 = (LCDDR5 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1dba:	40 91 f1 00 	lds	r20, 0x00F1
    1dbe:	83 2f       	mov	r24, r19
    1dc0:	99 27       	eor	r25, r25
    1dc2:	87 fd       	sbrc	r24, 7
    1dc4:	9a 95       	dec	r25
    1dc6:	8f 70       	andi	r24, 0x0F	; 15
    1dc8:	40 7f       	andi	r20, 0xF0	; 240
    1dca:	84 2b       	or	r24, r20
    1dcc:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1dd0:	40 91 f6 00 	lds	r20, 0x00F6
    1dd4:	c9 01       	movw	r24, r18
    1dd6:	e4 e0       	ldi	r30, 0x04	; 4
    1dd8:	95 95       	asr	r25
    1dda:	87 95       	ror	r24
    1ddc:	ea 95       	dec	r30
    1dde:	e1 f7       	brne	.-8      	; 0x1dd8 <writeDigit+0x86>
    1de0:	8f 70       	andi	r24, 0x0F	; 15
    1de2:	40 7f       	andi	r20, 0xF0	; 240
    1de4:	84 2b       	or	r24, r20
    1de6:	80 93 f6 00 	sts	0x00F6, r24
			LCDDR15 = (LCDDR15 & 0xf0) | (seg[digitPos/10]&0x000f);
    1dea:	80 91 fb 00 	lds	r24, 0x00FB
    1dee:	2f 70       	andi	r18, 0x0F	; 15
    1df0:	80 7f       	andi	r24, 0xF0	; 240
    1df2:	28 2b       	or	r18, r24
    1df4:	20 93 fb 00 	sts	0x00FB, r18
    1df8:	08 95       	ret
			break;
		}
		case 1:
		{
			LCDDR0 = (LCDDR0 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1dfa:	20 91 ec 00 	lds	r18, 0x00EC
    1dfe:	cf 01       	movw	r24, r30
    1e00:	6a e0       	ldi	r22, 0x0A	; 10
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1e08:	fb 01       	movw	r30, r22
    1e0a:	ee 0f       	add	r30, r30
    1e0c:	ff 1f       	adc	r31, r31
    1e0e:	e9 5b       	subi	r30, 0xB9	; 185
    1e10:	fe 4f       	sbci	r31, 0xFE	; 254
    1e12:	40 81       	ld	r20, Z
    1e14:	51 81       	ldd	r21, Z+1	; 0x01
    1e16:	85 2f       	mov	r24, r21
    1e18:	99 27       	eor	r25, r25
    1e1a:	87 fd       	sbrc	r24, 7
    1e1c:	9a 95       	dec	r25
    1e1e:	80 7f       	andi	r24, 0xF0	; 240
    1e20:	2f 70       	andi	r18, 0x0F	; 15
    1e22:	82 2b       	or	r24, r18
    1e24:	80 93 ec 00 	sts	0x00EC, r24
			LCDDR5 = (LCDDR5 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1e28:	20 91 f1 00 	lds	r18, 0x00F1
    1e2c:	ca 01       	movw	r24, r20
    1e2e:	34 e0       	ldi	r19, 0x04	; 4
    1e30:	95 95       	asr	r25
    1e32:	87 95       	ror	r24
    1e34:	3a 95       	dec	r19
    1e36:	e1 f7       	brne	.-8      	; 0x1e30 <writeDigit+0xde>
    1e38:	80 7f       	andi	r24, 0xF0	; 240
    1e3a:	2f 70       	andi	r18, 0x0F	; 15
    1e3c:	82 2b       	or	r24, r18
    1e3e:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1e42:	80 91 f6 00 	lds	r24, 0x00F6
    1e46:	94 2f       	mov	r25, r20
    1e48:	90 7f       	andi	r25, 0xF0	; 240
    1e4a:	8f 70       	andi	r24, 0x0F	; 15
    1e4c:	98 2b       	or	r25, r24
    1e4e:	90 93 f6 00 	sts	0x00F6, r25
			LCDDR15 = (LCDDR15 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1e52:	80 91 fb 00 	lds	r24, 0x00FB
    1e56:	b4 e0       	ldi	r27, 0x04	; 4
    1e58:	44 0f       	add	r20, r20
    1e5a:	55 1f       	adc	r21, r21
    1e5c:	ba 95       	dec	r27
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <writeDigit+0x106>
    1e60:	8f 70       	andi	r24, 0x0F	; 15
    1e62:	84 2b       	or	r24, r20
    1e64:	80 93 fb 00 	sts	0x00FB, r24
    1e68:	08 95       	ret
			break;
		}
		case 2:
		{
			LCDDR1 = (LCDDR1 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1e6a:	40 91 ed 00 	lds	r20, 0x00ED
    1e6e:	cf 01       	movw	r24, r30
    1e70:	6a e0       	ldi	r22, 0x0A	; 10
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1e78:	fb 01       	movw	r30, r22
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	e9 5b       	subi	r30, 0xB9	; 185
    1e80:	fe 4f       	sbci	r31, 0xFE	; 254
    1e82:	20 81       	ld	r18, Z
    1e84:	31 81       	ldd	r19, Z+1	; 0x01
    1e86:	83 2f       	mov	r24, r19
    1e88:	82 95       	swap	r24
    1e8a:	8f 70       	andi	r24, 0x0F	; 15
    1e8c:	40 7f       	andi	r20, 0xF0	; 240
    1e8e:	48 2b       	or	r20, r24
    1e90:	40 93 ed 00 	sts	0x00ED, r20
			LCDDR6 = (LCDDR6 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1e94:	40 91 f2 00 	lds	r20, 0x00F2
    1e98:	83 2f       	mov	r24, r19
    1e9a:	99 27       	eor	r25, r25
    1e9c:	87 fd       	sbrc	r24, 7
    1e9e:	9a 95       	dec	r25
    1ea0:	8f 70       	andi	r24, 0x0F	; 15
    1ea2:	40 7f       	andi	r20, 0xF0	; 240
    1ea4:	84 2b       	or	r24, r20
    1ea6:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1eaa:	40 91 f7 00 	lds	r20, 0x00F7
    1eae:	c9 01       	movw	r24, r18
    1eb0:	e4 e0       	ldi	r30, 0x04	; 4
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	ea 95       	dec	r30
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <writeDigit+0x160>
    1eba:	8f 70       	andi	r24, 0x0F	; 15
    1ebc:	40 7f       	andi	r20, 0xF0	; 240
    1ebe:	84 2b       	or	r24, r20
    1ec0:	80 93 f7 00 	sts	0x00F7, r24
			LCDDR16 = (LCDDR16 & 0xf0) | (seg[digitPos/10]&0x000f);
    1ec4:	80 91 fc 00 	lds	r24, 0x00FC
    1ec8:	2f 70       	andi	r18, 0x0F	; 15
    1eca:	80 7f       	andi	r24, 0xF0	; 240
    1ecc:	28 2b       	or	r18, r24
    1ece:	20 93 fc 00 	sts	0x00FC, r18
    1ed2:	08 95       	ret
			break;
		}
		case 3:
		{
			LCDDR1 = (LCDDR1 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1ed4:	20 91 ed 00 	lds	r18, 0x00ED
    1ed8:	cf 01       	movw	r24, r30
    1eda:	6a e0       	ldi	r22, 0x0A	; 10
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1ee2:	fb 01       	movw	r30, r22
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	e9 5b       	subi	r30, 0xB9	; 185
    1eea:	fe 4f       	sbci	r31, 0xFE	; 254
    1eec:	40 81       	ld	r20, Z
    1eee:	51 81       	ldd	r21, Z+1	; 0x01
    1ef0:	85 2f       	mov	r24, r21
    1ef2:	99 27       	eor	r25, r25
    1ef4:	87 fd       	sbrc	r24, 7
    1ef6:	9a 95       	dec	r25
    1ef8:	80 7f       	andi	r24, 0xF0	; 240
    1efa:	2f 70       	andi	r18, 0x0F	; 15
    1efc:	82 2b       	or	r24, r18
    1efe:	80 93 ed 00 	sts	0x00ED, r24
			LCDDR6 = (LCDDR6 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1f02:	20 91 f2 00 	lds	r18, 0x00F2
    1f06:	ca 01       	movw	r24, r20
    1f08:	34 e0       	ldi	r19, 0x04	; 4
    1f0a:	95 95       	asr	r25
    1f0c:	87 95       	ror	r24
    1f0e:	3a 95       	dec	r19
    1f10:	e1 f7       	brne	.-8      	; 0x1f0a <writeDigit+0x1b8>
    1f12:	80 7f       	andi	r24, 0xF0	; 240
    1f14:	2f 70       	andi	r18, 0x0F	; 15
    1f16:	82 2b       	or	r24, r18
    1f18:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1f1c:	80 91 f7 00 	lds	r24, 0x00F7
    1f20:	94 2f       	mov	r25, r20
    1f22:	90 7f       	andi	r25, 0xF0	; 240
    1f24:	8f 70       	andi	r24, 0x0F	; 15
    1f26:	98 2b       	or	r25, r24
    1f28:	90 93 f7 00 	sts	0x00F7, r25
			LCDDR16 = (LCDDR16 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1f2c:	80 91 fc 00 	lds	r24, 0x00FC
    1f30:	b4 e0       	ldi	r27, 0x04	; 4
    1f32:	44 0f       	add	r20, r20
    1f34:	55 1f       	adc	r21, r21
    1f36:	ba 95       	dec	r27
    1f38:	e1 f7       	brne	.-8      	; 0x1f32 <writeDigit+0x1e0>
    1f3a:	8f 70       	andi	r24, 0x0F	; 15
    1f3c:	84 2b       	or	r24, r20
    1f3e:	80 93 fc 00 	sts	0x00FC, r24
    1f42:	08 95       	ret
			break;
		}
		case 4:
		{
			LCDDR2 = (LCDDR2 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1f44:	40 91 ee 00 	lds	r20, 0x00EE
    1f48:	cf 01       	movw	r24, r30
    1f4a:	6a e0       	ldi	r22, 0x0A	; 10
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1f52:	fb 01       	movw	r30, r22
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	e9 5b       	subi	r30, 0xB9	; 185
    1f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5c:	20 81       	ld	r18, Z
    1f5e:	31 81       	ldd	r19, Z+1	; 0x01
    1f60:	83 2f       	mov	r24, r19
    1f62:	82 95       	swap	r24
    1f64:	8f 70       	andi	r24, 0x0F	; 15
    1f66:	40 7f       	andi	r20, 0xF0	; 240
    1f68:	48 2b       	or	r20, r24
    1f6a:	40 93 ee 00 	sts	0x00EE, r20
			LCDDR7 = (LCDDR7 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1f6e:	40 91 f3 00 	lds	r20, 0x00F3
    1f72:	83 2f       	mov	r24, r19
    1f74:	99 27       	eor	r25, r25
    1f76:	87 fd       	sbrc	r24, 7
    1f78:	9a 95       	dec	r25
    1f7a:	8f 70       	andi	r24, 0x0F	; 15
    1f7c:	40 7f       	andi	r20, 0xF0	; 240
    1f7e:	84 2b       	or	r24, r20
    1f80:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1f84:	40 91 f8 00 	lds	r20, 0x00F8
    1f88:	c9 01       	movw	r24, r18
    1f8a:	e4 e0       	ldi	r30, 0x04	; 4
    1f8c:	95 95       	asr	r25
    1f8e:	87 95       	ror	r24
    1f90:	ea 95       	dec	r30
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <writeDigit+0x23a>
    1f94:	8f 70       	andi	r24, 0x0F	; 15
    1f96:	40 7f       	andi	r20, 0xF0	; 240
    1f98:	84 2b       	or	r24, r20
    1f9a:	80 93 f8 00 	sts	0x00F8, r24
			LCDDR17 = (LCDDR17 & 0xf0) | (seg[digitPos/10]&0x000f);
    1f9e:	80 91 fd 00 	lds	r24, 0x00FD
    1fa2:	2f 70       	andi	r18, 0x0F	; 15
    1fa4:	80 7f       	andi	r24, 0xF0	; 240
    1fa6:	28 2b       	or	r18, r24
    1fa8:	20 93 fd 00 	sts	0x00FD, r18
    1fac:	08 95       	ret
			break;
		}
		case 5:
		{
			LCDDR2 = (LCDDR2 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1fae:	20 91 ee 00 	lds	r18, 0x00EE
    1fb2:	cf 01       	movw	r24, r30
    1fb4:	6a e0       	ldi	r22, 0x0A	; 10
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    1fbc:	fb 01       	movw	r30, r22
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	e9 5b       	subi	r30, 0xB9	; 185
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	40 81       	ld	r20, Z
    1fc8:	51 81       	ldd	r21, Z+1	; 0x01
    1fca:	85 2f       	mov	r24, r21
    1fcc:	99 27       	eor	r25, r25
    1fce:	87 fd       	sbrc	r24, 7
    1fd0:	9a 95       	dec	r25
    1fd2:	80 7f       	andi	r24, 0xF0	; 240
    1fd4:	2f 70       	andi	r18, 0x0F	; 15
    1fd6:	82 2b       	or	r24, r18
    1fd8:	80 93 ee 00 	sts	0x00EE, r24
			LCDDR7 = (LCDDR7 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1fdc:	20 91 f3 00 	lds	r18, 0x00F3
    1fe0:	ca 01       	movw	r24, r20
    1fe2:	34 e0       	ldi	r19, 0x04	; 4
    1fe4:	95 95       	asr	r25
    1fe6:	87 95       	ror	r24
    1fe8:	3a 95       	dec	r19
    1fea:	e1 f7       	brne	.-8      	; 0x1fe4 <writeDigit+0x292>
    1fec:	80 7f       	andi	r24, 0xF0	; 240
    1fee:	2f 70       	andi	r18, 0x0F	; 15
    1ff0:	82 2b       	or	r24, r18
    1ff2:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1ff6:	80 91 f8 00 	lds	r24, 0x00F8
    1ffa:	94 2f       	mov	r25, r20
    1ffc:	90 7f       	andi	r25, 0xF0	; 240
    1ffe:	8f 70       	andi	r24, 0x0F	; 15
    2000:	98 2b       	or	r25, r24
    2002:	90 93 f8 00 	sts	0x00F8, r25
			LCDDR17 = (LCDDR17 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    2006:	80 91 fd 00 	lds	r24, 0x00FD
    200a:	94 e0       	ldi	r25, 0x04	; 4
    200c:	44 0f       	add	r20, r20
    200e:	55 1f       	adc	r21, r21
    2010:	9a 95       	dec	r25
    2012:	e1 f7       	brne	.-8      	; 0x200c <writeDigit+0x2ba>
    2014:	8f 70       	andi	r24, 0x0F	; 15
    2016:	84 2b       	or	r24, r20
    2018:	80 93 fd 00 	sts	0x00FD, r24
			break;
		}
		default:;
	}
}
    201c:	08 95       	ret

0000201e <writeInt>:


int  writeInt(LCD *self, int val)
{
    201e:	af 92       	push	r10
    2020:	bf 92       	push	r11
    2022:	df 92       	push	r13
    2024:	ef 92       	push	r14
    2026:	ff 92       	push	r15
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <writeInt+0x14>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <writeInt+0x16>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <writeInt+0x18>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	5c 01       	movw	r10, r24
    203c:	16 2f       	mov	r17, r22
    203e:	47 2f       	mov	r20, r23
	unsigned char a[6],j=5,n=1,k;
	int temp=val;
	
	clrscr;
    2040:	80 91 ec 00 	lds	r24, 0x00EC
    2044:	86 76       	andi	r24, 0x66	; 102
    2046:	80 93 ec 00 	sts	0x00EC, r24
    204a:	80 91 ed 00 	lds	r24, 0x00ED
    204e:	86 76       	andi	r24, 0x66	; 102
    2050:	80 93 ed 00 	sts	0x00ED, r24
    2054:	80 91 ee 00 	lds	r24, 0x00EE
    2058:	86 76       	andi	r24, 0x66	; 102
    205a:	80 93 ee 00 	sts	0x00EE, r24
    205e:	10 92 f1 00 	sts	0x00F1, r1
    2062:	10 92 f2 00 	sts	0x00F2, r1
    2066:	10 92 f3 00 	sts	0x00F3, r1
    206a:	10 92 f6 00 	sts	0x00F6, r1
    206e:	10 92 f7 00 	sts	0x00F7, r1
    2072:	10 92 f8 00 	sts	0x00F8, r1
    2076:	10 92 fb 00 	sts	0x00FB, r1
    207a:	10 92 fc 00 	sts	0x00FC, r1
    207e:	10 92 fd 00 	sts	0x00FD, r1
    2082:	26 2f       	mov	r18, r22
    2084:	37 2f       	mov	r19, r23
    2086:	c9 01       	movw	r24, r18
    2088:	01 e0       	ldi	r16, 0x01	; 1
    208a:	01 c0       	rjmp	.+2      	; 0x208e <writeInt+0x70>
	
	while(temp/=10) n++;
    208c:	0f 5f       	subi	r16, 0xFF	; 255
    208e:	6a e0       	ldi	r22, 0x0A	; 10
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    2096:	cb 01       	movw	r24, r22
    2098:	61 15       	cp	r22, r1
    209a:	71 05       	cpc	r23, r1
    209c:	b9 f7       	brne	.-18     	; 0x208c <writeInt+0x6e>
	if(n>6) n=6;
    209e:	07 30       	cpi	r16, 0x07	; 7
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <writeInt+0x86>
    20a2:	06 e0       	ldi	r16, 0x06	; 6
    20a4:	30 2f       	mov	r19, r16
    20a6:	25 e0       	ldi	r18, 0x05	; 5
	k=n;
	while(k--)
	{
		a[j]=val%10;
    20a8:	7e 01       	movw	r14, r28
    20aa:	08 94       	sec
    20ac:	e1 1c       	adc	r14, r1
    20ae:	f1 1c       	adc	r15, r1
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <writeInt+0xbc>
    20b2:	f7 01       	movw	r30, r14
    20b4:	e2 0f       	add	r30, r18
    20b6:	f1 1d       	adc	r31, r1
    20b8:	81 2f       	mov	r24, r17
    20ba:	94 2f       	mov	r25, r20
    20bc:	6a e0       	ldi	r22, 0x0A	; 10
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    20c4:	80 83       	st	Z, r24
		val/=10;
    20c6:	81 2f       	mov	r24, r17
    20c8:	94 2f       	mov	r25, r20
    20ca:	6a e0       	ldi	r22, 0x0A	; 10
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__divmodhi4>
    20d2:	16 2f       	mov	r17, r22
    20d4:	47 2f       	mov	r20, r23
		j--;
    20d6:	21 50       	subi	r18, 0x01	; 1
    20d8:	31 50       	subi	r19, 0x01	; 1
	clrscr;
	
	while(temp/=10) n++;
	if(n>6) n=6;
	k=n;
	while(k--)
    20da:	33 23       	and	r19, r19
    20dc:	51 f7       	brne	.-44     	; 0x20b2 <writeInt+0x94>
    20de:	15 e0       	ldi	r17, 0x05	; 5
		j--;
	}
	j=5;
	while(n--)
	{
		writeDigit(self, a[j]*10+j);
    20e0:	7e 01       	movw	r14, r28
    20e2:	08 94       	sec
    20e4:	e1 1c       	adc	r14, r1
    20e6:	f1 1c       	adc	r15, r1
    20e8:	ba e0       	ldi	r27, 0x0A	; 10
    20ea:	db 2e       	mov	r13, r27
    20ec:	10 c0       	rjmp	.+32     	; 0x210e <writeInt+0xf0>
    20ee:	81 2f       	mov	r24, r17
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	f7 01       	movw	r30, r14
    20f4:	e8 0f       	add	r30, r24
    20f6:	f9 1f       	adc	r31, r25
    20f8:	60 81       	ld	r22, Z
    20fa:	6d 9d       	mul	r22, r13
    20fc:	b0 01       	movw	r22, r0
    20fe:	11 24       	eor	r1, r1
    2100:	68 0f       	add	r22, r24
    2102:	79 1f       	adc	r23, r25
    2104:	c5 01       	movw	r24, r10
    2106:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <writeDigit>
		j--;
    210a:	11 50       	subi	r17, 0x01	; 1
    210c:	01 50       	subi	r16, 0x01	; 1
		a[j]=val%10;
		val/=10;
		j--;
	}
	j=5;
	while(n--)
    210e:	00 23       	and	r16, r16
    2110:	71 f7       	brne	.-36     	; 0x20ee <writeInt+0xd0>
	{
		writeDigit(self, a[j]*10+j);
		j--;
	}
}
    2112:	26 96       	adiw	r28, 0x06	; 6
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	bf 90       	pop	r11
    212e:	af 90       	pop	r10
    2130:	08 95       	ret

00002132 <segmentOn>:


int  segmentOn(LCD *self, int segment)
{
	switch(segment)
    2132:	65 30       	cpi	r22, 0x05	; 5
    2134:	71 05       	cpc	r23, r1
    2136:	c1 f1       	breq	.+112    	; 0x21a8 <segmentOn+0x76>
    2138:	66 30       	cpi	r22, 0x06	; 6
    213a:	71 05       	cpc	r23, r1
    213c:	94 f4       	brge	.+36     	; 0x2162 <segmentOn+0x30>
    213e:	62 30       	cpi	r22, 0x02	; 2
    2140:	71 05       	cpc	r23, r1
    2142:	21 f1       	breq	.+72     	; 0x218c <segmentOn+0x5a>
    2144:	63 30       	cpi	r22, 0x03	; 3
    2146:	71 05       	cpc	r23, r1
    2148:	2c f4       	brge	.+10     	; 0x2154 <segmentOn+0x22>
    214a:	61 30       	cpi	r22, 0x01	; 1
    214c:	71 05       	cpc	r23, r1
    214e:	09 f0       	breq	.+2      	; 0x2152 <segmentOn+0x20>
    2150:	40 c0       	rjmp	.+128    	; 0x21d2 <segmentOn+0xa0>
    2152:	18 c0       	rjmp	.+48     	; 0x2184 <segmentOn+0x52>
    2154:	63 30       	cpi	r22, 0x03	; 3
    2156:	71 05       	cpc	r23, r1
    2158:	f9 f0       	breq	.+62     	; 0x2198 <segmentOn+0x66>
    215a:	64 30       	cpi	r22, 0x04	; 4
    215c:	71 05       	cpc	r23, r1
    215e:	c9 f5       	brne	.+114    	; 0x21d2 <segmentOn+0xa0>
    2160:	1f c0       	rjmp	.+62     	; 0x21a0 <segmentOn+0x6e>
    2162:	68 30       	cpi	r22, 0x08	; 8
    2164:	71 05       	cpc	r23, r1
    2166:	31 f1       	breq	.+76     	; 0x21b4 <segmentOn+0x82>
    2168:	69 30       	cpi	r22, 0x09	; 9
    216a:	71 05       	cpc	r23, r1
    216c:	24 f4       	brge	.+8      	; 0x2176 <segmentOn+0x44>
    216e:	67 30       	cpi	r22, 0x07	; 7
    2170:	71 05       	cpc	r23, r1
    2172:	79 f5       	brne	.+94     	; 0x21d2 <segmentOn+0xa0>
    2174:	1f c0       	rjmp	.+62     	; 0x21b4 <segmentOn+0x82>
    2176:	69 30       	cpi	r22, 0x09	; 9
    2178:	71 05       	cpc	r23, r1
    217a:	01 f1       	breq	.+64     	; 0x21bc <segmentOn+0x8a>
    217c:	6a 30       	cpi	r22, 0x0A	; 10
    217e:	71 05       	cpc	r23, r1
    2180:	41 f5       	brne	.+80     	; 0x21d2 <segmentOn+0xa0>
    2182:	22 c0       	rjmp	.+68     	; 0x21c8 <segmentOn+0x96>
	{
		case 1: LCDDR0|=0x04;break;
    2184:	80 91 ec 00 	lds	r24, 0x00EC
    2188:	84 60       	ori	r24, 0x04	; 4
    218a:	03 c0       	rjmp	.+6      	; 0x2192 <segmentOn+0x60>
		case 2: LCDDR0|=0x40;break;
    218c:	80 91 ec 00 	lds	r24, 0x00EC
    2190:	80 64       	ori	r24, 0x40	; 64
    2192:	80 93 ec 00 	sts	0x00EC, r24
    2196:	08 95       	ret
		case 3: LCDDR3 =0x01;break;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 ef 00 	sts	0x00EF, r24
    219e:	08 95       	ret
		case 4: LCDDR1|=0x02;break;
    21a0:	80 91 ed 00 	lds	r24, 0x00ED
    21a4:	82 60       	ori	r24, 0x02	; 2
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <segmentOn+0x7c>
		case 5: LCDDR1|=0x20;break;
    21a8:	80 91 ed 00 	lds	r24, 0x00ED
    21ac:	80 62       	ori	r24, 0x20	; 32
    21ae:	80 93 ed 00 	sts	0x00ED, r24
    21b2:	08 95       	ret
		case 7: LCDDR18=0x01;break;
		case 8: LCDDR18=0x01;break;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	80 93 fe 00 	sts	0x00FE, r24
    21ba:	08 95       	ret
		case 9: LCDDR2|=0x04;break;
    21bc:	80 91 ee 00 	lds	r24, 0x00EE
    21c0:	84 60       	ori	r24, 0x04	; 4
    21c2:	80 93 ee 00 	sts	0x00EE, r24
    21c6:	08 95       	ret
		case 10: LCDDR2|=0x40;break;
    21c8:	80 91 ee 00 	lds	r24, 0x00EE
    21cc:	80 64       	ori	r24, 0x40	; 64
    21ce:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    21d2:	08 95       	ret

000021d4 <segmentOff>:


int  segmentOff(LCD *self, int segment)
{
	switch(segment)
    21d4:	65 30       	cpi	r22, 0x05	; 5
    21d6:	71 05       	cpc	r23, r1
    21d8:	b1 f1       	breq	.+108    	; 0x2246 <segmentOff+0x72>
    21da:	66 30       	cpi	r22, 0x06	; 6
    21dc:	71 05       	cpc	r23, r1
    21de:	8c f4       	brge	.+34     	; 0x2202 <segmentOff+0x2e>
    21e0:	62 30       	cpi	r22, 0x02	; 2
    21e2:	71 05       	cpc	r23, r1
    21e4:	19 f1       	breq	.+70     	; 0x222c <segmentOff+0x58>
    21e6:	63 30       	cpi	r22, 0x03	; 3
    21e8:	71 05       	cpc	r23, r1
    21ea:	24 f4       	brge	.+8      	; 0x21f4 <segmentOff+0x20>
    21ec:	61 30       	cpi	r22, 0x01	; 1
    21ee:	71 05       	cpc	r23, r1
    21f0:	f1 f5       	brne	.+124    	; 0x226e <segmentOff+0x9a>
    21f2:	18 c0       	rjmp	.+48     	; 0x2224 <segmentOff+0x50>
    21f4:	63 30       	cpi	r22, 0x03	; 3
    21f6:	71 05       	cpc	r23, r1
    21f8:	f9 f0       	breq	.+62     	; 0x2238 <segmentOff+0x64>
    21fa:	64 30       	cpi	r22, 0x04	; 4
    21fc:	71 05       	cpc	r23, r1
    21fe:	b9 f5       	brne	.+110    	; 0x226e <segmentOff+0x9a>
    2200:	1e c0       	rjmp	.+60     	; 0x223e <segmentOff+0x6a>
    2202:	68 30       	cpi	r22, 0x08	; 8
    2204:	71 05       	cpc	r23, r1
    2206:	29 f1       	breq	.+74     	; 0x2252 <segmentOff+0x7e>
    2208:	69 30       	cpi	r22, 0x09	; 9
    220a:	71 05       	cpc	r23, r1
    220c:	24 f4       	brge	.+8      	; 0x2216 <segmentOff+0x42>
    220e:	67 30       	cpi	r22, 0x07	; 7
    2210:	71 05       	cpc	r23, r1
    2212:	69 f5       	brne	.+90     	; 0x226e <segmentOff+0x9a>
    2214:	1e c0       	rjmp	.+60     	; 0x2252 <segmentOff+0x7e>
    2216:	69 30       	cpi	r22, 0x09	; 9
    2218:	71 05       	cpc	r23, r1
    221a:	f1 f0       	breq	.+60     	; 0x2258 <segmentOff+0x84>
    221c:	6a 30       	cpi	r22, 0x0A	; 10
    221e:	71 05       	cpc	r23, r1
    2220:	31 f5       	brne	.+76     	; 0x226e <segmentOff+0x9a>
    2222:	20 c0       	rjmp	.+64     	; 0x2264 <segmentOff+0x90>
	{
		case 1: LCDDR0&=~0x04;break;
    2224:	80 91 ec 00 	lds	r24, 0x00EC
    2228:	8b 7f       	andi	r24, 0xFB	; 251
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <segmentOff+0x5e>
		case 2: LCDDR0&=~0x40;break;
    222c:	80 91 ec 00 	lds	r24, 0x00EC
    2230:	8f 7b       	andi	r24, 0xBF	; 191
    2232:	80 93 ec 00 	sts	0x00EC, r24
    2236:	08 95       	ret
		case 3: LCDDR3 = 0x00;break;
    2238:	10 92 ef 00 	sts	0x00EF, r1
    223c:	08 95       	ret
		case 4: LCDDR1&=~0x02;break;
    223e:	80 91 ed 00 	lds	r24, 0x00ED
    2242:	8d 7f       	andi	r24, 0xFD	; 253
    2244:	03 c0       	rjmp	.+6      	; 0x224c <segmentOff+0x78>
		case 5: LCDDR1&=~0x20;break;
    2246:	80 91 ed 00 	lds	r24, 0x00ED
    224a:	8f 7d       	andi	r24, 0xDF	; 223
    224c:	80 93 ed 00 	sts	0x00ED, r24
    2250:	08 95       	ret
		case 7: LCDDR18= 0x00;break;
		case 8: LCDDR18= 0x00;break;
    2252:	10 92 fe 00 	sts	0x00FE, r1
    2256:	08 95       	ret
		case 9: LCDDR2&=~0x04;break;
    2258:	80 91 ee 00 	lds	r24, 0x00EE
    225c:	8b 7f       	andi	r24, 0xFB	; 251
    225e:	80 93 ee 00 	sts	0x00EE, r24
    2262:	08 95       	ret
		case 10: LCDDR2&=~0x40;break;
    2264:	80 91 ee 00 	lds	r24, 0x00EE
    2268:	8f 7b       	andi	r24, 0xBF	; 191
    226a:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    226e:	08 95       	ret

00002270 <blink>:
#include "TinyTimber.h"
#include "lcd.h"
#include "blinker.h"

int blink(Blinker *self, int on)
{
    2270:	8f 92       	push	r8
    2272:	9f 92       	push	r9
    2274:	af 92       	push	r10
    2276:	bf 92       	push	r11
    2278:	cf 92       	push	r12
    227a:	df 92       	push	r13
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	5c 01       	movw	r10, r24
    2286:	4b 01       	movw	r8, r22
	AFTER(MSEC(self->period),self,blink,1-on);
    2288:	01 e0       	ldi	r16, 0x01	; 1
    228a:	10 e0       	ldi	r17, 0x00	; 0
    228c:	06 1b       	sub	r16, r22
    228e:	17 0b       	sbc	r17, r23
    2290:	fc 01       	movw	r30, r24
    2292:	66 81       	ldd	r22, Z+6	; 0x06
    2294:	77 81       	ldd	r23, Z+7	; 0x07
    2296:	88 27       	eor	r24, r24
    2298:	77 fd       	sbrc	r23, 7
    229a:	80 95       	com	r24
    229c:	98 2f       	mov	r25, r24
    229e:	2d e7       	ldi	r18, 0x7D	; 125
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	0e 94 cf 11 	call	0x239e	; 0x239e <__mulsi3>
    22aa:	24 e0       	ldi	r18, 0x04	; 4
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	0e 94 01 12 	call	0x2402	; 0x2402 <__divmodsi4>
    22b6:	ca 01       	movw	r24, r20
    22b8:	b9 01       	movw	r22, r18
    22ba:	68 01       	movw	r12, r16
    22bc:	28 e3       	ldi	r18, 0x38	; 56
    22be:	e2 2e       	mov	r14, r18
    22c0:	21 e1       	ldi	r18, 0x11	; 17
    22c2:	f2 2e       	mov	r15, r18
    22c4:	85 01       	movw	r16, r10
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <async>
    22d2:	f5 01       	movw	r30, r10
    22d4:	c0 84       	ldd	r12, Z+8	; 0x08
    22d6:	d1 84       	ldd	r13, Z+9	; 0x09
    22d8:	04 81       	ldd	r16, Z+4	; 0x04
    22da:	15 81       	ldd	r17, Z+5	; 0x05
	
	if(on)
    22dc:	89 28       	or	r8, r9
    22de:	29 f0       	breq	.+10     	; 0x22ea <blink+0x7a>
	{
		ASYNC(self->lcd,segmentOff,self->segment);
    22e0:	9a ee       	ldi	r25, 0xEA	; 234
    22e2:	e9 2e       	mov	r14, r25
    22e4:	90 e1       	ldi	r25, 0x10	; 16
    22e6:	f9 2e       	mov	r15, r25
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <blink+0x82>
	}
	else
	{
		ASYNC(self->lcd,segmentOn,self->segment);
    22ea:	89 e9       	ldi	r24, 0x99	; 153
    22ec:	e8 2e       	mov	r14, r24
    22ee:	80 e1       	ldi	r24, 0x10	; 16
    22f0:	f8 2e       	mov	r15, r24
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <async>
	}
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	df 90       	pop	r13
    2310:	cf 90       	pop	r12
    2312:	bf 90       	pop	r11
    2314:	af 90       	pop	r10
    2316:	9f 90       	pop	r9
    2318:	8f 90       	pop	r8
    231a:	08 95       	ret

0000231c <setjmp>:
    231c:	dc 01       	movw	r26, r24
    231e:	2d 92       	st	X+, r2
    2320:	3d 92       	st	X+, r3
    2322:	4d 92       	st	X+, r4
    2324:	5d 92       	st	X+, r5
    2326:	6d 92       	st	X+, r6
    2328:	7d 92       	st	X+, r7
    232a:	8d 92       	st	X+, r8
    232c:	9d 92       	st	X+, r9
    232e:	ad 92       	st	X+, r10
    2330:	bd 92       	st	X+, r11
    2332:	cd 92       	st	X+, r12
    2334:	dd 92       	st	X+, r13
    2336:	ed 92       	st	X+, r14
    2338:	fd 92       	st	X+, r15
    233a:	0d 93       	st	X+, r16
    233c:	1d 93       	st	X+, r17
    233e:	cd 93       	st	X+, r28
    2340:	dd 93       	st	X+, r29
    2342:	ff 91       	pop	r31
    2344:	ef 91       	pop	r30
    2346:	8d b7       	in	r24, 0x3d	; 61
    2348:	8d 93       	st	X+, r24
    234a:	8e b7       	in	r24, 0x3e	; 62
    234c:	8d 93       	st	X+, r24
    234e:	8f b7       	in	r24, 0x3f	; 63
    2350:	8d 93       	st	X+, r24
    2352:	ed 93       	st	X+, r30
    2354:	fd 93       	st	X+, r31
    2356:	88 27       	eor	r24, r24
    2358:	99 27       	eor	r25, r25
    235a:	09 94       	ijmp

0000235c <longjmp>:
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	91 05       	cpc	r25, r1
    2364:	81 1d       	adc	r24, r1
    2366:	2d 90       	ld	r2, X+
    2368:	3d 90       	ld	r3, X+
    236a:	4d 90       	ld	r4, X+
    236c:	5d 90       	ld	r5, X+
    236e:	6d 90       	ld	r6, X+
    2370:	7d 90       	ld	r7, X+
    2372:	8d 90       	ld	r8, X+
    2374:	9d 90       	ld	r9, X+
    2376:	ad 90       	ld	r10, X+
    2378:	bd 90       	ld	r11, X+
    237a:	cd 90       	ld	r12, X+
    237c:	dd 90       	ld	r13, X+
    237e:	ed 90       	ld	r14, X+
    2380:	fd 90       	ld	r15, X+
    2382:	0d 91       	ld	r16, X+
    2384:	1d 91       	ld	r17, X+
    2386:	cd 91       	ld	r28, X+
    2388:	dd 91       	ld	r29, X+
    238a:	ed 91       	ld	r30, X+
    238c:	fd 91       	ld	r31, X+
    238e:	0d 90       	ld	r0, X+
    2390:	f8 94       	cli
    2392:	fe bf       	out	0x3e, r31	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	ed bf       	out	0x3d, r30	; 61
    2398:	ed 91       	ld	r30, X+
    239a:	fd 91       	ld	r31, X+
    239c:	09 94       	ijmp

0000239e <__mulsi3>:
    239e:	62 9f       	mul	r22, r18
    23a0:	d0 01       	movw	r26, r0
    23a2:	73 9f       	mul	r23, r19
    23a4:	f0 01       	movw	r30, r0
    23a6:	82 9f       	mul	r24, r18
    23a8:	e0 0d       	add	r30, r0
    23aa:	f1 1d       	adc	r31, r1
    23ac:	64 9f       	mul	r22, r20
    23ae:	e0 0d       	add	r30, r0
    23b0:	f1 1d       	adc	r31, r1
    23b2:	92 9f       	mul	r25, r18
    23b4:	f0 0d       	add	r31, r0
    23b6:	83 9f       	mul	r24, r19
    23b8:	f0 0d       	add	r31, r0
    23ba:	74 9f       	mul	r23, r20
    23bc:	f0 0d       	add	r31, r0
    23be:	65 9f       	mul	r22, r21
    23c0:	f0 0d       	add	r31, r0
    23c2:	99 27       	eor	r25, r25
    23c4:	72 9f       	mul	r23, r18
    23c6:	b0 0d       	add	r27, r0
    23c8:	e1 1d       	adc	r30, r1
    23ca:	f9 1f       	adc	r31, r25
    23cc:	63 9f       	mul	r22, r19
    23ce:	b0 0d       	add	r27, r0
    23d0:	e1 1d       	adc	r30, r1
    23d2:	f9 1f       	adc	r31, r25
    23d4:	bd 01       	movw	r22, r26
    23d6:	cf 01       	movw	r24, r30
    23d8:	11 24       	eor	r1, r1
    23da:	08 95       	ret

000023dc <__divmodhi4>:
    23dc:	97 fb       	bst	r25, 7
    23de:	09 2e       	mov	r0, r25
    23e0:	07 26       	eor	r0, r23
    23e2:	0a d0       	rcall	.+20     	; 0x23f8 <__divmodhi4_neg1>
    23e4:	77 fd       	sbrc	r23, 7
    23e6:	04 d0       	rcall	.+8      	; 0x23f0 <__divmodhi4_neg2>
    23e8:	27 d0       	rcall	.+78     	; 0x2438 <__udivmodhi4>
    23ea:	06 d0       	rcall	.+12     	; 0x23f8 <__divmodhi4_neg1>
    23ec:	00 20       	and	r0, r0
    23ee:	1a f4       	brpl	.+6      	; 0x23f6 <__divmodhi4_exit>

000023f0 <__divmodhi4_neg2>:
    23f0:	70 95       	com	r23
    23f2:	61 95       	neg	r22
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255

000023f6 <__divmodhi4_exit>:
    23f6:	08 95       	ret

000023f8 <__divmodhi4_neg1>:
    23f8:	f6 f7       	brtc	.-4      	; 0x23f6 <__divmodhi4_exit>
    23fa:	90 95       	com	r25
    23fc:	81 95       	neg	r24
    23fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2400:	08 95       	ret

00002402 <__divmodsi4>:
    2402:	97 fb       	bst	r25, 7
    2404:	09 2e       	mov	r0, r25
    2406:	05 26       	eor	r0, r21
    2408:	0e d0       	rcall	.+28     	; 0x2426 <__divmodsi4_neg1>
    240a:	57 fd       	sbrc	r21, 7
    240c:	04 d0       	rcall	.+8      	; 0x2416 <__divmodsi4_neg2>
    240e:	28 d0       	rcall	.+80     	; 0x2460 <__udivmodsi4>
    2410:	0a d0       	rcall	.+20     	; 0x2426 <__divmodsi4_neg1>
    2412:	00 1c       	adc	r0, r0
    2414:	38 f4       	brcc	.+14     	; 0x2424 <__divmodsi4_exit>

00002416 <__divmodsi4_neg2>:
    2416:	50 95       	com	r21
    2418:	40 95       	com	r20
    241a:	30 95       	com	r19
    241c:	21 95       	neg	r18
    241e:	3f 4f       	sbci	r19, 0xFF	; 255
    2420:	4f 4f       	sbci	r20, 0xFF	; 255
    2422:	5f 4f       	sbci	r21, 0xFF	; 255

00002424 <__divmodsi4_exit>:
    2424:	08 95       	ret

00002426 <__divmodsi4_neg1>:
    2426:	f6 f7       	brtc	.-4      	; 0x2424 <__divmodsi4_exit>
    2428:	90 95       	com	r25
    242a:	80 95       	com	r24
    242c:	70 95       	com	r23
    242e:	61 95       	neg	r22
    2430:	7f 4f       	sbci	r23, 0xFF	; 255
    2432:	8f 4f       	sbci	r24, 0xFF	; 255
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	08 95       	ret

00002438 <__udivmodhi4>:
    2438:	aa 1b       	sub	r26, r26
    243a:	bb 1b       	sub	r27, r27
    243c:	51 e1       	ldi	r21, 0x11	; 17
    243e:	07 c0       	rjmp	.+14     	; 0x244e <__udivmodhi4_ep>

00002440 <__udivmodhi4_loop>:
    2440:	aa 1f       	adc	r26, r26
    2442:	bb 1f       	adc	r27, r27
    2444:	a6 17       	cp	r26, r22
    2446:	b7 07       	cpc	r27, r23
    2448:	10 f0       	brcs	.+4      	; 0x244e <__udivmodhi4_ep>
    244a:	a6 1b       	sub	r26, r22
    244c:	b7 0b       	sbc	r27, r23

0000244e <__udivmodhi4_ep>:
    244e:	88 1f       	adc	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	5a 95       	dec	r21
    2454:	a9 f7       	brne	.-22     	; 0x2440 <__udivmodhi4_loop>
    2456:	80 95       	com	r24
    2458:	90 95       	com	r25
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	08 95       	ret

00002460 <__udivmodsi4>:
    2460:	a1 e2       	ldi	r26, 0x21	; 33
    2462:	1a 2e       	mov	r1, r26
    2464:	aa 1b       	sub	r26, r26
    2466:	bb 1b       	sub	r27, r27
    2468:	fd 01       	movw	r30, r26
    246a:	0d c0       	rjmp	.+26     	; 0x2486 <__udivmodsi4_ep>

0000246c <__udivmodsi4_loop>:
    246c:	aa 1f       	adc	r26, r26
    246e:	bb 1f       	adc	r27, r27
    2470:	ee 1f       	adc	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	a2 17       	cp	r26, r18
    2476:	b3 07       	cpc	r27, r19
    2478:	e4 07       	cpc	r30, r20
    247a:	f5 07       	cpc	r31, r21
    247c:	20 f0       	brcs	.+8      	; 0x2486 <__udivmodsi4_ep>
    247e:	a2 1b       	sub	r26, r18
    2480:	b3 0b       	sbc	r27, r19
    2482:	e4 0b       	sbc	r30, r20
    2484:	f5 0b       	sbc	r31, r21

00002486 <__udivmodsi4_ep>:
    2486:	66 1f       	adc	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	1a 94       	dec	r1
    2490:	69 f7       	brne	.-38     	; 0x246c <__udivmodsi4_loop>
    2492:	60 95       	com	r22
    2494:	70 95       	com	r23
    2496:	80 95       	com	r24
    2498:	90 95       	com	r25
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	bd 01       	movw	r22, r26
    24a0:	cf 01       	movw	r24, r30
    24a2:	08 95       	ret

000024a4 <_exit>:
    24a4:	f8 94       	cli

000024a6 <__stop_program>:
    24a6:	ff cf       	rjmp	.-2      	; 0x24a6 <__stop_program>

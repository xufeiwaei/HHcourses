
butterflyTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000009ba  00000a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000084c  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007e7  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea eb       	ldi	r30, 0xBA	; 186
  70:	f9 e0       	ldi	r31, 0x09	; 9
  72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a8 31       	cpi	r26, 0x18	; 24
  8a:	b1 07       	cpc	r27, r17
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 df 02 	call	0x5be	; 0x5be <main>
  92:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <lcd_int>:

long i=100000000;

void lcd_int(void)
{
	LCDCRA  = 0x80;
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	80 93 e4 00 	sts	0x00E4, r24
	LCDCRB  = 0xb7;
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	80 93 e5 00 	sts	0x00E5, r24
}
  a6:	08 95       	ret

000000a8 <writeChar>:

void writeChar(char ch,int pos)
{
  a8:	e8 2f       	mov	r30, r24
	if(ch>=0x30&&ch<=0x39)
  aa:	80 53       	subi	r24, 0x30	; 48
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	08 f0       	brcs	.+2      	; 0xb2 <writeChar+0xa>
  b0:	44 c1       	rjmp	.+648    	; 0x33a <writeChar+0x292>
	{
		switch(pos)
  b2:	62 30       	cpi	r22, 0x02	; 2
  b4:	71 05       	cpc	r23, r1
  b6:	09 f4       	brne	.+2      	; 0xba <writeChar+0x12>
  b8:	7b c0       	rjmp	.+246    	; 0x1b0 <writeChar+0x108>
  ba:	63 30       	cpi	r22, 0x03	; 3
  bc:	71 05       	cpc	r23, r1
  be:	44 f4       	brge	.+16     	; 0xd0 <writeChar+0x28>
  c0:	61 15       	cp	r22, r1
  c2:	71 05       	cpc	r23, r1
  c4:	91 f0       	breq	.+36     	; 0xea <writeChar+0x42>
  c6:	61 30       	cpi	r22, 0x01	; 1
  c8:	71 05       	cpc	r23, r1
  ca:	09 f0       	breq	.+2      	; 0xce <writeChar+0x26>
  cc:	36 c1       	rjmp	.+620    	; 0x33a <writeChar+0x292>
  ce:	3d c0       	rjmp	.+122    	; 0x14a <writeChar+0xa2>
  d0:	64 30       	cpi	r22, 0x04	; 4
  d2:	71 05       	cpc	r23, r1
  d4:	09 f4       	brne	.+2      	; 0xd8 <writeChar+0x30>
  d6:	cf c0       	rjmp	.+414    	; 0x276 <writeChar+0x1ce>
  d8:	64 30       	cpi	r22, 0x04	; 4
  da:	71 05       	cpc	r23, r1
  dc:	0c f4       	brge	.+2      	; 0xe0 <writeChar+0x38>
  de:	98 c0       	rjmp	.+304    	; 0x210 <writeChar+0x168>
  e0:	65 30       	cpi	r22, 0x05	; 5
  e2:	71 05       	cpc	r23, r1
  e4:	09 f0       	breq	.+2      	; 0xe8 <writeChar+0x40>
  e6:	29 c1       	rjmp	.+594    	; 0x33a <writeChar+0x292>
  e8:	f6 c0       	rjmp	.+492    	; 0x2d6 <writeChar+0x22e>
		{
			case 0:
			{
				LCDDR0 = (LCDDR0 & 0xf0) | ((seg[ch-0x30]>>12)&0x000f);
  ea:	80 91 ec 00 	lds	r24, 0x00EC
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	ec 55       	subi	r30, 0x5C	; 92
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	20 81       	ld	r18, Z
  fa:	31 81       	ldd	r19, Z+1	; 0x01
  fc:	93 2f       	mov	r25, r19
  fe:	92 95       	swap	r25
 100:	9f 70       	andi	r25, 0x0F	; 15
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	89 2b       	or	r24, r25
 106:	80 93 ec 00 	sts	0x00EC, r24
				LCDDR5 = (LCDDR5 & 0xf0) | ((seg[ch-0x30]>>8)&0x000f);
 10a:	40 91 f1 00 	lds	r20, 0x00F1
 10e:	83 2f       	mov	r24, r19
 110:	99 27       	eor	r25, r25
 112:	87 fd       	sbrc	r24, 7
 114:	9a 95       	dec	r25
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	40 7f       	andi	r20, 0xF0	; 240
 11a:	84 2b       	or	r24, r20
 11c:	80 93 f1 00 	sts	0x00F1, r24
				LCDDR10 = (LCDDR10 & 0xf0) | ((seg[ch-0x30]>>4)&0x000f);
 120:	40 91 f6 00 	lds	r20, 0x00F6
 124:	c9 01       	movw	r24, r18
 126:	e4 e0       	ldi	r30, 0x04	; 4
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	ea 95       	dec	r30
 12e:	e1 f7       	brne	.-8      	; 0x128 <writeChar+0x80>
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	40 7f       	andi	r20, 0xF0	; 240
 134:	84 2b       	or	r24, r20
 136:	80 93 f6 00 	sts	0x00F6, r24
				LCDDR15 = (LCDDR15 & 0xf0) | (seg[ch-0x30]&0x000f);
 13a:	80 91 fb 00 	lds	r24, 0x00FB
 13e:	2f 70       	andi	r18, 0x0F	; 15
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	28 2b       	or	r18, r24
 144:	20 93 fb 00 	sts	0x00FB, r18
 148:	08 95       	ret
				break;
			}
			case 1:
			{
				LCDDR0 = (LCDDR0 & 0x0f) | ((seg[ch-0x30]>>8)&0x00f0);
 14a:	20 91 ec 00 	lds	r18, 0x00EC
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	ec 55       	subi	r30, 0x5C	; 92
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	40 81       	ld	r20, Z
 15a:	51 81       	ldd	r21, Z+1	; 0x01
 15c:	85 2f       	mov	r24, r21
 15e:	99 27       	eor	r25, r25
 160:	87 fd       	sbrc	r24, 7
 162:	9a 95       	dec	r25
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	2f 70       	andi	r18, 0x0F	; 15
 168:	82 2b       	or	r24, r18
 16a:	80 93 ec 00 	sts	0x00EC, r24
				LCDDR5 = (LCDDR5 & 0x0f) | ((seg[ch-0x30]>>4)&0x00f0);
 16e:	20 91 f1 00 	lds	r18, 0x00F1
 172:	ca 01       	movw	r24, r20
 174:	34 e0       	ldi	r19, 0x04	; 4
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	3a 95       	dec	r19
 17c:	e1 f7       	brne	.-8      	; 0x176 <writeChar+0xce>
 17e:	80 7f       	andi	r24, 0xF0	; 240
 180:	2f 70       	andi	r18, 0x0F	; 15
 182:	82 2b       	or	r24, r18
 184:	80 93 f1 00 	sts	0x00F1, r24
				LCDDR10 = (LCDDR10 & 0x0f) | ((seg[ch-0x30])&0x00f0);
 188:	80 91 f6 00 	lds	r24, 0x00F6
 18c:	94 2f       	mov	r25, r20
 18e:	90 7f       	andi	r25, 0xF0	; 240
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	98 2b       	or	r25, r24
 194:	90 93 f6 00 	sts	0x00F6, r25
				LCDDR15 = (LCDDR15 & 0x0f) | ((seg[ch-0x30]<<4)&0x00f0);
 198:	80 91 fb 00 	lds	r24, 0x00FB
 19c:	b4 e0       	ldi	r27, 0x04	; 4
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	ba 95       	dec	r27
 1a4:	e1 f7       	brne	.-8      	; 0x19e <writeChar+0xf6>
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	84 2b       	or	r24, r20
 1aa:	80 93 fb 00 	sts	0x00FB, r24
 1ae:	08 95       	ret
				break;
			}
			case 2:
			{
				LCDDR1 = (LCDDR1 & 0xf0) | ((seg[ch-0x30]>>12)&0x000f);
 1b0:	80 91 ed 00 	lds	r24, 0x00ED
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	ec 55       	subi	r30, 0x5C	; 92
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	20 81       	ld	r18, Z
 1c0:	31 81       	ldd	r19, Z+1	; 0x01
 1c2:	93 2f       	mov	r25, r19
 1c4:	92 95       	swap	r25
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	89 2b       	or	r24, r25
 1cc:	80 93 ed 00 	sts	0x00ED, r24
				LCDDR6 = (LCDDR6 & 0xf0) | ((seg[ch-0x30]>>8)&0x000f);
 1d0:	40 91 f2 00 	lds	r20, 0x00F2
 1d4:	83 2f       	mov	r24, r19
 1d6:	99 27       	eor	r25, r25
 1d8:	87 fd       	sbrc	r24, 7
 1da:	9a 95       	dec	r25
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	40 7f       	andi	r20, 0xF0	; 240
 1e0:	84 2b       	or	r24, r20
 1e2:	80 93 f2 00 	sts	0x00F2, r24
				LCDDR11 = (LCDDR11 & 0xf0) | ((seg[ch-0x30]>>4)&0x000f);
 1e6:	40 91 f7 00 	lds	r20, 0x00F7
 1ea:	c9 01       	movw	r24, r18
 1ec:	e4 e0       	ldi	r30, 0x04	; 4
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	ea 95       	dec	r30
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <writeChar+0x146>
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	40 7f       	andi	r20, 0xF0	; 240
 1fa:	84 2b       	or	r24, r20
 1fc:	80 93 f7 00 	sts	0x00F7, r24
				LCDDR16 = (LCDDR16 & 0xf0) | (seg[ch-0x30]&0x000f);
 200:	80 91 fc 00 	lds	r24, 0x00FC
 204:	2f 70       	andi	r18, 0x0F	; 15
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	28 2b       	or	r18, r24
 20a:	20 93 fc 00 	sts	0x00FC, r18
 20e:	08 95       	ret
				break;
			}
			case 3:
			{
				LCDDR1 = (LCDDR1 & 0x0f) | ((seg[ch-0x30]>>8)&0x00f0);
 210:	20 91 ed 00 	lds	r18, 0x00ED
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	ec 55       	subi	r30, 0x5C	; 92
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	40 81       	ld	r20, Z
 220:	51 81       	ldd	r21, Z+1	; 0x01
 222:	85 2f       	mov	r24, r21
 224:	99 27       	eor	r25, r25
 226:	87 fd       	sbrc	r24, 7
 228:	9a 95       	dec	r25
 22a:	80 7f       	andi	r24, 0xF0	; 240
 22c:	2f 70       	andi	r18, 0x0F	; 15
 22e:	82 2b       	or	r24, r18
 230:	80 93 ed 00 	sts	0x00ED, r24
				LCDDR6 = (LCDDR6 & 0x0f) | ((seg[ch-0x30]>>4)&0x00f0);
 234:	20 91 f2 00 	lds	r18, 0x00F2
 238:	ca 01       	movw	r24, r20
 23a:	34 e0       	ldi	r19, 0x04	; 4
 23c:	95 95       	asr	r25
 23e:	87 95       	ror	r24
 240:	3a 95       	dec	r19
 242:	e1 f7       	brne	.-8      	; 0x23c <writeChar+0x194>
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	2f 70       	andi	r18, 0x0F	; 15
 248:	82 2b       	or	r24, r18
 24a:	80 93 f2 00 	sts	0x00F2, r24
				LCDDR11 = (LCDDR11 & 0x0f) | ((seg[ch-0x30])&0x00f0);
 24e:	80 91 f7 00 	lds	r24, 0x00F7
 252:	94 2f       	mov	r25, r20
 254:	90 7f       	andi	r25, 0xF0	; 240
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	98 2b       	or	r25, r24
 25a:	90 93 f7 00 	sts	0x00F7, r25
				LCDDR16 = (LCDDR16 & 0x0f) | ((seg[ch-0x30]<<4)&0x00f0);
 25e:	80 91 fc 00 	lds	r24, 0x00FC
 262:	b4 e0       	ldi	r27, 0x04	; 4
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	ba 95       	dec	r27
 26a:	e1 f7       	brne	.-8      	; 0x264 <writeChar+0x1bc>
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	84 2b       	or	r24, r20
 270:	80 93 fc 00 	sts	0x00FC, r24
 274:	08 95       	ret
				break;
			}
			case 4:
			{
				LCDDR2 = (LCDDR2 & 0xf0) | ((seg[ch-0x30]>>12)&0x000f);
 276:	80 91 ee 00 	lds	r24, 0x00EE
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	ec 55       	subi	r30, 0x5C	; 92
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	20 81       	ld	r18, Z
 286:	31 81       	ldd	r19, Z+1	; 0x01
 288:	93 2f       	mov	r25, r19
 28a:	92 95       	swap	r25
 28c:	9f 70       	andi	r25, 0x0F	; 15
 28e:	80 7f       	andi	r24, 0xF0	; 240
 290:	89 2b       	or	r24, r25
 292:	80 93 ee 00 	sts	0x00EE, r24
				LCDDR7 = (LCDDR7 & 0xf0) | ((seg[ch-0x30]>>8)&0x000f);
 296:	40 91 f3 00 	lds	r20, 0x00F3
 29a:	83 2f       	mov	r24, r19
 29c:	99 27       	eor	r25, r25
 29e:	87 fd       	sbrc	r24, 7
 2a0:	9a 95       	dec	r25
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	40 7f       	andi	r20, 0xF0	; 240
 2a6:	84 2b       	or	r24, r20
 2a8:	80 93 f3 00 	sts	0x00F3, r24
				LCDDR12 = (LCDDR12 & 0xf0) | ((seg[ch-0x30]>>4)&0x000f);
 2ac:	40 91 f8 00 	lds	r20, 0x00F8
 2b0:	c9 01       	movw	r24, r18
 2b2:	e4 e0       	ldi	r30, 0x04	; 4
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	ea 95       	dec	r30
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <writeChar+0x20c>
 2bc:	8f 70       	andi	r24, 0x0F	; 15
 2be:	40 7f       	andi	r20, 0xF0	; 240
 2c0:	84 2b       	or	r24, r20
 2c2:	80 93 f8 00 	sts	0x00F8, r24
				LCDDR17 = (LCDDR17 & 0xf0) | (seg[ch-0x30]&0x000f);
 2c6:	80 91 fd 00 	lds	r24, 0x00FD
 2ca:	2f 70       	andi	r18, 0x0F	; 15
 2cc:	80 7f       	andi	r24, 0xF0	; 240
 2ce:	28 2b       	or	r18, r24
 2d0:	20 93 fd 00 	sts	0x00FD, r18
 2d4:	08 95       	ret
				break;
			}
			case 5:
			{
				LCDDR2 = (LCDDR2 & 0x0f) | ((seg[ch-0x30]>>8)&0x00f0);
 2d6:	20 91 ee 00 	lds	r18, 0x00EE
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	ec 55       	subi	r30, 0x5C	; 92
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	40 81       	ld	r20, Z
 2e6:	51 81       	ldd	r21, Z+1	; 0x01
 2e8:	85 2f       	mov	r24, r21
 2ea:	99 27       	eor	r25, r25
 2ec:	87 fd       	sbrc	r24, 7
 2ee:	9a 95       	dec	r25
 2f0:	80 7f       	andi	r24, 0xF0	; 240
 2f2:	2f 70       	andi	r18, 0x0F	; 15
 2f4:	82 2b       	or	r24, r18
 2f6:	80 93 ee 00 	sts	0x00EE, r24
				LCDDR7 = (LCDDR7 & 0x0f) | ((seg[ch-0x30]>>4)&0x00f0);
 2fa:	20 91 f3 00 	lds	r18, 0x00F3
 2fe:	ca 01       	movw	r24, r20
 300:	34 e0       	ldi	r19, 0x04	; 4
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	3a 95       	dec	r19
 308:	e1 f7       	brne	.-8      	; 0x302 <writeChar+0x25a>
 30a:	80 7f       	andi	r24, 0xF0	; 240
 30c:	2f 70       	andi	r18, 0x0F	; 15
 30e:	82 2b       	or	r24, r18
 310:	80 93 f3 00 	sts	0x00F3, r24
				LCDDR12 = (LCDDR12 & 0x0f) | ((seg[ch-0x30])&0x00f0);
 314:	80 91 f8 00 	lds	r24, 0x00F8
 318:	94 2f       	mov	r25, r20
 31a:	90 7f       	andi	r25, 0xF0	; 240
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	98 2b       	or	r25, r24
 320:	90 93 f8 00 	sts	0x00F8, r25
				LCDDR17 = (LCDDR17 & 0x0f) | ((seg[ch-0x30]<<4)&0x00f0);
 324:	80 91 fd 00 	lds	r24, 0x00FD
 328:	94 e0       	ldi	r25, 0x04	; 4
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	9a 95       	dec	r25
 330:	e1 f7       	brne	.-8      	; 0x32a <writeChar+0x282>
 332:	8f 70       	andi	r24, 0x0F	; 15
 334:	84 2b       	or	r24, r20
 336:	80 93 fd 00 	sts	0x00FD, r24
 33a:	08 95       	ret

0000033c <writeLong>:
}



void writeLong(long i)
{
 33c:	8f 92       	push	r8
 33e:	9f 92       	push	r9
 340:	af 92       	push	r10
 342:	bf 92       	push	r11
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	df 93       	push	r29
 352:	cf 93       	push	r28
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	28 97       	sbiw	r28, 0x08	; 8
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	5b 01       	movw	r10, r22
 366:	6c 01       	movw	r12, r24
 368:	cb 01       	movw	r24, r22
 36a:	d6 01       	movw	r26, r12
 36c:	bc 01       	movw	r22, r24
 36e:	cd 01       	movw	r24, r26
 370:	11 e0       	ldi	r17, 0x01	; 1
 372:	01 c0       	rjmp	.+2      	; 0x376 <writeLong+0x3a>
	unsigned char a[6],j=5,n=1,k;
	long temp=i;
	while(temp/=10) n++;
 374:	1f 5f       	subi	r17, 0xFF	; 255
 376:	2a e0       	ldi	r18, 0x0A	; 10
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	0e 94 9e 04 	call	0x93c	; 0x93c <__divmodsi4>
 382:	c9 01       	movw	r24, r18
 384:	da 01       	movw	r26, r20
 386:	bc 01       	movw	r22, r24
 388:	cd 01       	movw	r24, r26
 38a:	61 15       	cp	r22, r1
 38c:	71 05       	cpc	r23, r1
 38e:	81 05       	cpc	r24, r1
 390:	91 05       	cpc	r25, r1
 392:	81 f7       	brne	.-32     	; 0x374 <writeLong+0x38>
	if(n>6) n=6;
 394:	17 30       	cpi	r17, 0x07	; 7
 396:	08 f0       	brcs	.+2      	; 0x39a <writeLong+0x5e>
 398:	16 e0       	ldi	r17, 0x06	; 6
 39a:	e1 2e       	mov	r14, r17
 39c:	b5 e0       	ldi	r27, 0x05	; 5
 39e:	fb 2e       	mov	r15, r27
	k=n;
	while(k--)
	{
		a[j]=i%10;
 3a0:	4e 01       	movw	r8, r28
 3a2:	08 94       	sec
 3a4:	81 1c       	adc	r8, r1
 3a6:	91 1c       	adc	r9, r1
 3a8:	1c c0       	rjmp	.+56     	; 0x3e2 <writeLong+0xa6>
 3aa:	c4 01       	movw	r24, r8
 3ac:	8f 0d       	add	r24, r15
 3ae:	91 1d       	adc	r25, r1
 3b0:	98 87       	std	Y+8, r25	; 0x08
 3b2:	8f 83       	std	Y+7, r24	; 0x07
 3b4:	b5 01       	movw	r22, r10
 3b6:	c6 01       	movw	r24, r12
 3b8:	2a e0       	ldi	r18, 0x0A	; 10
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	0e 94 9e 04 	call	0x93c	; 0x93c <__divmodsi4>
 3c4:	ef 81       	ldd	r30, Y+7	; 0x07
 3c6:	f8 85       	ldd	r31, Y+8	; 0x08
 3c8:	60 83       	st	Z, r22
		i/=10;
 3ca:	b5 01       	movw	r22, r10
 3cc:	c6 01       	movw	r24, r12
 3ce:	2a e0       	ldi	r18, 0x0A	; 10
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	0e 94 9e 04 	call	0x93c	; 0x93c <__divmodsi4>
 3da:	59 01       	movw	r10, r18
 3dc:	6a 01       	movw	r12, r20
		j--;
 3de:	fa 94       	dec	r15
 3e0:	ea 94       	dec	r14
	unsigned char a[6],j=5,n=1,k;
	long temp=i;
	while(temp/=10) n++;
	if(n>6) n=6;
	k=n;
	while(k--)
 3e2:	ee 20       	and	r14, r14
 3e4:	11 f7       	brne	.-60     	; 0x3aa <writeLong+0x6e>
 3e6:	05 e0       	ldi	r16, 0x05	; 5
		j--;
	}
	j=5;
	while(n--)
	{
		writeChar(a[j]+0x30,j);
 3e8:	7e 01       	movw	r14, r28
 3ea:	08 94       	sec
 3ec:	e1 1c       	adc	r14, r1
 3ee:	f1 1c       	adc	r15, r1
 3f0:	0b c0       	rjmp	.+22     	; 0x408 <writeLong+0xcc>
 3f2:	60 2f       	mov	r22, r16
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	f7 01       	movw	r30, r14
 3f8:	e6 0f       	add	r30, r22
 3fa:	f7 1f       	adc	r31, r23
 3fc:	80 81       	ld	r24, Z
 3fe:	80 5d       	subi	r24, 0xD0	; 208
 400:	0e 94 54 00 	call	0xa8	; 0xa8 <writeChar>
		j--;
 404:	01 50       	subi	r16, 0x01	; 1
 406:	11 50       	subi	r17, 0x01	; 1
		a[j]=i%10;
		i/=10;
		j--;
	}
	j=5;
	while(n--)
 408:	11 23       	and	r17, r17
 40a:	99 f7       	brne	.-26     	; 0x3f2 <writeLong+0xb6>
	{
		writeChar(a[j]+0x30,j);
		j--;
	}
}
 40c:	28 96       	adiw	r28, 0x08	; 8
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	cf 91       	pop	r28
 41a:	df 91       	pop	r29
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	08 95       	ret

00000432 <disp_on>:

void disp_on(void)
{
	

	LCDDR3=0x01;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 ef 00 	sts	0x00EF, r24
	LCDDR13=0x00;
 438:	10 92 f9 00 	sts	0x00F9, r1
}
 43c:	08 95       	ret

0000043e <disp_off>:

void disp_off(void)
{
	
	LCDDR3=0x00;
 43e:	10 92 ef 00 	sts	0x00EF, r1
	LCDDR13=0x01;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	80 93 f9 00 	sts	0x00F9, r24
	
}
 448:	08 95       	ret

0000044a <button>:
	//PORTB |=1<<7;
	//LCDDR13=0x01;

	//while(1)
	{
		if((PINB&(1<<7))) disp_on();
 44a:	1f 9b       	sbis	0x03, 7	; 3
 44c:	06 c0       	rjmp	.+12     	; 0x45a <button+0x10>

void disp_on(void)
{
	

	LCDDR3=0x01;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 93 ef 00 	sts	0x00EF, r24
	LCDDR13=0x00;
 454:	10 92 f9 00 	sts	0x00F9, r1
 458:	08 95       	ret
}

void disp_off(void)
{
	
	LCDDR3=0x00;
 45a:	10 92 ef 00 	sts	0x00EF, r1
	LCDDR13=0x01;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 f9 00 	sts	0x00F9, r24
 464:	08 95       	ret

00000466 <blink>:

void blink(void)
{
	{
		
		if(TCNT1<15625) blink_off;
 466:	80 91 84 00 	lds	r24, 0x0084
 46a:	90 91 85 00 	lds	r25, 0x0085
 46e:	89 50       	subi	r24, 0x09	; 9
 470:	9d 43       	sbci	r25, 0x3D	; 61
 472:	18 f4       	brcc	.+6      	; 0x47a <blink+0x14>
 474:	10 92 f4 00 	sts	0x00F4, r1
 478:	08 95       	ret
	
		else if(TCNT1<31250)
 47a:	80 91 84 00 	lds	r24, 0x0084
 47e:	90 91 85 00 	lds	r25, 0x0085
 482:	82 51       	subi	r24, 0x12	; 18
 484:	9a 47       	sbci	r25, 0x7A	; 122
 486:	20 f4       	brcc	.+8      	; 0x490 <blink+0x2a>
		{
			blink_on;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	80 93 f4 00 	sts	0x00F4, r24
 48e:	08 95       	ret
		}
		
		else TCNT1=0;
 490:	10 92 85 00 	sts	0x0085, r1
 494:	10 92 84 00 	sts	0x0084, r1
 498:	08 95       	ret

0000049a <is_prime>:
	}
}


int is_prime(long i)
{
 49a:	6f 92       	push	r6
 49c:	7f 92       	push	r7
 49e:	8f 92       	push	r8
 4a0:	9f 92       	push	r9
 4a2:	af 92       	push	r10
 4a4:	bf 92       	push	r11
 4a6:	cf 92       	push	r12
 4a8:	df 92       	push	r13
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	5b 01       	movw	r10, r22
 4b4:	6c 01       	movw	r12, r24
	long n;
	long sqrt_value;
	if(i==0||i==1) return 0;
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	a8 16       	cp	r10, r24
 4ba:	b1 04       	cpc	r11, r1
 4bc:	c1 04       	cpc	r12, r1
 4be:	d1 04       	cpc	r13, r1
 4c0:	90 f1       	brcs	.+100    	; 0x526 <__stack+0x27>
	else if (i==2) return 1;
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	a8 16       	cp	r10, r24
 4c6:	b1 04       	cpc	r11, r1
 4c8:	c1 04       	cpc	r12, r1
 4ca:	d1 04       	cpc	r13, r1
 4cc:	79 f1       	breq	.+94     	; 0x52c <__stack+0x2d>
	else
	{
		sqrt_value=sqrt(i)+1;
 4ce:	c6 01       	movw	r24, r12
 4d0:	b5 01       	movw	r22, r10
 4d2:	0e 94 ad 03 	call	0x75a	; 0x75a <__floatsisf>
 4d6:	0e 94 3d 04 	call	0x87a	; 0x87a <sqrt>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e8       	ldi	r20, 0x80	; 128
 4e0:	5f e3       	ldi	r21, 0x3F	; 63
 4e2:	0e 94 16 03 	call	0x62c	; 0x62c <__addsf3>
 4e6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fixsfsi>
 4ea:	3b 01       	movw	r6, r22
 4ec:	4c 01       	movw	r8, r24
 4ee:	12 e0       	ldi	r17, 0x02	; 2
 4f0:	e1 2e       	mov	r14, r17
 4f2:	f1 2c       	mov	r15, r1
 4f4:	01 2d       	mov	r16, r1
 4f6:	11 2d       	mov	r17, r1
 4f8:	10 c0       	rjmp	.+32     	; 0x51a <__stack+0x1b>
		for(n=2;n<sqrt_value;n++)
		{
			if(i%n==0) return 0;
 4fa:	c6 01       	movw	r24, r12
 4fc:	b5 01       	movw	r22, r10
 4fe:	a8 01       	movw	r20, r16
 500:	97 01       	movw	r18, r14
 502:	0e 94 9e 04 	call	0x93c	; 0x93c <__divmodsi4>
 506:	61 15       	cp	r22, r1
 508:	71 05       	cpc	r23, r1
 50a:	81 05       	cpc	r24, r1
 50c:	91 05       	cpc	r25, r1
 50e:	59 f0       	breq	.+22     	; 0x526 <__stack+0x27>
	if(i==0||i==1) return 0;
	else if (i==2) return 1;
	else
	{
		sqrt_value=sqrt(i)+1;
		for(n=2;n<sqrt_value;n++)
 510:	08 94       	sec
 512:	e1 1c       	adc	r14, r1
 514:	f1 1c       	adc	r15, r1
 516:	01 1d       	adc	r16, r1
 518:	11 1d       	adc	r17, r1
 51a:	e6 14       	cp	r14, r6
 51c:	f7 04       	cpc	r15, r7
 51e:	08 05       	cpc	r16, r8
 520:	19 05       	cpc	r17, r9
 522:	5c f3       	brlt	.-42     	; 0x4fa <is_prime+0x60>
 524:	03 c0       	rjmp	.+6      	; 0x52c <__stack+0x2d>
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__stack+0x31>
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
			if(i%n==0) return 0;
		}
		return 1;
	}
	
}
 530:	c9 01       	movw	r24, r18
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	bf 90       	pop	r11
 540:	af 90       	pop	r10
 542:	9f 90       	pop	r9
 544:	8f 90       	pop	r8
 546:	7f 90       	pop	r7
 548:	6f 90       	pop	r6
 54a:	08 95       	ret

0000054c <primes>:


void primes(void)
{
 54c:	0c c0       	rjmp	.+24     	; 0x566 <primes+0x1a>
	//long i=0;
	//while(1)
	{
		while(!(is_prime(i))) i++;
 54e:	2f 5f       	subi	r18, 0xFF	; 255
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	4f 4f       	sbci	r20, 0xFF	; 255
 554:	5f 4f       	sbci	r21, 0xFF	; 255
 556:	20 93 00 01 	sts	0x0100, r18
 55a:	30 93 01 01 	sts	0x0101, r19
 55e:	40 93 02 01 	sts	0x0102, r20
 562:	50 93 03 01 	sts	0x0103, r21
 566:	60 91 00 01 	lds	r22, 0x0100
 56a:	70 91 01 01 	lds	r23, 0x0101
 56e:	80 91 02 01 	lds	r24, 0x0102
 572:	90 91 03 01 	lds	r25, 0x0103
 576:	0e 94 4d 02 	call	0x49a	; 0x49a <is_prime>
 57a:	20 91 00 01 	lds	r18, 0x0100
 57e:	30 91 01 01 	lds	r19, 0x0101
 582:	40 91 02 01 	lds	r20, 0x0102
 586:	50 91 03 01 	lds	r21, 0x0103
 58a:	89 2b       	or	r24, r25
 58c:	01 f3       	breq	.-64     	; 0x54e <primes+0x2>
		writeLong(i);
 58e:	ca 01       	movw	r24, r20
 590:	b9 01       	movw	r22, r18
 592:	0e 94 9e 01 	call	0x33c	; 0x33c <writeLong>
		i++;
 596:	80 91 00 01 	lds	r24, 0x0100
 59a:	90 91 01 01 	lds	r25, 0x0101
 59e:	a0 91 02 01 	lds	r26, 0x0102
 5a2:	b0 91 03 01 	lds	r27, 0x0103
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	a1 1d       	adc	r26, r1
 5aa:	b1 1d       	adc	r27, r1
 5ac:	80 93 00 01 	sts	0x0100, r24
 5b0:	90 93 01 01 	sts	0x0101, r25
 5b4:	a0 93 02 01 	sts	0x0102, r26
 5b8:	b0 93 03 01 	sts	0x0103, r27
	}
}
 5bc:	08 95       	ret

000005be <main>:




int main(void)
{
 5be:	1f 93       	push	r17
	PORTB |=1<<7;
 5c0:	2f 9a       	sbi	0x05, 7	; 5
	TCCR1B=0x04;
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	80 93 81 00 	sts	0x0081, r24
	CLKPR=0x80;
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	80 93 61 00 	sts	0x0061, r24
	CLKPR=0x00;
 5ce:	10 92 61 00 	sts	0x0061, r1

long i=100000000;

void lcd_int(void)
{
	LCDCRA  = 0x80;
 5d2:	80 93 e4 00 	sts	0x00E4, r24
	LCDCRB  = 0xb7;
 5d6:	87 eb       	ldi	r24, 0xB7	; 183
 5d8:	80 93 e5 00 	sts	0x00E5, r24

void disp_on(void)
{
	

	LCDDR3=0x01;
 5dc:	11 e0       	ldi	r17, 0x01	; 1
	CLKPR=0x80;
	CLKPR=0x00;
	lcd_int();
	while(1)
	{
		primes();
 5de:	0e 94 a6 02 	call	0x54c	; 0x54c <primes>
	//PORTB |=1<<7;
	//LCDDR13=0x01;

	//while(1)
	{
		if((PINB&(1<<7))) disp_on();
 5e2:	1f 9b       	sbis	0x03, 7	; 3
 5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <main+0x32>

void disp_on(void)
{
	

	LCDDR3=0x01;
 5e6:	10 93 ef 00 	sts	0x00EF, r17
	LCDDR13=0x00;
 5ea:	10 92 f9 00 	sts	0x00F9, r1
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <main+0x3a>
}

void disp_off(void)
{
	
	LCDDR3=0x00;
 5f0:	10 92 ef 00 	sts	0x00EF, r1
	LCDDR13=0x01;
 5f4:	10 93 f9 00 	sts	0x00F9, r17

void blink(void)
{
	{
		
		if(TCNT1<15625) blink_off;
 5f8:	80 91 84 00 	lds	r24, 0x0084
 5fc:	90 91 85 00 	lds	r25, 0x0085
 600:	89 50       	subi	r24, 0x09	; 9
 602:	9d 43       	sbci	r25, 0x3D	; 61
 604:	18 f4       	brcc	.+6      	; 0x60c <main+0x4e>
 606:	10 92 f4 00 	sts	0x00F4, r1
 60a:	e9 cf       	rjmp	.-46     	; 0x5de <main+0x20>
	
		else if(TCNT1<31250)
 60c:	80 91 84 00 	lds	r24, 0x0084
 610:	90 91 85 00 	lds	r25, 0x0085
 614:	82 51       	subi	r24, 0x12	; 18
 616:	9a 47       	sbci	r25, 0x7A	; 122
 618:	18 f4       	brcc	.+6      	; 0x620 <main+0x62>
		{
			blink_on;
 61a:	10 93 f4 00 	sts	0x00F4, r17
 61e:	df cf       	rjmp	.-66     	; 0x5de <main+0x20>
		}
		
		else TCNT1=0;
 620:	10 92 85 00 	sts	0x0085, r1
 624:	10 92 84 00 	sts	0x0084, r1
 628:	da cf       	rjmp	.-76     	; 0x5de <main+0x20>

0000062a <__subsf3>:
 62a:	50 58       	subi	r21, 0x80	; 128

0000062c <__addsf3>:
 62c:	bb 27       	eor	r27, r27
 62e:	aa 27       	eor	r26, r26
 630:	0e d0       	rcall	.+28     	; 0x64e <__addsf3x>
 632:	e5 c0       	rjmp	.+458    	; 0x7fe <__fp_round>
 634:	d6 d0       	rcall	.+428    	; 0x7e2 <__fp_pscA>
 636:	30 f0       	brcs	.+12     	; 0x644 <__addsf3+0x18>
 638:	db d0       	rcall	.+438    	; 0x7f0 <__fp_pscB>
 63a:	20 f0       	brcs	.+8      	; 0x644 <__addsf3+0x18>
 63c:	31 f4       	brne	.+12     	; 0x64a <__addsf3+0x1e>
 63e:	9f 3f       	cpi	r25, 0xFF	; 255
 640:	11 f4       	brne	.+4      	; 0x646 <__addsf3+0x1a>
 642:	1e f4       	brtc	.+6      	; 0x64a <__addsf3+0x1e>
 644:	cb c0       	rjmp	.+406    	; 0x7dc <__fp_nan>
 646:	0e f4       	brtc	.+2      	; 0x64a <__addsf3+0x1e>
 648:	e0 95       	com	r30
 64a:	e7 fb       	bst	r30, 7
 64c:	c1 c0       	rjmp	.+386    	; 0x7d0 <__fp_inf>

0000064e <__addsf3x>:
 64e:	e9 2f       	mov	r30, r25
 650:	e7 d0       	rcall	.+462    	; 0x820 <__fp_split3>
 652:	80 f3       	brcs	.-32     	; 0x634 <__addsf3+0x8>
 654:	ba 17       	cp	r27, r26
 656:	62 07       	cpc	r22, r18
 658:	73 07       	cpc	r23, r19
 65a:	84 07       	cpc	r24, r20
 65c:	95 07       	cpc	r25, r21
 65e:	18 f0       	brcs	.+6      	; 0x666 <__addsf3x+0x18>
 660:	71 f4       	brne	.+28     	; 0x67e <__addsf3x+0x30>
 662:	9e f5       	brtc	.+102    	; 0x6ca <__addsf3x+0x7c>
 664:	ff c0       	rjmp	.+510    	; 0x864 <__fp_zero>
 666:	0e f4       	brtc	.+2      	; 0x66a <__addsf3x+0x1c>
 668:	e0 95       	com	r30
 66a:	0b 2e       	mov	r0, r27
 66c:	ba 2f       	mov	r27, r26
 66e:	a0 2d       	mov	r26, r0
 670:	0b 01       	movw	r0, r22
 672:	b9 01       	movw	r22, r18
 674:	90 01       	movw	r18, r0
 676:	0c 01       	movw	r0, r24
 678:	ca 01       	movw	r24, r20
 67a:	a0 01       	movw	r20, r0
 67c:	11 24       	eor	r1, r1
 67e:	ff 27       	eor	r31, r31
 680:	59 1b       	sub	r21, r25
 682:	99 f0       	breq	.+38     	; 0x6aa <__addsf3x+0x5c>
 684:	59 3f       	cpi	r21, 0xF9	; 249
 686:	50 f4       	brcc	.+20     	; 0x69c <__addsf3x+0x4e>
 688:	50 3e       	cpi	r21, 0xE0	; 224
 68a:	68 f1       	brcs	.+90     	; 0x6e6 <__addsf3x+0x98>
 68c:	1a 16       	cp	r1, r26
 68e:	f0 40       	sbci	r31, 0x00	; 0
 690:	a2 2f       	mov	r26, r18
 692:	23 2f       	mov	r18, r19
 694:	34 2f       	mov	r19, r20
 696:	44 27       	eor	r20, r20
 698:	58 5f       	subi	r21, 0xF8	; 248
 69a:	f3 cf       	rjmp	.-26     	; 0x682 <__addsf3x+0x34>
 69c:	46 95       	lsr	r20
 69e:	37 95       	ror	r19
 6a0:	27 95       	ror	r18
 6a2:	a7 95       	ror	r26
 6a4:	f0 40       	sbci	r31, 0x00	; 0
 6a6:	53 95       	inc	r21
 6a8:	c9 f7       	brne	.-14     	; 0x69c <__addsf3x+0x4e>
 6aa:	7e f4       	brtc	.+30     	; 0x6ca <__addsf3x+0x7c>
 6ac:	1f 16       	cp	r1, r31
 6ae:	ba 0b       	sbc	r27, r26
 6b0:	62 0b       	sbc	r22, r18
 6b2:	73 0b       	sbc	r23, r19
 6b4:	84 0b       	sbc	r24, r20
 6b6:	ba f0       	brmi	.+46     	; 0x6e6 <__addsf3x+0x98>
 6b8:	91 50       	subi	r25, 0x01	; 1
 6ba:	a1 f0       	breq	.+40     	; 0x6e4 <__addsf3x+0x96>
 6bc:	ff 0f       	add	r31, r31
 6be:	bb 1f       	adc	r27, r27
 6c0:	66 1f       	adc	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	c2 f7       	brpl	.-16     	; 0x6b8 <__addsf3x+0x6a>
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <__addsf3x+0x98>
 6ca:	ba 0f       	add	r27, r26
 6cc:	62 1f       	adc	r22, r18
 6ce:	73 1f       	adc	r23, r19
 6d0:	84 1f       	adc	r24, r20
 6d2:	48 f4       	brcc	.+18     	; 0x6e6 <__addsf3x+0x98>
 6d4:	87 95       	ror	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	b7 95       	ror	r27
 6dc:	f7 95       	ror	r31
 6de:	9e 3f       	cpi	r25, 0xFE	; 254
 6e0:	08 f0       	brcs	.+2      	; 0x6e4 <__addsf3x+0x96>
 6e2:	b3 cf       	rjmp	.-154    	; 0x64a <__addsf3+0x1e>
 6e4:	93 95       	inc	r25
 6e6:	88 0f       	add	r24, r24
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <__addsf3x+0x9e>
 6ea:	99 27       	eor	r25, r25
 6ec:	ee 0f       	add	r30, r30
 6ee:	97 95       	ror	r25
 6f0:	87 95       	ror	r24
 6f2:	08 95       	ret

000006f4 <__fixsfsi>:
 6f4:	04 d0       	rcall	.+8      	; 0x6fe <__fixunssfsi>
 6f6:	68 94       	set
 6f8:	b1 11       	cpse	r27, r1
 6fa:	b5 c0       	rjmp	.+362    	; 0x866 <__fp_szero>
 6fc:	08 95       	ret

000006fe <__fixunssfsi>:
 6fe:	98 d0       	rcall	.+304    	; 0x830 <__fp_splitA>
 700:	88 f0       	brcs	.+34     	; 0x724 <__fixunssfsi+0x26>
 702:	9f 57       	subi	r25, 0x7F	; 127
 704:	90 f0       	brcs	.+36     	; 0x72a <__fixunssfsi+0x2c>
 706:	b9 2f       	mov	r27, r25
 708:	99 27       	eor	r25, r25
 70a:	b7 51       	subi	r27, 0x17	; 23
 70c:	a0 f0       	brcs	.+40     	; 0x736 <__fixunssfsi+0x38>
 70e:	d1 f0       	breq	.+52     	; 0x744 <__fixunssfsi+0x46>
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	1a f0       	brmi	.+6      	; 0x720 <__fixunssfsi+0x22>
 71a:	ba 95       	dec	r27
 71c:	c9 f7       	brne	.-14     	; 0x710 <__fixunssfsi+0x12>
 71e:	12 c0       	rjmp	.+36     	; 0x744 <__fixunssfsi+0x46>
 720:	b1 30       	cpi	r27, 0x01	; 1
 722:	81 f0       	breq	.+32     	; 0x744 <__fixunssfsi+0x46>
 724:	9f d0       	rcall	.+318    	; 0x864 <__fp_zero>
 726:	b1 e0       	ldi	r27, 0x01	; 1
 728:	08 95       	ret
 72a:	9c c0       	rjmp	.+312    	; 0x864 <__fp_zero>
 72c:	67 2f       	mov	r22, r23
 72e:	78 2f       	mov	r23, r24
 730:	88 27       	eor	r24, r24
 732:	b8 5f       	subi	r27, 0xF8	; 248
 734:	39 f0       	breq	.+14     	; 0x744 <__fixunssfsi+0x46>
 736:	b9 3f       	cpi	r27, 0xF9	; 249
 738:	cc f3       	brlt	.-14     	; 0x72c <__fixunssfsi+0x2e>
 73a:	86 95       	lsr	r24
 73c:	77 95       	ror	r23
 73e:	67 95       	ror	r22
 740:	b3 95       	inc	r27
 742:	d9 f7       	brne	.-10     	; 0x73a <__fixunssfsi+0x3c>
 744:	3e f4       	brtc	.+14     	; 0x754 <__fixunssfsi+0x56>
 746:	90 95       	com	r25
 748:	80 95       	com	r24
 74a:	70 95       	com	r23
 74c:	61 95       	neg	r22
 74e:	7f 4f       	sbci	r23, 0xFF	; 255
 750:	8f 4f       	sbci	r24, 0xFF	; 255
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	08 95       	ret

00000756 <__floatunsisf>:
 756:	e8 94       	clt
 758:	09 c0       	rjmp	.+18     	; 0x76c <__floatsisf+0x12>

0000075a <__floatsisf>:
 75a:	97 fb       	bst	r25, 7
 75c:	3e f4       	brtc	.+14     	; 0x76c <__floatsisf+0x12>
 75e:	90 95       	com	r25
 760:	80 95       	com	r24
 762:	70 95       	com	r23
 764:	61 95       	neg	r22
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	99 23       	and	r25, r25
 76e:	a9 f0       	breq	.+42     	; 0x79a <__floatsisf+0x40>
 770:	f9 2f       	mov	r31, r25
 772:	96 e9       	ldi	r25, 0x96	; 150
 774:	bb 27       	eor	r27, r27
 776:	93 95       	inc	r25
 778:	f6 95       	lsr	r31
 77a:	87 95       	ror	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b7 95       	ror	r27
 782:	f1 11       	cpse	r31, r1
 784:	f8 cf       	rjmp	.-16     	; 0x776 <__floatsisf+0x1c>
 786:	fa f4       	brpl	.+62     	; 0x7c6 <__floatsisf+0x6c>
 788:	bb 0f       	add	r27, r27
 78a:	11 f4       	brne	.+4      	; 0x790 <__floatsisf+0x36>
 78c:	60 ff       	sbrs	r22, 0
 78e:	1b c0       	rjmp	.+54     	; 0x7c6 <__floatsisf+0x6c>
 790:	6f 5f       	subi	r22, 0xFF	; 255
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	16 c0       	rjmp	.+44     	; 0x7c6 <__floatsisf+0x6c>
 79a:	88 23       	and	r24, r24
 79c:	11 f0       	breq	.+4      	; 0x7a2 <__floatsisf+0x48>
 79e:	96 e9       	ldi	r25, 0x96	; 150
 7a0:	11 c0       	rjmp	.+34     	; 0x7c4 <__floatsisf+0x6a>
 7a2:	77 23       	and	r23, r23
 7a4:	21 f0       	breq	.+8      	; 0x7ae <__floatsisf+0x54>
 7a6:	9e e8       	ldi	r25, 0x8E	; 142
 7a8:	87 2f       	mov	r24, r23
 7aa:	76 2f       	mov	r23, r22
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <__floatsisf+0x5e>
 7ae:	66 23       	and	r22, r22
 7b0:	71 f0       	breq	.+28     	; 0x7ce <__floatsisf+0x74>
 7b2:	96 e8       	ldi	r25, 0x86	; 134
 7b4:	86 2f       	mov	r24, r22
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	2a f0       	brmi	.+10     	; 0x7c6 <__floatsisf+0x6c>
 7bc:	9a 95       	dec	r25
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	da f7       	brpl	.-10     	; 0x7bc <__floatsisf+0x62>
 7c6:	88 0f       	add	r24, r24
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__fp_inf>:
 7d0:	97 f9       	bld	r25, 7
 7d2:	9f 67       	ori	r25, 0x7F	; 127
 7d4:	80 e8       	ldi	r24, 0x80	; 128
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	08 95       	ret

000007dc <__fp_nan>:
 7dc:	9f ef       	ldi	r25, 0xFF	; 255
 7de:	80 ec       	ldi	r24, 0xC0	; 192
 7e0:	08 95       	ret

000007e2 <__fp_pscA>:
 7e2:	00 24       	eor	r0, r0
 7e4:	0a 94       	dec	r0
 7e6:	16 16       	cp	r1, r22
 7e8:	17 06       	cpc	r1, r23
 7ea:	18 06       	cpc	r1, r24
 7ec:	09 06       	cpc	r0, r25
 7ee:	08 95       	ret

000007f0 <__fp_pscB>:
 7f0:	00 24       	eor	r0, r0
 7f2:	0a 94       	dec	r0
 7f4:	12 16       	cp	r1, r18
 7f6:	13 06       	cpc	r1, r19
 7f8:	14 06       	cpc	r1, r20
 7fa:	05 06       	cpc	r0, r21
 7fc:	08 95       	ret

000007fe <__fp_round>:
 7fe:	09 2e       	mov	r0, r25
 800:	03 94       	inc	r0
 802:	00 0c       	add	r0, r0
 804:	11 f4       	brne	.+4      	; 0x80a <__fp_round+0xc>
 806:	88 23       	and	r24, r24
 808:	52 f0       	brmi	.+20     	; 0x81e <__fp_round+0x20>
 80a:	bb 0f       	add	r27, r27
 80c:	40 f4       	brcc	.+16     	; 0x81e <__fp_round+0x20>
 80e:	bf 2b       	or	r27, r31
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0x18>
 812:	60 ff       	sbrs	r22, 0
 814:	04 c0       	rjmp	.+8      	; 0x81e <__fp_round+0x20>
 816:	6f 5f       	subi	r22, 0xFF	; 255
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	08 95       	ret

00000820 <__fp_split3>:
 820:	57 fd       	sbrc	r21, 7
 822:	90 58       	subi	r25, 0x80	; 128
 824:	44 0f       	add	r20, r20
 826:	55 1f       	adc	r21, r21
 828:	59 f0       	breq	.+22     	; 0x840 <__fp_splitA+0x10>
 82a:	5f 3f       	cpi	r21, 0xFF	; 255
 82c:	71 f0       	breq	.+28     	; 0x84a <__fp_splitA+0x1a>
 82e:	47 95       	ror	r20

00000830 <__fp_splitA>:
 830:	88 0f       	add	r24, r24
 832:	97 fb       	bst	r25, 7
 834:	99 1f       	adc	r25, r25
 836:	61 f0       	breq	.+24     	; 0x850 <__fp_splitA+0x20>
 838:	9f 3f       	cpi	r25, 0xFF	; 255
 83a:	79 f0       	breq	.+30     	; 0x85a <__fp_splitA+0x2a>
 83c:	87 95       	ror	r24
 83e:	08 95       	ret
 840:	12 16       	cp	r1, r18
 842:	13 06       	cpc	r1, r19
 844:	14 06       	cpc	r1, r20
 846:	55 1f       	adc	r21, r21
 848:	f2 cf       	rjmp	.-28     	; 0x82e <__fp_split3+0xe>
 84a:	46 95       	lsr	r20
 84c:	f1 df       	rcall	.-30     	; 0x830 <__fp_splitA>
 84e:	08 c0       	rjmp	.+16     	; 0x860 <__fp_splitA+0x30>
 850:	16 16       	cp	r1, r22
 852:	17 06       	cpc	r1, r23
 854:	18 06       	cpc	r1, r24
 856:	99 1f       	adc	r25, r25
 858:	f1 cf       	rjmp	.-30     	; 0x83c <__fp_splitA+0xc>
 85a:	86 95       	lsr	r24
 85c:	71 05       	cpc	r23, r1
 85e:	61 05       	cpc	r22, r1
 860:	08 94       	sec
 862:	08 95       	ret

00000864 <__fp_zero>:
 864:	e8 94       	clt

00000866 <__fp_szero>:
 866:	bb 27       	eor	r27, r27
 868:	66 27       	eor	r22, r22
 86a:	77 27       	eor	r23, r23
 86c:	cb 01       	movw	r24, r22
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret
 872:	11 f4       	brne	.+4      	; 0x878 <__fp_szero+0x12>
 874:	0e f4       	brtc	.+2      	; 0x878 <__fp_szero+0x12>
 876:	b2 cf       	rjmp	.-156    	; 0x7dc <__fp_nan>
 878:	4a c0       	rjmp	.+148    	; 0x90e <__fp_mpack>

0000087a <sqrt>:
 87a:	da df       	rcall	.-76     	; 0x830 <__fp_splitA>
 87c:	d0 f3       	brcs	.-12     	; 0x872 <__fp_szero+0xc>
 87e:	99 23       	and	r25, r25
 880:	d9 f3       	breq	.-10     	; 0x878 <__fp_szero+0x12>
 882:	ce f3       	brts	.-14     	; 0x876 <__fp_szero+0x10>
 884:	9f 57       	subi	r25, 0x7F	; 127
 886:	55 0b       	sbc	r21, r21
 888:	87 ff       	sbrs	r24, 7
 88a:	51 d0       	rcall	.+162    	; 0x92e <__fp_norm2>
 88c:	56 95       	lsr	r21
 88e:	97 95       	ror	r25
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	20 f4       	brcc	.+8      	; 0x89c <sqrt+0x22>
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	bb 1f       	adc	r27, r27
 89c:	1f 93       	push	r17
 89e:	0f 93       	push	r16
 8a0:	00 24       	eor	r0, r0
 8a2:	90 01       	movw	r18, r0
 8a4:	a0 01       	movw	r20, r0
 8a6:	80 01       	movw	r16, r0
 8a8:	f0 01       	movw	r30, r0
 8aa:	a0 e8       	ldi	r26, 0x80	; 128
 8ac:	0e 0f       	add	r16, r30
 8ae:	1f 1f       	adc	r17, r31
 8b0:	0a 1e       	adc	r0, r26
 8b2:	51 1d       	adc	r21, r1
 8b4:	60 1b       	sub	r22, r16
 8b6:	71 0b       	sbc	r23, r17
 8b8:	80 09       	sbc	r24, r0
 8ba:	b5 0b       	sbc	r27, r21
 8bc:	48 f4       	brcc	.+18     	; 0x8d0 <sqrt+0x56>
 8be:	60 0f       	add	r22, r16
 8c0:	71 1f       	adc	r23, r17
 8c2:	80 1d       	adc	r24, r0
 8c4:	b5 1f       	adc	r27, r21
 8c6:	0e 1b       	sub	r16, r30
 8c8:	1f 0b       	sbc	r17, r31
 8ca:	0a 0a       	sbc	r0, r26
 8cc:	51 09       	sbc	r21, r1
 8ce:	07 c0       	rjmp	.+14     	; 0x8de <sqrt+0x64>
 8d0:	2e 0f       	add	r18, r30
 8d2:	3f 1f       	adc	r19, r31
 8d4:	4a 1f       	adc	r20, r26
 8d6:	0e 0f       	add	r16, r30
 8d8:	1f 1f       	adc	r17, r31
 8da:	0a 1e       	adc	r0, r26
 8dc:	51 1d       	adc	r21, r1
 8de:	66 0f       	add	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	bb 1f       	adc	r27, r27
 8e6:	a6 95       	lsr	r26
 8e8:	f7 95       	ror	r31
 8ea:	e7 95       	ror	r30
 8ec:	f8 f6       	brcc	.-66     	; 0x8ac <sqrt+0x32>
 8ee:	06 17       	cp	r16, r22
 8f0:	17 07       	cpc	r17, r23
 8f2:	08 06       	cpc	r0, r24
 8f4:	5b 07       	cpc	r21, r27
 8f6:	21 1d       	adc	r18, r1
 8f8:	31 1d       	adc	r19, r1
 8fa:	41 1d       	adc	r20, r1
 8fc:	0f 91       	pop	r16
 8fe:	1f 91       	pop	r17
 900:	b9 01       	movw	r22, r18
 902:	84 2f       	mov	r24, r20
 904:	91 58       	subi	r25, 0x81	; 129
 906:	88 0f       	add	r24, r24
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	08 95       	ret

0000090e <__fp_mpack>:
 90e:	9f 3f       	cpi	r25, 0xFF	; 255
 910:	49 f0       	breq	.+18     	; 0x924 <__fp_mpack+0x16>
 912:	91 50       	subi	r25, 0x01	; 1
 914:	28 f4       	brcc	.+10     	; 0x920 <__fp_mpack+0x12>
 916:	86 95       	lsr	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	9f 5f       	subi	r25, 0xFF	; 255
 920:	80 38       	cpi	r24, 0x80	; 128
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	88 0f       	add	r24, r24
 926:	96 95       	lsr	r25
 928:	87 95       	ror	r24
 92a:	97 f9       	bld	r25, 7
 92c:	08 95       	ret

0000092e <__fp_norm2>:
 92e:	91 50       	subi	r25, 0x01	; 1
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	88 1f       	adc	r24, r24
 938:	d2 f7       	brpl	.-12     	; 0x92e <__fp_norm2>
 93a:	08 95       	ret

0000093c <__divmodsi4>:
 93c:	97 fb       	bst	r25, 7
 93e:	09 2e       	mov	r0, r25
 940:	05 26       	eor	r0, r21
 942:	0e d0       	rcall	.+28     	; 0x960 <__divmodsi4_neg1>
 944:	57 fd       	sbrc	r21, 7
 946:	04 d0       	rcall	.+8      	; 0x950 <__divmodsi4_neg2>
 948:	14 d0       	rcall	.+40     	; 0x972 <__udivmodsi4>
 94a:	0a d0       	rcall	.+20     	; 0x960 <__divmodsi4_neg1>
 94c:	00 1c       	adc	r0, r0
 94e:	38 f4       	brcc	.+14     	; 0x95e <__divmodsi4_exit>

00000950 <__divmodsi4_neg2>:
 950:	50 95       	com	r21
 952:	40 95       	com	r20
 954:	30 95       	com	r19
 956:	21 95       	neg	r18
 958:	3f 4f       	sbci	r19, 0xFF	; 255
 95a:	4f 4f       	sbci	r20, 0xFF	; 255
 95c:	5f 4f       	sbci	r21, 0xFF	; 255

0000095e <__divmodsi4_exit>:
 95e:	08 95       	ret

00000960 <__divmodsi4_neg1>:
 960:	f6 f7       	brtc	.-4      	; 0x95e <__divmodsi4_exit>
 962:	90 95       	com	r25
 964:	80 95       	com	r24
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	08 95       	ret

00000972 <__udivmodsi4>:
 972:	a1 e2       	ldi	r26, 0x21	; 33
 974:	1a 2e       	mov	r1, r26
 976:	aa 1b       	sub	r26, r26
 978:	bb 1b       	sub	r27, r27
 97a:	fd 01       	movw	r30, r26
 97c:	0d c0       	rjmp	.+26     	; 0x998 <__udivmodsi4_ep>

0000097e <__udivmodsi4_loop>:
 97e:	aa 1f       	adc	r26, r26
 980:	bb 1f       	adc	r27, r27
 982:	ee 1f       	adc	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	a2 17       	cp	r26, r18
 988:	b3 07       	cpc	r27, r19
 98a:	e4 07       	cpc	r30, r20
 98c:	f5 07       	cpc	r31, r21
 98e:	20 f0       	brcs	.+8      	; 0x998 <__udivmodsi4_ep>
 990:	a2 1b       	sub	r26, r18
 992:	b3 0b       	sbc	r27, r19
 994:	e4 0b       	sbc	r30, r20
 996:	f5 0b       	sbc	r31, r21

00000998 <__udivmodsi4_ep>:
 998:	66 1f       	adc	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	1a 94       	dec	r1
 9a2:	69 f7       	brne	.-38     	; 0x97e <__udivmodsi4_loop>
 9a4:	60 95       	com	r22
 9a6:	70 95       	com	r23
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	9b 01       	movw	r18, r22
 9ae:	ac 01       	movw	r20, r24
 9b0:	bd 01       	movw	r22, r26
 9b2:	cf 01       	movw	r24, r30
 9b4:	08 95       	ret

000009b6 <_exit>:
 9b6:	f8 94       	cli

000009b8 <__stop_program>:
 9b8:	ff cf       	rjmp	.-2      	; 0x9b8 <__stop_program>


main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00002d96  00002e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  0080018e  0080018e  00002eb8  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001733  00000000  00000000  00005b88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_1>
       8:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_2>
       c:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_3>
      10:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_4>
      14:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_9>
      28:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_10>
      2c:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_11>
      30:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_12>
      34:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_13>
      38:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_14>
      3c:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__vector_15>
      40:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__vector_16>
      44:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_17>
      48:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_18>
      4c:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_19>
      50:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__vector_20>
      54:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_21>
      58:	0c 94 a0 04 	jmp	0x940	; 0x940 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 e9       	ldi	r30, 0x96	; 150
      70:	fd e2       	ldi	r31, 0x2D	; 45
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	ae 38       	cpi	r26, 0x8E	; 142
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	14 e0       	ldi	r17, 0x04	; 4
      80:	ae e8       	ldi	r26, 0x8E	; 142
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 3e       	cpi	r26, 0xE7	; 231
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      92:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <transfer_duration>:

int array_tones[]={c,d,e,f,g,a,b,h,0};
int array_durations[]={100,100,100,100,100,100,100,100,0};

void transfer_duration()
{
      9a:	e2 e1       	ldi	r30, 0x12	; 18
      9c:	f1 e0       	ldi	r31, 0x01	; 1
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <transfer_duration+0xa>
	int *p;
	int n,i;
	p=array_durations;
	while(*(p++)!=0) n++;
      a0:	6f 5f       	subi	r22, 0xFF	; 255
      a2:	7f 4f       	sbci	r23, 0xFF	; 255
      a4:	81 91       	ld	r24, Z+
      a6:	91 91       	ld	r25, Z+
      a8:	89 2b       	or	r24, r25
      aa:	d1 f7       	brne	.-12     	; 0xa0 <transfer_duration+0x6>
      ac:	e2 e1       	ldi	r30, 0x12	; 18
      ae:	f1 e0       	ldi	r31, 0x01	; 1
      b0:	41 e0       	ldi	r20, 0x01	; 1
      b2:	50 e0       	ldi	r21, 0x00	; 0
      b4:	0b c0       	rjmp	.+22     	; 0xcc <transfer_duration+0x32>
	for(i=1;i<n;i++)
	{
		array_durations[i]=array_durations[i-1]+array_durations[i];
      b6:	82 81       	ldd	r24, Z+2	; 0x02
      b8:	93 81       	ldd	r25, Z+3	; 0x03
      ba:	20 81       	ld	r18, Z
      bc:	31 81       	ldd	r19, Z+1	; 0x01
      be:	82 0f       	add	r24, r18
      c0:	93 1f       	adc	r25, r19
      c2:	93 83       	std	Z+3, r25	; 0x03
      c4:	82 83       	std	Z+2, r24	; 0x02
{
	int *p;
	int n,i;
	p=array_durations;
	while(*(p++)!=0) n++;
	for(i=1;i<n;i++)
      c6:	4f 5f       	subi	r20, 0xFF	; 255
      c8:	5f 4f       	sbci	r21, 0xFF	; 255
      ca:	32 96       	adiw	r30, 0x02	; 2
      cc:	46 17       	cp	r20, r22
      ce:	57 07       	cpc	r21, r23
      d0:	94 f3       	brlt	.-28     	; 0xb6 <transfer_duration+0x1c>
	{
		array_durations[i]=array_durations[i-1]+array_durations[i];
	}
}
      d2:	08 95       	ret

000000d4 <main>:



int main()
{
	ENPIEZO;
      d4:	25 9a       	sbi	0x04, 5	; 4
	
	tone.frequency=array_tones[0];
      d6:	80 91 00 01 	lds	r24, 0x0100
      da:	90 91 01 01 	lds	r25, 0x0101
      de:	90 93 2b 01 	sts	0x012B, r25
      e2:	80 93 2a 01 	sts	0x012A, r24
	
	transfer_duration();
      e6:	0e 94 4d 00 	call	0x9a	; 0x9a <transfer_duration>
	
	
	return TINYTIMBER(&app,startup,0);
      ea:	86 e3       	ldi	r24, 0x36	; 54
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	6e e7       	ldi	r22, 0x7E	; 126
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	0e 94 df 03 	call	0x7be	; 0x7be <tinytimber>
      fa:	08 95       	ret

000000fc <startup>:
Tone tone = initTone(&piezo,0);
Melody scale = initMelody(&tone,array_tones,array_durations);
APP app = initAPP(&scale);


int startup(APP * self, int x){
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
  AFTER(MSEC(400),self->tone,setFrequency,784);
  AFTER(MSEC(300),self->tone,setFrequency,698);
  AFTER(MSEC(200),self->tone,setFrequency,659);
  AFTER(MSEC(100),self->tone,setFrequency,587);
  ASYNC(self->tone,start_playing,0);*/
  ASYNC(self->melody,start_playing_melody,0);
     108:	fc 01       	movw	r30, r24
     10a:	04 81       	ldd	r16, Z+4	; 0x04
     10c:	15 81       	ldd	r17, Z+5	; 0x05
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e0       	ldi	r20, 0x00	; 0
     11c:	50 e0       	ldi	r21, 0x00	; 0
     11e:	e2 ee       	ldi	r30, 0xE2	; 226
     120:	ee 2e       	mov	r14, r30
     122:	e3 e1       	ldi	r30, 0x13	; 19
     124:	fe 2e       	mov	r15, r30
     126:	cc 24       	eor	r12, r12
     128:	dd 24       	eor	r13, r13
     12a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
}
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	08 95       	ret

0000013c <DUMP>:

#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
     13c:	fc 01       	movw	r30, r24
     13e:	01 c0       	rjmp	.+2      	; 0x142 <DUMP+0x6>
  while (*s)
    DUMPC(*s++);
     140:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     142:	80 81       	ld	r24, Z
     144:	88 23       	and	r24, r24
     146:	e1 f7       	brne	.-8      	; 0x140 <DUMP+0x4>
    DUMPC(*s++);
}
     148:	08 95       	ret

0000014a <DUMPH>:
void DUMPH(unsigned int val) {
    char buf[8];
    int i = 0;
    do {
        buf[i++] = hex[val & 0x0F];
        val = val >> 4;
     14a:	24 e0       	ldi	r18, 0x04	; 4
     14c:	96 95       	lsr	r25
     14e:	87 95       	ror	r24
     150:	2a 95       	dec	r18
     152:	e1 f7       	brne	.-8      	; 0x14c <DUMPH+0x2>
    } while (val);
     154:	00 97       	sbiw	r24, 0x00	; 0
     156:	c9 f7       	brne	.-14     	; 0x14a <DUMPH>
    while (i)
        DUMPC(buf[--i]);
}
     158:	08 95       	ret

0000015a <DUMP_INIT>:
#define INFINITY        0x7fffffffL
#define INF(a)          ( (a)==0 ? INFINITY : (a) )

void DUMP_INIT() {

}
     15a:	08 95       	ret

0000015c <DUMPC>:

void DUMPC(char c) {
    
}
     15c:	08 95       	ret

0000015e <enqueueByDeadline>:
#pragma	DATA default

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
     15e:	cf 92       	push	r12
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
     170:	db 01       	movw	r26, r22
     172:	ed 91       	ld	r30, X+
     174:	fc 91       	ld	r31, X
     176:	c0 e0       	ldi	r28, 0x00	; 0
     178:	d0 e0       	ldi	r29, 0x00	; 0
     17a:	05 c0       	rjmp	.+10     	; 0x186 <enqueueByDeadline+0x28>
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
     17c:	ef 01       	movw	r28, r30
     17e:	80 81       	ld	r24, Z
     180:	91 81       	ldd	r25, Z+1	; 0x01
     182:	9c 01       	movw	r18, r24
     184:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
     186:	30 97       	sbiw	r30, 0x00	; 0
     188:	81 f0       	breq	.+32     	; 0x1aa <enqueueByDeadline+0x4c>
     18a:	26 81       	ldd	r18, Z+6	; 0x06
     18c:	37 81       	ldd	r19, Z+7	; 0x07
     18e:	40 85       	ldd	r20, Z+8	; 0x08
     190:	51 85       	ldd	r21, Z+9	; 0x09
     192:	d8 01       	movw	r26, r16
     194:	16 96       	adiw	r26, 0x06	; 6
     196:	cd 90       	ld	r12, X+
     198:	dd 90       	ld	r13, X+
     19a:	ed 90       	ld	r14, X+
     19c:	fc 90       	ld	r15, X
     19e:	19 97       	sbiw	r26, 0x09	; 9
     1a0:	c2 16       	cp	r12, r18
     1a2:	d3 06       	cpc	r13, r19
     1a4:	e4 06       	cpc	r14, r20
     1a6:	f5 06       	cpc	r15, r21
     1a8:	4c f7       	brge	.-46     	; 0x17c <enqueueByDeadline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     1aa:	d8 01       	movw	r26, r16
     1ac:	ed 93       	st	X+, r30
     1ae:	fc 93       	st	X, r31
    if (prev == NULL)
     1b0:	20 97       	sbiw	r28, 0x00	; 0
     1b2:	21 f4       	brne	.+8      	; 0x1bc <enqueueByDeadline+0x5e>
        *queue = p;
     1b4:	fb 01       	movw	r30, r22
     1b6:	11 83       	std	Z+1, r17	; 0x01
     1b8:	00 83       	st	Z, r16
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <enqueueByDeadline+0x62>
    else
        prev->next = p;
     1bc:	19 83       	std	Y+1, r17	; 0x01
     1be:	08 83       	st	Y, r16
}
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	df 90       	pop	r13
     1ce:	cf 90       	pop	r12
     1d0:	08 95       	ret

000001d2 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
     1e4:	db 01       	movw	r26, r22
     1e6:	ed 91       	ld	r30, X+
     1e8:	fc 91       	ld	r31, X
     1ea:	c0 e0       	ldi	r28, 0x00	; 0
     1ec:	d0 e0       	ldi	r29, 0x00	; 0
     1ee:	05 c0       	rjmp	.+10     	; 0x1fa <enqueueByBaseline+0x28>
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
     1f0:	ef 01       	movw	r28, r30
     1f2:	80 81       	ld	r24, Z
     1f4:	91 81       	ldd	r25, Z+1	; 0x01
     1f6:	9c 01       	movw	r18, r24
     1f8:	f9 01       	movw	r30, r18
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
     1fa:	30 97       	sbiw	r30, 0x00	; 0
     1fc:	81 f0       	breq	.+32     	; 0x21e <enqueueByBaseline+0x4c>
     1fe:	22 81       	ldd	r18, Z+2	; 0x02
     200:	33 81       	ldd	r19, Z+3	; 0x03
     202:	44 81       	ldd	r20, Z+4	; 0x04
     204:	55 81       	ldd	r21, Z+5	; 0x05
     206:	d8 01       	movw	r26, r16
     208:	12 96       	adiw	r26, 0x02	; 2
     20a:	cd 90       	ld	r12, X+
     20c:	dd 90       	ld	r13, X+
     20e:	ed 90       	ld	r14, X+
     210:	fc 90       	ld	r15, X
     212:	15 97       	sbiw	r26, 0x05	; 5
     214:	c2 16       	cp	r12, r18
     216:	d3 06       	cpc	r13, r19
     218:	e4 06       	cpc	r14, r20
     21a:	f5 06       	cpc	r15, r21
     21c:	4c f7       	brge	.-46     	; 0x1f0 <enqueueByBaseline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     21e:	d8 01       	movw	r26, r16
     220:	ed 93       	st	X+, r30
     222:	fc 93       	st	X, r31
    if (prev == NULL)
     224:	20 97       	sbiw	r28, 0x00	; 0
     226:	21 f4       	brne	.+8      	; 0x230 <enqueueByBaseline+0x5e>
        *queue = p;
     228:	fb 01       	movw	r30, r22
     22a:	11 83       	std	Z+1, r17	; 0x01
     22c:	00 83       	st	Z, r16
     22e:	02 c0       	rjmp	.+4      	; 0x234 <enqueueByBaseline+0x62>
    else
        prev->next = p;
     230:	19 83       	std	Y+1, r17	; 0x01
     232:	08 83       	st	Y, r16
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	0f 91       	pop	r16
     23c:	ff 90       	pop	r15
     23e:	ef 90       	pop	r14
     240:	df 90       	pop	r13
     242:	cf 90       	pop	r12
     244:	08 95       	ret

00000246 <dequeue>:

Msg dequeue(Msg *queue) {
     246:	dc 01       	movw	r26, r24
    Msg m = *queue;
     248:	ed 91       	ld	r30, X+
     24a:	fc 91       	ld	r31, X
     24c:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
     24e:	30 97       	sbiw	r30, 0x00	; 0
     250:	31 f0       	breq	.+12     	; 0x25e <dequeue+0x18>
        *queue = m->next;
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	8d 93       	st	X+, r24
     258:	9c 93       	st	X, r25
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
     25a:	cf 01       	movw	r24, r30
     25c:	08 95       	ret
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
     25e:	8f ef       	ldi	r24, 0xFF	; 255
     260:	80 93 ec 00 	sts	0x00EC, r24
     264:	80 93 ed 00 	sts	0x00ED, r24
     268:	80 93 ee 00 	sts	0x00EE, r24
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	83 bf       	out	0x33, r24	; 51
     270:	88 95       	sleep
     272:	fd cf       	rjmp	.-6      	; 0x26e <dequeue+0x28>

00000274 <insert>:
    return m;
}

void insert(Msg m, Msg *queue) {
     274:	dc 01       	movw	r26, r24
     276:	fb 01       	movw	r30, r22
    m->next = *queue;
     278:	80 81       	ld	r24, Z
     27a:	91 81       	ldd	r25, Z+1	; 0x01
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 93       	st	X, r25
     280:	8e 93       	st	-X, r24
    *queue = m;
     282:	b1 83       	std	Z+1, r27	; 0x01
     284:	a0 83       	st	Z, r26
}
     286:	08 95       	ret

00000288 <push>:

void push(Thread t, Thread *stack) {
     288:	dc 01       	movw	r26, r24
     28a:	fb 01       	movw	r30, r22
    t->next = *stack;
     28c:	80 81       	ld	r24, Z
     28e:	91 81       	ldd	r25, Z+1	; 0x01
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 93       	st	X, r25
     294:	8e 93       	st	-X, r24
    *stack = t;
     296:	b1 83       	std	Z+1, r27	; 0x01
     298:	a0 83       	st	Z, r26
}
     29a:	08 95       	ret

0000029c <pop>:

Thread pop(Thread *stack) {
     29c:	fc 01       	movw	r30, r24
    Thread t = *stack;
     29e:	a0 81       	ld	r26, Z
     2a0:	b1 81       	ldd	r27, Z+1	; 0x01
    *stack = t->next;
     2a2:	8d 91       	ld	r24, X+
     2a4:	9c 91       	ld	r25, X
     2a6:	11 97       	sbiw	r26, 0x01	; 1
     2a8:	91 83       	std	Z+1, r25	; 0x01
     2aa:	80 83       	st	Z, r24
    return t;
}
     2ac:	cd 01       	movw	r24, r26
     2ae:	08 95       	ret

000002b0 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
     2b0:	1f 92       	push	r1
     2b2:	0f 92       	push	r0
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	0f 92       	push	r0
     2b8:	11 24       	eor	r1, r1
     2ba:	2f 93       	push	r18
     2bc:	3f 93       	push	r19
     2be:	4f 93       	push	r20
     2c0:	5f 93       	push	r21
     2c2:	6f 93       	push	r22
     2c4:	7f 93       	push	r23
     2c6:	8f 93       	push	r24
     2c8:	9f 93       	push	r25
     2ca:	af 93       	push	r26
     2cc:	bf 93       	push	r27
     2ce:	ef 93       	push	r30
     2d0:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
     2d2:	60 91 9a 01 	lds	r22, 0x019A
     2d6:	70 91 9b 01 	lds	r23, 0x019B
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	70 93 9b 01 	sts	0x019B, r23
     2e2:	60 93 9a 01 	sts	0x019A, r22
    TIMERSET(timerQ);
     2e6:	e0 91 94 01 	lds	r30, 0x0194
     2ea:	f0 91 95 01 	lds	r31, 0x0195
     2ee:	30 97       	sbiw	r30, 0x00	; 0
     2f0:	21 f1       	breq	.+72     	; 0x33a <__vector_9+0x8a>
     2f2:	22 81       	ldd	r18, Z+2	; 0x02
     2f4:	33 81       	ldd	r19, Z+3	; 0x03
     2f6:	44 81       	ldd	r20, Z+4	; 0x04
     2f8:	55 81       	ldd	r21, Z+5	; 0x05
     2fa:	ca 01       	movw	r24, r20
     2fc:	bb 27       	eor	r27, r27
     2fe:	97 fd       	sbrc	r25, 7
     300:	b0 95       	com	r27
     302:	ab 2f       	mov	r26, r27
     304:	68 17       	cp	r22, r24
     306:	79 07       	cpc	r23, r25
     308:	c1 f4       	brne	.+48     	; 0x33a <__vector_9+0x8a>
     30a:	80 91 84 00 	lds	r24, 0x0084
     30e:	90 91 85 00 	lds	r25, 0x0085
     312:	80 95       	com	r24
     314:	90 95       	com	r25
     316:	82 0f       	add	r24, r18
     318:	93 1f       	adc	r25, r19
     31a:	89 2b       	or	r24, r25
     31c:	31 f4       	brne	.+12     	; 0x32a <__vector_9+0x7a>
     31e:	20 91 84 00 	lds	r18, 0x0084
     322:	30 91 85 00 	lds	r19, 0x0085
     326:	2f 5f       	subi	r18, 0xFF	; 255
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	30 93 89 00 	sts	0x0089, r19
     32e:	20 93 88 00 	sts	0x0088, r18
     332:	80 91 6f 00 	lds	r24, 0x006F
     336:	82 60       	ori	r24, 0x02	; 2
     338:	03 c0       	rjmp	.+6      	; 0x340 <__vector_9+0x90>
     33a:	80 91 6f 00 	lds	r24, 0x006F
     33e:	8d 7f       	andi	r24, 0xFD	; 253
     340:	80 93 6f 00 	sts	0x006F, r24
}
     344:	ff 91       	pop	r31
     346:	ef 91       	pop	r30
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <ABORT>:
    }
    ENABLE(status);
    return result;
}

void ABORT(Msg m) {
     366:	dc 01       	movw	r26, r24
    char status;
    DISABLE(status);
     368:	6f b7       	in	r22, 0x3f	; 63
     36a:	f8 94       	cli
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     36c:	20 91 94 01 	lds	r18, 0x0194
     370:	30 91 95 01 	lds	r19, 0x0195
     374:	e0 e0       	ldi	r30, 0x00	; 0
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	04 c0       	rjmp	.+8      	; 0x382 <ABORT+0x1c>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     37a:	f9 01       	movw	r30, r18
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     382:	21 15       	cp	r18, r1
     384:	31 05       	cpc	r19, r1
     386:	69 f0       	breq	.+26     	; 0x3a2 <ABORT+0x3c>
     388:	2a 17       	cp	r18, r26
     38a:	3b 07       	cpc	r19, r27
     38c:	b1 f7       	brne	.-20     	; 0x37a <ABORT+0x14>
     38e:	8d 91       	ld	r24, X+
     390:	9c 91       	ld	r25, X
     392:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     394:	30 97       	sbiw	r30, 0x00	; 0
     396:	d9 f4       	brne	.+54     	; 0x3ce <ABORT+0x68>
            prev->next = q->next;
        else
            *queue = q->next;
     398:	90 93 95 01 	sts	0x0195, r25
     39c:	80 93 94 01 	sts	0x0194, r24
     3a0:	3a c0       	rjmp	.+116    	; 0x416 <ABORT+0xb0>
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     3a2:	20 91 92 01 	lds	r18, 0x0192
     3a6:	30 91 93 01 	lds	r19, 0x0193
     3aa:	e0 e0       	ldi	r30, 0x00	; 0
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <ABORT+0x52>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     3b0:	f9 01       	movw	r30, r18
     3b2:	80 81       	ld	r24, Z
     3b4:	91 81       	ldd	r25, Z+1	; 0x01
     3b6:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     3b8:	21 15       	cp	r18, r1
     3ba:	31 05       	cpc	r19, r1
     3bc:	81 f0       	breq	.+32     	; 0x3de <ABORT+0x78>
     3be:	2a 17       	cp	r18, r26
     3c0:	3b 07       	cpc	r19, r27
     3c2:	b1 f7       	brne	.-20     	; 0x3b0 <ABORT+0x4a>
     3c4:	8d 91       	ld	r24, X+
     3c6:	9c 91       	ld	r25, X
     3c8:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     3ca:	30 97       	sbiw	r30, 0x00	; 0
     3cc:	19 f0       	breq	.+6      	; 0x3d4 <ABORT+0x6e>
            prev->next = q->next;
     3ce:	91 83       	std	Z+1, r25	; 0x01
     3d0:	80 83       	st	Z, r24
     3d2:	21 c0       	rjmp	.+66     	; 0x416 <ABORT+0xb0>
        else
            *queue = q->next;
     3d4:	90 93 93 01 	sts	0x0193, r25
     3d8:	80 93 92 01 	sts	0x0192, r24
     3dc:	1c c0       	rjmp	.+56     	; 0x416 <ABORT+0xb0>
    char status;
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
     3de:	e0 91 75 01 	lds	r30, 0x0175
     3e2:	f0 91 76 01 	lds	r31, 0x0176
        while (t) {
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
     3e6:	40 91 77 01 	lds	r20, 0x0177
     3ea:	50 91 78 01 	lds	r21, 0x0178
     3ee:	22 c0       	rjmp	.+68     	; 0x434 <ABORT+0xce>
     3f0:	e4 17       	cp	r30, r20
     3f2:	f5 07       	cpc	r31, r21
     3f4:	e1 f0       	breq	.+56     	; 0x42e <ABORT+0xc8>
     3f6:	82 81       	ldd	r24, Z+2	; 0x02
     3f8:	93 81       	ldd	r25, Z+3	; 0x03
     3fa:	8a 17       	cp	r24, r26
     3fc:	9b 07       	cpc	r25, r27
     3fe:	b9 f4       	brne	.+46     	; 0x42e <ABORT+0xc8>
     400:	24 81       	ldd	r18, Z+4	; 0x04
     402:	35 81       	ldd	r19, Z+5	; 0x05
     404:	1a 96       	adiw	r26, 0x0a	; 10
     406:	8d 91       	ld	r24, X+
     408:	9c 91       	ld	r25, X
     40a:	1b 97       	sbiw	r26, 0x0b	; 11
     40c:	28 17       	cp	r18, r24
     40e:	39 07       	cpc	r19, r25
     410:	71 f4       	brne	.+28     	; 0x42e <ABORT+0xc8>
	            t->msg = NULL;
     412:	13 82       	std	Z+3, r1	; 0x03
     414:	12 82       	std	Z+2, r1	; 0x02
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
     416:	80 91 71 01 	lds	r24, 0x0171
     41a:	90 91 72 01 	lds	r25, 0x0172
     41e:	11 96       	adiw	r26, 0x01	; 1
     420:	9c 93       	st	X, r25
     422:	8e 93       	st	-X, r24
    *queue = m;
     424:	b0 93 72 01 	sts	0x0172, r27
     428:	a0 93 71 01 	sts	0x0171, r26
     42c:	05 c0       	rjmp	.+10     	; 0x438 <ABORT+0xd2>
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
	            t->msg = NULL;
	            insert(m, &msgPool);
	            break;
            }
            t = t->next;
     42e:	01 90       	ld	r0, Z+
     430:	f0 81       	ld	r31, Z
     432:	e0 2d       	mov	r30, r0
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
        while (t) {
     434:	30 97       	sbiw	r30, 0x00	; 0
     436:	e1 f6       	brne	.-72     	; 0x3f0 <ABORT+0x8a>
	            break;
            }
            t = t->next;
        }
    }
    ENABLE(status);
     438:	67 ff       	sbrs	r22, 7
     43a:	01 c0       	rjmp	.+2      	; 0x43e <ABORT+0xd8>
     43c:	78 94       	sei
     43e:	08 95       	ret

00000440 <T_RESET>:
}

void T_RESET(Timer *t) {
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
    t->accum = STATUS() ? current->msg->baseline : timestamp;
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	07 fe       	sbrs	r0, 7
     44a:	0c c0       	rjmp	.+24     	; 0x464 <T_RESET+0x24>
     44c:	e0 91 77 01 	lds	r30, 0x0177
     450:	f0 91 78 01 	lds	r31, 0x0178
     454:	02 80       	ldd	r0, Z+2	; 0x02
     456:	f3 81       	ldd	r31, Z+3	; 0x03
     458:	e0 2d       	mov	r30, r0
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	93 81       	ldd	r25, Z+3	; 0x03
     45e:	a4 81       	ldd	r26, Z+4	; 0x04
     460:	b5 81       	ldd	r27, Z+5	; 0x05
     462:	08 c0       	rjmp	.+16     	; 0x474 <T_RESET+0x34>
     464:	80 91 96 01 	lds	r24, 0x0196
     468:	90 91 97 01 	lds	r25, 0x0197
     46c:	a0 91 98 01 	lds	r26, 0x0198
     470:	b0 91 99 01 	lds	r27, 0x0199
     474:	88 83       	st	Y, r24
     476:	99 83       	std	Y+1, r25	; 0x01
     478:	aa 83       	std	Y+2, r26	; 0x02
     47a:	bb 83       	std	Y+3, r27	; 0x03
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <T_SAMPLE>:

Time T_SAMPLE(Timer *t) {
     482:	dc 01       	movw	r26, r24
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	07 fe       	sbrs	r0, 7
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <T_SAMPLE+0x20>
     48a:	e0 91 77 01 	lds	r30, 0x0177
     48e:	f0 91 78 01 	lds	r31, 0x0178
     492:	02 80       	ldd	r0, Z+2	; 0x02
     494:	f3 81       	ldd	r31, Z+3	; 0x03
     496:	e0 2d       	mov	r30, r0
     498:	22 81       	ldd	r18, Z+2	; 0x02
     49a:	33 81       	ldd	r19, Z+3	; 0x03
     49c:	44 81       	ldd	r20, Z+4	; 0x04
     49e:	55 81       	ldd	r21, Z+5	; 0x05
     4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <T_SAMPLE+0x30>
     4a2:	20 91 96 01 	lds	r18, 0x0196
     4a6:	30 91 97 01 	lds	r19, 0x0197
     4aa:	40 91 98 01 	lds	r20, 0x0198
     4ae:	50 91 99 01 	lds	r21, 0x0199
     4b2:	8d 91       	ld	r24, X+
     4b4:	9d 91       	ld	r25, X+
     4b6:	0d 90       	ld	r0, X+
     4b8:	bc 91       	ld	r27, X
     4ba:	a0 2d       	mov	r26, r0
     4bc:	28 1b       	sub	r18, r24
     4be:	39 0b       	sbc	r19, r25
     4c0:	4a 0b       	sbc	r20, r26
     4c2:	5b 0b       	sbc	r21, r27
}
     4c4:	b9 01       	movw	r22, r18
     4c6:	ca 01       	movw	r24, r20
     4c8:	08 95       	ret

000004ca <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
    char status;
    Time now;
    DISABLE(status);
     4d2:	6f b7       	in	r22, 0x3f	; 63
     4d4:	f8 94       	cli
    TIMERGET(now);
     4d6:	40 91 9a 01 	lds	r20, 0x019A
     4da:	50 91 9b 01 	lds	r21, 0x019B
     4de:	20 91 84 00 	lds	r18, 0x0084
     4e2:	30 91 85 00 	lds	r19, 0x0085
     4e6:	b0 99       	sbic	0x16, 0	; 22
     4e8:	10 c0       	rjmp	.+32     	; 0x50a <__stack+0xb>
     4ea:	ca 01       	movw	r24, r20
     4ec:	aa 27       	eor	r26, r26
     4ee:	97 fd       	sbrc	r25, 7
     4f0:	a0 95       	com	r26
     4f2:	ba 2f       	mov	r27, r26
     4f4:	8c 01       	movw	r16, r24
     4f6:	ff 24       	eor	r15, r15
     4f8:	ee 24       	eor	r14, r14
     4fa:	c9 01       	movw	r24, r18
     4fc:	a0 e0       	ldi	r26, 0x00	; 0
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	e8 2a       	or	r14, r24
     502:	f9 2a       	or	r15, r25
     504:	0a 2b       	or	r16, r26
     506:	1b 2b       	or	r17, r27
     508:	14 c0       	rjmp	.+40     	; 0x532 <__stack+0x33>
     50a:	20 91 84 00 	lds	r18, 0x0084
     50e:	30 91 85 00 	lds	r19, 0x0085
     512:	4f 5f       	subi	r20, 0xFF	; 255
     514:	5f 4f       	sbci	r21, 0xFF	; 255
     516:	ca 01       	movw	r24, r20
     518:	aa 27       	eor	r26, r26
     51a:	97 fd       	sbrc	r25, 7
     51c:	a0 95       	com	r26
     51e:	ba 2f       	mov	r27, r26
     520:	8c 01       	movw	r16, r24
     522:	ff 24       	eor	r15, r15
     524:	ee 24       	eor	r14, r14
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
    ENABLE(status);
     532:	67 ff       	sbrs	r22, 7
     534:	0d c0       	rjmp	.+26     	; 0x550 <__stack+0x51>
     536:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
     538:	e0 91 77 01 	lds	r30, 0x0177
     53c:	f0 91 78 01 	lds	r31, 0x0178
     540:	02 80       	ldd	r0, Z+2	; 0x02
     542:	f3 81       	ldd	r31, Z+3	; 0x03
     544:	e0 2d       	mov	r30, r0
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	93 81       	ldd	r25, Z+3	; 0x03
     54a:	a4 81       	ldd	r26, Z+4	; 0x04
     54c:	b5 81       	ldd	r27, Z+5	; 0x05
     54e:	08 c0       	rjmp	.+16     	; 0x560 <__stack+0x61>
     550:	80 91 96 01 	lds	r24, 0x0196
     554:	90 91 97 01 	lds	r25, 0x0197
     558:	a0 91 98 01 	lds	r26, 0x0198
     55c:	b0 91 99 01 	lds	r27, 0x0199
     560:	a8 01       	movw	r20, r16
     562:	97 01       	movw	r18, r14
     564:	28 1b       	sub	r18, r24
     566:	39 0b       	sbc	r19, r25
     568:	4a 0b       	sbc	r20, r26
     56a:	5b 0b       	sbc	r21, r27
}
     56c:	b9 01       	movw	r22, r18
     56e:	ca 01       	movw	r24, r20
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	08 95       	ret

0000057a <install>:
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
    if (i >= 0 && i < N_VECTORS) {
     580:	42 31       	cpi	r20, 0x12	; 18
     582:	b0 f4       	brcc	.+44     	; 0x5b0 <install+0x36>
        char status;
        DISABLE(status);
     584:	2f b7       	in	r18, 0x3f	; 63
     586:	f8 94       	cli
        otable[i] = obj;
     588:	e4 2f       	mov	r30, r20
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	df 01       	movw	r26, r30
     592:	a4 56       	subi	r26, 0x64	; 100
     594:	be 4f       	sbci	r27, 0xFE	; 254
     596:	cd 93       	st	X+, r28
     598:	dc 93       	st	X, r29
        mtable[i] = m;
     59a:	ec 5c       	subi	r30, 0xCC	; 204
     59c:	fd 4f       	sbci	r31, 0xFD	; 253
     59e:	71 83       	std	Z+1, r23	; 0x01
     5a0:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	9b 83       	std	Y+3, r25	; 0x03
     5a8:	8a 83       	std	Y+2, r24	; 0x02
        ENABLE(status);
     5aa:	27 ff       	sbrs	r18, 7
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <install+0x36>
     5ae:	78 94       	sei
    }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     5b6:	df 93       	push	r29
     5b8:	cf 93       	push	r28
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <initialize+0x6>
     5bc:	00 d0       	rcall	.+0      	; 0x5be <initialize+0x8>
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <initialize+0xa>
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	85 e8       	ldi	r24, 0x85	; 133
     5c6:	92 e0       	ldi	r25, 0x02	; 2
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     5c8:	25 e6       	ldi	r18, 0x65	; 101
     5ca:	33 e0       	ldi	r19, 0x03	; 3
        messages[i].next = &messages[i+1];
     5cc:	fc 01       	movw	r30, r24
     5ce:	70 97       	sbiw	r30, 0x10	; 16
     5d0:	91 83       	std	Z+1, r25	; 0x01
     5d2:	80 83       	st	Z, r24
     5d4:	40 96       	adiw	r24, 0x10	; 16
static void initialize(void) {
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     5d6:	82 17       	cp	r24, r18
     5d8:	93 07       	cpc	r25, r19
     5da:	c1 f7       	brne	.-16     	; 0x5cc <initialize+0x16>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     5dc:	10 92 56 03 	sts	0x0356, r1
     5e0:	10 92 55 03 	sts	0x0355, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     5e4:	8d ed       	ldi	r24, 0xDD	; 221
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	90 93 c1 01 	sts	0x01C1, r25
     5ec:	80 93 c0 01 	sts	0x01C0, r24
     5f0:	4d 96       	adiw	r24, 0x1d	; 29
     5f2:	90 93 de 01 	sts	0x01DE, r25
     5f6:	80 93 dd 01 	sts	0x01DD, r24
     5fa:	ca 97       	sbiw	r24, 0x3a	; 58
     5fc:	27 e1       	ldi	r18, 0x17	; 23
     5fe:	32 e0       	ldi	r19, 0x02	; 2
     600:	30 93 fb 01 	sts	0x01FB, r19
     604:	20 93 fa 01 	sts	0x01FA, r18
    threads[NTHREADS-1].next = NULL;
     608:	10 92 18 02 	sts	0x0218, r1
     60c:	10 92 17 02 	sts	0x0217, r1
     610:	21 ec       	ldi	r18, 0xC1	; 193
     612:	33 e0       	ldi	r19, 0x03	; 3
     614:	3c 83       	std	Y+4, r19	; 0x04
     616:	2b 83       	std	Y+3, r18	; 0x03
     618:	ac 01       	movw	r20, r24
     61a:	4c 5f       	subi	r20, 0xFC	; 252
     61c:	5f 4f       	sbci	r21, 0xFF	; 255
     61e:	5a 83       	std	Y+2, r21	; 0x02
     620:	49 83       	std	Y+1, r20	; 0x01
     622:	1e 82       	std	Y+6, r1	; 0x06
     624:	1d 82       	std	Y+5, r1	; 0x05
    
    for (i=0; i<NTHREADS; i++) {
        setjmp( threads[i].context );
     626:	ad 81       	ldd	r26, Y+5	; 0x05
     628:	be 81       	ldd	r27, Y+6	; 0x06
     62a:	ed e1       	ldi	r30, 0x1D	; 29
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	ae 9f       	mul	r26, r30
     630:	c0 01       	movw	r24, r0
     632:	af 9f       	mul	r26, r31
     634:	90 0d       	add	r25, r0
     636:	be 9f       	mul	r27, r30
     638:	90 0d       	add	r25, r0
     63a:	11 24       	eor	r1, r1
     63c:	06 96       	adiw	r24, 0x06	; 6
     63e:	80 54       	subi	r24, 0x40	; 64
     640:	9e 4f       	sbci	r25, 0xFE	; 254
     642:	0e 94 88 16 	call	0x2d10	; 0x2d10 <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     646:	2d 81       	ldd	r18, Y+5	; 0x05
     648:	3e 81       	ldd	r19, Y+6	; 0x06
     64a:	4d e1       	ldi	r20, 0x1D	; 29
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	24 9f       	mul	r18, r20
     650:	f0 01       	movw	r30, r0
     652:	25 9f       	mul	r18, r21
     654:	f0 0d       	add	r31, r0
     656:	34 9f       	mul	r19, r20
     658:	f0 0d       	add	r31, r0
     65a:	11 24       	eor	r1, r1
     65c:	36 96       	adiw	r30, 0x06	; 6
     65e:	e0 54       	subi	r30, 0x40	; 64
     660:	fe 4f       	sbci	r31, 0xFE	; 254
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	91 8b       	std	Z+17, r25	; 0x11
     668:	80 8b       	std	Z+16, r24	; 0x10
     66a:	93 8b       	std	Z+19, r25	; 0x13
     66c:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     66e:	a1 ec       	ldi	r26, 0xC1	; 193
     670:	bc e0       	ldi	r27, 0x0C	; 12
     672:	b6 8b       	std	Z+22, r27	; 0x16
     674:	a5 8b       	std	Z+21, r26	; 0x15
        threads[i].waitsFor = NULL;
     676:	e9 81       	ldd	r30, Y+1	; 0x01
     678:	fa 81       	ldd	r31, Y+2	; 0x02
     67a:	11 82       	std	Z+1, r1	; 0x01
     67c:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     67e:	2f 5f       	subi	r18, 0xFF	; 255
     680:	3f 4f       	sbci	r19, 0xFF	; 255
     682:	3e 83       	std	Y+6, r19	; 0x06
     684:	2d 83       	std	Y+5, r18	; 0x05
     686:	80 5a       	subi	r24, 0xA0	; 160
     688:	9f 4f       	sbci	r25, 0xFF	; 255
     68a:	9c 83       	std	Y+4, r25	; 0x04
     68c:	8b 83       	std	Y+3, r24	; 0x03
     68e:	7d 96       	adiw	r30, 0x1d	; 29
     690:	fa 83       	std	Y+2, r31	; 0x02
     692:	e9 83       	std	Y+1, r30	; 0x01
     694:	24 30       	cpi	r18, 0x04	; 4
     696:	31 05       	cpc	r19, r1
     698:	31 f6       	brne	.-116    	; 0x626 <initialize+0x70>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     69a:	10 92 59 02 	sts	0x0259, r1
     69e:	10 92 58 02 	sts	0x0258, r1
    thread0.waitsFor = NULL;
     6a2:	10 92 5d 02 	sts	0x025D, r1
     6a6:	10 92 5c 02 	sts	0x025C, r1
    thread0.msg = NULL;
     6aa:	10 92 5b 02 	sts	0x025B, r1
     6ae:	10 92 5a 02 	sts	0x025A, r1
     6b2:	ec e3       	ldi	r30, 0x3C	; 60
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <initialize+0x104>

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
    DUMPC(*s++);
     6b8:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     6ba:	80 81       	ld	r24, Z
     6bc:	88 23       	and	r24, r24
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <initialize+0x102>
     6c0:	ea e4       	ldi	r30, 0x4A	; 74
     6c2:	f1 e0       	ldi	r31, 0x01	; 1
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <initialize+0x112>
    DUMPC(*s++);
     6c6:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     6c8:	80 81       	ld	r24, Z
     6ca:	88 23       	and	r24, r24
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <initialize+0x110>
     6ce:	ed e5       	ldi	r30, 0x5D	; 93
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <initialize+0x120>
    DUMPC(*s++);
     6d4:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     6d6:	80 81       	ld	r24, Z
     6d8:	88 23       	and	r24, r24
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <initialize+0x11e>
    thread0.msg = NULL;
    
    DUMP("\n\rTinyTimber ");
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
     6dc:	e1 e6       	ldi	r30, 0x61	; 97
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 e8       	ldi	r24, 0x80	; 128
     6e2:	80 83       	st	Z, r24
     6e4:	10 82       	st	Z, r1
     6e6:	10 92 85 00 	sts	0x0085, r1
     6ea:	10 92 84 00 	sts	0x0084, r1
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	80 93 81 00 	sts	0x0081, r24
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 6f 00 	sts	0x006F, r24
}
     6fa:	26 96       	adiw	r28, 0x06	; 6
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	cf 91       	pop	r28
     708:	df 91       	pop	r29
     70a:	08 95       	ret

0000070c <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     70c:	df 93       	push	r29
     70e:	cf 93       	push	r28
     710:	00 d0       	rcall	.+0      	; 0x712 <dispatch+0x6>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	9a 83       	std	Y+2, r25	; 0x02
     718:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     71a:	80 91 77 01 	lds	r24, 0x0177
     71e:	90 91 78 01 	lds	r25, 0x0178
     722:	06 96       	adiw	r24, 0x06	; 6
     724:	0e 94 88 16 	call	0x2d10	; 0x2d10 <setjmp>
     728:	89 2b       	or	r24, r25
     72a:	59 f4       	brne	.+22     	; 0x742 <dispatch+0x36>
        current = next;
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	90 93 78 01 	sts	0x0178, r25
     734:	80 93 77 01 	sts	0x0177, r24
        longjmp( next->context, 1 );
     738:	06 96       	adiw	r24, 0x06	; 6
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <longjmp>
    }
}
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	08 95       	ret

0000074c <schedule>:
    while (1) {
        SLEEP();
    }
}

static void schedule(void) {
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
    Msg topMsg = activeStack->msg;
     750:	60 91 75 01 	lds	r22, 0x0175
     754:	70 91 76 01 	lds	r23, 0x0176
     758:	fb 01       	movw	r30, r22
     75a:	c2 81       	ldd	r28, Z+2	; 0x02
     75c:	d3 81       	ldd	r29, Z+3	; 0x03
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     75e:	a0 91 92 01 	lds	r26, 0x0192
     762:	b0 91 93 01 	lds	r27, 0x0193
     766:	10 97       	sbiw	r26, 0x00	; 0
     768:	39 f1       	breq	.+78     	; 0x7b8 <schedule+0x6c>
     76a:	e0 91 73 01 	lds	r30, 0x0173
     76e:	f0 91 74 01 	lds	r31, 0x0174
     772:	30 97       	sbiw	r30, 0x00	; 0
     774:	09 f1       	breq	.+66     	; 0x7b8 <schedule+0x6c>
     776:	20 97       	sbiw	r28, 0x00	; 0
     778:	81 f0       	breq	.+32     	; 0x79a <schedule+0x4e>
     77a:	16 96       	adiw	r26, 0x06	; 6
     77c:	8d 91       	ld	r24, X+
     77e:	9d 91       	ld	r25, X+
     780:	0d 90       	ld	r0, X+
     782:	bc 91       	ld	r27, X
     784:	a0 2d       	mov	r26, r0
     786:	2e 81       	ldd	r18, Y+6	; 0x06
     788:	3f 81       	ldd	r19, Y+7	; 0x07
     78a:	48 85       	ldd	r20, Y+8	; 0x08
     78c:	59 85       	ldd	r21, Y+9	; 0x09
     78e:	82 1b       	sub	r24, r18
     790:	93 0b       	sbc	r25, r19
     792:	a4 0b       	sbc	r26, r20
     794:	b5 0b       	sbc	r27, r21
     796:	b7 ff       	sbrs	r27, 7
     798:	0f c0       	rjmp	.+30     	; 0x7b8 <schedule+0x6c>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	90 93 74 01 	sts	0x0174, r25
     7a2:	80 93 73 01 	sts	0x0173, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
     7a6:	71 83       	std	Z+1, r23	; 0x01
     7a8:	60 83       	st	Z, r22
    *stack = t;
     7aa:	f0 93 76 01 	sts	0x0176, r31
     7ae:	e0 93 75 01 	sts	0x0175, r30

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
        push(pop(&threadPool), &activeStack);
        dispatch(activeStack);
     7b2:	cf 01       	movw	r24, r30
     7b4:	0e 94 86 03 	call	0x70c	; 0x70c <dispatch>
    }
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <tinytimber>:
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
        ENABLE(status);
    }
}

int tinytimber(Object *obj, Method m, int arg) {
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	7c 01       	movw	r14, r24
     7cc:	eb 01       	movw	r28, r22
     7ce:	8a 01       	movw	r16, r20
    char status;
    DISABLE(status);
     7d0:	8f b7       	in	r24, 0x3f	; 63
     7d2:	f8 94       	cli
    initialize();
     7d4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <initialize>
    ENABLE(1);
     7d8:	78 94       	sei
    if (m != NULL)
     7da:	20 97       	sbiw	r28, 0x00	; 0
     7dc:	21 f0       	breq	.+8      	; 0x7e6 <tinytimber+0x28>
        m(obj, arg);
     7de:	c7 01       	movw	r24, r14
     7e0:	b8 01       	movw	r22, r16
     7e2:	fe 01       	movw	r30, r28
     7e4:	09 95       	icall
    DISABLE(status);
     7e6:	8f b7       	in	r24, 0x3f	; 63
     7e8:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
     7ea:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    ENABLE(1);
     7ee:	78 94       	sei
    while (1) {
        SLEEP();
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	83 bf       	out	0x33, r24	; 51
     7f4:	88 95       	sleep
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <tinytimber+0x34>

000007f8 <__vector_7>:
    TIMER_OCLR();
    overflows++;
    TIMERSET(timerQ);
}

TIMER_COMPARE_INTERRUPT {
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
     822:	40 91 9a 01 	lds	r20, 0x019A
     826:	50 91 9b 01 	lds	r21, 0x019B
     82a:	20 91 84 00 	lds	r18, 0x0084
     82e:	30 91 85 00 	lds	r19, 0x0085
     832:	b0 99       	sbic	0x16, 0	; 22
     834:	10 c0       	rjmp	.+32     	; 0x856 <__vector_7+0x5e>
     836:	ca 01       	movw	r24, r20
     838:	aa 27       	eor	r26, r26
     83a:	97 fd       	sbrc	r25, 7
     83c:	a0 95       	com	r26
     83e:	ba 2f       	mov	r27, r26
     840:	8c 01       	movw	r16, r24
     842:	ff 24       	eor	r15, r15
     844:	ee 24       	eor	r14, r14
     846:	c9 01       	movw	r24, r18
     848:	a0 e0       	ldi	r26, 0x00	; 0
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	e8 2a       	or	r14, r24
     84e:	f9 2a       	or	r15, r25
     850:	0a 2b       	or	r16, r26
     852:	1b 2b       	or	r17, r27
     854:	1d c0       	rjmp	.+58     	; 0x890 <__vector_7+0x98>
     856:	20 91 84 00 	lds	r18, 0x0084
     85a:	30 91 85 00 	lds	r19, 0x0085
     85e:	4f 5f       	subi	r20, 0xFF	; 255
     860:	5f 4f       	sbci	r21, 0xFF	; 255
     862:	ca 01       	movw	r24, r20
     864:	aa 27       	eor	r26, r26
     866:	97 fd       	sbrc	r25, 7
     868:	a0 95       	com	r26
     86a:	ba 2f       	mov	r27, r26
     86c:	8c 01       	movw	r16, r24
     86e:	ff 24       	eor	r15, r15
     870:	ee 24       	eor	r14, r14
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	e2 2a       	or	r14, r18
     878:	f3 2a       	or	r15, r19
     87a:	04 2b       	or	r16, r20
     87c:	15 2b       	or	r17, r21
     87e:	08 c0       	rjmp	.+16     	; 0x890 <__vector_7+0x98>
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
     880:	84 e9       	ldi	r24, 0x94	; 148
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 23 01 	call	0x246	; 0x246 <dequeue>
     888:	62 e9       	ldi	r22, 0x92	; 146
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	0e 94 af 00 	call	0x15e	; 0x15e <enqueueByDeadline>

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
     890:	e0 91 94 01 	lds	r30, 0x0194
     894:	f0 91 95 01 	lds	r31, 0x0195
     898:	30 97       	sbiw	r30, 0x00	; 0
     89a:	49 f1       	breq	.+82     	; 0x8ee <__vector_7+0xf6>
     89c:	42 81       	ldd	r20, Z+2	; 0x02
     89e:	53 81       	ldd	r21, Z+3	; 0x03
     8a0:	64 81       	ldd	r22, Z+4	; 0x04
     8a2:	75 81       	ldd	r23, Z+5	; 0x05
     8a4:	db 01       	movw	r26, r22
     8a6:	ca 01       	movw	r24, r20
     8a8:	8e 19       	sub	r24, r14
     8aa:	9f 09       	sbc	r25, r15
     8ac:	a0 0b       	sbc	r26, r16
     8ae:	b1 0b       	sbc	r27, r17
     8b0:	18 16       	cp	r1, r24
     8b2:	19 06       	cpc	r1, r25
     8b4:	1a 06       	cpc	r1, r26
     8b6:	1b 06       	cpc	r1, r27
     8b8:	1c f7       	brge	.-58     	; 0x880 <__vector_7+0x88>
     8ba:	35 c0       	rjmp	.+106    	; 0x926 <__vector_7+0x12e>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     8bc:	9a 01       	movw	r18, r20
     8be:	80 91 84 00 	lds	r24, 0x0084
     8c2:	90 91 85 00 	lds	r25, 0x0085
     8c6:	80 95       	com	r24
     8c8:	90 95       	com	r25
     8ca:	84 0f       	add	r24, r20
     8cc:	95 1f       	adc	r25, r21
     8ce:	89 2b       	or	r24, r25
     8d0:	31 f4       	brne	.+12     	; 0x8de <__vector_7+0xe6>
     8d2:	20 91 84 00 	lds	r18, 0x0084
     8d6:	30 91 85 00 	lds	r19, 0x0085
     8da:	2f 5f       	subi	r18, 0xFF	; 255
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	30 93 89 00 	sts	0x0089, r19
     8e2:	20 93 88 00 	sts	0x0088, r18
     8e6:	80 91 6f 00 	lds	r24, 0x006F
     8ea:	82 60       	ori	r24, 0x02	; 2
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <__vector_7+0xfc>
     8ee:	80 91 6f 00 	lds	r24, 0x006F
     8f2:	8d 7f       	andi	r24, 0xFD	; 253
     8f4:	80 93 6f 00 	sts	0x006F, r24
    schedule();
     8f8:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	bf 91       	pop	r27
     902:	af 91       	pop	r26
     904:	9f 91       	pop	r25
     906:	8f 91       	pop	r24
     908:	7f 91       	pop	r23
     90a:	6f 91       	pop	r22
     90c:	5f 91       	pop	r21
     90e:	4f 91       	pop	r20
     910:	3f 91       	pop	r19
     912:	2f 91       	pop	r18
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     926:	cb 01       	movw	r24, r22
     928:	bb 27       	eor	r27, r27
     92a:	97 fd       	sbrc	r25, 7
     92c:	b0 95       	com	r27
     92e:	ab 2f       	mov	r26, r27
     930:	20 91 9a 01 	lds	r18, 0x019A
     934:	30 91 9b 01 	lds	r19, 0x019B
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	c1 f6       	brne	.-80     	; 0x8ee <__vector_7+0xf6>
     93e:	be cf       	rjmp	.-132    	; 0x8bc <__vector_7+0xc4>

00000940 <__vector_22>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
IRQ(IRQ_LCD,             LCD_vect);
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	2f 93       	push	r18
     94c:	3f 93       	push	r19
     94e:	4f 93       	push	r20
     950:	5f 93       	push	r21
     952:	6f 93       	push	r22
     954:	7f 93       	push	r23
     956:	8f 93       	push	r24
     958:	9f 93       	push	r25
     95a:	af 93       	push	r26
     95c:	bf 93       	push	r27
     95e:	ef 93       	push	r30
     960:	ff 93       	push	r31
     962:	60 91 9a 01 	lds	r22, 0x019A
     966:	70 91 9b 01 	lds	r23, 0x019B
     96a:	20 91 84 00 	lds	r18, 0x0084
     96e:	30 91 85 00 	lds	r19, 0x0085
     972:	cb 01       	movw	r24, r22
     974:	aa 27       	eor	r26, r26
     976:	97 fd       	sbrc	r25, 7
     978:	a0 95       	com	r26
     97a:	ba 2f       	mov	r27, r26
     97c:	dc 01       	movw	r26, r24
     97e:	99 27       	eor	r25, r25
     980:	88 27       	eor	r24, r24
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	82 2b       	or	r24, r18
     988:	93 2b       	or	r25, r19
     98a:	a4 2b       	or	r26, r20
     98c:	b5 2b       	or	r27, r21
     98e:	80 93 96 01 	sts	0x0196, r24
     992:	90 93 97 01 	sts	0x0197, r25
     996:	a0 93 98 01 	sts	0x0198, r26
     99a:	b0 93 99 01 	sts	0x0199, r27
     99e:	b0 9b       	sbis	0x16, 0	; 22
     9a0:	1c c0       	rjmp	.+56     	; 0x9da <__vector_22+0x9a>
     9a2:	20 91 84 00 	lds	r18, 0x0084
     9a6:	30 91 85 00 	lds	r19, 0x0085
     9aa:	6f 5f       	subi	r22, 0xFF	; 255
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	cb 01       	movw	r24, r22
     9b0:	aa 27       	eor	r26, r26
     9b2:	97 fd       	sbrc	r25, 7
     9b4:	a0 95       	com	r26
     9b6:	ba 2f       	mov	r27, r26
     9b8:	dc 01       	movw	r26, r24
     9ba:	99 27       	eor	r25, r25
     9bc:	88 27       	eor	r24, r24
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	82 2b       	or	r24, r18
     9c4:	93 2b       	or	r25, r19
     9c6:	a4 2b       	or	r26, r20
     9c8:	b5 2b       	or	r27, r21
     9ca:	80 93 96 01 	sts	0x0196, r24
     9ce:	90 93 97 01 	sts	0x0197, r25
     9d2:	a0 93 98 01 	sts	0x0198, r26
     9d6:	b0 93 99 01 	sts	0x0199, r27
     9da:	e0 91 56 02 	lds	r30, 0x0256
     9de:	f0 91 57 02 	lds	r31, 0x0257
     9e2:	30 97       	sbiw	r30, 0x00	; 0
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <__vector_22+0xb4>
     9e6:	80 91 be 01 	lds	r24, 0x01BE
     9ea:	90 91 bf 01 	lds	r25, 0x01BF
     9ee:	61 e1       	ldi	r22, 0x11	; 17
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	09 95       	icall
     9f4:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     9f8:	ff 91       	pop	r31
     9fa:	ef 91       	pop	r30
     9fc:	bf 91       	pop	r27
     9fe:	af 91       	pop	r26
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	7f 91       	pop	r23
     a06:	6f 91       	pop	r22
     a08:	5f 91       	pop	r21
     a0a:	4f 91       	pop	r20
     a0c:	3f 91       	pop	r19
     a0e:	2f 91       	pop	r18
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <__vector_21>:
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
     a3c:	60 91 9a 01 	lds	r22, 0x019A
     a40:	70 91 9b 01 	lds	r23, 0x019B
     a44:	20 91 84 00 	lds	r18, 0x0084
     a48:	30 91 85 00 	lds	r19, 0x0085
     a4c:	cb 01       	movw	r24, r22
     a4e:	aa 27       	eor	r26, r26
     a50:	97 fd       	sbrc	r25, 7
     a52:	a0 95       	com	r26
     a54:	ba 2f       	mov	r27, r26
     a56:	dc 01       	movw	r26, r24
     a58:	99 27       	eor	r25, r25
     a5a:	88 27       	eor	r24, r24
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	82 2b       	or	r24, r18
     a62:	93 2b       	or	r25, r19
     a64:	a4 2b       	or	r26, r20
     a66:	b5 2b       	or	r27, r21
     a68:	80 93 96 01 	sts	0x0196, r24
     a6c:	90 93 97 01 	sts	0x0197, r25
     a70:	a0 93 98 01 	sts	0x0198, r26
     a74:	b0 93 99 01 	sts	0x0199, r27
     a78:	b0 9b       	sbis	0x16, 0	; 22
     a7a:	1c c0       	rjmp	.+56     	; 0xab4 <__vector_21+0x9a>
     a7c:	20 91 84 00 	lds	r18, 0x0084
     a80:	30 91 85 00 	lds	r19, 0x0085
     a84:	6f 5f       	subi	r22, 0xFF	; 255
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	cb 01       	movw	r24, r22
     a8a:	aa 27       	eor	r26, r26
     a8c:	97 fd       	sbrc	r25, 7
     a8e:	a0 95       	com	r26
     a90:	ba 2f       	mov	r27, r26
     a92:	dc 01       	movw	r26, r24
     a94:	99 27       	eor	r25, r25
     a96:	88 27       	eor	r24, r24
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	82 2b       	or	r24, r18
     a9e:	93 2b       	or	r25, r19
     aa0:	a4 2b       	or	r26, r20
     aa2:	b5 2b       	or	r27, r21
     aa4:	80 93 96 01 	sts	0x0196, r24
     aa8:	90 93 97 01 	sts	0x0197, r25
     aac:	a0 93 98 01 	sts	0x0198, r26
     ab0:	b0 93 99 01 	sts	0x0199, r27
     ab4:	e0 91 54 02 	lds	r30, 0x0254
     ab8:	f0 91 55 02 	lds	r31, 0x0255
     abc:	30 97       	sbiw	r30, 0x00	; 0
     abe:	39 f0       	breq	.+14     	; 0xace <__vector_21+0xb4>
     ac0:	80 91 bc 01 	lds	r24, 0x01BC
     ac4:	90 91 bd 01 	lds	r25, 0x01BD
     ac8:	60 e1       	ldi	r22, 0x10	; 16
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	09 95       	icall
     ace:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_20>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
     b16:	60 91 9a 01 	lds	r22, 0x019A
     b1a:	70 91 9b 01 	lds	r23, 0x019B
     b1e:	20 91 84 00 	lds	r18, 0x0084
     b22:	30 91 85 00 	lds	r19, 0x0085
     b26:	cb 01       	movw	r24, r22
     b28:	aa 27       	eor	r26, r26
     b2a:	97 fd       	sbrc	r25, 7
     b2c:	a0 95       	com	r26
     b2e:	ba 2f       	mov	r27, r26
     b30:	dc 01       	movw	r26, r24
     b32:	99 27       	eor	r25, r25
     b34:	88 27       	eor	r24, r24
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	82 2b       	or	r24, r18
     b3c:	93 2b       	or	r25, r19
     b3e:	a4 2b       	or	r26, r20
     b40:	b5 2b       	or	r27, r21
     b42:	80 93 96 01 	sts	0x0196, r24
     b46:	90 93 97 01 	sts	0x0197, r25
     b4a:	a0 93 98 01 	sts	0x0198, r26
     b4e:	b0 93 99 01 	sts	0x0199, r27
     b52:	b0 9b       	sbis	0x16, 0	; 22
     b54:	1c c0       	rjmp	.+56     	; 0xb8e <__vector_20+0x9a>
     b56:	20 91 84 00 	lds	r18, 0x0084
     b5a:	30 91 85 00 	lds	r19, 0x0085
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	cb 01       	movw	r24, r22
     b64:	aa 27       	eor	r26, r26
     b66:	97 fd       	sbrc	r25, 7
     b68:	a0 95       	com	r26
     b6a:	ba 2f       	mov	r27, r26
     b6c:	dc 01       	movw	r26, r24
     b6e:	99 27       	eor	r25, r25
     b70:	88 27       	eor	r24, r24
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	82 2b       	or	r24, r18
     b78:	93 2b       	or	r25, r19
     b7a:	a4 2b       	or	r26, r20
     b7c:	b5 2b       	or	r27, r21
     b7e:	80 93 96 01 	sts	0x0196, r24
     b82:	90 93 97 01 	sts	0x0197, r25
     b86:	a0 93 98 01 	sts	0x0198, r26
     b8a:	b0 93 99 01 	sts	0x0199, r27
     b8e:	e0 91 52 02 	lds	r30, 0x0252
     b92:	f0 91 53 02 	lds	r31, 0x0253
     b96:	30 97       	sbiw	r30, 0x00	; 0
     b98:	39 f0       	breq	.+14     	; 0xba8 <__vector_20+0xb4>
     b9a:	80 91 ba 01 	lds	r24, 0x01BA
     b9e:	90 91 bb 01 	lds	r25, 0x01BB
     ba2:	6f e0       	ldi	r22, 0x0F	; 15
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	09 95       	icall
     ba8:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     bac:	ff 91       	pop	r31
     bae:	ef 91       	pop	r30
     bb0:	bf 91       	pop	r27
     bb2:	af 91       	pop	r26
     bb4:	9f 91       	pop	r25
     bb6:	8f 91       	pop	r24
     bb8:	7f 91       	pop	r23
     bba:	6f 91       	pop	r22
     bbc:	5f 91       	pop	r21
     bbe:	4f 91       	pop	r20
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <__vector_19>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
     bf0:	60 91 9a 01 	lds	r22, 0x019A
     bf4:	70 91 9b 01 	lds	r23, 0x019B
     bf8:	20 91 84 00 	lds	r18, 0x0084
     bfc:	30 91 85 00 	lds	r19, 0x0085
     c00:	cb 01       	movw	r24, r22
     c02:	aa 27       	eor	r26, r26
     c04:	97 fd       	sbrc	r25, 7
     c06:	a0 95       	com	r26
     c08:	ba 2f       	mov	r27, r26
     c0a:	dc 01       	movw	r26, r24
     c0c:	99 27       	eor	r25, r25
     c0e:	88 27       	eor	r24, r24
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	82 2b       	or	r24, r18
     c16:	93 2b       	or	r25, r19
     c18:	a4 2b       	or	r26, r20
     c1a:	b5 2b       	or	r27, r21
     c1c:	80 93 96 01 	sts	0x0196, r24
     c20:	90 93 97 01 	sts	0x0197, r25
     c24:	a0 93 98 01 	sts	0x0198, r26
     c28:	b0 93 99 01 	sts	0x0199, r27
     c2c:	b0 9b       	sbis	0x16, 0	; 22
     c2e:	1c c0       	rjmp	.+56     	; 0xc68 <__vector_19+0x9a>
     c30:	20 91 84 00 	lds	r18, 0x0084
     c34:	30 91 85 00 	lds	r19, 0x0085
     c38:	6f 5f       	subi	r22, 0xFF	; 255
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	cb 01       	movw	r24, r22
     c3e:	aa 27       	eor	r26, r26
     c40:	97 fd       	sbrc	r25, 7
     c42:	a0 95       	com	r26
     c44:	ba 2f       	mov	r27, r26
     c46:	dc 01       	movw	r26, r24
     c48:	99 27       	eor	r25, r25
     c4a:	88 27       	eor	r24, r24
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	82 2b       	or	r24, r18
     c52:	93 2b       	or	r25, r19
     c54:	a4 2b       	or	r26, r20
     c56:	b5 2b       	or	r27, r21
     c58:	80 93 96 01 	sts	0x0196, r24
     c5c:	90 93 97 01 	sts	0x0197, r25
     c60:	a0 93 98 01 	sts	0x0198, r26
     c64:	b0 93 99 01 	sts	0x0199, r27
     c68:	e0 91 50 02 	lds	r30, 0x0250
     c6c:	f0 91 51 02 	lds	r31, 0x0251
     c70:	30 97       	sbiw	r30, 0x00	; 0
     c72:	39 f0       	breq	.+14     	; 0xc82 <__vector_19+0xb4>
     c74:	80 91 b8 01 	lds	r24, 0x01B8
     c78:	90 91 b9 01 	lds	r25, 0x01B9
     c7c:	6e e0       	ldi	r22, 0x0E	; 14
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	09 95       	icall
     c82:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_18>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
     cca:	60 91 9a 01 	lds	r22, 0x019A
     cce:	70 91 9b 01 	lds	r23, 0x019B
     cd2:	20 91 84 00 	lds	r18, 0x0084
     cd6:	30 91 85 00 	lds	r19, 0x0085
     cda:	cb 01       	movw	r24, r22
     cdc:	aa 27       	eor	r26, r26
     cde:	97 fd       	sbrc	r25, 7
     ce0:	a0 95       	com	r26
     ce2:	ba 2f       	mov	r27, r26
     ce4:	dc 01       	movw	r26, r24
     ce6:	99 27       	eor	r25, r25
     ce8:	88 27       	eor	r24, r24
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	82 2b       	or	r24, r18
     cf0:	93 2b       	or	r25, r19
     cf2:	a4 2b       	or	r26, r20
     cf4:	b5 2b       	or	r27, r21
     cf6:	80 93 96 01 	sts	0x0196, r24
     cfa:	90 93 97 01 	sts	0x0197, r25
     cfe:	a0 93 98 01 	sts	0x0198, r26
     d02:	b0 93 99 01 	sts	0x0199, r27
     d06:	b0 9b       	sbis	0x16, 0	; 22
     d08:	1c c0       	rjmp	.+56     	; 0xd42 <__vector_18+0x9a>
     d0a:	20 91 84 00 	lds	r18, 0x0084
     d0e:	30 91 85 00 	lds	r19, 0x0085
     d12:	6f 5f       	subi	r22, 0xFF	; 255
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	cb 01       	movw	r24, r22
     d18:	aa 27       	eor	r26, r26
     d1a:	97 fd       	sbrc	r25, 7
     d1c:	a0 95       	com	r26
     d1e:	ba 2f       	mov	r27, r26
     d20:	dc 01       	movw	r26, r24
     d22:	99 27       	eor	r25, r25
     d24:	88 27       	eor	r24, r24
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	82 2b       	or	r24, r18
     d2c:	93 2b       	or	r25, r19
     d2e:	a4 2b       	or	r26, r20
     d30:	b5 2b       	or	r27, r21
     d32:	80 93 96 01 	sts	0x0196, r24
     d36:	90 93 97 01 	sts	0x0197, r25
     d3a:	a0 93 98 01 	sts	0x0198, r26
     d3e:	b0 93 99 01 	sts	0x0199, r27
     d42:	e0 91 4e 02 	lds	r30, 0x024E
     d46:	f0 91 4f 02 	lds	r31, 0x024F
     d4a:	30 97       	sbiw	r30, 0x00	; 0
     d4c:	39 f0       	breq	.+14     	; 0xd5c <__vector_18+0xb4>
     d4e:	80 91 b6 01 	lds	r24, 0x01B6
     d52:	90 91 b7 01 	lds	r25, 0x01B7
     d56:	6d e0       	ldi	r22, 0x0D	; 13
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	09 95       	icall
     d5c:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_17>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	60 91 9a 01 	lds	r22, 0x019A
     da8:	70 91 9b 01 	lds	r23, 0x019B
     dac:	20 91 84 00 	lds	r18, 0x0084
     db0:	30 91 85 00 	lds	r19, 0x0085
     db4:	cb 01       	movw	r24, r22
     db6:	aa 27       	eor	r26, r26
     db8:	97 fd       	sbrc	r25, 7
     dba:	a0 95       	com	r26
     dbc:	ba 2f       	mov	r27, r26
     dbe:	dc 01       	movw	r26, r24
     dc0:	99 27       	eor	r25, r25
     dc2:	88 27       	eor	r24, r24
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	82 2b       	or	r24, r18
     dca:	93 2b       	or	r25, r19
     dcc:	a4 2b       	or	r26, r20
     dce:	b5 2b       	or	r27, r21
     dd0:	80 93 96 01 	sts	0x0196, r24
     dd4:	90 93 97 01 	sts	0x0197, r25
     dd8:	a0 93 98 01 	sts	0x0198, r26
     ddc:	b0 93 99 01 	sts	0x0199, r27
     de0:	b0 9b       	sbis	0x16, 0	; 22
     de2:	1c c0       	rjmp	.+56     	; 0xe1c <__vector_17+0x9a>
     de4:	20 91 84 00 	lds	r18, 0x0084
     de8:	30 91 85 00 	lds	r19, 0x0085
     dec:	6f 5f       	subi	r22, 0xFF	; 255
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	cb 01       	movw	r24, r22
     df2:	aa 27       	eor	r26, r26
     df4:	97 fd       	sbrc	r25, 7
     df6:	a0 95       	com	r26
     df8:	ba 2f       	mov	r27, r26
     dfa:	dc 01       	movw	r26, r24
     dfc:	99 27       	eor	r25, r25
     dfe:	88 27       	eor	r24, r24
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	82 2b       	or	r24, r18
     e06:	93 2b       	or	r25, r19
     e08:	a4 2b       	or	r26, r20
     e0a:	b5 2b       	or	r27, r21
     e0c:	80 93 96 01 	sts	0x0196, r24
     e10:	90 93 97 01 	sts	0x0197, r25
     e14:	a0 93 98 01 	sts	0x0198, r26
     e18:	b0 93 99 01 	sts	0x0199, r27
     e1c:	e0 91 4c 02 	lds	r30, 0x024C
     e20:	f0 91 4d 02 	lds	r31, 0x024D
     e24:	30 97       	sbiw	r30, 0x00	; 0
     e26:	39 f0       	breq	.+14     	; 0xe36 <__vector_17+0xb4>
     e28:	80 91 b4 01 	lds	r24, 0x01B4
     e2c:	90 91 b5 01 	lds	r25, 0x01B5
     e30:	6c e0       	ldi	r22, 0x0C	; 12
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	09 95       	icall
     e36:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_16>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
     e7e:	60 91 9a 01 	lds	r22, 0x019A
     e82:	70 91 9b 01 	lds	r23, 0x019B
     e86:	20 91 84 00 	lds	r18, 0x0084
     e8a:	30 91 85 00 	lds	r19, 0x0085
     e8e:	cb 01       	movw	r24, r22
     e90:	aa 27       	eor	r26, r26
     e92:	97 fd       	sbrc	r25, 7
     e94:	a0 95       	com	r26
     e96:	ba 2f       	mov	r27, r26
     e98:	dc 01       	movw	r26, r24
     e9a:	99 27       	eor	r25, r25
     e9c:	88 27       	eor	r24, r24
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	82 2b       	or	r24, r18
     ea4:	93 2b       	or	r25, r19
     ea6:	a4 2b       	or	r26, r20
     ea8:	b5 2b       	or	r27, r21
     eaa:	80 93 96 01 	sts	0x0196, r24
     eae:	90 93 97 01 	sts	0x0197, r25
     eb2:	a0 93 98 01 	sts	0x0198, r26
     eb6:	b0 93 99 01 	sts	0x0199, r27
     eba:	b0 9b       	sbis	0x16, 0	; 22
     ebc:	1c c0       	rjmp	.+56     	; 0xef6 <__vector_16+0x9a>
     ebe:	20 91 84 00 	lds	r18, 0x0084
     ec2:	30 91 85 00 	lds	r19, 0x0085
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	cb 01       	movw	r24, r22
     ecc:	aa 27       	eor	r26, r26
     ece:	97 fd       	sbrc	r25, 7
     ed0:	a0 95       	com	r26
     ed2:	ba 2f       	mov	r27, r26
     ed4:	dc 01       	movw	r26, r24
     ed6:	99 27       	eor	r25, r25
     ed8:	88 27       	eor	r24, r24
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	82 2b       	or	r24, r18
     ee0:	93 2b       	or	r25, r19
     ee2:	a4 2b       	or	r26, r20
     ee4:	b5 2b       	or	r27, r21
     ee6:	80 93 96 01 	sts	0x0196, r24
     eea:	90 93 97 01 	sts	0x0197, r25
     eee:	a0 93 98 01 	sts	0x0198, r26
     ef2:	b0 93 99 01 	sts	0x0199, r27
     ef6:	e0 91 4a 02 	lds	r30, 0x024A
     efa:	f0 91 4b 02 	lds	r31, 0x024B
     efe:	30 97       	sbiw	r30, 0x00	; 0
     f00:	39 f0       	breq	.+14     	; 0xf10 <__vector_16+0xb4>
     f02:	80 91 b2 01 	lds	r24, 0x01B2
     f06:	90 91 b3 01 	lds	r25, 0x01B3
     f0a:	6b e0       	ldi	r22, 0x0B	; 11
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	09 95       	icall
     f10:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	bf 91       	pop	r27
     f1a:	af 91       	pop	r26
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	7f 91       	pop	r23
     f22:	6f 91       	pop	r22
     f24:	5f 91       	pop	r21
     f26:	4f 91       	pop	r20
     f28:	3f 91       	pop	r19
     f2a:	2f 91       	pop	r18
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f 90       	pop	r0
     f32:	1f 90       	pop	r1
     f34:	18 95       	reti

00000f36 <__vector_15>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
     f36:	1f 92       	push	r1
     f38:	0f 92       	push	r0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	0f 92       	push	r0
     f3e:	11 24       	eor	r1, r1
     f40:	2f 93       	push	r18
     f42:	3f 93       	push	r19
     f44:	4f 93       	push	r20
     f46:	5f 93       	push	r21
     f48:	6f 93       	push	r22
     f4a:	7f 93       	push	r23
     f4c:	8f 93       	push	r24
     f4e:	9f 93       	push	r25
     f50:	af 93       	push	r26
     f52:	bf 93       	push	r27
     f54:	ef 93       	push	r30
     f56:	ff 93       	push	r31
     f58:	60 91 9a 01 	lds	r22, 0x019A
     f5c:	70 91 9b 01 	lds	r23, 0x019B
     f60:	20 91 84 00 	lds	r18, 0x0084
     f64:	30 91 85 00 	lds	r19, 0x0085
     f68:	cb 01       	movw	r24, r22
     f6a:	aa 27       	eor	r26, r26
     f6c:	97 fd       	sbrc	r25, 7
     f6e:	a0 95       	com	r26
     f70:	ba 2f       	mov	r27, r26
     f72:	dc 01       	movw	r26, r24
     f74:	99 27       	eor	r25, r25
     f76:	88 27       	eor	r24, r24
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	82 2b       	or	r24, r18
     f7e:	93 2b       	or	r25, r19
     f80:	a4 2b       	or	r26, r20
     f82:	b5 2b       	or	r27, r21
     f84:	80 93 96 01 	sts	0x0196, r24
     f88:	90 93 97 01 	sts	0x0197, r25
     f8c:	a0 93 98 01 	sts	0x0198, r26
     f90:	b0 93 99 01 	sts	0x0199, r27
     f94:	b0 9b       	sbis	0x16, 0	; 22
     f96:	1c c0       	rjmp	.+56     	; 0xfd0 <__vector_15+0x9a>
     f98:	20 91 84 00 	lds	r18, 0x0084
     f9c:	30 91 85 00 	lds	r19, 0x0085
     fa0:	6f 5f       	subi	r22, 0xFF	; 255
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	cb 01       	movw	r24, r22
     fa6:	aa 27       	eor	r26, r26
     fa8:	97 fd       	sbrc	r25, 7
     faa:	a0 95       	com	r26
     fac:	ba 2f       	mov	r27, r26
     fae:	dc 01       	movw	r26, r24
     fb0:	99 27       	eor	r25, r25
     fb2:	88 27       	eor	r24, r24
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	82 2b       	or	r24, r18
     fba:	93 2b       	or	r25, r19
     fbc:	a4 2b       	or	r26, r20
     fbe:	b5 2b       	or	r27, r21
     fc0:	80 93 96 01 	sts	0x0196, r24
     fc4:	90 93 97 01 	sts	0x0197, r25
     fc8:	a0 93 98 01 	sts	0x0198, r26
     fcc:	b0 93 99 01 	sts	0x0199, r27
     fd0:	e0 91 48 02 	lds	r30, 0x0248
     fd4:	f0 91 49 02 	lds	r31, 0x0249
     fd8:	30 97       	sbiw	r30, 0x00	; 0
     fda:	39 f0       	breq	.+14     	; 0xfea <__vector_15+0xb4>
     fdc:	80 91 b0 01 	lds	r24, 0x01B0
     fe0:	90 91 b1 01 	lds	r25, 0x01B1
     fe4:	6a e0       	ldi	r22, 0x0A	; 10
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	09 95       	icall
     fea:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	7f 91       	pop	r23
     ffc:	6f 91       	pop	r22
     ffe:	5f 91       	pop	r21
    1000:	4f 91       	pop	r20
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <__vector_14>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	60 91 9a 01 	lds	r22, 0x019A
    1036:	70 91 9b 01 	lds	r23, 0x019B
    103a:	20 91 84 00 	lds	r18, 0x0084
    103e:	30 91 85 00 	lds	r19, 0x0085
    1042:	cb 01       	movw	r24, r22
    1044:	aa 27       	eor	r26, r26
    1046:	97 fd       	sbrc	r25, 7
    1048:	a0 95       	com	r26
    104a:	ba 2f       	mov	r27, r26
    104c:	dc 01       	movw	r26, r24
    104e:	99 27       	eor	r25, r25
    1050:	88 27       	eor	r24, r24
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	82 2b       	or	r24, r18
    1058:	93 2b       	or	r25, r19
    105a:	a4 2b       	or	r26, r20
    105c:	b5 2b       	or	r27, r21
    105e:	80 93 96 01 	sts	0x0196, r24
    1062:	90 93 97 01 	sts	0x0197, r25
    1066:	a0 93 98 01 	sts	0x0198, r26
    106a:	b0 93 99 01 	sts	0x0199, r27
    106e:	b0 9b       	sbis	0x16, 0	; 22
    1070:	1c c0       	rjmp	.+56     	; 0x10aa <__vector_14+0x9a>
    1072:	20 91 84 00 	lds	r18, 0x0084
    1076:	30 91 85 00 	lds	r19, 0x0085
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	cb 01       	movw	r24, r22
    1080:	aa 27       	eor	r26, r26
    1082:	97 fd       	sbrc	r25, 7
    1084:	a0 95       	com	r26
    1086:	ba 2f       	mov	r27, r26
    1088:	dc 01       	movw	r26, r24
    108a:	99 27       	eor	r25, r25
    108c:	88 27       	eor	r24, r24
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	82 2b       	or	r24, r18
    1094:	93 2b       	or	r25, r19
    1096:	a4 2b       	or	r26, r20
    1098:	b5 2b       	or	r27, r21
    109a:	80 93 96 01 	sts	0x0196, r24
    109e:	90 93 97 01 	sts	0x0197, r25
    10a2:	a0 93 98 01 	sts	0x0198, r26
    10a6:	b0 93 99 01 	sts	0x0199, r27
    10aa:	e0 91 46 02 	lds	r30, 0x0246
    10ae:	f0 91 47 02 	lds	r31, 0x0247
    10b2:	30 97       	sbiw	r30, 0x00	; 0
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <__vector_14+0xb4>
    10b6:	80 91 ae 01 	lds	r24, 0x01AE
    10ba:	90 91 af 01 	lds	r25, 0x01AF
    10be:	69 e0       	ldi	r22, 0x09	; 9
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	09 95       	icall
    10c4:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	bf 91       	pop	r27
    10ce:	af 91       	pop	r26
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	7f 91       	pop	r23
    10d6:	6f 91       	pop	r22
    10d8:	5f 91       	pop	r21
    10da:	4f 91       	pop	r20
    10dc:	3f 91       	pop	r19
    10de:	2f 91       	pop	r18
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_13>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	2f 93       	push	r18
    10f6:	3f 93       	push	r19
    10f8:	4f 93       	push	r20
    10fa:	5f 93       	push	r21
    10fc:	6f 93       	push	r22
    10fe:	7f 93       	push	r23
    1100:	8f 93       	push	r24
    1102:	9f 93       	push	r25
    1104:	af 93       	push	r26
    1106:	bf 93       	push	r27
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
    110c:	60 91 9a 01 	lds	r22, 0x019A
    1110:	70 91 9b 01 	lds	r23, 0x019B
    1114:	20 91 84 00 	lds	r18, 0x0084
    1118:	30 91 85 00 	lds	r19, 0x0085
    111c:	cb 01       	movw	r24, r22
    111e:	aa 27       	eor	r26, r26
    1120:	97 fd       	sbrc	r25, 7
    1122:	a0 95       	com	r26
    1124:	ba 2f       	mov	r27, r26
    1126:	dc 01       	movw	r26, r24
    1128:	99 27       	eor	r25, r25
    112a:	88 27       	eor	r24, r24
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	82 2b       	or	r24, r18
    1132:	93 2b       	or	r25, r19
    1134:	a4 2b       	or	r26, r20
    1136:	b5 2b       	or	r27, r21
    1138:	80 93 96 01 	sts	0x0196, r24
    113c:	90 93 97 01 	sts	0x0197, r25
    1140:	a0 93 98 01 	sts	0x0198, r26
    1144:	b0 93 99 01 	sts	0x0199, r27
    1148:	b0 9b       	sbis	0x16, 0	; 22
    114a:	1c c0       	rjmp	.+56     	; 0x1184 <__vector_13+0x9a>
    114c:	20 91 84 00 	lds	r18, 0x0084
    1150:	30 91 85 00 	lds	r19, 0x0085
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	cb 01       	movw	r24, r22
    115a:	aa 27       	eor	r26, r26
    115c:	97 fd       	sbrc	r25, 7
    115e:	a0 95       	com	r26
    1160:	ba 2f       	mov	r27, r26
    1162:	dc 01       	movw	r26, r24
    1164:	99 27       	eor	r25, r25
    1166:	88 27       	eor	r24, r24
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	82 2b       	or	r24, r18
    116e:	93 2b       	or	r25, r19
    1170:	a4 2b       	or	r26, r20
    1172:	b5 2b       	or	r27, r21
    1174:	80 93 96 01 	sts	0x0196, r24
    1178:	90 93 97 01 	sts	0x0197, r25
    117c:	a0 93 98 01 	sts	0x0198, r26
    1180:	b0 93 99 01 	sts	0x0199, r27
    1184:	e0 91 44 02 	lds	r30, 0x0244
    1188:	f0 91 45 02 	lds	r31, 0x0245
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	39 f0       	breq	.+14     	; 0x119e <__vector_13+0xb4>
    1190:	80 91 ac 01 	lds	r24, 0x01AC
    1194:	90 91 ad 01 	lds	r25, 0x01AD
    1198:	68 e0       	ldi	r22, 0x08	; 8
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	09 95       	icall
    119e:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_12>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	60 91 9a 01 	lds	r22, 0x019A
    11ea:	70 91 9b 01 	lds	r23, 0x019B
    11ee:	20 91 84 00 	lds	r18, 0x0084
    11f2:	30 91 85 00 	lds	r19, 0x0085
    11f6:	cb 01       	movw	r24, r22
    11f8:	aa 27       	eor	r26, r26
    11fa:	97 fd       	sbrc	r25, 7
    11fc:	a0 95       	com	r26
    11fe:	ba 2f       	mov	r27, r26
    1200:	dc 01       	movw	r26, r24
    1202:	99 27       	eor	r25, r25
    1204:	88 27       	eor	r24, r24
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	82 2b       	or	r24, r18
    120c:	93 2b       	or	r25, r19
    120e:	a4 2b       	or	r26, r20
    1210:	b5 2b       	or	r27, r21
    1212:	80 93 96 01 	sts	0x0196, r24
    1216:	90 93 97 01 	sts	0x0197, r25
    121a:	a0 93 98 01 	sts	0x0198, r26
    121e:	b0 93 99 01 	sts	0x0199, r27
    1222:	b0 9b       	sbis	0x16, 0	; 22
    1224:	1c c0       	rjmp	.+56     	; 0x125e <__vector_12+0x9a>
    1226:	20 91 84 00 	lds	r18, 0x0084
    122a:	30 91 85 00 	lds	r19, 0x0085
    122e:	6f 5f       	subi	r22, 0xFF	; 255
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	cb 01       	movw	r24, r22
    1234:	aa 27       	eor	r26, r26
    1236:	97 fd       	sbrc	r25, 7
    1238:	a0 95       	com	r26
    123a:	ba 2f       	mov	r27, r26
    123c:	dc 01       	movw	r26, r24
    123e:	99 27       	eor	r25, r25
    1240:	88 27       	eor	r24, r24
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	82 2b       	or	r24, r18
    1248:	93 2b       	or	r25, r19
    124a:	a4 2b       	or	r26, r20
    124c:	b5 2b       	or	r27, r21
    124e:	80 93 96 01 	sts	0x0196, r24
    1252:	90 93 97 01 	sts	0x0197, r25
    1256:	a0 93 98 01 	sts	0x0198, r26
    125a:	b0 93 99 01 	sts	0x0199, r27
    125e:	e0 91 42 02 	lds	r30, 0x0242
    1262:	f0 91 43 02 	lds	r31, 0x0243
    1266:	30 97       	sbiw	r30, 0x00	; 0
    1268:	39 f0       	breq	.+14     	; 0x1278 <__vector_12+0xb4>
    126a:	80 91 aa 01 	lds	r24, 0x01AA
    126e:	90 91 ab 01 	lds	r25, 0x01AB
    1272:	67 e0       	ldi	r22, 0x07	; 7
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	09 95       	icall
    1278:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_11>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	2f 93       	push	r18
    12aa:	3f 93       	push	r19
    12ac:	4f 93       	push	r20
    12ae:	5f 93       	push	r21
    12b0:	6f 93       	push	r22
    12b2:	7f 93       	push	r23
    12b4:	8f 93       	push	r24
    12b6:	9f 93       	push	r25
    12b8:	af 93       	push	r26
    12ba:	bf 93       	push	r27
    12bc:	ef 93       	push	r30
    12be:	ff 93       	push	r31
    12c0:	60 91 9a 01 	lds	r22, 0x019A
    12c4:	70 91 9b 01 	lds	r23, 0x019B
    12c8:	20 91 84 00 	lds	r18, 0x0084
    12cc:	30 91 85 00 	lds	r19, 0x0085
    12d0:	cb 01       	movw	r24, r22
    12d2:	aa 27       	eor	r26, r26
    12d4:	97 fd       	sbrc	r25, 7
    12d6:	a0 95       	com	r26
    12d8:	ba 2f       	mov	r27, r26
    12da:	dc 01       	movw	r26, r24
    12dc:	99 27       	eor	r25, r25
    12de:	88 27       	eor	r24, r24
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	82 2b       	or	r24, r18
    12e6:	93 2b       	or	r25, r19
    12e8:	a4 2b       	or	r26, r20
    12ea:	b5 2b       	or	r27, r21
    12ec:	80 93 96 01 	sts	0x0196, r24
    12f0:	90 93 97 01 	sts	0x0197, r25
    12f4:	a0 93 98 01 	sts	0x0198, r26
    12f8:	b0 93 99 01 	sts	0x0199, r27
    12fc:	b0 9b       	sbis	0x16, 0	; 22
    12fe:	1c c0       	rjmp	.+56     	; 0x1338 <__vector_11+0x9a>
    1300:	20 91 84 00 	lds	r18, 0x0084
    1304:	30 91 85 00 	lds	r19, 0x0085
    1308:	6f 5f       	subi	r22, 0xFF	; 255
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	cb 01       	movw	r24, r22
    130e:	aa 27       	eor	r26, r26
    1310:	97 fd       	sbrc	r25, 7
    1312:	a0 95       	com	r26
    1314:	ba 2f       	mov	r27, r26
    1316:	dc 01       	movw	r26, r24
    1318:	99 27       	eor	r25, r25
    131a:	88 27       	eor	r24, r24
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	82 2b       	or	r24, r18
    1322:	93 2b       	or	r25, r19
    1324:	a4 2b       	or	r26, r20
    1326:	b5 2b       	or	r27, r21
    1328:	80 93 96 01 	sts	0x0196, r24
    132c:	90 93 97 01 	sts	0x0197, r25
    1330:	a0 93 98 01 	sts	0x0198, r26
    1334:	b0 93 99 01 	sts	0x0199, r27
    1338:	e0 91 40 02 	lds	r30, 0x0240
    133c:	f0 91 41 02 	lds	r31, 0x0241
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	39 f0       	breq	.+14     	; 0x1352 <__vector_11+0xb4>
    1344:	80 91 a8 01 	lds	r24, 0x01A8
    1348:	90 91 a9 01 	lds	r25, 0x01A9
    134c:	66 e0       	ldi	r22, 0x06	; 6
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	09 95       	icall
    1352:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <__vector_10>:
IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	60 91 9a 01 	lds	r22, 0x019A
    139e:	70 91 9b 01 	lds	r23, 0x019B
    13a2:	20 91 84 00 	lds	r18, 0x0084
    13a6:	30 91 85 00 	lds	r19, 0x0085
    13aa:	cb 01       	movw	r24, r22
    13ac:	aa 27       	eor	r26, r26
    13ae:	97 fd       	sbrc	r25, 7
    13b0:	a0 95       	com	r26
    13b2:	ba 2f       	mov	r27, r26
    13b4:	dc 01       	movw	r26, r24
    13b6:	99 27       	eor	r25, r25
    13b8:	88 27       	eor	r24, r24
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	82 2b       	or	r24, r18
    13c0:	93 2b       	or	r25, r19
    13c2:	a4 2b       	or	r26, r20
    13c4:	b5 2b       	or	r27, r21
    13c6:	80 93 96 01 	sts	0x0196, r24
    13ca:	90 93 97 01 	sts	0x0197, r25
    13ce:	a0 93 98 01 	sts	0x0198, r26
    13d2:	b0 93 99 01 	sts	0x0199, r27
    13d6:	b0 9b       	sbis	0x16, 0	; 22
    13d8:	1c c0       	rjmp	.+56     	; 0x1412 <__vector_10+0x9a>
    13da:	20 91 84 00 	lds	r18, 0x0084
    13de:	30 91 85 00 	lds	r19, 0x0085
    13e2:	6f 5f       	subi	r22, 0xFF	; 255
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	cb 01       	movw	r24, r22
    13e8:	aa 27       	eor	r26, r26
    13ea:	97 fd       	sbrc	r25, 7
    13ec:	a0 95       	com	r26
    13ee:	ba 2f       	mov	r27, r26
    13f0:	dc 01       	movw	r26, r24
    13f2:	99 27       	eor	r25, r25
    13f4:	88 27       	eor	r24, r24
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	82 2b       	or	r24, r18
    13fc:	93 2b       	or	r25, r19
    13fe:	a4 2b       	or	r26, r20
    1400:	b5 2b       	or	r27, r21
    1402:	80 93 96 01 	sts	0x0196, r24
    1406:	90 93 97 01 	sts	0x0197, r25
    140a:	a0 93 98 01 	sts	0x0198, r26
    140e:	b0 93 99 01 	sts	0x0199, r27
    1412:	e0 91 3e 02 	lds	r30, 0x023E
    1416:	f0 91 3f 02 	lds	r31, 0x023F
    141a:	30 97       	sbiw	r30, 0x00	; 0
    141c:	39 f0       	breq	.+14     	; 0x142c <__vector_10+0xb4>
    141e:	80 91 a6 01 	lds	r24, 0x01A6
    1422:	90 91 a7 01 	lds	r25, 0x01A7
    1426:	65 e0       	ldi	r22, 0x05	; 5
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	09 95       	icall
    142c:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <__vector_5>:

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	2f 93       	push	r18
    145e:	3f 93       	push	r19
    1460:	4f 93       	push	r20
    1462:	5f 93       	push	r21
    1464:	6f 93       	push	r22
    1466:	7f 93       	push	r23
    1468:	8f 93       	push	r24
    146a:	9f 93       	push	r25
    146c:	af 93       	push	r26
    146e:	bf 93       	push	r27
    1470:	ef 93       	push	r30
    1472:	ff 93       	push	r31
    1474:	60 91 9a 01 	lds	r22, 0x019A
    1478:	70 91 9b 01 	lds	r23, 0x019B
    147c:	20 91 84 00 	lds	r18, 0x0084
    1480:	30 91 85 00 	lds	r19, 0x0085
    1484:	cb 01       	movw	r24, r22
    1486:	aa 27       	eor	r26, r26
    1488:	97 fd       	sbrc	r25, 7
    148a:	a0 95       	com	r26
    148c:	ba 2f       	mov	r27, r26
    148e:	dc 01       	movw	r26, r24
    1490:	99 27       	eor	r25, r25
    1492:	88 27       	eor	r24, r24
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	82 2b       	or	r24, r18
    149a:	93 2b       	or	r25, r19
    149c:	a4 2b       	or	r26, r20
    149e:	b5 2b       	or	r27, r21
    14a0:	80 93 96 01 	sts	0x0196, r24
    14a4:	90 93 97 01 	sts	0x0197, r25
    14a8:	a0 93 98 01 	sts	0x0198, r26
    14ac:	b0 93 99 01 	sts	0x0199, r27
    14b0:	b0 9b       	sbis	0x16, 0	; 22
    14b2:	1c c0       	rjmp	.+56     	; 0x14ec <__vector_5+0x9a>
    14b4:	20 91 84 00 	lds	r18, 0x0084
    14b8:	30 91 85 00 	lds	r19, 0x0085
    14bc:	6f 5f       	subi	r22, 0xFF	; 255
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	cb 01       	movw	r24, r22
    14c2:	aa 27       	eor	r26, r26
    14c4:	97 fd       	sbrc	r25, 7
    14c6:	a0 95       	com	r26
    14c8:	ba 2f       	mov	r27, r26
    14ca:	dc 01       	movw	r26, r24
    14cc:	99 27       	eor	r25, r25
    14ce:	88 27       	eor	r24, r24
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	82 2b       	or	r24, r18
    14d6:	93 2b       	or	r25, r19
    14d8:	a4 2b       	or	r26, r20
    14da:	b5 2b       	or	r27, r21
    14dc:	80 93 96 01 	sts	0x0196, r24
    14e0:	90 93 97 01 	sts	0x0197, r25
    14e4:	a0 93 98 01 	sts	0x0198, r26
    14e8:	b0 93 99 01 	sts	0x0199, r27
    14ec:	e0 91 3c 02 	lds	r30, 0x023C
    14f0:	f0 91 3d 02 	lds	r31, 0x023D
    14f4:	30 97       	sbiw	r30, 0x00	; 0
    14f6:	39 f0       	breq	.+14     	; 0x1506 <__vector_5+0xb4>
    14f8:	80 91 a4 01 	lds	r24, 0x01A4
    14fc:	90 91 a5 01 	lds	r25, 0x01A5
    1500:	64 e0       	ldi	r22, 0x04	; 4
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	09 95       	icall
    1506:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_4>:
#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	2f 93       	push	r18
    1538:	3f 93       	push	r19
    153a:	4f 93       	push	r20
    153c:	5f 93       	push	r21
    153e:	6f 93       	push	r22
    1540:	7f 93       	push	r23
    1542:	8f 93       	push	r24
    1544:	9f 93       	push	r25
    1546:	af 93       	push	r26
    1548:	bf 93       	push	r27
    154a:	ef 93       	push	r30
    154c:	ff 93       	push	r31
    154e:	60 91 9a 01 	lds	r22, 0x019A
    1552:	70 91 9b 01 	lds	r23, 0x019B
    1556:	20 91 84 00 	lds	r18, 0x0084
    155a:	30 91 85 00 	lds	r19, 0x0085
    155e:	cb 01       	movw	r24, r22
    1560:	aa 27       	eor	r26, r26
    1562:	97 fd       	sbrc	r25, 7
    1564:	a0 95       	com	r26
    1566:	ba 2f       	mov	r27, r26
    1568:	dc 01       	movw	r26, r24
    156a:	99 27       	eor	r25, r25
    156c:	88 27       	eor	r24, r24
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	82 2b       	or	r24, r18
    1574:	93 2b       	or	r25, r19
    1576:	a4 2b       	or	r26, r20
    1578:	b5 2b       	or	r27, r21
    157a:	80 93 96 01 	sts	0x0196, r24
    157e:	90 93 97 01 	sts	0x0197, r25
    1582:	a0 93 98 01 	sts	0x0198, r26
    1586:	b0 93 99 01 	sts	0x0199, r27
    158a:	b0 9b       	sbis	0x16, 0	; 22
    158c:	1c c0       	rjmp	.+56     	; 0x15c6 <__vector_4+0x9a>
    158e:	20 91 84 00 	lds	r18, 0x0084
    1592:	30 91 85 00 	lds	r19, 0x0085
    1596:	6f 5f       	subi	r22, 0xFF	; 255
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	cb 01       	movw	r24, r22
    159c:	aa 27       	eor	r26, r26
    159e:	97 fd       	sbrc	r25, 7
    15a0:	a0 95       	com	r26
    15a2:	ba 2f       	mov	r27, r26
    15a4:	dc 01       	movw	r26, r24
    15a6:	99 27       	eor	r25, r25
    15a8:	88 27       	eor	r24, r24
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	82 2b       	or	r24, r18
    15b0:	93 2b       	or	r25, r19
    15b2:	a4 2b       	or	r26, r20
    15b4:	b5 2b       	or	r27, r21
    15b6:	80 93 96 01 	sts	0x0196, r24
    15ba:	90 93 97 01 	sts	0x0197, r25
    15be:	a0 93 98 01 	sts	0x0198, r26
    15c2:	b0 93 99 01 	sts	0x0199, r27
    15c6:	e0 91 3a 02 	lds	r30, 0x023A
    15ca:	f0 91 3b 02 	lds	r31, 0x023B
    15ce:	30 97       	sbiw	r30, 0x00	; 0
    15d0:	39 f0       	breq	.+14     	; 0x15e0 <__vector_4+0xb4>
    15d2:	80 91 a2 01 	lds	r24, 0x01A2
    15d6:	90 91 a3 01 	lds	r25, 0x01A3
    15da:	63 e0       	ldi	r22, 0x03	; 3
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	09 95       	icall
    15e0:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__vector_3>:

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	2f 93       	push	r18
    1612:	3f 93       	push	r19
    1614:	4f 93       	push	r20
    1616:	5f 93       	push	r21
    1618:	6f 93       	push	r22
    161a:	7f 93       	push	r23
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	af 93       	push	r26
    1622:	bf 93       	push	r27
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
    1628:	60 91 9a 01 	lds	r22, 0x019A
    162c:	70 91 9b 01 	lds	r23, 0x019B
    1630:	20 91 84 00 	lds	r18, 0x0084
    1634:	30 91 85 00 	lds	r19, 0x0085
    1638:	cb 01       	movw	r24, r22
    163a:	aa 27       	eor	r26, r26
    163c:	97 fd       	sbrc	r25, 7
    163e:	a0 95       	com	r26
    1640:	ba 2f       	mov	r27, r26
    1642:	dc 01       	movw	r26, r24
    1644:	99 27       	eor	r25, r25
    1646:	88 27       	eor	r24, r24
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	82 2b       	or	r24, r18
    164e:	93 2b       	or	r25, r19
    1650:	a4 2b       	or	r26, r20
    1652:	b5 2b       	or	r27, r21
    1654:	80 93 96 01 	sts	0x0196, r24
    1658:	90 93 97 01 	sts	0x0197, r25
    165c:	a0 93 98 01 	sts	0x0198, r26
    1660:	b0 93 99 01 	sts	0x0199, r27
    1664:	b0 9b       	sbis	0x16, 0	; 22
    1666:	1c c0       	rjmp	.+56     	; 0x16a0 <__vector_3+0x9a>
    1668:	20 91 84 00 	lds	r18, 0x0084
    166c:	30 91 85 00 	lds	r19, 0x0085
    1670:	6f 5f       	subi	r22, 0xFF	; 255
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	cb 01       	movw	r24, r22
    1676:	aa 27       	eor	r26, r26
    1678:	97 fd       	sbrc	r25, 7
    167a:	a0 95       	com	r26
    167c:	ba 2f       	mov	r27, r26
    167e:	dc 01       	movw	r26, r24
    1680:	99 27       	eor	r25, r25
    1682:	88 27       	eor	r24, r24
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	82 2b       	or	r24, r18
    168a:	93 2b       	or	r25, r19
    168c:	a4 2b       	or	r26, r20
    168e:	b5 2b       	or	r27, r21
    1690:	80 93 96 01 	sts	0x0196, r24
    1694:	90 93 97 01 	sts	0x0197, r25
    1698:	a0 93 98 01 	sts	0x0198, r26
    169c:	b0 93 99 01 	sts	0x0199, r27
    16a0:	e0 91 38 02 	lds	r30, 0x0238
    16a4:	f0 91 39 02 	lds	r31, 0x0239
    16a8:	30 97       	sbiw	r30, 0x00	; 0
    16aa:	39 f0       	breq	.+14     	; 0x16ba <__vector_3+0xb4>
    16ac:	80 91 a0 01 	lds	r24, 0x01A0
    16b0:	90 91 a1 01 	lds	r25, 0x01A1
    16b4:	62 e0       	ldi	r22, 0x02	; 2
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	09 95       	icall
    16ba:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_2>:
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	60 91 9a 01 	lds	r22, 0x019A
    1706:	70 91 9b 01 	lds	r23, 0x019B
    170a:	20 91 84 00 	lds	r18, 0x0084
    170e:	30 91 85 00 	lds	r19, 0x0085
    1712:	cb 01       	movw	r24, r22
    1714:	aa 27       	eor	r26, r26
    1716:	97 fd       	sbrc	r25, 7
    1718:	a0 95       	com	r26
    171a:	ba 2f       	mov	r27, r26
    171c:	dc 01       	movw	r26, r24
    171e:	99 27       	eor	r25, r25
    1720:	88 27       	eor	r24, r24
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	82 2b       	or	r24, r18
    1728:	93 2b       	or	r25, r19
    172a:	a4 2b       	or	r26, r20
    172c:	b5 2b       	or	r27, r21
    172e:	80 93 96 01 	sts	0x0196, r24
    1732:	90 93 97 01 	sts	0x0197, r25
    1736:	a0 93 98 01 	sts	0x0198, r26
    173a:	b0 93 99 01 	sts	0x0199, r27
    173e:	b0 9b       	sbis	0x16, 0	; 22
    1740:	1c c0       	rjmp	.+56     	; 0x177a <__vector_2+0x9a>
    1742:	20 91 84 00 	lds	r18, 0x0084
    1746:	30 91 85 00 	lds	r19, 0x0085
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	cb 01       	movw	r24, r22
    1750:	aa 27       	eor	r26, r26
    1752:	97 fd       	sbrc	r25, 7
    1754:	a0 95       	com	r26
    1756:	ba 2f       	mov	r27, r26
    1758:	dc 01       	movw	r26, r24
    175a:	99 27       	eor	r25, r25
    175c:	88 27       	eor	r24, r24
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	82 2b       	or	r24, r18
    1764:	93 2b       	or	r25, r19
    1766:	a4 2b       	or	r26, r20
    1768:	b5 2b       	or	r27, r21
    176a:	80 93 96 01 	sts	0x0196, r24
    176e:	90 93 97 01 	sts	0x0197, r25
    1772:	a0 93 98 01 	sts	0x0198, r26
    1776:	b0 93 99 01 	sts	0x0199, r27
    177a:	e0 91 36 02 	lds	r30, 0x0236
    177e:	f0 91 37 02 	lds	r31, 0x0237
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	39 f0       	breq	.+14     	; 0x1794 <__vector_2+0xb4>
    1786:	80 91 9e 01 	lds	r24, 0x019E
    178a:	90 91 9f 01 	lds	r25, 0x019F
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	09 95       	icall
    1794:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	4f 93       	push	r20
    17ca:	5f 93       	push	r21
    17cc:	6f 93       	push	r22
    17ce:	7f 93       	push	r23
    17d0:	8f 93       	push	r24
    17d2:	9f 93       	push	r25
    17d4:	af 93       	push	r26
    17d6:	bf 93       	push	r27
    17d8:	ef 93       	push	r30
    17da:	ff 93       	push	r31
    17dc:	60 91 9a 01 	lds	r22, 0x019A
    17e0:	70 91 9b 01 	lds	r23, 0x019B
    17e4:	20 91 84 00 	lds	r18, 0x0084
    17e8:	30 91 85 00 	lds	r19, 0x0085
    17ec:	cb 01       	movw	r24, r22
    17ee:	aa 27       	eor	r26, r26
    17f0:	97 fd       	sbrc	r25, 7
    17f2:	a0 95       	com	r26
    17f4:	ba 2f       	mov	r27, r26
    17f6:	dc 01       	movw	r26, r24
    17f8:	99 27       	eor	r25, r25
    17fa:	88 27       	eor	r24, r24
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	82 2b       	or	r24, r18
    1802:	93 2b       	or	r25, r19
    1804:	a4 2b       	or	r26, r20
    1806:	b5 2b       	or	r27, r21
    1808:	80 93 96 01 	sts	0x0196, r24
    180c:	90 93 97 01 	sts	0x0197, r25
    1810:	a0 93 98 01 	sts	0x0198, r26
    1814:	b0 93 99 01 	sts	0x0199, r27
    1818:	b0 9b       	sbis	0x16, 0	; 22
    181a:	1c c0       	rjmp	.+56     	; 0x1854 <__vector_1+0x9a>
    181c:	20 91 84 00 	lds	r18, 0x0084
    1820:	30 91 85 00 	lds	r19, 0x0085
    1824:	6f 5f       	subi	r22, 0xFF	; 255
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	cb 01       	movw	r24, r22
    182a:	aa 27       	eor	r26, r26
    182c:	97 fd       	sbrc	r25, 7
    182e:	a0 95       	com	r26
    1830:	ba 2f       	mov	r27, r26
    1832:	dc 01       	movw	r26, r24
    1834:	99 27       	eor	r25, r25
    1836:	88 27       	eor	r24, r24
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	82 2b       	or	r24, r18
    183e:	93 2b       	or	r25, r19
    1840:	a4 2b       	or	r26, r20
    1842:	b5 2b       	or	r27, r21
    1844:	80 93 96 01 	sts	0x0196, r24
    1848:	90 93 97 01 	sts	0x0197, r25
    184c:	a0 93 98 01 	sts	0x0198, r26
    1850:	b0 93 99 01 	sts	0x0199, r27
    1854:	e0 91 34 02 	lds	r30, 0x0234
    1858:	f0 91 35 02 	lds	r31, 0x0235
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	39 f0       	breq	.+14     	; 0x186e <__vector_1+0xb4>
    1860:	80 91 9c 01 	lds	r24, 0x019C
    1864:	90 91 9d 01 	lds	r25, 0x019D
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	09 95       	icall
    186e:	0e 94 a6 03 	call	0x74c	; 0x74c <schedule>
    1872:	ff 91       	pop	r31
    1874:	ef 91       	pop	r30
    1876:	bf 91       	pop	r27
    1878:	af 91       	pop	r26
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	7f 91       	pop	r23
    1880:	6f 91       	pop	r22
    1882:	5f 91       	pop	r21
    1884:	4f 91       	pop	r20
    1886:	3f 91       	pop	r19
    1888:	2f 91       	pop	r18
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	0f 90       	pop	r0
    1890:	1f 90       	pop	r1
    1892:	18 95       	reti

00001894 <sync>:
    
    ENABLE(status);
    return m;
}

int sync(Object *to, Method meth, int arg) {
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	ec 01       	movw	r28, r24
    18a4:	6b 01       	movw	r12, r22
    18a6:	8a 01       	movw	r16, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    18a8:	ff b6       	in	r15, 0x3f	; 63
    18aa:	80 e8       	ldi	r24, 0x80	; 128
    18ac:	f8 22       	and	r15, r24
    18ae:	f8 94       	cli
    t = to->ownedBy;
    18b0:	88 81       	ld	r24, Y
    18b2:	99 81       	ldd	r25, Y+1	; 0x01
    if (t) {                            // to is already locked
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	19 f4       	brne	.+6      	; 0x18be <sync+0x2a>
    18b8:	33 c0       	rjmp	.+102    	; 0x1920 <sync+0x8c>
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    18be:	dc 01       	movw	r26, r24
    18c0:	14 96       	adiw	r26, 0x04	; 4
    18c2:	ed 91       	ld	r30, X+
    18c4:	fc 91       	ld	r31, X
    18c6:	15 97       	sbiw	r26, 0x05	; 5
    18c8:	30 97       	sbiw	r30, 0x00	; 0
    18ca:	b9 f7       	brne	.-18     	; 0x18ba <sync+0x26>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    18cc:	a0 91 77 01 	lds	r26, 0x0177
    18d0:	b0 91 78 01 	lds	r27, 0x0178
    18d4:	8a 17       	cp	r24, r26
    18d6:	9b 07       	cpc	r25, r27
    18d8:	21 f0       	breq	.+8      	; 0x18e2 <sync+0x4e>
    18da:	ff 20       	and	r15, r15
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <sync+0x4c>
    18de:	46 c0       	rjmp	.+140    	; 0x196c <sync+0xd8>
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <sync+0x58>
            ENABLE(status);
    18e2:	ff 20       	and	r15, r15
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <sync+0x54>
    18e6:	42 c0       	rjmp	.+132    	; 0x196c <sync+0xd8>
    18e8:	78 94       	sei
    18ea:	40 c0       	rjmp	.+128    	; 0x196c <sync+0xd8>
            return -1;
        }
        if (to->wantedBy)               // must be a lower priority thread
    18ec:	ea 81       	ldd	r30, Y+2	; 0x02
    18ee:	fb 81       	ldd	r31, Y+3	; 0x03
    18f0:	30 97       	sbiw	r30, 0x00	; 0
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <sync+0x64>
            to->wantedBy->waitsFor = NULL;
    18f4:	15 82       	std	Z+5, r1	; 0x05
    18f6:	14 82       	std	Z+4, r1	; 0x04
        to->wantedBy = current;
    18f8:	bb 83       	std	Y+3, r27	; 0x03
    18fa:	aa 83       	std	Y+2, r26	; 0x02
        current->waitsFor = to;
    18fc:	15 96       	adiw	r26, 0x05	; 5
    18fe:	dc 93       	st	X, r29
    1900:	ce 93       	st	-X, r28
    1902:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    1904:	0e 94 86 03 	call	0x70c	; 0x70c <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    1908:	e0 91 77 01 	lds	r30, 0x0177
    190c:	f0 91 78 01 	lds	r31, 0x0178
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	89 2b       	or	r24, r25
    1916:	21 f4       	brne	.+8      	; 0x1920 <sync+0x8c>
            ENABLE(status);
    1918:	78 94       	sei
    191a:	00 e0       	ldi	r16, 0x00	; 0
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	28 c0       	rjmp	.+80     	; 0x1970 <sync+0xdc>
            return 0;
        }
    }
    to->ownedBy = current;
    1920:	80 91 77 01 	lds	r24, 0x0177
    1924:	90 91 78 01 	lds	r25, 0x0178
    1928:	99 83       	std	Y+1, r25	; 0x01
    192a:	88 83       	st	Y, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    192c:	ff 20       	and	r15, r15
    192e:	29 f0       	breq	.+10     	; 0x193a <sync+0xa6>
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	09 f0       	breq	.+2      	; 0x193a <sync+0xa6>
    1938:	78 94       	sei
    result = meth(to, arg);
    193a:	ce 01       	movw	r24, r28
    193c:	b8 01       	movw	r22, r16
    193e:	f6 01       	movw	r30, r12
    1940:	09 95       	icall
    1942:	8c 01       	movw	r16, r24
    DISABLE(status_ignore);
    1944:	8f b7       	in	r24, 0x3f	; 63
    1946:	f8 94       	cli
    to->ownedBy = NULL; 
    1948:	19 82       	std	Y+1, r1	; 0x01
    194a:	18 82       	st	Y, r1
    t = to->wantedBy;
    194c:	ea 81       	ldd	r30, Y+2	; 0x02
    194e:	fb 81       	ldd	r31, Y+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    1950:	e2 30       	cpi	r30, 0x02	; 2
    1952:	f1 05       	cpc	r31, r1
    1954:	38 f0       	brcs	.+14     	; 0x1964 <sync+0xd0>
        to->wantedBy = NULL; 
    1956:	1b 82       	std	Y+3, r1	; 0x03
    1958:	1a 82       	std	Y+2, r1	; 0x02
        t->waitsFor = NULL;
    195a:	15 82       	std	Z+5, r1	; 0x05
    195c:	14 82       	std	Z+4, r1	; 0x04
        dispatch(t);
    195e:	cf 01       	movw	r24, r30
    1960:	0e 94 86 03 	call	0x70c	; 0x70c <dispatch>
    }
    ENABLE(status);
    1964:	ff 20       	and	r15, r15
    1966:	21 f0       	breq	.+8      	; 0x1970 <sync+0xdc>
    1968:	78 94       	sei
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <sync+0xdc>
    196c:	0f ef       	ldi	r16, 0xFF	; 255
    196e:	1f ef       	ldi	r17, 0xFF	; 255
    return result;
}
    1970:	c8 01       	movw	r24, r16
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	08 95       	ret

00001982 <run>:
        current = next;
        longjmp( next->context, 1 );
    }
}

static void run(void) {
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    198e:	e0 90 77 01 	lds	r14, 0x0177
    1992:	f0 90 78 01 	lds	r15, 0x0178
    1996:	82 e9       	ldi	r24, 0x92	; 146
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	0e 94 23 01 	call	0x246	; 0x246 <dequeue>
    199e:	8c 01       	movw	r16, r24
    19a0:	f7 01       	movw	r30, r14
    19a2:	93 83       	std	Z+3, r25	; 0x03
    19a4:	82 83       	std	Z+2, r24	; 0x02
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    19a6:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    19a8:	fc 01       	movw	r30, r24
    19aa:	64 85       	ldd	r22, Z+12	; 0x0c
    19ac:	75 85       	ldd	r23, Z+13	; 0x0d
    19ae:	46 85       	ldd	r20, Z+14	; 0x0e
    19b0:	57 85       	ldd	r21, Z+15	; 0x0f
    19b2:	82 85       	ldd	r24, Z+10	; 0x0a
    19b4:	93 85       	ldd	r25, Z+11	; 0x0b
    19b6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <sync>
        DISABLE(status);
    19ba:	8f b7       	in	r24, 0x3f	; 63
    19bc:	f8 94       	cli
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
    19be:	80 91 71 01 	lds	r24, 0x0171
    19c2:	90 91 72 01 	lds	r25, 0x0172
    19c6:	f8 01       	movw	r30, r16
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    *queue = m;
    19cc:	10 93 72 01 	sts	0x0172, r17
    19d0:	00 93 71 01 	sts	0x0171, r16
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
    19d4:	60 91 75 01 	lds	r22, 0x0175
    19d8:	70 91 76 01 	lds	r23, 0x0176
    19dc:	fb 01       	movw	r30, r22
    19de:	c0 81       	ld	r28, Z
    19e0:	d1 81       	ldd	r29, Z+1	; 0x01
    19e2:	2a 81       	ldd	r18, Y+2	; 0x02
    19e4:	3b 81       	ldd	r19, Y+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    19e6:	e0 91 92 01 	lds	r30, 0x0192
    19ea:	f0 91 93 01 	lds	r31, 0x0193
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	b1 f0       	breq	.+44     	; 0x1a1e <run+0x9c>
    19f2:	21 15       	cp	r18, r1
    19f4:	31 05       	cpc	r19, r1
    19f6:	59 f2       	breq	.-106    	; 0x198e <run+0xc>
    19f8:	86 81       	ldd	r24, Z+6	; 0x06
    19fa:	97 81       	ldd	r25, Z+7	; 0x07
    19fc:	a0 85       	ldd	r26, Z+8	; 0x08
    19fe:	b1 85       	ldd	r27, Z+9	; 0x09
    1a00:	f9 01       	movw	r30, r18
    1a02:	26 81       	ldd	r18, Z+6	; 0x06
    1a04:	37 81       	ldd	r19, Z+7	; 0x07
    1a06:	40 85       	ldd	r20, Z+8	; 0x08
    1a08:	51 85       	ldd	r21, Z+9	; 0x09
    1a0a:	82 1b       	sub	r24, r18
    1a0c:	93 0b       	sbc	r25, r19
    1a0e:	a4 0b       	sbc	r26, r20
    1a10:	b5 0b       	sbc	r27, r21
    1a12:	18 16       	cp	r1, r24
    1a14:	19 06       	cpc	r1, r25
    1a16:	1a 06       	cpc	r1, r26
    1a18:	1b 06       	cpc	r1, r27
    1a1a:	0c f0       	brlt	.+2      	; 0x1a1e <run+0x9c>
    1a1c:	b8 cf       	rjmp	.-144    	; 0x198e <run+0xc>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1a1e:	d0 93 76 01 	sts	0x0176, r29
    1a22:	c0 93 75 01 	sts	0x0175, r28
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1a26:	80 91 73 01 	lds	r24, 0x0173
    1a2a:	90 91 74 01 	lds	r25, 0x0174
    1a2e:	fb 01       	movw	r30, r22
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
    *stack = t;
    1a34:	70 93 74 01 	sts	0x0174, r23
    1a38:	60 93 73 01 	sts	0x0173, r22
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <run+0xc0>
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
	            t = t->waitsFor->ownedBy;
    1a3e:	c0 81       	ld	r28, Z
    1a40:	d1 81       	ldd	r29, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    1a42:	ec 81       	ldd	r30, Y+4	; 0x04
    1a44:	fd 81       	ldd	r31, Y+5	; 0x05
    1a46:	30 97       	sbiw	r30, 0x00	; 0
    1a48:	d1 f7       	brne	.-12     	; 0x1a3e <run+0xbc>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	0e 94 86 03 	call	0x70c	; 0x70c <dispatch>
    1a50:	9e cf       	rjmp	.-196    	; 0x198e <run+0xc>

00001a52 <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    1a52:	2f 92       	push	r2
    1a54:	3f 92       	push	r3
    1a56:	4f 92       	push	r4
    1a58:	5f 92       	push	r5
    1a5a:	6f 92       	push	r6
    1a5c:	7f 92       	push	r7
    1a5e:	8f 92       	push	r8
    1a60:	9f 92       	push	r9
    1a62:	af 92       	push	r10
    1a64:	bf 92       	push	r11
    1a66:	cf 92       	push	r12
    1a68:	df 92       	push	r13
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	1b 01       	movw	r2, r22
    1a7e:	2c 01       	movw	r4, r24
    1a80:	49 01       	movw	r8, r18
    1a82:	5a 01       	movw	r10, r20
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1a84:	8f b7       	in	r24, 0x3f	; 63
    1a86:	80 78       	andi	r24, 0x80	; 128
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	f8 94       	cli
    m = dequeue(&msgPool);
    1a8c:	81 e7       	ldi	r24, 0x71	; 113
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 23 01 	call	0x246	; 0x246 <dequeue>
    1a94:	3c 01       	movw	r6, r24
    m->to = to; 
    1a96:	dc 01       	movw	r26, r24
    1a98:	1b 96       	adiw	r26, 0x0b	; 11
    1a9a:	1c 93       	st	X, r17
    1a9c:	0e 93       	st	-X, r16
    1a9e:	1a 97       	sbiw	r26, 0x0a	; 10
    m->method = meth; 
    1aa0:	1d 96       	adiw	r26, 0x0d	; 13
    1aa2:	fc 92       	st	X, r15
    1aa4:	ee 92       	st	-X, r14
    1aa6:	1c 97       	sbiw	r26, 0x0c	; 12
    m->arg = arg;
    1aa8:	1f 96       	adiw	r26, 0x0f	; 15
    1aaa:	dc 92       	st	X, r13
    1aac:	ce 92       	st	-X, r12
    1aae:	1e 97       	sbiw	r26, 0x0e	; 14
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1ab0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ab2:	bb 23       	and	r27, r27
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <async+0x7c>
    1ab6:	e0 91 77 01 	lds	r30, 0x0177
    1aba:	f0 91 78 01 	lds	r31, 0x0178
    1abe:	02 80       	ldd	r0, Z+2	; 0x02
    1ac0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ac2:	e0 2d       	mov	r30, r0
    1ac4:	62 81       	ldd	r22, Z+2	; 0x02
    1ac6:	73 81       	ldd	r23, Z+3	; 0x03
    1ac8:	84 81       	ldd	r24, Z+4	; 0x04
    1aca:	95 81       	ldd	r25, Z+5	; 0x05
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <async+0x8c>
    1ace:	60 91 96 01 	lds	r22, 0x0196
    1ad2:	70 91 97 01 	lds	r23, 0x0197
    1ad6:	80 91 98 01 	lds	r24, 0x0198
    1ada:	90 91 99 01 	lds	r25, 0x0199
    1ade:	62 0d       	add	r22, r2
    1ae0:	73 1d       	adc	r23, r3
    1ae2:	84 1d       	adc	r24, r4
    1ae4:	95 1d       	adc	r25, r5
    1ae6:	f3 01       	movw	r30, r6
    1ae8:	62 83       	std	Z+2, r22	; 0x02
    1aea:	73 83       	std	Z+3, r23	; 0x03
    1aec:	84 83       	std	Z+4, r24	; 0x04
    1aee:	95 83       	std	Z+5, r25	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    1af0:	18 14       	cp	r1, r8
    1af2:	19 04       	cpc	r1, r9
    1af4:	1a 04       	cpc	r1, r10
    1af6:	1b 04       	cpc	r1, r11
    1af8:	44 f0       	brlt	.+16     	; 0x1b0a <async+0xb8>
    1afa:	0f ef       	ldi	r16, 0xFF	; 255
    1afc:	80 2e       	mov	r8, r16
    1afe:	0f ef       	ldi	r16, 0xFF	; 255
    1b00:	90 2e       	mov	r9, r16
    1b02:	0f ef       	ldi	r16, 0xFF	; 255
    1b04:	a0 2e       	mov	r10, r16
    1b06:	0f e7       	ldi	r16, 0x7F	; 127
    1b08:	b0 2e       	mov	r11, r16
    1b0a:	68 0d       	add	r22, r8
    1b0c:	79 1d       	adc	r23, r9
    1b0e:	8a 1d       	adc	r24, r10
    1b10:	9b 1d       	adc	r25, r11
    1b12:	d3 01       	movw	r26, r6
    1b14:	16 96       	adiw	r26, 0x06	; 6
    1b16:	6d 93       	st	X+, r22
    1b18:	7d 93       	st	X+, r23
    1b1a:	8d 93       	st	X+, r24
    1b1c:	9c 93       	st	X, r25
    1b1e:	19 97       	sbiw	r26, 0x09	; 9
    
    TIMERGET(now);
    1b20:	40 91 9a 01 	lds	r20, 0x019A
    1b24:	50 91 9b 01 	lds	r21, 0x019B
    1b28:	20 91 84 00 	lds	r18, 0x0084
    1b2c:	30 91 85 00 	lds	r19, 0x0085
    1b30:	b0 99       	sbic	0x16, 0	; 22
    1b32:	10 c0       	rjmp	.+32     	; 0x1b54 <async+0x102>
    1b34:	ca 01       	movw	r24, r20
    1b36:	aa 27       	eor	r26, r26
    1b38:	97 fd       	sbrc	r25, 7
    1b3a:	a0 95       	com	r26
    1b3c:	ba 2f       	mov	r27, r26
    1b3e:	8c 01       	movw	r16, r24
    1b40:	ff 24       	eor	r15, r15
    1b42:	ee 24       	eor	r14, r14
    1b44:	c9 01       	movw	r24, r18
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e8 2a       	or	r14, r24
    1b4c:	f9 2a       	or	r15, r25
    1b4e:	0a 2b       	or	r16, r26
    1b50:	1b 2b       	or	r17, r27
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <async+0x12a>
    1b54:	20 91 84 00 	lds	r18, 0x0084
    1b58:	30 91 85 00 	lds	r19, 0x0085
    1b5c:	4f 5f       	subi	r20, 0xFF	; 255
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	ca 01       	movw	r24, r20
    1b62:	aa 27       	eor	r26, r26
    1b64:	97 fd       	sbrc	r25, 7
    1b66:	a0 95       	com	r26
    1b68:	ba 2f       	mov	r27, r26
    1b6a:	8c 01       	movw	r16, r24
    1b6c:	ff 24       	eor	r15, r15
    1b6e:	ee 24       	eor	r14, r14
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	e2 2a       	or	r14, r18
    1b76:	f3 2a       	or	r15, r19
    1b78:	04 2b       	or	r16, r20
    1b7a:	15 2b       	or	r17, r21
    if (m->baseline - now > 0) {        // baseline has not yet passed
    1b7c:	f3 01       	movw	r30, r6
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	a4 81       	ldd	r26, Z+4	; 0x04
    1b84:	b5 81       	ldd	r27, Z+5	; 0x05
    1b86:	8e 19       	sub	r24, r14
    1b88:	9f 09       	sbc	r25, r15
    1b8a:	a0 0b       	sbc	r26, r16
    1b8c:	b1 0b       	sbc	r27, r17
    1b8e:	18 16       	cp	r1, r24
    1b90:	19 06       	cpc	r1, r25
    1b92:	1a 06       	cpc	r1, r26
    1b94:	1b 06       	cpc	r1, r27
    1b96:	ec f5       	brge	.+122    	; 0x1c12 <async+0x1c0>
        enqueueByBaseline(m, &timerQ);
    1b98:	c3 01       	movw	r24, r6
    1b9a:	64 e9       	ldi	r22, 0x94	; 148
    1b9c:	71 e0       	ldi	r23, 0x01	; 1
    1b9e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <enqueueByBaseline>
        TIMERSET(timerQ);
    1ba2:	e0 91 94 01 	lds	r30, 0x0194
    1ba6:	f0 91 95 01 	lds	r31, 0x0195
    1baa:	30 97       	sbiw	r30, 0x00	; 0
    1bac:	49 f1       	breq	.+82     	; 0x1c00 <async+0x1ae>
    1bae:	42 81       	ldd	r20, Z+2	; 0x02
    1bb0:	53 81       	ldd	r21, Z+3	; 0x03
    1bb2:	64 81       	ldd	r22, Z+4	; 0x04
    1bb4:	75 81       	ldd	r23, Z+5	; 0x05
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	bb 27       	eor	r27, r27
    1bba:	97 fd       	sbrc	r25, 7
    1bbc:	b0 95       	com	r27
    1bbe:	ab 2f       	mov	r26, r27
    1bc0:	20 91 9a 01 	lds	r18, 0x019A
    1bc4:	30 91 9b 01 	lds	r19, 0x019B
    1bc8:	28 17       	cp	r18, r24
    1bca:	39 07       	cpc	r19, r25
    1bcc:	c9 f4       	brne	.+50     	; 0x1c00 <async+0x1ae>
    1bce:	9a 01       	movw	r18, r20
    1bd0:	80 91 84 00 	lds	r24, 0x0084
    1bd4:	90 91 85 00 	lds	r25, 0x0085
    1bd8:	80 95       	com	r24
    1bda:	90 95       	com	r25
    1bdc:	84 0f       	add	r24, r20
    1bde:	95 1f       	adc	r25, r21
    1be0:	89 2b       	or	r24, r25
    1be2:	31 f4       	brne	.+12     	; 0x1bf0 <async+0x19e>
    1be4:	20 91 84 00 	lds	r18, 0x0084
    1be8:	30 91 85 00 	lds	r19, 0x0085
    1bec:	2f 5f       	subi	r18, 0xFF	; 255
    1bee:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf0:	30 93 89 00 	sts	0x0089, r19
    1bf4:	20 93 88 00 	sts	0x0088, r18
    1bf8:	80 91 6f 00 	lds	r24, 0x006F
    1bfc:	82 60       	ori	r24, 0x02	; 2
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <async+0x1b4>
    1c00:	80 91 6f 00 	lds	r24, 0x006F
    1c04:	8d 7f       	andi	r24, 0xFD	; 253
    1c06:	80 93 6f 00 	sts	0x006F, r24
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
        }
    }
    
    ENABLE(status);
    1c0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c0c:	bb 23       	and	r27, r27
    1c0e:	e9 f5       	brne	.+122    	; 0x1c8a <async+0x238>
    1c10:	3d c0       	rjmp	.+122    	; 0x1c8c <async+0x23a>
    TIMERGET(now);
    if (m->baseline - now > 0) {        // baseline has not yet passed
        enqueueByBaseline(m, &timerQ);
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
    1c12:	c3 01       	movw	r24, r6
    1c14:	62 e9       	ldi	r22, 0x92	; 146
    1c16:	71 e0       	ldi	r23, 0x01	; 1
    1c18:	0e 94 af 00 	call	0x15e	; 0x15e <enqueueByDeadline>
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    1c1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c1e:	ff 23       	and	r31, r31
    1c20:	a9 f1       	breq	.+106    	; 0x1c8c <async+0x23a>
    1c22:	00 91 73 01 	lds	r16, 0x0173
    1c26:	10 91 74 01 	lds	r17, 0x0174
    1c2a:	01 15       	cp	r16, r1
    1c2c:	11 05       	cpc	r17, r1
    1c2e:	69 f1       	breq	.+90     	; 0x1c8a <async+0x238>
    1c30:	60 91 75 01 	lds	r22, 0x0175
    1c34:	70 91 76 01 	lds	r23, 0x0176
    1c38:	e0 91 92 01 	lds	r30, 0x0192
    1c3c:	f0 91 93 01 	lds	r31, 0x0193
    1c40:	db 01       	movw	r26, r22
    1c42:	12 96       	adiw	r26, 0x02	; 2
    1c44:	2d 91       	ld	r18, X+
    1c46:	3c 91       	ld	r19, X
    1c48:	13 97       	sbiw	r26, 0x03	; 3
    1c4a:	86 81       	ldd	r24, Z+6	; 0x06
    1c4c:	97 81       	ldd	r25, Z+7	; 0x07
    1c4e:	a0 85       	ldd	r26, Z+8	; 0x08
    1c50:	b1 85       	ldd	r27, Z+9	; 0x09
    1c52:	f9 01       	movw	r30, r18
    1c54:	26 81       	ldd	r18, Z+6	; 0x06
    1c56:	37 81       	ldd	r19, Z+7	; 0x07
    1c58:	40 85       	ldd	r20, Z+8	; 0x08
    1c5a:	51 85       	ldd	r21, Z+9	; 0x09
    1c5c:	82 1b       	sub	r24, r18
    1c5e:	93 0b       	sbc	r25, r19
    1c60:	a4 0b       	sbc	r26, r20
    1c62:	b5 0b       	sbc	r27, r21
    1c64:	b7 ff       	sbrs	r27, 7
    1c66:	11 c0       	rjmp	.+34     	; 0x1c8a <async+0x238>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1c68:	d8 01       	movw	r26, r16
    1c6a:	8d 91       	ld	r24, X+
    1c6c:	9c 91       	ld	r25, X
    1c6e:	11 97       	sbiw	r26, 0x01	; 1
    1c70:	90 93 74 01 	sts	0x0174, r25
    1c74:	80 93 73 01 	sts	0x0173, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1c78:	6d 93       	st	X+, r22
    1c7a:	7c 93       	st	X, r23
    *stack = t;
    1c7c:	10 93 76 01 	sts	0x0176, r17
    1c80:	00 93 75 01 	sts	0x0175, r16
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
    1c84:	c8 01       	movw	r24, r16
    1c86:	0e 94 86 03 	call	0x70c	; 0x70c <dispatch>
        }
    }
    
    ENABLE(status);
    1c8a:	78 94       	sei
    return m;
}
    1c8c:	c3 01       	movw	r24, r6
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	9f 90       	pop	r9
    1ca6:	8f 90       	pop	r8
    1ca8:	7f 90       	pop	r7
    1caa:	6f 90       	pop	r6
    1cac:	5f 90       	pop	r5
    1cae:	4f 90       	pop	r4
    1cb0:	3f 90       	pop	r3
    1cb2:	2f 90       	pop	r2
    1cb4:	08 95       	ret

00001cb6 <writeDigit>:
#define clrscr {LCDDR0&=0x66;LCDDR1&=0x66;LCDDR2&=0x66;LCDDR5=0x00;LCDDR6=0x00;LCDDR7=0x00;LCDDR10=0x00;LCDDR11=0x00;LCDDR12=0x00;LCDDR15=0x00;LCDDR16=0x00;LCDDR17=0x00;}

static int seg[]={0x1551,0x8110,0x11e1,0x11b1,0x05b0,0x14b1,0x14f1,0x1110,0x15f1,0x15b1};

int  writeDigit(LCD *self, int digitPos)
{
    1cb6:	fb 01       	movw	r30, r22
	switch(digitPos%10)
    1cb8:	cb 01       	movw	r24, r22
    1cba:	6a e0       	ldi	r22, 0x0A	; 10
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    1cc2:	82 30       	cpi	r24, 0x02	; 2
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <writeDigit+0x14>
    1cc8:	82 c0       	rjmp	.+260    	; 0x1dce <writeDigit+0x118>
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	34 f4       	brge	.+12     	; 0x1cdc <writeDigit+0x26>
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <writeDigit+0x3e>
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <writeDigit+0x24>
    1cd8:	53 c1       	rjmp	.+678    	; 0x1f80 <writeDigit+0x2ca>
    1cda:	41 c0       	rjmp	.+130    	; 0x1d5e <writeDigit+0xa8>
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <writeDigit+0x2e>
    1ce2:	e2 c0       	rjmp	.+452    	; 0x1ea8 <writeDigit+0x1f2>
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	0c f4       	brge	.+2      	; 0x1cec <writeDigit+0x36>
    1cea:	a6 c0       	rjmp	.+332    	; 0x1e38 <writeDigit+0x182>
    1cec:	05 97       	sbiw	r24, 0x05	; 5
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <writeDigit+0x3c>
    1cf0:	47 c1       	rjmp	.+654    	; 0x1f80 <writeDigit+0x2ca>
    1cf2:	0f c1       	rjmp	.+542    	; 0x1f12 <writeDigit+0x25c>
	{
		case 0:
		{
			LCDDR0 = (LCDDR0 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1cf4:	40 91 ec 00 	lds	r20, 0x00EC
    1cf8:	cf 01       	movw	r24, r30
    1cfa:	6a e0       	ldi	r22, 0x0A	; 10
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    1d02:	fb 01       	movw	r30, r22
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	e7 58       	subi	r30, 0x87	; 135
    1d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d0c:	20 81       	ld	r18, Z
    1d0e:	31 81       	ldd	r19, Z+1	; 0x01
    1d10:	83 2f       	mov	r24, r19
    1d12:	82 95       	swap	r24
    1d14:	8f 70       	andi	r24, 0x0F	; 15
    1d16:	40 7f       	andi	r20, 0xF0	; 240
    1d18:	48 2b       	or	r20, r24
    1d1a:	40 93 ec 00 	sts	0x00EC, r20
			LCDDR5 = (LCDDR5 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1d1e:	40 91 f1 00 	lds	r20, 0x00F1
    1d22:	83 2f       	mov	r24, r19
    1d24:	99 27       	eor	r25, r25
    1d26:	87 fd       	sbrc	r24, 7
    1d28:	9a 95       	dec	r25
    1d2a:	8f 70       	andi	r24, 0x0F	; 15
    1d2c:	40 7f       	andi	r20, 0xF0	; 240
    1d2e:	84 2b       	or	r24, r20
    1d30:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1d34:	40 91 f6 00 	lds	r20, 0x00F6
    1d38:	c9 01       	movw	r24, r18
    1d3a:	e4 e0       	ldi	r30, 0x04	; 4
    1d3c:	95 95       	asr	r25
    1d3e:	87 95       	ror	r24
    1d40:	ea 95       	dec	r30
    1d42:	e1 f7       	brne	.-8      	; 0x1d3c <writeDigit+0x86>
    1d44:	8f 70       	andi	r24, 0x0F	; 15
    1d46:	40 7f       	andi	r20, 0xF0	; 240
    1d48:	84 2b       	or	r24, r20
    1d4a:	80 93 f6 00 	sts	0x00F6, r24
			LCDDR15 = (LCDDR15 & 0xf0) | (seg[digitPos/10]&0x000f);
    1d4e:	80 91 fb 00 	lds	r24, 0x00FB
    1d52:	2f 70       	andi	r18, 0x0F	; 15
    1d54:	80 7f       	andi	r24, 0xF0	; 240
    1d56:	28 2b       	or	r18, r24
    1d58:	20 93 fb 00 	sts	0x00FB, r18
    1d5c:	08 95       	ret
			break;
		}
		case 1:
		{
			LCDDR0 = (LCDDR0 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1d5e:	20 91 ec 00 	lds	r18, 0x00EC
    1d62:	cf 01       	movw	r24, r30
    1d64:	6a e0       	ldi	r22, 0x0A	; 10
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    1d6c:	fb 01       	movw	r30, r22
    1d6e:	ee 0f       	add	r30, r30
    1d70:	ff 1f       	adc	r31, r31
    1d72:	e7 58       	subi	r30, 0x87	; 135
    1d74:	fe 4f       	sbci	r31, 0xFE	; 254
    1d76:	40 81       	ld	r20, Z
    1d78:	51 81       	ldd	r21, Z+1	; 0x01
    1d7a:	85 2f       	mov	r24, r21
    1d7c:	99 27       	eor	r25, r25
    1d7e:	87 fd       	sbrc	r24, 7
    1d80:	9a 95       	dec	r25
    1d82:	80 7f       	andi	r24, 0xF0	; 240
    1d84:	2f 70       	andi	r18, 0x0F	; 15
    1d86:	82 2b       	or	r24, r18
    1d88:	80 93 ec 00 	sts	0x00EC, r24
			LCDDR5 = (LCDDR5 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1d8c:	20 91 f1 00 	lds	r18, 0x00F1
    1d90:	ca 01       	movw	r24, r20
    1d92:	34 e0       	ldi	r19, 0x04	; 4
    1d94:	95 95       	asr	r25
    1d96:	87 95       	ror	r24
    1d98:	3a 95       	dec	r19
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <writeDigit+0xde>
    1d9c:	80 7f       	andi	r24, 0xF0	; 240
    1d9e:	2f 70       	andi	r18, 0x0F	; 15
    1da0:	82 2b       	or	r24, r18
    1da2:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1da6:	80 91 f6 00 	lds	r24, 0x00F6
    1daa:	94 2f       	mov	r25, r20
    1dac:	90 7f       	andi	r25, 0xF0	; 240
    1dae:	8f 70       	andi	r24, 0x0F	; 15
    1db0:	98 2b       	or	r25, r24
    1db2:	90 93 f6 00 	sts	0x00F6, r25
			LCDDR15 = (LCDDR15 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1db6:	80 91 fb 00 	lds	r24, 0x00FB
    1dba:	b4 e0       	ldi	r27, 0x04	; 4
    1dbc:	44 0f       	add	r20, r20
    1dbe:	55 1f       	adc	r21, r21
    1dc0:	ba 95       	dec	r27
    1dc2:	e1 f7       	brne	.-8      	; 0x1dbc <writeDigit+0x106>
    1dc4:	8f 70       	andi	r24, 0x0F	; 15
    1dc6:	84 2b       	or	r24, r20
    1dc8:	80 93 fb 00 	sts	0x00FB, r24
    1dcc:	08 95       	ret
			break;
		}
		case 2:
		{
			LCDDR1 = (LCDDR1 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1dce:	40 91 ed 00 	lds	r20, 0x00ED
    1dd2:	cf 01       	movw	r24, r30
    1dd4:	6a e0       	ldi	r22, 0x0A	; 10
    1dd6:	70 e0       	ldi	r23, 0x00	; 0
    1dd8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    1ddc:	fb 01       	movw	r30, r22
    1dde:	ee 0f       	add	r30, r30
    1de0:	ff 1f       	adc	r31, r31
    1de2:	e7 58       	subi	r30, 0x87	; 135
    1de4:	fe 4f       	sbci	r31, 0xFE	; 254
    1de6:	20 81       	ld	r18, Z
    1de8:	31 81       	ldd	r19, Z+1	; 0x01
    1dea:	83 2f       	mov	r24, r19
    1dec:	82 95       	swap	r24
    1dee:	8f 70       	andi	r24, 0x0F	; 15
    1df0:	40 7f       	andi	r20, 0xF0	; 240
    1df2:	48 2b       	or	r20, r24
    1df4:	40 93 ed 00 	sts	0x00ED, r20
			LCDDR6 = (LCDDR6 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1df8:	40 91 f2 00 	lds	r20, 0x00F2
    1dfc:	83 2f       	mov	r24, r19
    1dfe:	99 27       	eor	r25, r25
    1e00:	87 fd       	sbrc	r24, 7
    1e02:	9a 95       	dec	r25
    1e04:	8f 70       	andi	r24, 0x0F	; 15
    1e06:	40 7f       	andi	r20, 0xF0	; 240
    1e08:	84 2b       	or	r24, r20
    1e0a:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1e0e:	40 91 f7 00 	lds	r20, 0x00F7
    1e12:	c9 01       	movw	r24, r18
    1e14:	e4 e0       	ldi	r30, 0x04	; 4
    1e16:	95 95       	asr	r25
    1e18:	87 95       	ror	r24
    1e1a:	ea 95       	dec	r30
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <writeDigit+0x160>
    1e1e:	8f 70       	andi	r24, 0x0F	; 15
    1e20:	40 7f       	andi	r20, 0xF0	; 240
    1e22:	84 2b       	or	r24, r20
    1e24:	80 93 f7 00 	sts	0x00F7, r24
			LCDDR16 = (LCDDR16 & 0xf0) | (seg[digitPos/10]&0x000f);
    1e28:	80 91 fc 00 	lds	r24, 0x00FC
    1e2c:	2f 70       	andi	r18, 0x0F	; 15
    1e2e:	80 7f       	andi	r24, 0xF0	; 240
    1e30:	28 2b       	or	r18, r24
    1e32:	20 93 fc 00 	sts	0x00FC, r18
    1e36:	08 95       	ret
			break;
		}
		case 3:
		{
			LCDDR1 = (LCDDR1 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1e38:	20 91 ed 00 	lds	r18, 0x00ED
    1e3c:	cf 01       	movw	r24, r30
    1e3e:	6a e0       	ldi	r22, 0x0A	; 10
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    1e46:	fb 01       	movw	r30, r22
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	e7 58       	subi	r30, 0x87	; 135
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e50:	40 81       	ld	r20, Z
    1e52:	51 81       	ldd	r21, Z+1	; 0x01
    1e54:	85 2f       	mov	r24, r21
    1e56:	99 27       	eor	r25, r25
    1e58:	87 fd       	sbrc	r24, 7
    1e5a:	9a 95       	dec	r25
    1e5c:	80 7f       	andi	r24, 0xF0	; 240
    1e5e:	2f 70       	andi	r18, 0x0F	; 15
    1e60:	82 2b       	or	r24, r18
    1e62:	80 93 ed 00 	sts	0x00ED, r24
			LCDDR6 = (LCDDR6 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1e66:	20 91 f2 00 	lds	r18, 0x00F2
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	34 e0       	ldi	r19, 0x04	; 4
    1e6e:	95 95       	asr	r25
    1e70:	87 95       	ror	r24
    1e72:	3a 95       	dec	r19
    1e74:	e1 f7       	brne	.-8      	; 0x1e6e <writeDigit+0x1b8>
    1e76:	80 7f       	andi	r24, 0xF0	; 240
    1e78:	2f 70       	andi	r18, 0x0F	; 15
    1e7a:	82 2b       	or	r24, r18
    1e7c:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1e80:	80 91 f7 00 	lds	r24, 0x00F7
    1e84:	94 2f       	mov	r25, r20
    1e86:	90 7f       	andi	r25, 0xF0	; 240
    1e88:	8f 70       	andi	r24, 0x0F	; 15
    1e8a:	98 2b       	or	r25, r24
    1e8c:	90 93 f7 00 	sts	0x00F7, r25
			LCDDR16 = (LCDDR16 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1e90:	80 91 fc 00 	lds	r24, 0x00FC
    1e94:	b4 e0       	ldi	r27, 0x04	; 4
    1e96:	44 0f       	add	r20, r20
    1e98:	55 1f       	adc	r21, r21
    1e9a:	ba 95       	dec	r27
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <writeDigit+0x1e0>
    1e9e:	8f 70       	andi	r24, 0x0F	; 15
    1ea0:	84 2b       	or	r24, r20
    1ea2:	80 93 fc 00 	sts	0x00FC, r24
    1ea6:	08 95       	ret
			break;
		}
		case 4:
		{
			LCDDR2 = (LCDDR2 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1ea8:	40 91 ee 00 	lds	r20, 0x00EE
    1eac:	cf 01       	movw	r24, r30
    1eae:	6a e0       	ldi	r22, 0x0A	; 10
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    1eb6:	fb 01       	movw	r30, r22
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	e7 58       	subi	r30, 0x87	; 135
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	83 2f       	mov	r24, r19
    1ec6:	82 95       	swap	r24
    1ec8:	8f 70       	andi	r24, 0x0F	; 15
    1eca:	40 7f       	andi	r20, 0xF0	; 240
    1ecc:	48 2b       	or	r20, r24
    1ece:	40 93 ee 00 	sts	0x00EE, r20
			LCDDR7 = (LCDDR7 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1ed2:	40 91 f3 00 	lds	r20, 0x00F3
    1ed6:	83 2f       	mov	r24, r19
    1ed8:	99 27       	eor	r25, r25
    1eda:	87 fd       	sbrc	r24, 7
    1edc:	9a 95       	dec	r25
    1ede:	8f 70       	andi	r24, 0x0F	; 15
    1ee0:	40 7f       	andi	r20, 0xF0	; 240
    1ee2:	84 2b       	or	r24, r20
    1ee4:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1ee8:	40 91 f8 00 	lds	r20, 0x00F8
    1eec:	c9 01       	movw	r24, r18
    1eee:	e4 e0       	ldi	r30, 0x04	; 4
    1ef0:	95 95       	asr	r25
    1ef2:	87 95       	ror	r24
    1ef4:	ea 95       	dec	r30
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <writeDigit+0x23a>
    1ef8:	8f 70       	andi	r24, 0x0F	; 15
    1efa:	40 7f       	andi	r20, 0xF0	; 240
    1efc:	84 2b       	or	r24, r20
    1efe:	80 93 f8 00 	sts	0x00F8, r24
			LCDDR17 = (LCDDR17 & 0xf0) | (seg[digitPos/10]&0x000f);
    1f02:	80 91 fd 00 	lds	r24, 0x00FD
    1f06:	2f 70       	andi	r18, 0x0F	; 15
    1f08:	80 7f       	andi	r24, 0xF0	; 240
    1f0a:	28 2b       	or	r18, r24
    1f0c:	20 93 fd 00 	sts	0x00FD, r18
    1f10:	08 95       	ret
			break;
		}
		case 5:
		{
			LCDDR2 = (LCDDR2 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1f12:	20 91 ee 00 	lds	r18, 0x00EE
    1f16:	cf 01       	movw	r24, r30
    1f18:	6a e0       	ldi	r22, 0x0A	; 10
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    1f20:	fb 01       	movw	r30, r22
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	e7 58       	subi	r30, 0x87	; 135
    1f28:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2a:	40 81       	ld	r20, Z
    1f2c:	51 81       	ldd	r21, Z+1	; 0x01
    1f2e:	85 2f       	mov	r24, r21
    1f30:	99 27       	eor	r25, r25
    1f32:	87 fd       	sbrc	r24, 7
    1f34:	9a 95       	dec	r25
    1f36:	80 7f       	andi	r24, 0xF0	; 240
    1f38:	2f 70       	andi	r18, 0x0F	; 15
    1f3a:	82 2b       	or	r24, r18
    1f3c:	80 93 ee 00 	sts	0x00EE, r24
			LCDDR7 = (LCDDR7 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1f40:	20 91 f3 00 	lds	r18, 0x00F3
    1f44:	ca 01       	movw	r24, r20
    1f46:	34 e0       	ldi	r19, 0x04	; 4
    1f48:	95 95       	asr	r25
    1f4a:	87 95       	ror	r24
    1f4c:	3a 95       	dec	r19
    1f4e:	e1 f7       	brne	.-8      	; 0x1f48 <writeDigit+0x292>
    1f50:	80 7f       	andi	r24, 0xF0	; 240
    1f52:	2f 70       	andi	r18, 0x0F	; 15
    1f54:	82 2b       	or	r24, r18
    1f56:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1f5a:	80 91 f8 00 	lds	r24, 0x00F8
    1f5e:	94 2f       	mov	r25, r20
    1f60:	90 7f       	andi	r25, 0xF0	; 240
    1f62:	8f 70       	andi	r24, 0x0F	; 15
    1f64:	98 2b       	or	r25, r24
    1f66:	90 93 f8 00 	sts	0x00F8, r25
			LCDDR17 = (LCDDR17 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1f6a:	80 91 fd 00 	lds	r24, 0x00FD
    1f6e:	94 e0       	ldi	r25, 0x04	; 4
    1f70:	44 0f       	add	r20, r20
    1f72:	55 1f       	adc	r21, r21
    1f74:	9a 95       	dec	r25
    1f76:	e1 f7       	brne	.-8      	; 0x1f70 <writeDigit+0x2ba>
    1f78:	8f 70       	andi	r24, 0x0F	; 15
    1f7a:	84 2b       	or	r24, r20
    1f7c:	80 93 fd 00 	sts	0x00FD, r24
			break;
		}
		default:;
	}
}
    1f80:	08 95       	ret

00001f82 <writeInt>:


int  writeInt(LCD *self, int val)
{
    1f82:	6f 92       	push	r6
    1f84:	7f 92       	push	r7
    1f86:	9f 92       	push	r9
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <writeInt+0x1c>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <writeInt+0x1e>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <writeInt+0x20>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	16 2f       	mov	r17, r22
    1fa8:	47 2f       	mov	r20, r23
	unsigned char a[6],j=5,n=1,k;
	int temp=val;
	
	clrscr;
    1faa:	80 91 ec 00 	lds	r24, 0x00EC
    1fae:	86 76       	andi	r24, 0x66	; 102
    1fb0:	80 93 ec 00 	sts	0x00EC, r24
    1fb4:	80 91 ed 00 	lds	r24, 0x00ED
    1fb8:	86 76       	andi	r24, 0x66	; 102
    1fba:	80 93 ed 00 	sts	0x00ED, r24
    1fbe:	80 91 ee 00 	lds	r24, 0x00EE
    1fc2:	86 76       	andi	r24, 0x66	; 102
    1fc4:	80 93 ee 00 	sts	0x00EE, r24
    1fc8:	10 92 f1 00 	sts	0x00F1, r1
    1fcc:	10 92 f2 00 	sts	0x00F2, r1
    1fd0:	10 92 f3 00 	sts	0x00F3, r1
    1fd4:	10 92 f6 00 	sts	0x00F6, r1
    1fd8:	10 92 f7 00 	sts	0x00F7, r1
    1fdc:	10 92 f8 00 	sts	0x00F8, r1
    1fe0:	10 92 fb 00 	sts	0x00FB, r1
    1fe4:	10 92 fc 00 	sts	0x00FC, r1
    1fe8:	10 92 fd 00 	sts	0x00FD, r1
    1fec:	26 2f       	mov	r18, r22
    1fee:	37 2f       	mov	r19, r23
    1ff0:	c9 01       	movw	r24, r18
    1ff2:	99 24       	eor	r9, r9
    1ff4:	93 94       	inc	r9
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <writeInt+0x78>
	
	while(temp/=10) n++;
    1ff8:	93 94       	inc	r9
    1ffa:	6a e0       	ldi	r22, 0x0A	; 10
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    2002:	cb 01       	movw	r24, r22
    2004:	61 15       	cp	r22, r1
    2006:	71 05       	cpc	r23, r1
    2008:	b9 f7       	brne	.-18     	; 0x1ff8 <writeInt+0x76>
	if(n>6) n=6;
    200a:	86 e0       	ldi	r24, 0x06	; 6
    200c:	89 15       	cp	r24, r9
    200e:	10 f4       	brcc	.+4      	; 0x2014 <writeInt+0x92>
    2010:	66 e0       	ldi	r22, 0x06	; 6
    2012:	96 2e       	mov	r9, r22
    2014:	39 2d       	mov	r19, r9
    2016:	25 e0       	ldi	r18, 0x05	; 5
	k=n;
	while(k--)
	{
		a[j]=val%10;
    2018:	7e 01       	movw	r14, r28
    201a:	08 94       	sec
    201c:	e1 1c       	adc	r14, r1
    201e:	f1 1c       	adc	r15, r1
    2020:	14 c0       	rjmp	.+40     	; 0x204a <writeInt+0xc8>
    2022:	f7 01       	movw	r30, r14
    2024:	e2 0f       	add	r30, r18
    2026:	f1 1d       	adc	r31, r1
    2028:	81 2f       	mov	r24, r17
    202a:	94 2f       	mov	r25, r20
    202c:	6a e0       	ldi	r22, 0x0A	; 10
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    2034:	80 83       	st	Z, r24
		val/=10;
    2036:	81 2f       	mov	r24, r17
    2038:	94 2f       	mov	r25, r20
    203a:	6a e0       	ldi	r22, 0x0A	; 10
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    2042:	16 2f       	mov	r17, r22
    2044:	47 2f       	mov	r20, r23
		j--;
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	31 50       	subi	r19, 0x01	; 1
	clrscr;
	
	while(temp/=10) n++;
	if(n>6) n=6;
	k=n;
	while(k--)
    204a:	33 23       	and	r19, r19
    204c:	51 f7       	brne	.-44     	; 0x2022 <writeInt+0xa0>
		//ASYNC(self,writeDigit,a[j]*10+n);
		switch(j)
		{
			case 0:
			{
				LCDDR0 = (LCDDR0 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	a8 2e       	mov	r10, r24
    2052:	bb 24       	eor	r11, r11
				LCDDR15 = (LCDDR15 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 1:
			{
				LCDDR0 = (LCDDR0 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	c8 2e       	mov	r12, r24
    2058:	dd 24       	eor	r13, r13
				LCDDR15 = (LCDDR15 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 2:
			{
				LCDDR1 = (LCDDR1 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	e8 2e       	mov	r14, r24
    205e:	ff 24       	eor	r15, r15
				LCDDR16 = (LCDDR16 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 3:
			{
				LCDDR1 = (LCDDR1 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	08 2f       	mov	r16, r24
    2064:	10 e0       	ldi	r17, 0x00	; 0
				LCDDR16 = (LCDDR16 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 4:
			{
				LCDDR2 = (LCDDR2 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	a8 2f       	mov	r26, r24
    206a:	b0 e0       	ldi	r27, 0x00	; 0
				LCDDR17 = (LCDDR17 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 5:
			{
				LCDDR2 = (LCDDR2 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    206c:	8e 81       	ldd	r24, Y+6	; 0x06
    206e:	68 2e       	mov	r6, r24
    2070:	77 24       	eor	r7, r7
    2072:	65 e0       	ldi	r22, 0x05	; 5
				LCDDR15 = (LCDDR15 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 2:
			{
				LCDDR1 = (LCDDR1 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2074:	ee 0c       	add	r14, r14
    2076:	ff 1c       	adc	r15, r15
    2078:	e9 e7       	ldi	r30, 0x79	; 121
    207a:	f1 e0       	ldi	r31, 0x01	; 1
    207c:	ee 0e       	add	r14, r30
    207e:	ff 1e       	adc	r15, r31
				LCDDR16 = (LCDDR16 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 4:
			{
				LCDDR2 = (LCDDR2 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2080:	aa 0f       	add	r26, r26
    2082:	bb 1f       	adc	r27, r27
    2084:	ae 0f       	add	r26, r30
    2086:	bf 1f       	adc	r27, r31
				LCDDR16 = (LCDDR16 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 3:
			{
				LCDDR1 = (LCDDR1 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2088:	00 0f       	add	r16, r16
    208a:	11 1f       	adc	r17, r17
    208c:	0e 0f       	add	r16, r30
    208e:	1f 1f       	adc	r17, r31
				LCDDR17 = (LCDDR17 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 5:
			{
				LCDDR2 = (LCDDR2 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2090:	66 0c       	add	r6, r6
    2092:	77 1c       	adc	r7, r7
    2094:	6e 0e       	add	r6, r30
    2096:	7f 1e       	adc	r7, r31
		//ASYNC(self,writeDigit,a[j]*10+n);
		switch(j)
		{
			case 0:
			{
				LCDDR0 = (LCDDR0 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2098:	aa 0c       	add	r10, r10
    209a:	bb 1c       	adc	r11, r11
    209c:	ae 0e       	add	r10, r30
    209e:	bf 1e       	adc	r11, r31
				LCDDR15 = (LCDDR15 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 1:
			{
				LCDDR0 = (LCDDR0 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    20a0:	cc 0c       	add	r12, r12
    20a2:	dd 1c       	adc	r13, r13
    20a4:	ce 0e       	add	r12, r30
    20a6:	df 1e       	adc	r13, r31
    20a8:	27 c1       	rjmp	.+590    	; 0x22f8 <writeInt+0x376>
	}
	j=5;
	while(n--)
	{
		//ASYNC(self,writeDigit,a[j]*10+n);
		switch(j)
    20aa:	62 30       	cpi	r22, 0x02	; 2
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <writeInt+0x12e>
    20ae:	6d c0       	rjmp	.+218    	; 0x218a <writeInt+0x208>
    20b0:	63 30       	cpi	r22, 0x03	; 3
    20b2:	30 f4       	brcc	.+12     	; 0x20c0 <writeInt+0x13e>
    20b4:	66 23       	and	r22, r22
    20b6:	71 f0       	breq	.+28     	; 0x20d4 <writeInt+0x152>
    20b8:	61 30       	cpi	r22, 0x01	; 1
    20ba:	09 f0       	breq	.+2      	; 0x20be <writeInt+0x13c>
    20bc:	1b c1       	rjmp	.+566    	; 0x22f4 <writeInt+0x372>
    20be:	36 c0       	rjmp	.+108    	; 0x212c <writeInt+0x1aa>
    20c0:	64 30       	cpi	r22, 0x04	; 4
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <writeInt+0x144>
    20c4:	bd c0       	rjmp	.+378    	; 0x2240 <writeInt+0x2be>
    20c6:	64 30       	cpi	r22, 0x04	; 4
    20c8:	08 f4       	brcc	.+2      	; 0x20cc <writeInt+0x14a>
    20ca:	8b c0       	rjmp	.+278    	; 0x21e2 <writeInt+0x260>
    20cc:	65 30       	cpi	r22, 0x05	; 5
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <writeInt+0x150>
    20d0:	11 c1       	rjmp	.+546    	; 0x22f4 <writeInt+0x372>
    20d2:	e2 c0       	rjmp	.+452    	; 0x2298 <writeInt+0x316>
		{
			case 0:
			{
				LCDDR0 = (LCDDR0 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    20d4:	80 91 ec 00 	lds	r24, 0x00EC
    20d8:	f5 01       	movw	r30, r10
    20da:	20 81       	ld	r18, Z
    20dc:	31 81       	ldd	r19, Z+1	; 0x01
    20de:	93 2f       	mov	r25, r19
    20e0:	92 95       	swap	r25
    20e2:	9f 70       	andi	r25, 0x0F	; 15
    20e4:	80 7f       	andi	r24, 0xF0	; 240
    20e6:	89 2b       	or	r24, r25
    20e8:	80 93 ec 00 	sts	0x00EC, r24
				LCDDR5 = (LCDDR5 & 0xf0) | ((seg[a[j]]>>8)&0x000f);
    20ec:	40 91 f1 00 	lds	r20, 0x00F1
    20f0:	83 2f       	mov	r24, r19
    20f2:	99 27       	eor	r25, r25
    20f4:	87 fd       	sbrc	r24, 7
    20f6:	9a 95       	dec	r25
    20f8:	8f 70       	andi	r24, 0x0F	; 15
    20fa:	40 7f       	andi	r20, 0xF0	; 240
    20fc:	84 2b       	or	r24, r20
    20fe:	80 93 f1 00 	sts	0x00F1, r24
				LCDDR10 = (LCDDR10 & 0xf0) | ((seg[a[j]]>>4)&0x000f);
    2102:	40 91 f6 00 	lds	r20, 0x00F6
    2106:	c9 01       	movw	r24, r18
    2108:	e4 e0       	ldi	r30, 0x04	; 4
    210a:	95 95       	asr	r25
    210c:	87 95       	ror	r24
    210e:	ea 95       	dec	r30
    2110:	e1 f7       	brne	.-8      	; 0x210a <writeInt+0x188>
    2112:	8f 70       	andi	r24, 0x0F	; 15
    2114:	40 7f       	andi	r20, 0xF0	; 240
    2116:	84 2b       	or	r24, r20
    2118:	80 93 f6 00 	sts	0x00F6, r24
				LCDDR15 = (LCDDR15 & 0xf0) | (seg[a[j]]&0x000f);
    211c:	80 91 fb 00 	lds	r24, 0x00FB
    2120:	2f 70       	andi	r18, 0x0F	; 15
    2122:	80 7f       	andi	r24, 0xF0	; 240
    2124:	28 2b       	or	r18, r24
    2126:	20 93 fb 00 	sts	0x00FB, r18
    212a:	e4 c0       	rjmp	.+456    	; 0x22f4 <writeInt+0x372>
				break;
			}
			case 1:
			{
				LCDDR0 = (LCDDR0 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    212c:	20 91 ec 00 	lds	r18, 0x00EC
    2130:	f6 01       	movw	r30, r12
    2132:	40 81       	ld	r20, Z
    2134:	51 81       	ldd	r21, Z+1	; 0x01
    2136:	85 2f       	mov	r24, r21
    2138:	99 27       	eor	r25, r25
    213a:	87 fd       	sbrc	r24, 7
    213c:	9a 95       	dec	r25
    213e:	80 7f       	andi	r24, 0xF0	; 240
    2140:	2f 70       	andi	r18, 0x0F	; 15
    2142:	82 2b       	or	r24, r18
    2144:	80 93 ec 00 	sts	0x00EC, r24
				LCDDR5 = (LCDDR5 & 0x0f) | ((seg[a[j]]>>4)&0x00f0);
    2148:	20 91 f1 00 	lds	r18, 0x00F1
    214c:	ca 01       	movw	r24, r20
    214e:	34 e0       	ldi	r19, 0x04	; 4
    2150:	95 95       	asr	r25
    2152:	87 95       	ror	r24
    2154:	3a 95       	dec	r19
    2156:	e1 f7       	brne	.-8      	; 0x2150 <writeInt+0x1ce>
    2158:	80 7f       	andi	r24, 0xF0	; 240
    215a:	2f 70       	andi	r18, 0x0F	; 15
    215c:	82 2b       	or	r24, r18
    215e:	80 93 f1 00 	sts	0x00F1, r24
				LCDDR10 = (LCDDR10 & 0x0f) | ((seg[a[j]])&0x00f0);
    2162:	80 91 f6 00 	lds	r24, 0x00F6
    2166:	94 2f       	mov	r25, r20
    2168:	90 7f       	andi	r25, 0xF0	; 240
    216a:	8f 70       	andi	r24, 0x0F	; 15
    216c:	98 2b       	or	r25, r24
    216e:	90 93 f6 00 	sts	0x00F6, r25
				LCDDR15 = (LCDDR15 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
    2172:	80 91 fb 00 	lds	r24, 0x00FB
    2176:	94 e0       	ldi	r25, 0x04	; 4
    2178:	44 0f       	add	r20, r20
    217a:	55 1f       	adc	r21, r21
    217c:	9a 95       	dec	r25
    217e:	e1 f7       	brne	.-8      	; 0x2178 <writeInt+0x1f6>
    2180:	8f 70       	andi	r24, 0x0F	; 15
    2182:	84 2b       	or	r24, r20
    2184:	80 93 fb 00 	sts	0x00FB, r24
    2188:	b5 c0       	rjmp	.+362    	; 0x22f4 <writeInt+0x372>
				break;
			}
			case 2:
			{
				LCDDR1 = (LCDDR1 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    218a:	80 91 ed 00 	lds	r24, 0x00ED
    218e:	f7 01       	movw	r30, r14
    2190:	20 81       	ld	r18, Z
    2192:	31 81       	ldd	r19, Z+1	; 0x01
    2194:	93 2f       	mov	r25, r19
    2196:	92 95       	swap	r25
    2198:	9f 70       	andi	r25, 0x0F	; 15
    219a:	80 7f       	andi	r24, 0xF0	; 240
    219c:	89 2b       	or	r24, r25
    219e:	80 93 ed 00 	sts	0x00ED, r24
				LCDDR6 = (LCDDR6 & 0xf0) | ((seg[a[j]]>>8)&0x000f);
    21a2:	40 91 f2 00 	lds	r20, 0x00F2
    21a6:	83 2f       	mov	r24, r19
    21a8:	99 27       	eor	r25, r25
    21aa:	87 fd       	sbrc	r24, 7
    21ac:	9a 95       	dec	r25
    21ae:	8f 70       	andi	r24, 0x0F	; 15
    21b0:	40 7f       	andi	r20, 0xF0	; 240
    21b2:	84 2b       	or	r24, r20
    21b4:	80 93 f2 00 	sts	0x00F2, r24
				LCDDR11 = (LCDDR11 & 0xf0) | ((seg[a[j]]>>4)&0x000f);
    21b8:	40 91 f7 00 	lds	r20, 0x00F7
    21bc:	c9 01       	movw	r24, r18
    21be:	e4 e0       	ldi	r30, 0x04	; 4
    21c0:	95 95       	asr	r25
    21c2:	87 95       	ror	r24
    21c4:	ea 95       	dec	r30
    21c6:	e1 f7       	brne	.-8      	; 0x21c0 <writeInt+0x23e>
    21c8:	8f 70       	andi	r24, 0x0F	; 15
    21ca:	40 7f       	andi	r20, 0xF0	; 240
    21cc:	84 2b       	or	r24, r20
    21ce:	80 93 f7 00 	sts	0x00F7, r24
				LCDDR16 = (LCDDR16 & 0xf0) | (seg[a[j]]&0x000f);
    21d2:	80 91 fc 00 	lds	r24, 0x00FC
    21d6:	2f 70       	andi	r18, 0x0F	; 15
    21d8:	80 7f       	andi	r24, 0xF0	; 240
    21da:	28 2b       	or	r18, r24
    21dc:	20 93 fc 00 	sts	0x00FC, r18
    21e0:	89 c0       	rjmp	.+274    	; 0x22f4 <writeInt+0x372>
				break;
			}
			case 3:
			{
				LCDDR1 = (LCDDR1 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    21e2:	20 91 ed 00 	lds	r18, 0x00ED
    21e6:	f8 01       	movw	r30, r16
    21e8:	40 81       	ld	r20, Z
    21ea:	51 81       	ldd	r21, Z+1	; 0x01
    21ec:	85 2f       	mov	r24, r21
    21ee:	99 27       	eor	r25, r25
    21f0:	87 fd       	sbrc	r24, 7
    21f2:	9a 95       	dec	r25
    21f4:	80 7f       	andi	r24, 0xF0	; 240
    21f6:	2f 70       	andi	r18, 0x0F	; 15
    21f8:	82 2b       	or	r24, r18
    21fa:	80 93 ed 00 	sts	0x00ED, r24
				LCDDR6 = (LCDDR6 & 0x0f) | ((seg[a[j]]>>4)&0x00f0);
    21fe:	20 91 f2 00 	lds	r18, 0x00F2
    2202:	ca 01       	movw	r24, r20
    2204:	34 e0       	ldi	r19, 0x04	; 4
    2206:	95 95       	asr	r25
    2208:	87 95       	ror	r24
    220a:	3a 95       	dec	r19
    220c:	e1 f7       	brne	.-8      	; 0x2206 <writeInt+0x284>
    220e:	80 7f       	andi	r24, 0xF0	; 240
    2210:	2f 70       	andi	r18, 0x0F	; 15
    2212:	82 2b       	or	r24, r18
    2214:	80 93 f2 00 	sts	0x00F2, r24
				LCDDR11 = (LCDDR11 & 0x0f) | ((seg[a[j]])&0x00f0);
    2218:	80 91 f7 00 	lds	r24, 0x00F7
    221c:	94 2f       	mov	r25, r20
    221e:	90 7f       	andi	r25, 0xF0	; 240
    2220:	8f 70       	andi	r24, 0x0F	; 15
    2222:	98 2b       	or	r25, r24
    2224:	90 93 f7 00 	sts	0x00F7, r25
				LCDDR16 = (LCDDR16 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
    2228:	80 91 fc 00 	lds	r24, 0x00FC
    222c:	94 e0       	ldi	r25, 0x04	; 4
    222e:	44 0f       	add	r20, r20
    2230:	55 1f       	adc	r21, r21
    2232:	9a 95       	dec	r25
    2234:	e1 f7       	brne	.-8      	; 0x222e <writeInt+0x2ac>
    2236:	8f 70       	andi	r24, 0x0F	; 15
    2238:	84 2b       	or	r24, r20
    223a:	80 93 fc 00 	sts	0x00FC, r24
    223e:	5a c0       	rjmp	.+180    	; 0x22f4 <writeInt+0x372>
				break;
			}
			case 4:
			{
				LCDDR2 = (LCDDR2 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2240:	80 91 ee 00 	lds	r24, 0x00EE
    2244:	2d 91       	ld	r18, X+
    2246:	3c 91       	ld	r19, X
    2248:	11 97       	sbiw	r26, 0x01	; 1
    224a:	93 2f       	mov	r25, r19
    224c:	92 95       	swap	r25
    224e:	9f 70       	andi	r25, 0x0F	; 15
    2250:	80 7f       	andi	r24, 0xF0	; 240
    2252:	89 2b       	or	r24, r25
    2254:	80 93 ee 00 	sts	0x00EE, r24
				LCDDR7 = (LCDDR7 & 0xf0) | ((seg[a[j]]>>8)&0x000f);
    2258:	40 91 f3 00 	lds	r20, 0x00F3
    225c:	83 2f       	mov	r24, r19
    225e:	99 27       	eor	r25, r25
    2260:	87 fd       	sbrc	r24, 7
    2262:	9a 95       	dec	r25
    2264:	8f 70       	andi	r24, 0x0F	; 15
    2266:	40 7f       	andi	r20, 0xF0	; 240
    2268:	84 2b       	or	r24, r20
    226a:	80 93 f3 00 	sts	0x00F3, r24
				LCDDR12 = (LCDDR12 & 0xf0) | ((seg[a[j]]>>4)&0x000f);
    226e:	40 91 f8 00 	lds	r20, 0x00F8
    2272:	c9 01       	movw	r24, r18
    2274:	e4 e0       	ldi	r30, 0x04	; 4
    2276:	95 95       	asr	r25
    2278:	87 95       	ror	r24
    227a:	ea 95       	dec	r30
    227c:	e1 f7       	brne	.-8      	; 0x2276 <writeInt+0x2f4>
    227e:	8f 70       	andi	r24, 0x0F	; 15
    2280:	40 7f       	andi	r20, 0xF0	; 240
    2282:	84 2b       	or	r24, r20
    2284:	80 93 f8 00 	sts	0x00F8, r24
				LCDDR17 = (LCDDR17 & 0xf0) | (seg[a[j]]&0x000f);
    2288:	80 91 fd 00 	lds	r24, 0x00FD
    228c:	2f 70       	andi	r18, 0x0F	; 15
    228e:	80 7f       	andi	r24, 0xF0	; 240
    2290:	28 2b       	or	r18, r24
    2292:	20 93 fd 00 	sts	0x00FD, r18
    2296:	2e c0       	rjmp	.+92     	; 0x22f4 <writeInt+0x372>
				break;
			}
			case 5:
			{
				LCDDR2 = (LCDDR2 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2298:	20 91 ee 00 	lds	r18, 0x00EE
    229c:	f3 01       	movw	r30, r6
    229e:	40 81       	ld	r20, Z
    22a0:	51 81       	ldd	r21, Z+1	; 0x01
    22a2:	85 2f       	mov	r24, r21
    22a4:	99 27       	eor	r25, r25
    22a6:	87 fd       	sbrc	r24, 7
    22a8:	9a 95       	dec	r25
    22aa:	80 7f       	andi	r24, 0xF0	; 240
    22ac:	2f 70       	andi	r18, 0x0F	; 15
    22ae:	82 2b       	or	r24, r18
    22b0:	80 93 ee 00 	sts	0x00EE, r24
				LCDDR7 = (LCDDR7 & 0x0f) | ((seg[a[j]]>>4)&0x00f0);
    22b4:	20 91 f3 00 	lds	r18, 0x00F3
    22b8:	ca 01       	movw	r24, r20
    22ba:	34 e0       	ldi	r19, 0x04	; 4
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	3a 95       	dec	r19
    22c2:	e1 f7       	brne	.-8      	; 0x22bc <writeInt+0x33a>
    22c4:	80 7f       	andi	r24, 0xF0	; 240
    22c6:	2f 70       	andi	r18, 0x0F	; 15
    22c8:	82 2b       	or	r24, r18
    22ca:	80 93 f3 00 	sts	0x00F3, r24
				LCDDR12 = (LCDDR12 & 0x0f) | ((seg[a[j]])&0x00f0);
    22ce:	80 91 f8 00 	lds	r24, 0x00F8
    22d2:	94 2f       	mov	r25, r20
    22d4:	90 7f       	andi	r25, 0xF0	; 240
    22d6:	8f 70       	andi	r24, 0x0F	; 15
    22d8:	98 2b       	or	r25, r24
    22da:	90 93 f8 00 	sts	0x00F8, r25
				LCDDR17 = (LCDDR17 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
    22de:	80 91 fd 00 	lds	r24, 0x00FD
    22e2:	94 e0       	ldi	r25, 0x04	; 4
    22e4:	44 0f       	add	r20, r20
    22e6:	55 1f       	adc	r21, r21
    22e8:	9a 95       	dec	r25
    22ea:	e1 f7       	brne	.-8      	; 0x22e4 <writeInt+0x362>
    22ec:	8f 70       	andi	r24, 0x0F	; 15
    22ee:	84 2b       	or	r24, r20
    22f0:	80 93 fd 00 	sts	0x00FD, r24
				break;
			}
			default:;
		}
		j--;
    22f4:	61 50       	subi	r22, 0x01	; 1
    22f6:	9a 94       	dec	r9
		a[j]=val%10;
		val/=10;
		j--;
	}
	j=5;
	while(n--)
    22f8:	99 20       	and	r9, r9
    22fa:	09 f0       	breq	.+2      	; 0x22fe <writeInt+0x37c>
    22fc:	d6 ce       	rjmp	.-596    	; 0x20aa <writeInt+0x128>
			}
			default:;
		}
		j--;
	}
}
    22fe:	26 96       	adiw	r28, 0x06	; 6
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	ff 90       	pop	r15
    2314:	ef 90       	pop	r14
    2316:	df 90       	pop	r13
    2318:	cf 90       	pop	r12
    231a:	bf 90       	pop	r11
    231c:	af 90       	pop	r10
    231e:	9f 90       	pop	r9
    2320:	7f 90       	pop	r7
    2322:	6f 90       	pop	r6
    2324:	08 95       	ret

00002326 <segmentOn>:


int  segmentOn(LCD *self, int segment)
{
	switch(segment)
    2326:	65 30       	cpi	r22, 0x05	; 5
    2328:	71 05       	cpc	r23, r1
    232a:	c1 f1       	breq	.+112    	; 0x239c <segmentOn+0x76>
    232c:	66 30       	cpi	r22, 0x06	; 6
    232e:	71 05       	cpc	r23, r1
    2330:	94 f4       	brge	.+36     	; 0x2356 <segmentOn+0x30>
    2332:	62 30       	cpi	r22, 0x02	; 2
    2334:	71 05       	cpc	r23, r1
    2336:	21 f1       	breq	.+72     	; 0x2380 <segmentOn+0x5a>
    2338:	63 30       	cpi	r22, 0x03	; 3
    233a:	71 05       	cpc	r23, r1
    233c:	2c f4       	brge	.+10     	; 0x2348 <segmentOn+0x22>
    233e:	61 30       	cpi	r22, 0x01	; 1
    2340:	71 05       	cpc	r23, r1
    2342:	09 f0       	breq	.+2      	; 0x2346 <segmentOn+0x20>
    2344:	40 c0       	rjmp	.+128    	; 0x23c6 <segmentOn+0xa0>
    2346:	18 c0       	rjmp	.+48     	; 0x2378 <segmentOn+0x52>
    2348:	63 30       	cpi	r22, 0x03	; 3
    234a:	71 05       	cpc	r23, r1
    234c:	f9 f0       	breq	.+62     	; 0x238c <segmentOn+0x66>
    234e:	64 30       	cpi	r22, 0x04	; 4
    2350:	71 05       	cpc	r23, r1
    2352:	c9 f5       	brne	.+114    	; 0x23c6 <segmentOn+0xa0>
    2354:	1f c0       	rjmp	.+62     	; 0x2394 <segmentOn+0x6e>
    2356:	68 30       	cpi	r22, 0x08	; 8
    2358:	71 05       	cpc	r23, r1
    235a:	31 f1       	breq	.+76     	; 0x23a8 <segmentOn+0x82>
    235c:	69 30       	cpi	r22, 0x09	; 9
    235e:	71 05       	cpc	r23, r1
    2360:	24 f4       	brge	.+8      	; 0x236a <segmentOn+0x44>
    2362:	67 30       	cpi	r22, 0x07	; 7
    2364:	71 05       	cpc	r23, r1
    2366:	79 f5       	brne	.+94     	; 0x23c6 <segmentOn+0xa0>
    2368:	1f c0       	rjmp	.+62     	; 0x23a8 <segmentOn+0x82>
    236a:	69 30       	cpi	r22, 0x09	; 9
    236c:	71 05       	cpc	r23, r1
    236e:	01 f1       	breq	.+64     	; 0x23b0 <segmentOn+0x8a>
    2370:	6a 30       	cpi	r22, 0x0A	; 10
    2372:	71 05       	cpc	r23, r1
    2374:	41 f5       	brne	.+80     	; 0x23c6 <segmentOn+0xa0>
    2376:	22 c0       	rjmp	.+68     	; 0x23bc <segmentOn+0x96>
	{
		case 1: LCDDR0|=0x04;break;
    2378:	80 91 ec 00 	lds	r24, 0x00EC
    237c:	84 60       	ori	r24, 0x04	; 4
    237e:	03 c0       	rjmp	.+6      	; 0x2386 <segmentOn+0x60>
		case 2: LCDDR0|=0x40;break;
    2380:	80 91 ec 00 	lds	r24, 0x00EC
    2384:	80 64       	ori	r24, 0x40	; 64
    2386:	80 93 ec 00 	sts	0x00EC, r24
    238a:	08 95       	ret
		case 3: LCDDR3 =0x01;break;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	80 93 ef 00 	sts	0x00EF, r24
    2392:	08 95       	ret
		case 4: LCDDR1|=0x02;break;
    2394:	80 91 ed 00 	lds	r24, 0x00ED
    2398:	82 60       	ori	r24, 0x02	; 2
    239a:	03 c0       	rjmp	.+6      	; 0x23a2 <segmentOn+0x7c>
		case 5: LCDDR1|=0x20;break;
    239c:	80 91 ed 00 	lds	r24, 0x00ED
    23a0:	80 62       	ori	r24, 0x20	; 32
    23a2:	80 93 ed 00 	sts	0x00ED, r24
    23a6:	08 95       	ret
		case 7: LCDDR18=0x01;break;
		case 8: LCDDR18=0x01;break;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	80 93 fe 00 	sts	0x00FE, r24
    23ae:	08 95       	ret
		case 9: LCDDR2|=0x04;break;
    23b0:	80 91 ee 00 	lds	r24, 0x00EE
    23b4:	84 60       	ori	r24, 0x04	; 4
    23b6:	80 93 ee 00 	sts	0x00EE, r24
    23ba:	08 95       	ret
		case 10: LCDDR2|=0x40;break;
    23bc:	80 91 ee 00 	lds	r24, 0x00EE
    23c0:	80 64       	ori	r24, 0x40	; 64
    23c2:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    23c6:	08 95       	ret

000023c8 <segmentOff>:


int  segmentOff(LCD *self, int segment)
{
	switch(segment)
    23c8:	65 30       	cpi	r22, 0x05	; 5
    23ca:	71 05       	cpc	r23, r1
    23cc:	b1 f1       	breq	.+108    	; 0x243a <segmentOff+0x72>
    23ce:	66 30       	cpi	r22, 0x06	; 6
    23d0:	71 05       	cpc	r23, r1
    23d2:	8c f4       	brge	.+34     	; 0x23f6 <segmentOff+0x2e>
    23d4:	62 30       	cpi	r22, 0x02	; 2
    23d6:	71 05       	cpc	r23, r1
    23d8:	19 f1       	breq	.+70     	; 0x2420 <segmentOff+0x58>
    23da:	63 30       	cpi	r22, 0x03	; 3
    23dc:	71 05       	cpc	r23, r1
    23de:	24 f4       	brge	.+8      	; 0x23e8 <segmentOff+0x20>
    23e0:	61 30       	cpi	r22, 0x01	; 1
    23e2:	71 05       	cpc	r23, r1
    23e4:	f1 f5       	brne	.+124    	; 0x2462 <segmentOff+0x9a>
    23e6:	18 c0       	rjmp	.+48     	; 0x2418 <segmentOff+0x50>
    23e8:	63 30       	cpi	r22, 0x03	; 3
    23ea:	71 05       	cpc	r23, r1
    23ec:	f9 f0       	breq	.+62     	; 0x242c <segmentOff+0x64>
    23ee:	64 30       	cpi	r22, 0x04	; 4
    23f0:	71 05       	cpc	r23, r1
    23f2:	b9 f5       	brne	.+110    	; 0x2462 <segmentOff+0x9a>
    23f4:	1e c0       	rjmp	.+60     	; 0x2432 <segmentOff+0x6a>
    23f6:	68 30       	cpi	r22, 0x08	; 8
    23f8:	71 05       	cpc	r23, r1
    23fa:	29 f1       	breq	.+74     	; 0x2446 <segmentOff+0x7e>
    23fc:	69 30       	cpi	r22, 0x09	; 9
    23fe:	71 05       	cpc	r23, r1
    2400:	24 f4       	brge	.+8      	; 0x240a <segmentOff+0x42>
    2402:	67 30       	cpi	r22, 0x07	; 7
    2404:	71 05       	cpc	r23, r1
    2406:	69 f5       	brne	.+90     	; 0x2462 <segmentOff+0x9a>
    2408:	1e c0       	rjmp	.+60     	; 0x2446 <segmentOff+0x7e>
    240a:	69 30       	cpi	r22, 0x09	; 9
    240c:	71 05       	cpc	r23, r1
    240e:	f1 f0       	breq	.+60     	; 0x244c <segmentOff+0x84>
    2410:	6a 30       	cpi	r22, 0x0A	; 10
    2412:	71 05       	cpc	r23, r1
    2414:	31 f5       	brne	.+76     	; 0x2462 <segmentOff+0x9a>
    2416:	20 c0       	rjmp	.+64     	; 0x2458 <segmentOff+0x90>
	{
		case 1: LCDDR0&=~0x04;break;
    2418:	80 91 ec 00 	lds	r24, 0x00EC
    241c:	8b 7f       	andi	r24, 0xFB	; 251
    241e:	03 c0       	rjmp	.+6      	; 0x2426 <segmentOff+0x5e>
		case 2: LCDDR0&=~0x40;break;
    2420:	80 91 ec 00 	lds	r24, 0x00EC
    2424:	8f 7b       	andi	r24, 0xBF	; 191
    2426:	80 93 ec 00 	sts	0x00EC, r24
    242a:	08 95       	ret
		case 3: LCDDR3 = 0x00;break;
    242c:	10 92 ef 00 	sts	0x00EF, r1
    2430:	08 95       	ret
		case 4: LCDDR1&=~0x02;break;
    2432:	80 91 ed 00 	lds	r24, 0x00ED
    2436:	8d 7f       	andi	r24, 0xFD	; 253
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <segmentOff+0x78>
		case 5: LCDDR1&=~0x20;break;
    243a:	80 91 ed 00 	lds	r24, 0x00ED
    243e:	8f 7d       	andi	r24, 0xDF	; 223
    2440:	80 93 ed 00 	sts	0x00ED, r24
    2444:	08 95       	ret
		case 7: LCDDR18= 0x00;break;
		case 8: LCDDR18= 0x00;break;
    2446:	10 92 fe 00 	sts	0x00FE, r1
    244a:	08 95       	ret
		case 9: LCDDR2&=~0x04;break;
    244c:	80 91 ee 00 	lds	r24, 0x00EE
    2450:	8b 7f       	andi	r24, 0xFB	; 251
    2452:	80 93 ee 00 	sts	0x00EE, r24
    2456:	08 95       	ret
		case 10: LCDDR2&=~0x40;break;
    2458:	80 91 ee 00 	lds	r24, 0x00EE
    245c:	8f 7b       	andi	r24, 0xBF	; 191
    245e:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    2462:	08 95       	ret

00002464 <is_prime>:
#include "primes.h"
#include "blinker.h"
#include <math.h>

int is_prime(int i)
{
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	ec 01       	movw	r28, r24
	int n;
	int sqrt_value;
	if(i==0||i==1) return 0;
    246a:	82 30       	cpi	r24, 0x02	; 2
    246c:	91 05       	cpc	r25, r1
    246e:	20 f1       	brcs	.+72     	; 0x24b8 <is_prime+0x54>
	else if (i==2) return 1;
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	91 05       	cpc	r25, r1
    2474:	21 f1       	breq	.+72     	; 0x24be <is_prime+0x5a>
	else
	{
		sqrt_value=sqrt(i)+1;
    2476:	be 01       	movw	r22, r28
    2478:	88 27       	eor	r24, r24
    247a:	77 fd       	sbrc	r23, 7
    247c:	80 95       	com	r24
    247e:	98 2f       	mov	r25, r24
    2480:	0e 94 22 15 	call	0x2a44	; 0x2a44 <__floatsisf>
    2484:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <sqrt>
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 8b 14 	call	0x2916	; 0x2916 <__addsf3>
    2494:	0e 94 ef 14 	call	0x29de	; 0x29de <__fixsfsi>
    2498:	fb 01       	movw	r30, r22
    249a:	22 e0       	ldi	r18, 0x02	; 2
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	08 c0       	rjmp	.+16     	; 0x24b0 <is_prime+0x4c>
		for(n=2;n<sqrt_value;n++)
		{
			if(i%n==0) return 0;
    24a0:	ce 01       	movw	r24, r28
    24a2:	b9 01       	movw	r22, r18
    24a4:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    24a8:	89 2b       	or	r24, r25
    24aa:	31 f0       	breq	.+12     	; 0x24b8 <is_prime+0x54>
	if(i==0||i==1) return 0;
	else if (i==2) return 1;
	else
	{
		sqrt_value=sqrt(i)+1;
		for(n=2;n<sqrt_value;n++)
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	2e 17       	cp	r18, r30
    24b2:	3f 07       	cpc	r19, r31
    24b4:	ac f3       	brlt	.-22     	; 0x24a0 <is_prime+0x3c>
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <is_prime+0x5a>
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <is_prime+0x5e>
    24be:	21 e0       	ldi	r18, 0x01	; 1
    24c0:	30 e0       	ldi	r19, 0x00	; 0
			if(i%n==0) return 0;
		}
		return 1;
	}
	
}
    24c2:	c9 01       	movw	r24, r18
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	08 95       	ret

000024ca <primes>:


int primes(PrimeCalculator *self, int x)
{
    24ca:	cf 92       	push	r12
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	8c 01       	movw	r16, r24
    24dc:	eb 01       	movw	r28, r22
    24de:	08 c0       	rjmp	.+16     	; 0x24f0 <primes+0x26>
	//while(1)
	{
		while(!(is_prime(x)))
		{
			if(x==32767) x=0;
    24e0:	8f e7       	ldi	r24, 0x7F	; 127
    24e2:	cf 3f       	cpi	r28, 0xFF	; 255
    24e4:	d8 07       	cpc	r29, r24
    24e6:	19 f4       	brne	.+6      	; 0x24ee <primes+0x24>
    24e8:	c0 e0       	ldi	r28, 0x00	; 0
    24ea:	d0 e0       	ldi	r29, 0x00	; 0
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <primes+0x26>
			else x++;
    24ee:	21 96       	adiw	r28, 0x01	; 1

int primes(PrimeCalculator *self, int x)
{
	//while(1)
	{
		while(!(is_prime(x)))
    24f0:	ce 01       	movw	r24, r28
    24f2:	0e 94 32 12 	call	0x2464	; 0x2464 <is_prime>
    24f6:	89 2b       	or	r24, r25
    24f8:	99 f3       	breq	.-26     	; 0x24e0 <primes+0x16>
		{
			if(x==32767) x=0;
			else x++;
		}
		SYNC(self->lcd,writeInt,x);
    24fa:	f8 01       	movw	r30, r16
    24fc:	84 81       	ldd	r24, Z+4	; 0x04
    24fe:	95 81       	ldd	r25, Z+5	; 0x05
    2500:	61 ec       	ldi	r22, 0xC1	; 193
    2502:	7f e0       	ldi	r23, 0x0F	; 15
    2504:	ae 01       	movw	r20, r28
    2506:	0e 94 4a 0c 	call	0x1894	; 0x1894 <sync>
		x++;
	}
	AFTER(MSEC(100),self,primes,x++);
    250a:	21 96       	adiw	r28, 0x01	; 1
    250c:	65 e3       	ldi	r22, 0x35	; 53
    250e:	7c e0       	ldi	r23, 0x0C	; 12
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	e5 e6       	ldi	r30, 0x65	; 101
    251e:	ee 2e       	mov	r14, r30
    2520:	e2 e1       	ldi	r30, 0x12	; 18
    2522:	fe 2e       	mov	r15, r30
    2524:	6e 01       	movw	r12, r28
    2526:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	08 95       	ret

0000253c <setPeriod>:
	ASYNC(self,Blinking,0);
}


int setPeriod(Blinker *self, int period)
{
    253c:	fc 01       	movw	r30, r24
    253e:	80 85       	ldd	r24, Z+8	; 0x08
    2540:	91 85       	ldd	r25, Z+9	; 0x09
    2542:	62 e0       	ldi	r22, 0x02	; 2
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    254a:	cb 01       	movw	r24, r22
	return self->period/2;
}
    254c:	08 95       	ret

0000254e <stopBlinking>:
	ASYNC(self,Blinking,0);
}


int stopBlinking(Blinker *self, int nothing)
{
    254e:	cf 92       	push	r12
    2550:	df 92       	push	r13
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	8c 01       	movw	r16, r24
	flag_blinking=0;
    255c:	10 92 e5 04 	sts	0x04E5, r1
	ASYNC(self,Blinking,0);
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	e8 ee       	ldi	r30, 0xE8	; 232
    2572:	ee 2e       	mov	r14, r30
    2574:	e2 e1       	ldi	r30, 0x12	; 18
    2576:	fe 2e       	mov	r15, r30
    2578:	cc 24       	eor	r12, r12
    257a:	dd 24       	eor	r13, r13
    257c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
}
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	df 90       	pop	r13
    258a:	cf 90       	pop	r12
    258c:	08 95       	ret

0000258e <startBlinking>:
	}
	
}

int startBlinking(Blinker *self, int nothing)
{
    258e:	cf 92       	push	r12
    2590:	df 92       	push	r13
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	8c 01       	movw	r16, r24
	flag_blinking=1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	80 93 e5 04 	sts	0x04E5, r24
	ASYNC(self,Blinking,0);
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	f8 ee       	ldi	r31, 0xE8	; 232
    25b4:	ef 2e       	mov	r14, r31
    25b6:	f2 e1       	ldi	r31, 0x12	; 18
    25b8:	ff 2e       	mov	r15, r31
    25ba:	cc 24       	eor	r12, r12
    25bc:	dd 24       	eor	r13, r13
    25be:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
}
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	ff 90       	pop	r15
    25c8:	ef 90       	pop	r14
    25ca:	df 90       	pop	r13
    25cc:	cf 90       	pop	r12
    25ce:	08 95       	ret

000025d0 <Blinking>:
#include "blinker.h"

char flag_blinking;

int Blinking(Blinker *self, int nothing)
{
    25d0:	af 92       	push	r10
    25d2:	bf 92       	push	r11
    25d4:	cf 92       	push	r12
    25d6:	df 92       	push	r13
    25d8:	ef 92       	push	r14
    25da:	ff 92       	push	r15
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	ec 01       	movw	r28, r24
    25e6:	5b 01       	movw	r10, r22
	if (flag_blinking)
    25e8:	80 91 e5 04 	lds	r24, 0x04E5
    25ec:	88 23       	and	r24, r24
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <Blinking+0x22>
    25f0:	4a c0       	rjmp	.+148    	; 0x2686 <Blinking+0xb6>
	{
		AFTER(MSEC(setPeriod(self,0)),self,Blinking,1-nothing);
    25f2:	ce 01       	movw	r24, r28
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	0e 94 9e 12 	call	0x253c	; 0x253c <setPeriod>
    25fc:	aa 27       	eor	r26, r26
    25fe:	97 fd       	sbrc	r25, 7
    2600:	a0 95       	com	r26
    2602:	ba 2f       	mov	r27, r26
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	2d e7       	ldi	r18, 0x7D	; 125
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__mulsi3>
    2614:	24 e0       	ldi	r18, 0x04	; 4
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__divmodsi4>
    2620:	e1 e0       	ldi	r30, 0x01	; 1
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	ea 19       	sub	r30, r10
    2626:	fb 09       	sbc	r31, r11
    2628:	ca 01       	movw	r24, r20
    262a:	b9 01       	movw	r22, r18
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	8e 01       	movw	r16, r28
    2636:	a8 ee       	ldi	r26, 0xE8	; 232
    2638:	ea 2e       	mov	r14, r26
    263a:	a2 e1       	ldi	r26, 0x12	; 18
    263c:	fa 2e       	mov	r15, r26
    263e:	6f 01       	movw	r12, r30
    2640:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
    2644:	0c 81       	ldd	r16, Y+4	; 0x04
    2646:	1d 81       	ldd	r17, Y+5	; 0x05
    2648:	ce 80       	ldd	r12, Y+6	; 0x06
    264a:	df 80       	ldd	r13, Y+7	; 0x07
		if(nothing)
    264c:	ab 28       	or	r10, r11
    264e:	69 f0       	breq	.+26     	; 0x266a <Blinking+0x9a>
		{
			ASYNC(self->lcd,segmentOff,self->segment);
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	b4 ee       	ldi	r27, 0xE4	; 228
    2662:	eb 2e       	mov	r14, r27
    2664:	b1 e1       	ldi	r27, 0x11	; 17
    2666:	fb 2e       	mov	r15, r27
    2668:	0c c0       	rjmp	.+24     	; 0x2682 <Blinking+0xb2>
		}
		else
		{
			ASYNC(self->lcd,segmentOn,self->segment);
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	a3 e9       	ldi	r26, 0x93	; 147
    267c:	ea 2e       	mov	r14, r26
    267e:	a1 e1       	ldi	r26, 0x11	; 17
    2680:	fa 2e       	mov	r15, r26
    2682:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
		}
	}
	
}
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	df 90       	pop	r13
    2694:	cf 90       	pop	r12
    2696:	bf 90       	pop	r11
    2698:	af 90       	pop	r10
    269a:	08 95       	ret

0000269c <PiezoOn>:
#include "piezo.h"
#include <avr/io.h>

int  PiezoOn(Piezo *self, int nothing)
{
	PORTB&=~(1<<5);
    269c:	2d 98       	cbi	0x05, 5	; 5
}
    269e:	08 95       	ret

000026a0 <PiezoOff>:


int  PiezoOff(Piezo *self, int nothing)
{
	PORTB|=1<<5;
    26a0:	2d 9a       	sbi	0x05, 5	; 5
    26a2:	08 95       	ret

000026a4 <detect>:
#include <avr/io.h>


int detect(Joystick *self,int sig)
{
	if(PINB&(1<<7))
    26a4:	1f 9b       	sbis	0x03, 7	; 3
    26a6:	06 c0       	rjmp	.+12     	; 0x26b4 <detect+0x10>
	{
		LCDDR3=0x01;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 ef 00 	sts	0x00EF, r24
		LCDDR18=0x00;
    26ae:	10 92 fe 00 	sts	0x00FE, r1
    26b2:	08 95       	ret
	} 
	else
	{
		LCDDR3=0x00;
    26b4:	10 92 ef 00 	sts	0x00EF, r1
		LCDDR18=0x01;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	80 93 fe 00 	sts	0x00FE, r24
	}
}
    26be:	08 95       	ret

000026c0 <stop_playing>:
}


int stop_playing(Tone *self, int nothing)
{
	flag_play=0;
    26c0:	10 92 e6 04 	sts	0x04E6, r1
	//ASYNC(self,playing,0);
}
    26c4:	08 95       	ret

000026c6 <setFrequency>:


int  setFrequency(Tone *self, int frequency)
{
	self->frequency = frequency;
    26c6:	fc 01       	movw	r30, r24
    26c8:	77 83       	std	Z+7, r23	; 0x07
    26ca:	66 83       	std	Z+6, r22	; 0x06
	//ASYNC(self,playing,0);
}
    26cc:	08 95       	ret

000026ce <start_playing>:
	}
}


int start_playing(Tone *self, int nothing)
{
    26ce:	cf 92       	push	r12
    26d0:	df 92       	push	r13
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	8c 01       	movw	r16, r24
	flag_play=1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	80 93 e6 04 	sts	0x04E6, r24
	ASYNC(self,playing,0);
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	e8 e8       	ldi	r30, 0x88	; 136
    26f4:	ee 2e       	mov	r14, r30
    26f6:	e3 e1       	ldi	r30, 0x13	; 19
    26f8:	fe 2e       	mov	r15, r30
    26fa:	cc 24       	eor	r12, r12
    26fc:	dd 24       	eor	r13, r13
    26fe:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
}
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	df 90       	pop	r13
    270c:	cf 90       	pop	r12
    270e:	08 95       	ret

00002710 <playing>:
#include <avr/io.h>

char flag_play;

int  playing(Tone *self, int nothing)
{
    2710:	af 92       	push	r10
    2712:	bf 92       	push	r11
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	ec 01       	movw	r28, r24
    2726:	5b 01       	movw	r10, r22
	if(flag_play&&self->frequency)
    2728:	80 91 e6 04 	lds	r24, 0x04E6
    272c:	88 23       	and	r24, r24
    272e:	f1 f1       	breq	.+124    	; 0x27ac <playing+0x9c>
    2730:	6e 81       	ldd	r22, Y+6	; 0x06
    2732:	7f 81       	ldd	r23, Y+7	; 0x07
    2734:	61 15       	cp	r22, r1
    2736:	71 05       	cpc	r23, r1
    2738:	c9 f1       	breq	.+114    	; 0x27ac <playing+0x9c>
	{
		AFTER(RESOLUTION(15625/self->frequency),self,playing,1-nothing);
    273a:	89 e0       	ldi	r24, 0x09	; 9
    273c:	9d e3       	ldi	r25, 0x3D	; 61
    273e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__divmodhi4>
    2742:	88 27       	eor	r24, r24
    2744:	77 fd       	sbrc	r23, 7
    2746:	80 95       	com	r24
    2748:	98 2f       	mov	r25, r24
    274a:	e1 e0       	ldi	r30, 0x01	; 1
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	ea 19       	sub	r30, r10
    2750:	fb 09       	sbc	r31, r11
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	8e 01       	movw	r16, r28
    275c:	b8 e8       	ldi	r27, 0x88	; 136
    275e:	eb 2e       	mov	r14, r27
    2760:	b3 e1       	ldi	r27, 0x13	; 19
    2762:	fb 2e       	mov	r15, r27
    2764:	6f 01       	movw	r12, r30
    2766:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
    276a:	0c 81       	ldd	r16, Y+4	; 0x04
    276c:	1d 81       	ldd	r17, Y+5	; 0x05
		if(nothing) ASYNC(self->piezo,PiezoOff,0);
    276e:	ab 28       	or	r10, r11
    2770:	69 f0       	breq	.+26     	; 0x278c <playing+0x7c>
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	a0 e5       	ldi	r26, 0x50	; 80
    2784:	ea 2e       	mov	r14, r26
    2786:	a3 e1       	ldi	r26, 0x13	; 19
    2788:	fa 2e       	mov	r15, r26
    278a:	0c c0       	rjmp	.+24     	; 0x27a4 <playing+0x94>
		else ASYNC(self->piezo,PiezoOn,0);
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	fe e4       	ldi	r31, 0x4E	; 78
    279e:	ef 2e       	mov	r14, r31
    27a0:	f3 e1       	ldi	r31, 0x13	; 19
    27a2:	ff 2e       	mov	r15, r31
    27a4:	cc 24       	eor	r12, r12
    27a6:	dd 24       	eor	r13, r13
    27a8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
	}
}
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	bf 90       	pop	r11
    27be:	af 90       	pop	r10
    27c0:	08 95       	ret

000027c2 <stop_playing_melody>:


int stop_playing_melody(Melody *self, int x)
{
	
    27c2:	08 95       	ret

000027c4 <start_playing_melody>:
#include "TinyTimber.h"
#include "tone.h"
#include "melody.h"

int start_playing_melody(Melody *self, int x)
{
    27c4:	6f 92       	push	r6
    27c6:	7f 92       	push	r7
    27c8:	8f 92       	push	r8
    27ca:	9f 92       	push	r9
    27cc:	af 92       	push	r10
    27ce:	bf 92       	push	r11
    27d0:	cf 92       	push	r12
    27d2:	df 92       	push	r13
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	ec 01       	movw	r28, r24
	unsigned int i,n=0,j;
	int *p;
	p=self->array_durations;
    27e2:	e8 85       	ldd	r30, Y+8	; 0x08
    27e4:	f9 85       	ldd	r31, Y+9	; 0x09
	while(*(p++)!=0) n++;
    27e6:	81 91       	ld	r24, Z+
    27e8:	91 91       	ld	r25, Z+
    27ea:	89 2b       	or	r24, r25
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <start_playing_melody+0x22>
	n--;
	
	
	ASYNC(self->tone,start_playing,0);
    27ee:	0c 81       	ldd	r16, Y+4	; 0x04
    27f0:	1d 81       	ldd	r17, Y+5	; 0x05
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	70 e0       	ldi	r23, 0x00	; 0
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	e7 e6       	ldi	r30, 0x67	; 103
    2804:	ee 2e       	mov	r14, r30
    2806:	e3 e1       	ldi	r30, 0x13	; 19
    2808:	fe 2e       	mov	r15, r30
    280a:	cc 24       	eor	r12, r12
    280c:	dd 24       	eor	r13, r13
    280e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
    2812:	66 24       	eor	r6, r6
    2814:	77 24       	eor	r7, r7
	
	
	
	for(i=0;i<8;i++)
	{
		p=(self->array_durations)++;
    2816:	a8 84       	ldd	r10, Y+8	; 0x08
    2818:	b9 84       	ldd	r11, Y+9	; 0x09
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a8 0e       	add	r10, r24
    2820:	b9 1e       	adc	r11, r25
    2822:	b9 86       	std	Y+9, r11	; 0x09
    2824:	a8 86       	std	Y+8, r10	; 0x08
		j=(*p)+10*i;
		AFTER(MSEC(j),self->tone,stop_playing,0);
    2826:	f5 01       	movw	r30, r10
    2828:	72 91       	ld	r23, -Z
    282a:	62 91       	ld	r22, -Z
    282c:	5f 01       	movw	r10, r30
    282e:	66 0d       	add	r22, r6
    2830:	77 1d       	adc	r23, r7
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	2d e7       	ldi	r18, 0x7D	; 125
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__mulsi3>
    2842:	12 e0       	ldi	r17, 0x02	; 2
    2844:	95 95       	asr	r25
    2846:	87 95       	ror	r24
    2848:	77 95       	ror	r23
    284a:	67 95       	ror	r22
    284c:	1a 95       	dec	r17
    284e:	d1 f7       	brne	.-12     	; 0x2844 <start_playing_melody+0x80>
    2850:	0c 81       	ldd	r16, Y+4	; 0x04
    2852:	1d 81       	ldd	r17, Y+5	; 0x05
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	b0 e6       	ldi	r27, 0x60	; 96
    285e:	eb 2e       	mov	r14, r27
    2860:	b3 e1       	ldi	r27, 0x13	; 19
    2862:	fb 2e       	mov	r15, r27
    2864:	cc 24       	eor	r12, r12
    2866:	dd 24       	eor	r13, r13
    2868:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
		j=(*p)+10*i+10;
		AFTER(MSEC(j),self->tone,start_playing,0);
    286c:	f5 01       	movw	r30, r10
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	66 5f       	subi	r22, 0xF6	; 246
    2874:	7f 4f       	sbci	r23, 0xFF	; 255
    2876:	66 0d       	add	r22, r6
    2878:	77 1d       	adc	r23, r7
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	2d e7       	ldi	r18, 0x7D	; 125
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__mulsi3>
    288a:	4b 01       	movw	r8, r22
    288c:	5c 01       	movw	r10, r24
    288e:	a2 e0       	ldi	r26, 0x02	; 2
    2890:	b5 94       	asr	r11
    2892:	a7 94       	ror	r10
    2894:	97 94       	ror	r9
    2896:	87 94       	ror	r8
    2898:	aa 95       	dec	r26
    289a:	d1 f7       	brne	.-12     	; 0x2890 <start_playing_melody+0xcc>
    289c:	0c 81       	ldd	r16, Y+4	; 0x04
    289e:	1d 81       	ldd	r17, Y+5	; 0x05
    28a0:	c5 01       	movw	r24, r10
    28a2:	b4 01       	movw	r22, r8
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	f7 e6       	ldi	r31, 0x67	; 103
    28ae:	ef 2e       	mov	r14, r31
    28b0:	f3 e1       	ldi	r31, 0x13	; 19
    28b2:	ff 2e       	mov	r15, r31
    28b4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
		AFTER(MSEC(j),self->tone,setFrequency,*(++(self->array_tones)));
    28b8:	0c 81       	ldd	r16, Y+4	; 0x04
    28ba:	1d 81       	ldd	r17, Y+5	; 0x05
    28bc:	ee 81       	ldd	r30, Y+6	; 0x06
    28be:	ff 81       	ldd	r31, Y+7	; 0x07
    28c0:	32 96       	adiw	r30, 0x02	; 2
    28c2:	ff 83       	std	Y+7, r31	; 0x07
    28c4:	ee 83       	std	Y+6, r30	; 0x06
    28c6:	32 97       	sbiw	r30, 0x02	; 2
    28c8:	c2 80       	ldd	r12, Z+2	; 0x02
    28ca:	d3 80       	ldd	r13, Z+3	; 0x03
    28cc:	c5 01       	movw	r24, r10
    28ce:	b4 01       	movw	r22, r8
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	e3 e6       	ldi	r30, 0x63	; 99
    28da:	ee 2e       	mov	r14, r30
    28dc:	e3 e1       	ldi	r30, 0x13	; 19
    28de:	fe 2e       	mov	r15, r30
    28e0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <async>
    28e4:	8a e0       	ldi	r24, 0x0A	; 10
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	68 0e       	add	r6, r24
    28ea:	79 1e       	adc	r7, r25
		AFTER(MSEC(*((self->array_durations)++)),self->tone,setFrequency,*(++(self->array_tones)));
	}*/
	
	
	
	for(i=0;i<8;i++)
    28ec:	90 e5       	ldi	r25, 0x50	; 80
    28ee:	69 16       	cp	r6, r25
    28f0:	71 04       	cpc	r7, r1
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <start_playing_melody+0x132>
    28f4:	90 cf       	rjmp	.-224    	; 0x2816 <start_playing_melody+0x52>
	
	
	//AFTER(MSEC(*((self->array_durations)++)),self->tone,stop_playing,0);
	
	
}
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	1f 91       	pop	r17
    28fc:	0f 91       	pop	r16
    28fe:	ff 90       	pop	r15
    2900:	ef 90       	pop	r14
    2902:	df 90       	pop	r13
    2904:	cf 90       	pop	r12
    2906:	bf 90       	pop	r11
    2908:	af 90       	pop	r10
    290a:	9f 90       	pop	r9
    290c:	8f 90       	pop	r8
    290e:	7f 90       	pop	r7
    2910:	6f 90       	pop	r6
    2912:	08 95       	ret

00002914 <__subsf3>:
    2914:	50 58       	subi	r21, 0x80	; 128

00002916 <__addsf3>:
    2916:	bb 27       	eor	r27, r27
    2918:	aa 27       	eor	r26, r26
    291a:	0e d0       	rcall	.+28     	; 0x2938 <__addsf3x>
    291c:	e5 c0       	rjmp	.+458    	; 0x2ae8 <__fp_round>
    291e:	d6 d0       	rcall	.+428    	; 0x2acc <__fp_pscA>
    2920:	30 f0       	brcs	.+12     	; 0x292e <__addsf3+0x18>
    2922:	db d0       	rcall	.+438    	; 0x2ada <__fp_pscB>
    2924:	20 f0       	brcs	.+8      	; 0x292e <__addsf3+0x18>
    2926:	31 f4       	brne	.+12     	; 0x2934 <__addsf3+0x1e>
    2928:	9f 3f       	cpi	r25, 0xFF	; 255
    292a:	11 f4       	brne	.+4      	; 0x2930 <__addsf3+0x1a>
    292c:	1e f4       	brtc	.+6      	; 0x2934 <__addsf3+0x1e>
    292e:	cb c0       	rjmp	.+406    	; 0x2ac6 <__fp_nan>
    2930:	0e f4       	brtc	.+2      	; 0x2934 <__addsf3+0x1e>
    2932:	e0 95       	com	r30
    2934:	e7 fb       	bst	r30, 7
    2936:	c1 c0       	rjmp	.+386    	; 0x2aba <__fp_inf>

00002938 <__addsf3x>:
    2938:	e9 2f       	mov	r30, r25
    293a:	e7 d0       	rcall	.+462    	; 0x2b0a <__fp_split3>
    293c:	80 f3       	brcs	.-32     	; 0x291e <__addsf3+0x8>
    293e:	ba 17       	cp	r27, r26
    2940:	62 07       	cpc	r22, r18
    2942:	73 07       	cpc	r23, r19
    2944:	84 07       	cpc	r24, r20
    2946:	95 07       	cpc	r25, r21
    2948:	18 f0       	brcs	.+6      	; 0x2950 <__addsf3x+0x18>
    294a:	71 f4       	brne	.+28     	; 0x2968 <__addsf3x+0x30>
    294c:	9e f5       	brtc	.+102    	; 0x29b4 <__addsf3x+0x7c>
    294e:	ff c0       	rjmp	.+510    	; 0x2b4e <__fp_zero>
    2950:	0e f4       	brtc	.+2      	; 0x2954 <__addsf3x+0x1c>
    2952:	e0 95       	com	r30
    2954:	0b 2e       	mov	r0, r27
    2956:	ba 2f       	mov	r27, r26
    2958:	a0 2d       	mov	r26, r0
    295a:	0b 01       	movw	r0, r22
    295c:	b9 01       	movw	r22, r18
    295e:	90 01       	movw	r18, r0
    2960:	0c 01       	movw	r0, r24
    2962:	ca 01       	movw	r24, r20
    2964:	a0 01       	movw	r20, r0
    2966:	11 24       	eor	r1, r1
    2968:	ff 27       	eor	r31, r31
    296a:	59 1b       	sub	r21, r25
    296c:	99 f0       	breq	.+38     	; 0x2994 <__addsf3x+0x5c>
    296e:	59 3f       	cpi	r21, 0xF9	; 249
    2970:	50 f4       	brcc	.+20     	; 0x2986 <__addsf3x+0x4e>
    2972:	50 3e       	cpi	r21, 0xE0	; 224
    2974:	68 f1       	brcs	.+90     	; 0x29d0 <__addsf3x+0x98>
    2976:	1a 16       	cp	r1, r26
    2978:	f0 40       	sbci	r31, 0x00	; 0
    297a:	a2 2f       	mov	r26, r18
    297c:	23 2f       	mov	r18, r19
    297e:	34 2f       	mov	r19, r20
    2980:	44 27       	eor	r20, r20
    2982:	58 5f       	subi	r21, 0xF8	; 248
    2984:	f3 cf       	rjmp	.-26     	; 0x296c <__addsf3x+0x34>
    2986:	46 95       	lsr	r20
    2988:	37 95       	ror	r19
    298a:	27 95       	ror	r18
    298c:	a7 95       	ror	r26
    298e:	f0 40       	sbci	r31, 0x00	; 0
    2990:	53 95       	inc	r21
    2992:	c9 f7       	brne	.-14     	; 0x2986 <__addsf3x+0x4e>
    2994:	7e f4       	brtc	.+30     	; 0x29b4 <__addsf3x+0x7c>
    2996:	1f 16       	cp	r1, r31
    2998:	ba 0b       	sbc	r27, r26
    299a:	62 0b       	sbc	r22, r18
    299c:	73 0b       	sbc	r23, r19
    299e:	84 0b       	sbc	r24, r20
    29a0:	ba f0       	brmi	.+46     	; 0x29d0 <__addsf3x+0x98>
    29a2:	91 50       	subi	r25, 0x01	; 1
    29a4:	a1 f0       	breq	.+40     	; 0x29ce <__addsf3x+0x96>
    29a6:	ff 0f       	add	r31, r31
    29a8:	bb 1f       	adc	r27, r27
    29aa:	66 1f       	adc	r22, r22
    29ac:	77 1f       	adc	r23, r23
    29ae:	88 1f       	adc	r24, r24
    29b0:	c2 f7       	brpl	.-16     	; 0x29a2 <__addsf3x+0x6a>
    29b2:	0e c0       	rjmp	.+28     	; 0x29d0 <__addsf3x+0x98>
    29b4:	ba 0f       	add	r27, r26
    29b6:	62 1f       	adc	r22, r18
    29b8:	73 1f       	adc	r23, r19
    29ba:	84 1f       	adc	r24, r20
    29bc:	48 f4       	brcc	.+18     	; 0x29d0 <__addsf3x+0x98>
    29be:	87 95       	ror	r24
    29c0:	77 95       	ror	r23
    29c2:	67 95       	ror	r22
    29c4:	b7 95       	ror	r27
    29c6:	f7 95       	ror	r31
    29c8:	9e 3f       	cpi	r25, 0xFE	; 254
    29ca:	08 f0       	brcs	.+2      	; 0x29ce <__addsf3x+0x96>
    29cc:	b3 cf       	rjmp	.-154    	; 0x2934 <__addsf3+0x1e>
    29ce:	93 95       	inc	r25
    29d0:	88 0f       	add	r24, r24
    29d2:	08 f0       	brcs	.+2      	; 0x29d6 <__addsf3x+0x9e>
    29d4:	99 27       	eor	r25, r25
    29d6:	ee 0f       	add	r30, r30
    29d8:	97 95       	ror	r25
    29da:	87 95       	ror	r24
    29dc:	08 95       	ret

000029de <__fixsfsi>:
    29de:	04 d0       	rcall	.+8      	; 0x29e8 <__fixunssfsi>
    29e0:	68 94       	set
    29e2:	b1 11       	cpse	r27, r1
    29e4:	b5 c0       	rjmp	.+362    	; 0x2b50 <__fp_szero>
    29e6:	08 95       	ret

000029e8 <__fixunssfsi>:
    29e8:	98 d0       	rcall	.+304    	; 0x2b1a <__fp_splitA>
    29ea:	88 f0       	brcs	.+34     	; 0x2a0e <__fixunssfsi+0x26>
    29ec:	9f 57       	subi	r25, 0x7F	; 127
    29ee:	90 f0       	brcs	.+36     	; 0x2a14 <__fixunssfsi+0x2c>
    29f0:	b9 2f       	mov	r27, r25
    29f2:	99 27       	eor	r25, r25
    29f4:	b7 51       	subi	r27, 0x17	; 23
    29f6:	a0 f0       	brcs	.+40     	; 0x2a20 <__fixunssfsi+0x38>
    29f8:	d1 f0       	breq	.+52     	; 0x2a2e <__fixunssfsi+0x46>
    29fa:	66 0f       	add	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	1a f0       	brmi	.+6      	; 0x2a0a <__fixunssfsi+0x22>
    2a04:	ba 95       	dec	r27
    2a06:	c9 f7       	brne	.-14     	; 0x29fa <__fixunssfsi+0x12>
    2a08:	12 c0       	rjmp	.+36     	; 0x2a2e <__fixunssfsi+0x46>
    2a0a:	b1 30       	cpi	r27, 0x01	; 1
    2a0c:	81 f0       	breq	.+32     	; 0x2a2e <__fixunssfsi+0x46>
    2a0e:	9f d0       	rcall	.+318    	; 0x2b4e <__fp_zero>
    2a10:	b1 e0       	ldi	r27, 0x01	; 1
    2a12:	08 95       	ret
    2a14:	9c c0       	rjmp	.+312    	; 0x2b4e <__fp_zero>
    2a16:	67 2f       	mov	r22, r23
    2a18:	78 2f       	mov	r23, r24
    2a1a:	88 27       	eor	r24, r24
    2a1c:	b8 5f       	subi	r27, 0xF8	; 248
    2a1e:	39 f0       	breq	.+14     	; 0x2a2e <__fixunssfsi+0x46>
    2a20:	b9 3f       	cpi	r27, 0xF9	; 249
    2a22:	cc f3       	brlt	.-14     	; 0x2a16 <__fixunssfsi+0x2e>
    2a24:	86 95       	lsr	r24
    2a26:	77 95       	ror	r23
    2a28:	67 95       	ror	r22
    2a2a:	b3 95       	inc	r27
    2a2c:	d9 f7       	brne	.-10     	; 0x2a24 <__fixunssfsi+0x3c>
    2a2e:	3e f4       	brtc	.+14     	; 0x2a3e <__fixunssfsi+0x56>
    2a30:	90 95       	com	r25
    2a32:	80 95       	com	r24
    2a34:	70 95       	com	r23
    2a36:	61 95       	neg	r22
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3e:	08 95       	ret

00002a40 <__floatunsisf>:
    2a40:	e8 94       	clt
    2a42:	09 c0       	rjmp	.+18     	; 0x2a56 <__floatsisf+0x12>

00002a44 <__floatsisf>:
    2a44:	97 fb       	bst	r25, 7
    2a46:	3e f4       	brtc	.+14     	; 0x2a56 <__floatsisf+0x12>
    2a48:	90 95       	com	r25
    2a4a:	80 95       	com	r24
    2a4c:	70 95       	com	r23
    2a4e:	61 95       	neg	r22
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	8f 4f       	sbci	r24, 0xFF	; 255
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	99 23       	and	r25, r25
    2a58:	a9 f0       	breq	.+42     	; 0x2a84 <__floatsisf+0x40>
    2a5a:	f9 2f       	mov	r31, r25
    2a5c:	96 e9       	ldi	r25, 0x96	; 150
    2a5e:	bb 27       	eor	r27, r27
    2a60:	93 95       	inc	r25
    2a62:	f6 95       	lsr	r31
    2a64:	87 95       	ror	r24
    2a66:	77 95       	ror	r23
    2a68:	67 95       	ror	r22
    2a6a:	b7 95       	ror	r27
    2a6c:	f1 11       	cpse	r31, r1
    2a6e:	f8 cf       	rjmp	.-16     	; 0x2a60 <__floatsisf+0x1c>
    2a70:	fa f4       	brpl	.+62     	; 0x2ab0 <__floatsisf+0x6c>
    2a72:	bb 0f       	add	r27, r27
    2a74:	11 f4       	brne	.+4      	; 0x2a7a <__floatsisf+0x36>
    2a76:	60 ff       	sbrs	r22, 0
    2a78:	1b c0       	rjmp	.+54     	; 0x2ab0 <__floatsisf+0x6c>
    2a7a:	6f 5f       	subi	r22, 0xFF	; 255
    2a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a80:	9f 4f       	sbci	r25, 0xFF	; 255
    2a82:	16 c0       	rjmp	.+44     	; 0x2ab0 <__floatsisf+0x6c>
    2a84:	88 23       	and	r24, r24
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <__floatsisf+0x48>
    2a88:	96 e9       	ldi	r25, 0x96	; 150
    2a8a:	11 c0       	rjmp	.+34     	; 0x2aae <__floatsisf+0x6a>
    2a8c:	77 23       	and	r23, r23
    2a8e:	21 f0       	breq	.+8      	; 0x2a98 <__floatsisf+0x54>
    2a90:	9e e8       	ldi	r25, 0x8E	; 142
    2a92:	87 2f       	mov	r24, r23
    2a94:	76 2f       	mov	r23, r22
    2a96:	05 c0       	rjmp	.+10     	; 0x2aa2 <__floatsisf+0x5e>
    2a98:	66 23       	and	r22, r22
    2a9a:	71 f0       	breq	.+28     	; 0x2ab8 <__floatsisf+0x74>
    2a9c:	96 e8       	ldi	r25, 0x86	; 134
    2a9e:	86 2f       	mov	r24, r22
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	2a f0       	brmi	.+10     	; 0x2ab0 <__floatsisf+0x6c>
    2aa6:	9a 95       	dec	r25
    2aa8:	66 0f       	add	r22, r22
    2aaa:	77 1f       	adc	r23, r23
    2aac:	88 1f       	adc	r24, r24
    2aae:	da f7       	brpl	.-10     	; 0x2aa6 <__floatsisf+0x62>
    2ab0:	88 0f       	add	r24, r24
    2ab2:	96 95       	lsr	r25
    2ab4:	87 95       	ror	r24
    2ab6:	97 f9       	bld	r25, 7
    2ab8:	08 95       	ret

00002aba <__fp_inf>:
    2aba:	97 f9       	bld	r25, 7
    2abc:	9f 67       	ori	r25, 0x7F	; 127
    2abe:	80 e8       	ldi	r24, 0x80	; 128
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	08 95       	ret

00002ac6 <__fp_nan>:
    2ac6:	9f ef       	ldi	r25, 0xFF	; 255
    2ac8:	80 ec       	ldi	r24, 0xC0	; 192
    2aca:	08 95       	ret

00002acc <__fp_pscA>:
    2acc:	00 24       	eor	r0, r0
    2ace:	0a 94       	dec	r0
    2ad0:	16 16       	cp	r1, r22
    2ad2:	17 06       	cpc	r1, r23
    2ad4:	18 06       	cpc	r1, r24
    2ad6:	09 06       	cpc	r0, r25
    2ad8:	08 95       	ret

00002ada <__fp_pscB>:
    2ada:	00 24       	eor	r0, r0
    2adc:	0a 94       	dec	r0
    2ade:	12 16       	cp	r1, r18
    2ae0:	13 06       	cpc	r1, r19
    2ae2:	14 06       	cpc	r1, r20
    2ae4:	05 06       	cpc	r0, r21
    2ae6:	08 95       	ret

00002ae8 <__fp_round>:
    2ae8:	09 2e       	mov	r0, r25
    2aea:	03 94       	inc	r0
    2aec:	00 0c       	add	r0, r0
    2aee:	11 f4       	brne	.+4      	; 0x2af4 <__fp_round+0xc>
    2af0:	88 23       	and	r24, r24
    2af2:	52 f0       	brmi	.+20     	; 0x2b08 <__fp_round+0x20>
    2af4:	bb 0f       	add	r27, r27
    2af6:	40 f4       	brcc	.+16     	; 0x2b08 <__fp_round+0x20>
    2af8:	bf 2b       	or	r27, r31
    2afa:	11 f4       	brne	.+4      	; 0x2b00 <__fp_round+0x18>
    2afc:	60 ff       	sbrs	r22, 0
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <__fp_round+0x20>
    2b00:	6f 5f       	subi	r22, 0xFF	; 255
    2b02:	7f 4f       	sbci	r23, 0xFF	; 255
    2b04:	8f 4f       	sbci	r24, 0xFF	; 255
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	08 95       	ret

00002b0a <__fp_split3>:
    2b0a:	57 fd       	sbrc	r21, 7
    2b0c:	90 58       	subi	r25, 0x80	; 128
    2b0e:	44 0f       	add	r20, r20
    2b10:	55 1f       	adc	r21, r21
    2b12:	59 f0       	breq	.+22     	; 0x2b2a <__fp_splitA+0x10>
    2b14:	5f 3f       	cpi	r21, 0xFF	; 255
    2b16:	71 f0       	breq	.+28     	; 0x2b34 <__fp_splitA+0x1a>
    2b18:	47 95       	ror	r20

00002b1a <__fp_splitA>:
    2b1a:	88 0f       	add	r24, r24
    2b1c:	97 fb       	bst	r25, 7
    2b1e:	99 1f       	adc	r25, r25
    2b20:	61 f0       	breq	.+24     	; 0x2b3a <__fp_splitA+0x20>
    2b22:	9f 3f       	cpi	r25, 0xFF	; 255
    2b24:	79 f0       	breq	.+30     	; 0x2b44 <__fp_splitA+0x2a>
    2b26:	87 95       	ror	r24
    2b28:	08 95       	ret
    2b2a:	12 16       	cp	r1, r18
    2b2c:	13 06       	cpc	r1, r19
    2b2e:	14 06       	cpc	r1, r20
    2b30:	55 1f       	adc	r21, r21
    2b32:	f2 cf       	rjmp	.-28     	; 0x2b18 <__fp_split3+0xe>
    2b34:	46 95       	lsr	r20
    2b36:	f1 df       	rcall	.-30     	; 0x2b1a <__fp_splitA>
    2b38:	08 c0       	rjmp	.+16     	; 0x2b4a <__fp_splitA+0x30>
    2b3a:	16 16       	cp	r1, r22
    2b3c:	17 06       	cpc	r1, r23
    2b3e:	18 06       	cpc	r1, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	f1 cf       	rjmp	.-30     	; 0x2b26 <__fp_splitA+0xc>
    2b44:	86 95       	lsr	r24
    2b46:	71 05       	cpc	r23, r1
    2b48:	61 05       	cpc	r22, r1
    2b4a:	08 94       	sec
    2b4c:	08 95       	ret

00002b4e <__fp_zero>:
    2b4e:	e8 94       	clt

00002b50 <__fp_szero>:
    2b50:	bb 27       	eor	r27, r27
    2b52:	66 27       	eor	r22, r22
    2b54:	77 27       	eor	r23, r23
    2b56:	cb 01       	movw	r24, r22
    2b58:	97 f9       	bld	r25, 7
    2b5a:	08 95       	ret
    2b5c:	11 f4       	brne	.+4      	; 0x2b62 <__fp_szero+0x12>
    2b5e:	0e f4       	brtc	.+2      	; 0x2b62 <__fp_szero+0x12>
    2b60:	b2 cf       	rjmp	.-156    	; 0x2ac6 <__fp_nan>
    2b62:	3e c0       	rjmp	.+124    	; 0x2be0 <__fp_mpack>

00002b64 <sqrt>:
    2b64:	da df       	rcall	.-76     	; 0x2b1a <__fp_splitA>
    2b66:	d0 f3       	brcs	.-12     	; 0x2b5c <__fp_szero+0xc>
    2b68:	99 23       	and	r25, r25
    2b6a:	d9 f3       	breq	.-10     	; 0x2b62 <__fp_szero+0x12>
    2b6c:	ce f3       	brts	.-14     	; 0x2b60 <__fp_szero+0x10>
    2b6e:	9f 57       	subi	r25, 0x7F	; 127
    2b70:	55 0b       	sbc	r21, r21
    2b72:	87 ff       	sbrs	r24, 7
    2b74:	43 d0       	rcall	.+134    	; 0x2bfc <__fp_norm2>
    2b76:	00 24       	eor	r0, r0
    2b78:	a0 e6       	ldi	r26, 0x60	; 96
    2b7a:	40 ea       	ldi	r20, 0xA0	; 160
    2b7c:	90 01       	movw	r18, r0
    2b7e:	80 58       	subi	r24, 0x80	; 128
    2b80:	56 95       	lsr	r21
    2b82:	97 95       	ror	r25
    2b84:	28 f4       	brcc	.+10     	; 0x2b90 <sqrt+0x2c>
    2b86:	80 5c       	subi	r24, 0xC0	; 192
    2b88:	66 0f       	add	r22, r22
    2b8a:	77 1f       	adc	r23, r23
    2b8c:	88 1f       	adc	r24, r24
    2b8e:	20 f0       	brcs	.+8      	; 0x2b98 <sqrt+0x34>
    2b90:	26 17       	cp	r18, r22
    2b92:	37 07       	cpc	r19, r23
    2b94:	48 07       	cpc	r20, r24
    2b96:	30 f4       	brcc	.+12     	; 0x2ba4 <sqrt+0x40>
    2b98:	62 1b       	sub	r22, r18
    2b9a:	73 0b       	sbc	r23, r19
    2b9c:	84 0b       	sbc	r24, r20
    2b9e:	20 29       	or	r18, r0
    2ba0:	31 29       	or	r19, r1
    2ba2:	4a 2b       	or	r20, r26
    2ba4:	a6 95       	lsr	r26
    2ba6:	17 94       	ror	r1
    2ba8:	07 94       	ror	r0
    2baa:	20 25       	eor	r18, r0
    2bac:	31 25       	eor	r19, r1
    2bae:	4a 27       	eor	r20, r26
    2bb0:	58 f7       	brcc	.-42     	; 0x2b88 <sqrt+0x24>
    2bb2:	66 0f       	add	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	20 f0       	brcs	.+8      	; 0x2bc2 <sqrt+0x5e>
    2bba:	26 17       	cp	r18, r22
    2bbc:	37 07       	cpc	r19, r23
    2bbe:	48 07       	cpc	r20, r24
    2bc0:	30 f4       	brcc	.+12     	; 0x2bce <sqrt+0x6a>
    2bc2:	62 0b       	sbc	r22, r18
    2bc4:	73 0b       	sbc	r23, r19
    2bc6:	84 0b       	sbc	r24, r20
    2bc8:	20 0d       	add	r18, r0
    2bca:	31 1d       	adc	r19, r1
    2bcc:	41 1d       	adc	r20, r1
    2bce:	a0 95       	com	r26
    2bd0:	81 f7       	brne	.-32     	; 0x2bb2 <sqrt+0x4e>
    2bd2:	b9 01       	movw	r22, r18
    2bd4:	84 2f       	mov	r24, r20
    2bd6:	91 58       	subi	r25, 0x81	; 129
    2bd8:	88 0f       	add	r24, r24
    2bda:	96 95       	lsr	r25
    2bdc:	87 95       	ror	r24
    2bde:	08 95       	ret

00002be0 <__fp_mpack>:
    2be0:	9f 3f       	cpi	r25, 0xFF	; 255
    2be2:	31 f0       	breq	.+12     	; 0x2bf0 <__fp_mpack_finite+0xc>

00002be4 <__fp_mpack_finite>:
    2be4:	91 50       	subi	r25, 0x01	; 1
    2be6:	20 f4       	brcc	.+8      	; 0x2bf0 <__fp_mpack_finite+0xc>
    2be8:	87 95       	ror	r24
    2bea:	77 95       	ror	r23
    2bec:	67 95       	ror	r22
    2bee:	b7 95       	ror	r27
    2bf0:	88 0f       	add	r24, r24
    2bf2:	91 1d       	adc	r25, r1
    2bf4:	96 95       	lsr	r25
    2bf6:	87 95       	ror	r24
    2bf8:	97 f9       	bld	r25, 7
    2bfa:	08 95       	ret

00002bfc <__fp_norm2>:
    2bfc:	91 50       	subi	r25, 0x01	; 1
    2bfe:	50 40       	sbci	r21, 0x00	; 0
    2c00:	66 0f       	add	r22, r22
    2c02:	77 1f       	adc	r23, r23
    2c04:	88 1f       	adc	r24, r24
    2c06:	d2 f7       	brpl	.-12     	; 0x2bfc <__fp_norm2>
    2c08:	08 95       	ret

00002c0a <__mulsi3>:
    2c0a:	62 9f       	mul	r22, r18
    2c0c:	d0 01       	movw	r26, r0
    2c0e:	73 9f       	mul	r23, r19
    2c10:	f0 01       	movw	r30, r0
    2c12:	82 9f       	mul	r24, r18
    2c14:	e0 0d       	add	r30, r0
    2c16:	f1 1d       	adc	r31, r1
    2c18:	64 9f       	mul	r22, r20
    2c1a:	e0 0d       	add	r30, r0
    2c1c:	f1 1d       	adc	r31, r1
    2c1e:	92 9f       	mul	r25, r18
    2c20:	f0 0d       	add	r31, r0
    2c22:	83 9f       	mul	r24, r19
    2c24:	f0 0d       	add	r31, r0
    2c26:	74 9f       	mul	r23, r20
    2c28:	f0 0d       	add	r31, r0
    2c2a:	65 9f       	mul	r22, r21
    2c2c:	f0 0d       	add	r31, r0
    2c2e:	99 27       	eor	r25, r25
    2c30:	72 9f       	mul	r23, r18
    2c32:	b0 0d       	add	r27, r0
    2c34:	e1 1d       	adc	r30, r1
    2c36:	f9 1f       	adc	r31, r25
    2c38:	63 9f       	mul	r22, r19
    2c3a:	b0 0d       	add	r27, r0
    2c3c:	e1 1d       	adc	r30, r1
    2c3e:	f9 1f       	adc	r31, r25
    2c40:	bd 01       	movw	r22, r26
    2c42:	cf 01       	movw	r24, r30
    2c44:	11 24       	eor	r1, r1
    2c46:	08 95       	ret

00002c48 <__divmodhi4>:
    2c48:	97 fb       	bst	r25, 7
    2c4a:	09 2e       	mov	r0, r25
    2c4c:	07 26       	eor	r0, r23
    2c4e:	0a d0       	rcall	.+20     	; 0x2c64 <__divmodhi4_neg1>
    2c50:	77 fd       	sbrc	r23, 7
    2c52:	04 d0       	rcall	.+8      	; 0x2c5c <__divmodhi4_neg2>
    2c54:	27 d0       	rcall	.+78     	; 0x2ca4 <__udivmodhi4>
    2c56:	06 d0       	rcall	.+12     	; 0x2c64 <__divmodhi4_neg1>
    2c58:	00 20       	and	r0, r0
    2c5a:	1a f4       	brpl	.+6      	; 0x2c62 <__divmodhi4_exit>

00002c5c <__divmodhi4_neg2>:
    2c5c:	70 95       	com	r23
    2c5e:	61 95       	neg	r22
    2c60:	7f 4f       	sbci	r23, 0xFF	; 255

00002c62 <__divmodhi4_exit>:
    2c62:	08 95       	ret

00002c64 <__divmodhi4_neg1>:
    2c64:	f6 f7       	brtc	.-4      	; 0x2c62 <__divmodhi4_exit>
    2c66:	90 95       	com	r25
    2c68:	81 95       	neg	r24
    2c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6c:	08 95       	ret

00002c6e <__divmodsi4>:
    2c6e:	97 fb       	bst	r25, 7
    2c70:	09 2e       	mov	r0, r25
    2c72:	05 26       	eor	r0, r21
    2c74:	0e d0       	rcall	.+28     	; 0x2c92 <__divmodsi4_neg1>
    2c76:	57 fd       	sbrc	r21, 7
    2c78:	04 d0       	rcall	.+8      	; 0x2c82 <__divmodsi4_neg2>
    2c7a:	28 d0       	rcall	.+80     	; 0x2ccc <__udivmodsi4>
    2c7c:	0a d0       	rcall	.+20     	; 0x2c92 <__divmodsi4_neg1>
    2c7e:	00 1c       	adc	r0, r0
    2c80:	38 f4       	brcc	.+14     	; 0x2c90 <__divmodsi4_exit>

00002c82 <__divmodsi4_neg2>:
    2c82:	50 95       	com	r21
    2c84:	40 95       	com	r20
    2c86:	30 95       	com	r19
    2c88:	21 95       	neg	r18
    2c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2c8e:	5f 4f       	sbci	r21, 0xFF	; 255

00002c90 <__divmodsi4_exit>:
    2c90:	08 95       	ret

00002c92 <__divmodsi4_neg1>:
    2c92:	f6 f7       	brtc	.-4      	; 0x2c90 <__divmodsi4_exit>
    2c94:	90 95       	com	r25
    2c96:	80 95       	com	r24
    2c98:	70 95       	com	r23
    2c9a:	61 95       	neg	r22
    2c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca2:	08 95       	ret

00002ca4 <__udivmodhi4>:
    2ca4:	aa 1b       	sub	r26, r26
    2ca6:	bb 1b       	sub	r27, r27
    2ca8:	51 e1       	ldi	r21, 0x11	; 17
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <__udivmodhi4_ep>

00002cac <__udivmodhi4_loop>:
    2cac:	aa 1f       	adc	r26, r26
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	a6 17       	cp	r26, r22
    2cb2:	b7 07       	cpc	r27, r23
    2cb4:	10 f0       	brcs	.+4      	; 0x2cba <__udivmodhi4_ep>
    2cb6:	a6 1b       	sub	r26, r22
    2cb8:	b7 0b       	sbc	r27, r23

00002cba <__udivmodhi4_ep>:
    2cba:	88 1f       	adc	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	5a 95       	dec	r21
    2cc0:	a9 f7       	brne	.-22     	; 0x2cac <__udivmodhi4_loop>
    2cc2:	80 95       	com	r24
    2cc4:	90 95       	com	r25
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	08 95       	ret

00002ccc <__udivmodsi4>:
    2ccc:	a1 e2       	ldi	r26, 0x21	; 33
    2cce:	1a 2e       	mov	r1, r26
    2cd0:	aa 1b       	sub	r26, r26
    2cd2:	bb 1b       	sub	r27, r27
    2cd4:	fd 01       	movw	r30, r26
    2cd6:	0d c0       	rjmp	.+26     	; 0x2cf2 <__udivmodsi4_ep>

00002cd8 <__udivmodsi4_loop>:
    2cd8:	aa 1f       	adc	r26, r26
    2cda:	bb 1f       	adc	r27, r27
    2cdc:	ee 1f       	adc	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	a2 17       	cp	r26, r18
    2ce2:	b3 07       	cpc	r27, r19
    2ce4:	e4 07       	cpc	r30, r20
    2ce6:	f5 07       	cpc	r31, r21
    2ce8:	20 f0       	brcs	.+8      	; 0x2cf2 <__udivmodsi4_ep>
    2cea:	a2 1b       	sub	r26, r18
    2cec:	b3 0b       	sbc	r27, r19
    2cee:	e4 0b       	sbc	r30, r20
    2cf0:	f5 0b       	sbc	r31, r21

00002cf2 <__udivmodsi4_ep>:
    2cf2:	66 1f       	adc	r22, r22
    2cf4:	77 1f       	adc	r23, r23
    2cf6:	88 1f       	adc	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	1a 94       	dec	r1
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <__udivmodsi4_loop>
    2cfe:	60 95       	com	r22
    2d00:	70 95       	com	r23
    2d02:	80 95       	com	r24
    2d04:	90 95       	com	r25
    2d06:	9b 01       	movw	r18, r22
    2d08:	ac 01       	movw	r20, r24
    2d0a:	bd 01       	movw	r22, r26
    2d0c:	cf 01       	movw	r24, r30
    2d0e:	08 95       	ret

00002d10 <setjmp>:
    2d10:	dc 01       	movw	r26, r24
    2d12:	2d 92       	st	X+, r2
    2d14:	3d 92       	st	X+, r3
    2d16:	4d 92       	st	X+, r4
    2d18:	5d 92       	st	X+, r5
    2d1a:	6d 92       	st	X+, r6
    2d1c:	7d 92       	st	X+, r7
    2d1e:	8d 92       	st	X+, r8
    2d20:	9d 92       	st	X+, r9
    2d22:	ad 92       	st	X+, r10
    2d24:	bd 92       	st	X+, r11
    2d26:	cd 92       	st	X+, r12
    2d28:	dd 92       	st	X+, r13
    2d2a:	ed 92       	st	X+, r14
    2d2c:	fd 92       	st	X+, r15
    2d2e:	0d 93       	st	X+, r16
    2d30:	1d 93       	st	X+, r17
    2d32:	cd 93       	st	X+, r28
    2d34:	dd 93       	st	X+, r29
    2d36:	ff 91       	pop	r31
    2d38:	ef 91       	pop	r30
    2d3a:	8d b7       	in	r24, 0x3d	; 61
    2d3c:	8d 93       	st	X+, r24
    2d3e:	8e b7       	in	r24, 0x3e	; 62
    2d40:	8d 93       	st	X+, r24
    2d42:	8f b7       	in	r24, 0x3f	; 63
    2d44:	8d 93       	st	X+, r24
    2d46:	ed 93       	st	X+, r30
    2d48:	fd 93       	st	X+, r31
    2d4a:	88 27       	eor	r24, r24
    2d4c:	99 27       	eor	r25, r25
    2d4e:	09 94       	ijmp

00002d50 <longjmp>:
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	91 05       	cpc	r25, r1
    2d58:	81 1d       	adc	r24, r1
    2d5a:	2d 90       	ld	r2, X+
    2d5c:	3d 90       	ld	r3, X+
    2d5e:	4d 90       	ld	r4, X+
    2d60:	5d 90       	ld	r5, X+
    2d62:	6d 90       	ld	r6, X+
    2d64:	7d 90       	ld	r7, X+
    2d66:	8d 90       	ld	r8, X+
    2d68:	9d 90       	ld	r9, X+
    2d6a:	ad 90       	ld	r10, X+
    2d6c:	bd 90       	ld	r11, X+
    2d6e:	cd 90       	ld	r12, X+
    2d70:	dd 90       	ld	r13, X+
    2d72:	ed 90       	ld	r14, X+
    2d74:	fd 90       	ld	r15, X+
    2d76:	0d 91       	ld	r16, X+
    2d78:	1d 91       	ld	r17, X+
    2d7a:	cd 91       	ld	r28, X+
    2d7c:	dd 91       	ld	r29, X+
    2d7e:	ed 91       	ld	r30, X+
    2d80:	fd 91       	ld	r31, X+
    2d82:	0d 90       	ld	r0, X+
    2d84:	f8 94       	cli
    2d86:	fe bf       	out	0x3e, r31	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	ed bf       	out	0x3d, r30	; 61
    2d8c:	ed 91       	ld	r30, X+
    2d8e:	fd 91       	ld	r31, X+
    2d90:	09 94       	ijmp

00002d92 <_exit>:
    2d92:	f8 94       	cli

00002d94 <__stop_program>:
    2d94:	ff cf       	rjmp	.-2      	; 0x2d94 <__stop_program>


ex1.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000025d6  0000264a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000358  0080016a  00002640  000026b4  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144c  00000000  00000000  00004a00  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__vector_1>
       8:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_2>
       c:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__vector_3>
      10:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_4>
      14:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_9>
      28:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_10>
      2c:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_11>
      30:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_12>
      34:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_13>
      38:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_14>
      3c:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_15>
      40:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_16>
      44:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_17>
      48:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_18>
      4c:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_19>
      50:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_20>
      54:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__vector_21>
      58:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 ed       	ldi	r30, 0xD6	; 214
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	aa 36       	cpi	r26, 0x6A	; 106
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	14 e0       	ldi	r17, 0x04	; 4
      80:	aa e6       	ldi	r26, 0x6A	; 106
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a2 3c       	cpi	r26, 0xC2	; 194
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
      92:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
}

APP app = initAPP(&primeCalc,&blinker);

int main(){
  CONFLCD;
      9a:	87 eb       	ldi	r24, 0xB7	; 183
      9c:	80 93 e5 00 	sts	0x00E5, r24
      a0:	80 e1       	ldi	r24, 0x10	; 16
      a2:	80 93 e6 00 	sts	0x00E6, r24
      a6:	8f e0       	ldi	r24, 0x0F	; 15
      a8:	80 93 e7 00 	sts	0x00E7, r24
      ac:	80 e8       	ldi	r24, 0x80	; 128
      ae:	80 93 e4 00 	sts	0x00E4, r24
  return TINYTIMBER(&app,startup,0);
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	50 e0       	ldi	r21, 0x00	; 0
      b6:	62 e6       	ldi	r22, 0x62	; 98
      b8:	70 e0       	ldi	r23, 0x00	; 0
      ba:	80 e1       	ldi	r24, 0x10	; 16
      bc:	91 e0       	ldi	r25, 0x01	; 1
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <tinytimber>
      c2:	08 95       	ret

000000c4 <startup>:
  Blinker* bkr;
} APP;

#define initAPP(p,b) {initObject(),p,b}
 
int startup(APP * self, int x){
      c4:	af 92       	push	r10
      c6:	bf 92       	push	r11
      c8:	cf 92       	push	r12
      ca:	df 92       	push	r13
      cc:	ef 92       	push	r14
      ce:	ff 92       	push	r15
      d0:	0f 93       	push	r16
      d2:	1f 93       	push	r17
      d4:	5c 01       	movw	r10, r24
  ASYNC(self -> pctr, primes,0);
      d6:	fc 01       	movw	r30, r24
      d8:	04 81       	ldd	r16, Z+4	; 0x04
      da:	15 81       	ldd	r17, Z+5	; 0x05
      dc:	cc 24       	eor	r12, r12
      de:	dd 24       	eor	r13, r13
      e0:	97 e9       	ldi	r25, 0x97	; 151
      e2:	e9 2e       	mov	r14, r25
      e4:	91 e1       	ldi	r25, 0x11	; 17
      e6:	f9 2e       	mov	r15, r25
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <async>
  ASYNC(self -> bkr, startBlinking, 0);
      fc:	f5 01       	movw	r30, r10
      fe:	06 81       	ldd	r16, Z+6	; 0x06
     100:	17 81       	ldd	r17, Z+7	; 0x07
     102:	8d e1       	ldi	r24, 0x1D	; 29
     104:	e8 2e       	mov	r14, r24
     106:	82 e1       	ldi	r24, 0x12	; 18
     108:	f8 2e       	mov	r15, r24
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	40 e0       	ldi	r20, 0x00	; 0
     110:	50 e0       	ldi	r21, 0x00	; 0
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <async>
}
     11e:	1f 91       	pop	r17
     120:	0f 91       	pop	r16
     122:	ff 90       	pop	r15
     124:	ef 90       	pop	r14
     126:	df 90       	pop	r13
     128:	cf 90       	pop	r12
     12a:	bf 90       	pop	r11
     12c:	af 90       	pop	r10
     12e:	08 95       	ret

00000130 <DUMP>:

#include "TinyTimber.h"
#include <avr/io.h>
void DUMPC(char);

void DUMP(char *s) {
     130:	fc 01       	movw	r30, r24
     132:	01 c0       	rjmp	.+2      	; 0x136 <DUMP+0x6>
  while (*s)
    DUMPC(*s++);
     134:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"
#include <avr/io.h>
void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     136:	80 81       	ld	r24, Z
     138:	88 23       	and	r24, r24
     13a:	e1 f7       	brne	.-8      	; 0x134 <DUMP+0x4>
    DUMPC(*s++);
}
     13c:	08 95       	ret

0000013e <DUMPH>:
void DUMPH(unsigned int val) {
    char buf[8];
    int i = 0;
    do {
        buf[i++] = hex[val & 0x0F];
        val = val >> 4;
     13e:	24 e0       	ldi	r18, 0x04	; 4
     140:	96 95       	lsr	r25
     142:	87 95       	ror	r24
     144:	2a 95       	dec	r18
     146:	e1 f7       	brne	.-8      	; 0x140 <DUMPH+0x2>
    } while (val);
     148:	00 97       	sbiw	r24, 0x00	; 0
     14a:	c9 f7       	brne	.-14     	; 0x13e <DUMPH>
    while (i)
        DUMPC(buf[--i]);
}
     14c:	08 95       	ret

0000014e <DUMP_INIT>:
#define INFINITY        0x7fffffffL
#define INF(a)          ( (a)==0 ? INFINITY : (a) )

void DUMP_INIT() {

}
     14e:	08 95       	ret

00000150 <DUMPC>:

void DUMPC(char c) {
    
}
     150:	08 95       	ret

00000152 <enqueueByDeadline>:
#pragma	DATA default

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
     164:	db 01       	movw	r26, r22
     166:	ed 91       	ld	r30, X+
     168:	fc 91       	ld	r31, X
     16a:	c0 e0       	ldi	r28, 0x00	; 0
     16c:	d0 e0       	ldi	r29, 0x00	; 0
     16e:	05 c0       	rjmp	.+10     	; 0x17a <enqueueByDeadline+0x28>
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
     170:	ef 01       	movw	r28, r30
     172:	80 81       	ld	r24, Z
     174:	91 81       	ldd	r25, Z+1	; 0x01
     176:	9c 01       	movw	r18, r24
     178:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
     17a:	30 97       	sbiw	r30, 0x00	; 0
     17c:	81 f0       	breq	.+32     	; 0x19e <enqueueByDeadline+0x4c>
     17e:	26 81       	ldd	r18, Z+6	; 0x06
     180:	37 81       	ldd	r19, Z+7	; 0x07
     182:	40 85       	ldd	r20, Z+8	; 0x08
     184:	51 85       	ldd	r21, Z+9	; 0x09
     186:	d8 01       	movw	r26, r16
     188:	16 96       	adiw	r26, 0x06	; 6
     18a:	cd 90       	ld	r12, X+
     18c:	dd 90       	ld	r13, X+
     18e:	ed 90       	ld	r14, X+
     190:	fc 90       	ld	r15, X
     192:	19 97       	sbiw	r26, 0x09	; 9
     194:	c2 16       	cp	r12, r18
     196:	d3 06       	cpc	r13, r19
     198:	e4 06       	cpc	r14, r20
     19a:	f5 06       	cpc	r15, r21
     19c:	4c f7       	brge	.-46     	; 0x170 <enqueueByDeadline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     19e:	d8 01       	movw	r26, r16
     1a0:	ed 93       	st	X+, r30
     1a2:	fc 93       	st	X, r31
    if (prev == NULL)
     1a4:	20 97       	sbiw	r28, 0x00	; 0
     1a6:	21 f4       	brne	.+8      	; 0x1b0 <enqueueByDeadline+0x5e>
        *queue = p;
     1a8:	fb 01       	movw	r30, r22
     1aa:	11 83       	std	Z+1, r17	; 0x01
     1ac:	00 83       	st	Z, r16
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <enqueueByDeadline+0x62>
    else
        prev->next = p;
     1b0:	19 83       	std	Y+1, r17	; 0x01
     1b2:	08 83       	st	Y, r16
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	08 95       	ret

000001c6 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
     1d8:	db 01       	movw	r26, r22
     1da:	ed 91       	ld	r30, X+
     1dc:	fc 91       	ld	r31, X
     1de:	c0 e0       	ldi	r28, 0x00	; 0
     1e0:	d0 e0       	ldi	r29, 0x00	; 0
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <enqueueByBaseline+0x28>
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
     1e4:	ef 01       	movw	r28, r30
     1e6:	80 81       	ld	r24, Z
     1e8:	91 81       	ldd	r25, Z+1	; 0x01
     1ea:	9c 01       	movw	r18, r24
     1ec:	f9 01       	movw	r30, r18
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
     1ee:	30 97       	sbiw	r30, 0x00	; 0
     1f0:	81 f0       	breq	.+32     	; 0x212 <enqueueByBaseline+0x4c>
     1f2:	22 81       	ldd	r18, Z+2	; 0x02
     1f4:	33 81       	ldd	r19, Z+3	; 0x03
     1f6:	44 81       	ldd	r20, Z+4	; 0x04
     1f8:	55 81       	ldd	r21, Z+5	; 0x05
     1fa:	d8 01       	movw	r26, r16
     1fc:	12 96       	adiw	r26, 0x02	; 2
     1fe:	cd 90       	ld	r12, X+
     200:	dd 90       	ld	r13, X+
     202:	ed 90       	ld	r14, X+
     204:	fc 90       	ld	r15, X
     206:	15 97       	sbiw	r26, 0x05	; 5
     208:	c2 16       	cp	r12, r18
     20a:	d3 06       	cpc	r13, r19
     20c:	e4 06       	cpc	r14, r20
     20e:	f5 06       	cpc	r15, r21
     210:	4c f7       	brge	.-46     	; 0x1e4 <enqueueByBaseline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     212:	d8 01       	movw	r26, r16
     214:	ed 93       	st	X+, r30
     216:	fc 93       	st	X, r31
    if (prev == NULL)
     218:	20 97       	sbiw	r28, 0x00	; 0
     21a:	21 f4       	brne	.+8      	; 0x224 <enqueueByBaseline+0x5e>
        *queue = p;
     21c:	fb 01       	movw	r30, r22
     21e:	11 83       	std	Z+1, r17	; 0x01
     220:	00 83       	st	Z, r16
     222:	02 c0       	rjmp	.+4      	; 0x228 <enqueueByBaseline+0x62>
    else
        prev->next = p;
     224:	19 83       	std	Y+1, r17	; 0x01
     226:	08 83       	st	Y, r16
}
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	08 95       	ret

0000023a <dequeue>:

Msg dequeue(Msg *queue) {
     23a:	dc 01       	movw	r26, r24
    Msg m = *queue;
     23c:	ed 91       	ld	r30, X+
     23e:	fc 91       	ld	r31, X
     240:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
     242:	30 97       	sbiw	r30, 0x00	; 0
     244:	31 f0       	breq	.+12     	; 0x252 <dequeue+0x18>
        *queue = m->next;
     246:	80 81       	ld	r24, Z
     248:	91 81       	ldd	r25, Z+1	; 0x01
     24a:	8d 93       	st	X+, r24
     24c:	9c 93       	st	X, r25
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
     24e:	cf 01       	movw	r24, r30
     250:	08 95       	ret
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	80 93 ec 00 	sts	0x00EC, r24
     258:	80 93 ed 00 	sts	0x00ED, r24
     25c:	80 93 ee 00 	sts	0x00EE, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	83 bf       	out	0x33, r24	; 51
     264:	88 95       	sleep
     266:	fd cf       	rjmp	.-6      	; 0x262 <dequeue+0x28>

00000268 <insert>:
    return m;
}

void insert(Msg m, Msg *queue) {
     268:	dc 01       	movw	r26, r24
     26a:	fb 01       	movw	r30, r22
    m->next = *queue;
     26c:	80 81       	ld	r24, Z
     26e:	91 81       	ldd	r25, Z+1	; 0x01
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 93       	st	X, r25
     274:	8e 93       	st	-X, r24
    *queue = m;
     276:	b1 83       	std	Z+1, r27	; 0x01
     278:	a0 83       	st	Z, r26
}
     27a:	08 95       	ret

0000027c <push>:

void push(Thread t, Thread *stack) {
     27c:	dc 01       	movw	r26, r24
     27e:	fb 01       	movw	r30, r22
    t->next = *stack;
     280:	80 81       	ld	r24, Z
     282:	91 81       	ldd	r25, Z+1	; 0x01
     284:	11 96       	adiw	r26, 0x01	; 1
     286:	9c 93       	st	X, r25
     288:	8e 93       	st	-X, r24
    *stack = t;
     28a:	b1 83       	std	Z+1, r27	; 0x01
     28c:	a0 83       	st	Z, r26
}
     28e:	08 95       	ret

00000290 <pop>:

Thread pop(Thread *stack) {
     290:	fc 01       	movw	r30, r24
    Thread t = *stack;
     292:	a0 81       	ld	r26, Z
     294:	b1 81       	ldd	r27, Z+1	; 0x01
    *stack = t->next;
     296:	8d 91       	ld	r24, X+
     298:	9c 91       	ld	r25, X
     29a:	11 97       	sbiw	r26, 0x01	; 1
     29c:	91 83       	std	Z+1, r25	; 0x01
     29e:	80 83       	st	Z, r24
    return t;
}
     2a0:	cd 01       	movw	r24, r26
     2a2:	08 95       	ret

000002a4 <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	11 24       	eor	r1, r1
     2ae:	2f 93       	push	r18
     2b0:	3f 93       	push	r19
     2b2:	4f 93       	push	r20
     2b4:	5f 93       	push	r21
     2b6:	6f 93       	push	r22
     2b8:	7f 93       	push	r23
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	af 93       	push	r26
     2c0:	bf 93       	push	r27
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
     2c6:	60 91 76 01 	lds	r22, 0x0176
     2ca:	70 91 77 01 	lds	r23, 0x0177
     2ce:	6f 5f       	subi	r22, 0xFF	; 255
     2d0:	7f 4f       	sbci	r23, 0xFF	; 255
     2d2:	70 93 77 01 	sts	0x0177, r23
     2d6:	60 93 76 01 	sts	0x0176, r22
    TIMERSET(timerQ);
     2da:	e0 91 70 01 	lds	r30, 0x0170
     2de:	f0 91 71 01 	lds	r31, 0x0171
     2e2:	30 97       	sbiw	r30, 0x00	; 0
     2e4:	21 f1       	breq	.+72     	; 0x32e <__vector_9+0x8a>
     2e6:	22 81       	ldd	r18, Z+2	; 0x02
     2e8:	33 81       	ldd	r19, Z+3	; 0x03
     2ea:	44 81       	ldd	r20, Z+4	; 0x04
     2ec:	55 81       	ldd	r21, Z+5	; 0x05
     2ee:	ca 01       	movw	r24, r20
     2f0:	bb 27       	eor	r27, r27
     2f2:	97 fd       	sbrc	r25, 7
     2f4:	b0 95       	com	r27
     2f6:	ab 2f       	mov	r26, r27
     2f8:	68 17       	cp	r22, r24
     2fa:	79 07       	cpc	r23, r25
     2fc:	c1 f4       	brne	.+48     	; 0x32e <__vector_9+0x8a>
     2fe:	80 91 84 00 	lds	r24, 0x0084
     302:	90 91 85 00 	lds	r25, 0x0085
     306:	80 95       	com	r24
     308:	90 95       	com	r25
     30a:	82 0f       	add	r24, r18
     30c:	93 1f       	adc	r25, r19
     30e:	89 2b       	or	r24, r25
     310:	31 f4       	brne	.+12     	; 0x31e <__vector_9+0x7a>
     312:	20 91 84 00 	lds	r18, 0x0084
     316:	30 91 85 00 	lds	r19, 0x0085
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	30 93 89 00 	sts	0x0089, r19
     322:	20 93 88 00 	sts	0x0088, r18
     326:	80 91 6f 00 	lds	r24, 0x006F
     32a:	82 60       	ori	r24, 0x02	; 2
     32c:	03 c0       	rjmp	.+6      	; 0x334 <__vector_9+0x90>
     32e:	80 91 6f 00 	lds	r24, 0x006F
     332:	8d 7f       	andi	r24, 0xFD	; 253
     334:	80 93 6f 00 	sts	0x006F, r24
}
     338:	ff 91       	pop	r31
     33a:	ef 91       	pop	r30
     33c:	bf 91       	pop	r27
     33e:	af 91       	pop	r26
     340:	9f 91       	pop	r25
     342:	8f 91       	pop	r24
     344:	7f 91       	pop	r23
     346:	6f 91       	pop	r22
     348:	5f 91       	pop	r21
     34a:	4f 91       	pop	r20
     34c:	3f 91       	pop	r19
     34e:	2f 91       	pop	r18
     350:	0f 90       	pop	r0
     352:	0f be       	out	0x3f, r0	; 63
     354:	0f 90       	pop	r0
     356:	1f 90       	pop	r1
     358:	18 95       	reti

0000035a <ABORT>:
    }
    ENABLE(status);
    return result;
}

void ABORT(Msg m) {
     35a:	dc 01       	movw	r26, r24
    char status;
    DISABLE(status);
     35c:	6f b7       	in	r22, 0x3f	; 63
     35e:	f8 94       	cli
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     360:	20 91 70 01 	lds	r18, 0x0170
     364:	30 91 71 01 	lds	r19, 0x0171
     368:	e0 e0       	ldi	r30, 0x00	; 0
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	04 c0       	rjmp	.+8      	; 0x376 <ABORT+0x1c>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     36e:	f9 01       	movw	r30, r18
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     376:	21 15       	cp	r18, r1
     378:	31 05       	cpc	r19, r1
     37a:	69 f0       	breq	.+26     	; 0x396 <ABORT+0x3c>
     37c:	2a 17       	cp	r18, r26
     37e:	3b 07       	cpc	r19, r27
     380:	b1 f7       	brne	.-20     	; 0x36e <ABORT+0x14>
     382:	8d 91       	ld	r24, X+
     384:	9c 91       	ld	r25, X
     386:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     388:	30 97       	sbiw	r30, 0x00	; 0
     38a:	d9 f4       	brne	.+54     	; 0x3c2 <ABORT+0x68>
            prev->next = q->next;
        else
            *queue = q->next;
     38c:	90 93 71 01 	sts	0x0171, r25
     390:	80 93 70 01 	sts	0x0170, r24
     394:	3a c0       	rjmp	.+116    	; 0x40a <ABORT+0xb0>
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     396:	20 91 6e 01 	lds	r18, 0x016E
     39a:	30 91 6f 01 	lds	r19, 0x016F
     39e:	e0 e0       	ldi	r30, 0x00	; 0
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	04 c0       	rjmp	.+8      	; 0x3ac <ABORT+0x52>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     3a4:	f9 01       	movw	r30, r18
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     3ac:	21 15       	cp	r18, r1
     3ae:	31 05       	cpc	r19, r1
     3b0:	81 f0       	breq	.+32     	; 0x3d2 <ABORT+0x78>
     3b2:	2a 17       	cp	r18, r26
     3b4:	3b 07       	cpc	r19, r27
     3b6:	b1 f7       	brne	.-20     	; 0x3a4 <ABORT+0x4a>
     3b8:	8d 91       	ld	r24, X+
     3ba:	9c 91       	ld	r25, X
     3bc:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     3be:	30 97       	sbiw	r30, 0x00	; 0
     3c0:	19 f0       	breq	.+6      	; 0x3c8 <ABORT+0x6e>
            prev->next = q->next;
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     3c6:	21 c0       	rjmp	.+66     	; 0x40a <ABORT+0xb0>
        else
            *queue = q->next;
     3c8:	90 93 6f 01 	sts	0x016F, r25
     3cc:	80 93 6e 01 	sts	0x016E, r24
     3d0:	1c c0       	rjmp	.+56     	; 0x40a <ABORT+0xb0>
    char status;
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
     3d2:	e0 91 51 01 	lds	r30, 0x0151
     3d6:	f0 91 52 01 	lds	r31, 0x0152
        while (t) {
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
     3da:	40 91 53 01 	lds	r20, 0x0153
     3de:	50 91 54 01 	lds	r21, 0x0154
     3e2:	22 c0       	rjmp	.+68     	; 0x428 <ABORT+0xce>
     3e4:	e4 17       	cp	r30, r20
     3e6:	f5 07       	cpc	r31, r21
     3e8:	e1 f0       	breq	.+56     	; 0x422 <ABORT+0xc8>
     3ea:	82 81       	ldd	r24, Z+2	; 0x02
     3ec:	93 81       	ldd	r25, Z+3	; 0x03
     3ee:	8a 17       	cp	r24, r26
     3f0:	9b 07       	cpc	r25, r27
     3f2:	b9 f4       	brne	.+46     	; 0x422 <ABORT+0xc8>
     3f4:	24 81       	ldd	r18, Z+4	; 0x04
     3f6:	35 81       	ldd	r19, Z+5	; 0x05
     3f8:	1a 96       	adiw	r26, 0x0a	; 10
     3fa:	8d 91       	ld	r24, X+
     3fc:	9c 91       	ld	r25, X
     3fe:	1b 97       	sbiw	r26, 0x0b	; 11
     400:	28 17       	cp	r18, r24
     402:	39 07       	cpc	r19, r25
     404:	71 f4       	brne	.+28     	; 0x422 <ABORT+0xc8>
	            t->msg = NULL;
     406:	13 82       	std	Z+3, r1	; 0x03
     408:	12 82       	std	Z+2, r1	; 0x02
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
     40a:	80 91 4d 01 	lds	r24, 0x014D
     40e:	90 91 4e 01 	lds	r25, 0x014E
     412:	11 96       	adiw	r26, 0x01	; 1
     414:	9c 93       	st	X, r25
     416:	8e 93       	st	-X, r24
    *queue = m;
     418:	b0 93 4e 01 	sts	0x014E, r27
     41c:	a0 93 4d 01 	sts	0x014D, r26
     420:	05 c0       	rjmp	.+10     	; 0x42c <ABORT+0xd2>
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
	            t->msg = NULL;
	            insert(m, &msgPool);
	            break;
            }
            t = t->next;
     422:	01 90       	ld	r0, Z+
     424:	f0 81       	ld	r31, Z
     426:	e0 2d       	mov	r30, r0
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
        while (t) {
     428:	30 97       	sbiw	r30, 0x00	; 0
     42a:	e1 f6       	brne	.-72     	; 0x3e4 <ABORT+0x8a>
	            break;
            }
            t = t->next;
        }
    }
    ENABLE(status);
     42c:	67 ff       	sbrs	r22, 7
     42e:	01 c0       	rjmp	.+2      	; 0x432 <ABORT+0xd8>
     430:	78 94       	sei
     432:	08 95       	ret

00000434 <T_RESET>:
}

void T_RESET(Timer *t) {
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
    t->accum = STATUS() ? current->msg->baseline : timestamp;
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	07 fe       	sbrs	r0, 7
     43e:	0c c0       	rjmp	.+24     	; 0x458 <T_RESET+0x24>
     440:	e0 91 53 01 	lds	r30, 0x0153
     444:	f0 91 54 01 	lds	r31, 0x0154
     448:	02 80       	ldd	r0, Z+2	; 0x02
     44a:	f3 81       	ldd	r31, Z+3	; 0x03
     44c:	e0 2d       	mov	r30, r0
     44e:	82 81       	ldd	r24, Z+2	; 0x02
     450:	93 81       	ldd	r25, Z+3	; 0x03
     452:	a4 81       	ldd	r26, Z+4	; 0x04
     454:	b5 81       	ldd	r27, Z+5	; 0x05
     456:	08 c0       	rjmp	.+16     	; 0x468 <T_RESET+0x34>
     458:	80 91 72 01 	lds	r24, 0x0172
     45c:	90 91 73 01 	lds	r25, 0x0173
     460:	a0 91 74 01 	lds	r26, 0x0174
     464:	b0 91 75 01 	lds	r27, 0x0175
     468:	88 83       	st	Y, r24
     46a:	99 83       	std	Y+1, r25	; 0x01
     46c:	aa 83       	std	Y+2, r26	; 0x02
     46e:	bb 83       	std	Y+3, r27	; 0x03
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <T_SAMPLE>:

Time T_SAMPLE(Timer *t) {
     476:	dc 01       	movw	r26, r24
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	07 fe       	sbrs	r0, 7
     47c:	0c c0       	rjmp	.+24     	; 0x496 <T_SAMPLE+0x20>
     47e:	e0 91 53 01 	lds	r30, 0x0153
     482:	f0 91 54 01 	lds	r31, 0x0154
     486:	02 80       	ldd	r0, Z+2	; 0x02
     488:	f3 81       	ldd	r31, Z+3	; 0x03
     48a:	e0 2d       	mov	r30, r0
     48c:	22 81       	ldd	r18, Z+2	; 0x02
     48e:	33 81       	ldd	r19, Z+3	; 0x03
     490:	44 81       	ldd	r20, Z+4	; 0x04
     492:	55 81       	ldd	r21, Z+5	; 0x05
     494:	08 c0       	rjmp	.+16     	; 0x4a6 <T_SAMPLE+0x30>
     496:	20 91 72 01 	lds	r18, 0x0172
     49a:	30 91 73 01 	lds	r19, 0x0173
     49e:	40 91 74 01 	lds	r20, 0x0174
     4a2:	50 91 75 01 	lds	r21, 0x0175
     4a6:	8d 91       	ld	r24, X+
     4a8:	9d 91       	ld	r25, X+
     4aa:	0d 90       	ld	r0, X+
     4ac:	bc 91       	ld	r27, X
     4ae:	a0 2d       	mov	r26, r0
     4b0:	28 1b       	sub	r18, r24
     4b2:	39 0b       	sbc	r19, r25
     4b4:	4a 0b       	sbc	r20, r26
     4b6:	5b 0b       	sbc	r21, r27
}
     4b8:	b9 01       	movw	r22, r18
     4ba:	ca 01       	movw	r24, r20
     4bc:	08 95       	ret

000004be <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
    char status;
    Time now;
    DISABLE(status);
     4c6:	6f b7       	in	r22, 0x3f	; 63
     4c8:	f8 94       	cli
    TIMERGET(now);
     4ca:	40 91 76 01 	lds	r20, 0x0176
     4ce:	50 91 77 01 	lds	r21, 0x0177
     4d2:	20 91 84 00 	lds	r18, 0x0084
     4d6:	30 91 85 00 	lds	r19, 0x0085
     4da:	b0 99       	sbic	0x16, 0	; 22
     4dc:	10 c0       	rjmp	.+32     	; 0x4fe <CURRENT_OFFSET+0x40>
     4de:	ca 01       	movw	r24, r20
     4e0:	aa 27       	eor	r26, r26
     4e2:	97 fd       	sbrc	r25, 7
     4e4:	a0 95       	com	r26
     4e6:	ba 2f       	mov	r27, r26
     4e8:	8c 01       	movw	r16, r24
     4ea:	ff 24       	eor	r15, r15
     4ec:	ee 24       	eor	r14, r14
     4ee:	c9 01       	movw	r24, r18
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e8 2a       	or	r14, r24
     4f6:	f9 2a       	or	r15, r25
     4f8:	0a 2b       	or	r16, r26
     4fa:	1b 2b       	or	r17, r27
     4fc:	14 c0       	rjmp	.+40     	; 0x526 <__stack+0x27>
     4fe:	20 91 84 00 	lds	r18, 0x0084
     502:	30 91 85 00 	lds	r19, 0x0085
     506:	4f 5f       	subi	r20, 0xFF	; 255
     508:	5f 4f       	sbci	r21, 0xFF	; 255
     50a:	ca 01       	movw	r24, r20
     50c:	aa 27       	eor	r26, r26
     50e:	97 fd       	sbrc	r25, 7
     510:	a0 95       	com	r26
     512:	ba 2f       	mov	r27, r26
     514:	8c 01       	movw	r16, r24
     516:	ff 24       	eor	r15, r15
     518:	ee 24       	eor	r14, r14
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	e2 2a       	or	r14, r18
     520:	f3 2a       	or	r15, r19
     522:	04 2b       	or	r16, r20
     524:	15 2b       	or	r17, r21
    ENABLE(status);
     526:	67 ff       	sbrs	r22, 7
     528:	0d c0       	rjmp	.+26     	; 0x544 <__stack+0x45>
     52a:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
     52c:	e0 91 53 01 	lds	r30, 0x0153
     530:	f0 91 54 01 	lds	r31, 0x0154
     534:	02 80       	ldd	r0, Z+2	; 0x02
     536:	f3 81       	ldd	r31, Z+3	; 0x03
     538:	e0 2d       	mov	r30, r0
     53a:	82 81       	ldd	r24, Z+2	; 0x02
     53c:	93 81       	ldd	r25, Z+3	; 0x03
     53e:	a4 81       	ldd	r26, Z+4	; 0x04
     540:	b5 81       	ldd	r27, Z+5	; 0x05
     542:	08 c0       	rjmp	.+16     	; 0x554 <__stack+0x55>
     544:	80 91 72 01 	lds	r24, 0x0172
     548:	90 91 73 01 	lds	r25, 0x0173
     54c:	a0 91 74 01 	lds	r26, 0x0174
     550:	b0 91 75 01 	lds	r27, 0x0175
     554:	a8 01       	movw	r20, r16
     556:	97 01       	movw	r18, r14
     558:	28 1b       	sub	r18, r24
     55a:	39 0b       	sbc	r19, r25
     55c:	4a 0b       	sbc	r20, r26
     55e:	5b 0b       	sbc	r21, r27
}
     560:	b9 01       	movw	r22, r18
     562:	ca 01       	movw	r24, r20
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	08 95       	ret

0000056e <install>:
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
    if (i >= 0 && i < N_VECTORS) {
     574:	42 31       	cpi	r20, 0x12	; 18
     576:	b0 f4       	brcc	.+44     	; 0x5a4 <install+0x36>
        char status;
        DISABLE(status);
     578:	2f b7       	in	r18, 0x3f	; 63
     57a:	f8 94       	cli
        otable[i] = obj;
     57c:	e4 2f       	mov	r30, r20
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	ee 0f       	add	r30, r30
     582:	ff 1f       	adc	r31, r31
     584:	df 01       	movw	r26, r30
     586:	a8 58       	subi	r26, 0x88	; 136
     588:	be 4f       	sbci	r27, 0xFE	; 254
     58a:	cd 93       	st	X+, r28
     58c:	dc 93       	st	X, r29
        mtable[i] = m;
     58e:	e0 5f       	subi	r30, 0xF0	; 240
     590:	fd 4f       	sbci	r31, 0xFD	; 253
     592:	71 83       	std	Z+1, r23	; 0x01
     594:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9b 83       	std	Y+3, r25	; 0x03
     59c:	8a 83       	std	Y+2, r24	; 0x02
        ENABLE(status);
     59e:	27 ff       	sbrs	r18, 7
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <install+0x36>
     5a2:	78 94       	sei
    }
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     5aa:	df 93       	push	r29
     5ac:	cf 93       	push	r28
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <initialize+0x6>
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <initialize+0x8>
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <initialize+0xa>
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	81 e6       	ldi	r24, 0x61	; 97
     5ba:	92 e0       	ldi	r25, 0x02	; 2
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     5bc:	21 e4       	ldi	r18, 0x41	; 65
     5be:	33 e0       	ldi	r19, 0x03	; 3
        messages[i].next = &messages[i+1];
     5c0:	fc 01       	movw	r30, r24
     5c2:	70 97       	sbiw	r30, 0x10	; 16
     5c4:	91 83       	std	Z+1, r25	; 0x01
     5c6:	80 83       	st	Z, r24
     5c8:	40 96       	adiw	r24, 0x10	; 16
static void initialize(void) {
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     5ca:	82 17       	cp	r24, r18
     5cc:	93 07       	cpc	r25, r19
     5ce:	c1 f7       	brne	.-16     	; 0x5c0 <initialize+0x16>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     5d0:	10 92 32 03 	sts	0x0332, r1
     5d4:	10 92 31 03 	sts	0x0331, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     5d8:	89 eb       	ldi	r24, 0xB9	; 185
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	90 93 9d 01 	sts	0x019D, r25
     5e0:	80 93 9c 01 	sts	0x019C, r24
     5e4:	4d 96       	adiw	r24, 0x1d	; 29
     5e6:	90 93 ba 01 	sts	0x01BA, r25
     5ea:	80 93 b9 01 	sts	0x01B9, r24
     5ee:	ca 97       	sbiw	r24, 0x3a	; 58
     5f0:	23 ef       	ldi	r18, 0xF3	; 243
     5f2:	31 e0       	ldi	r19, 0x01	; 1
     5f4:	30 93 d7 01 	sts	0x01D7, r19
     5f8:	20 93 d6 01 	sts	0x01D6, r18
    threads[NTHREADS-1].next = NULL;
     5fc:	10 92 f4 01 	sts	0x01F4, r1
     600:	10 92 f3 01 	sts	0x01F3, r1
     604:	2d e9       	ldi	r18, 0x9D	; 157
     606:	33 e0       	ldi	r19, 0x03	; 3
     608:	3c 83       	std	Y+4, r19	; 0x04
     60a:	2b 83       	std	Y+3, r18	; 0x03
     60c:	ac 01       	movw	r20, r24
     60e:	4c 5f       	subi	r20, 0xFC	; 252
     610:	5f 4f       	sbci	r21, 0xFF	; 255
     612:	5a 83       	std	Y+2, r21	; 0x02
     614:	49 83       	std	Y+1, r20	; 0x01
     616:	1e 82       	std	Y+6, r1	; 0x06
     618:	1d 82       	std	Y+5, r1	; 0x05
    
    for (i=0; i<NTHREADS; i++) {
        setjmp( threads[i].context );
     61a:	ad 81       	ldd	r26, Y+5	; 0x05
     61c:	be 81       	ldd	r27, Y+6	; 0x06
     61e:	ed e1       	ldi	r30, 0x1D	; 29
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	ae 9f       	mul	r26, r30
     624:	c0 01       	movw	r24, r0
     626:	af 9f       	mul	r26, r31
     628:	90 0d       	add	r25, r0
     62a:	be 9f       	mul	r27, r30
     62c:	90 0d       	add	r25, r0
     62e:	11 24       	eor	r1, r1
     630:	06 96       	adiw	r24, 0x06	; 6
     632:	84 56       	subi	r24, 0x64	; 100
     634:	9e 4f       	sbci	r25, 0xFE	; 254
     636:	0e 94 25 12 	call	0x244a	; 0x244a <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     63a:	2d 81       	ldd	r18, Y+5	; 0x05
     63c:	3e 81       	ldd	r19, Y+6	; 0x06
     63e:	4d e1       	ldi	r20, 0x1D	; 29
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	24 9f       	mul	r18, r20
     644:	f0 01       	movw	r30, r0
     646:	25 9f       	mul	r18, r21
     648:	f0 0d       	add	r31, r0
     64a:	34 9f       	mul	r19, r20
     64c:	f0 0d       	add	r31, r0
     64e:	11 24       	eor	r1, r1
     650:	36 96       	adiw	r30, 0x06	; 6
     652:	e4 56       	subi	r30, 0x64	; 100
     654:	fe 4f       	sbci	r31, 0xFE	; 254
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	9c 81       	ldd	r25, Y+4	; 0x04
     65a:	91 8b       	std	Z+17, r25	; 0x11
     65c:	80 8b       	std	Z+16, r24	; 0x10
     65e:	93 8b       	std	Z+19, r25	; 0x13
     660:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     662:	ac ef       	ldi	r26, 0xFC	; 252
     664:	bc e0       	ldi	r27, 0x0C	; 12
     666:	b6 8b       	std	Z+22, r27	; 0x16
     668:	a5 8b       	std	Z+21, r26	; 0x15
        threads[i].waitsFor = NULL;
     66a:	e9 81       	ldd	r30, Y+1	; 0x01
     66c:	fa 81       	ldd	r31, Y+2	; 0x02
     66e:	11 82       	std	Z+1, r1	; 0x01
     670:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     672:	2f 5f       	subi	r18, 0xFF	; 255
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	3e 83       	std	Y+6, r19	; 0x06
     678:	2d 83       	std	Y+5, r18	; 0x05
     67a:	80 5a       	subi	r24, 0xA0	; 160
     67c:	9f 4f       	sbci	r25, 0xFF	; 255
     67e:	9c 83       	std	Y+4, r25	; 0x04
     680:	8b 83       	std	Y+3, r24	; 0x03
     682:	7d 96       	adiw	r30, 0x1d	; 29
     684:	fa 83       	std	Y+2, r31	; 0x02
     686:	e9 83       	std	Y+1, r30	; 0x01
     688:	24 30       	cpi	r18, 0x04	; 4
     68a:	31 05       	cpc	r19, r1
     68c:	31 f6       	brne	.-116    	; 0x61a <initialize+0x70>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     68e:	10 92 35 02 	sts	0x0235, r1
     692:	10 92 34 02 	sts	0x0234, r1
    thread0.waitsFor = NULL;
     696:	10 92 39 02 	sts	0x0239, r1
     69a:	10 92 38 02 	sts	0x0238, r1
    thread0.msg = NULL;
     69e:	10 92 37 02 	sts	0x0237, r1
     6a2:	10 92 36 02 	sts	0x0236, r1
     6a6:	e8 e1       	ldi	r30, 0x18	; 24
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <initialize+0x104>
#include <avr/io.h>
void DUMPC(char);

void DUMP(char *s) {
  while (*s)
    DUMPC(*s++);
     6ac:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"
#include <avr/io.h>
void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     6ae:	80 81       	ld	r24, Z
     6b0:	88 23       	and	r24, r24
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <initialize+0x102>
     6b4:	e6 e2       	ldi	r30, 0x26	; 38
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <initialize+0x112>
    DUMPC(*s++);
     6ba:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"
#include <avr/io.h>
void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     6bc:	80 81       	ld	r24, Z
     6be:	88 23       	and	r24, r24
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <initialize+0x110>
     6c2:	e9 e3       	ldi	r30, 0x39	; 57
     6c4:	f1 e0       	ldi	r31, 0x01	; 1
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <initialize+0x120>
    DUMPC(*s++);
     6c8:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"
#include <avr/io.h>
void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     6ca:	80 81       	ld	r24, Z
     6cc:	88 23       	and	r24, r24
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <initialize+0x11e>
    thread0.msg = NULL;
    
    DUMP("\n\rTinyTimber ");
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
     6d0:	e1 e6       	ldi	r30, 0x61	; 97
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 e8       	ldi	r24, 0x80	; 128
     6d6:	80 83       	st	Z, r24
     6d8:	10 82       	st	Z, r1
     6da:	10 92 85 00 	sts	0x0085, r1
     6de:	10 92 84 00 	sts	0x0084, r1
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	80 93 81 00 	sts	0x0081, r24
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 6f 00 	sts	0x006F, r24
}
     6ee:	26 96       	adiw	r28, 0x06	; 6
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	08 95       	ret

00000700 <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     700:	df 93       	push	r29
     702:	cf 93       	push	r28
     704:	00 d0       	rcall	.+0      	; 0x706 <dispatch+0x6>
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	9a 83       	std	Y+2, r25	; 0x02
     70c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     70e:	80 91 53 01 	lds	r24, 0x0153
     712:	90 91 54 01 	lds	r25, 0x0154
     716:	06 96       	adiw	r24, 0x06	; 6
     718:	0e 94 25 12 	call	0x244a	; 0x244a <setjmp>
     71c:	89 2b       	or	r24, r25
     71e:	59 f4       	brne	.+22     	; 0x736 <dispatch+0x36>
        current = next;
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	90 93 54 01 	sts	0x0154, r25
     728:	80 93 53 01 	sts	0x0153, r24
        longjmp( next->context, 1 );
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	06 96       	adiw	r24, 0x06	; 6
     732:	0e 94 45 12 	call	0x248a	; 0x248a <longjmp>
    }
}
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	08 95       	ret

00000740 <schedule>:
    while (1) {
        SLEEP();
    }
}

static void schedule(void) {
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
    Msg topMsg = activeStack->msg;
     744:	60 91 51 01 	lds	r22, 0x0151
     748:	70 91 52 01 	lds	r23, 0x0152
     74c:	fb 01       	movw	r30, r22
     74e:	c2 81       	ldd	r28, Z+2	; 0x02
     750:	d3 81       	ldd	r29, Z+3	; 0x03
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     752:	a0 91 6e 01 	lds	r26, 0x016E
     756:	b0 91 6f 01 	lds	r27, 0x016F
     75a:	10 97       	sbiw	r26, 0x00	; 0
     75c:	39 f1       	breq	.+78     	; 0x7ac <schedule+0x6c>
     75e:	e0 91 4f 01 	lds	r30, 0x014F
     762:	f0 91 50 01 	lds	r31, 0x0150
     766:	30 97       	sbiw	r30, 0x00	; 0
     768:	09 f1       	breq	.+66     	; 0x7ac <schedule+0x6c>
     76a:	20 97       	sbiw	r28, 0x00	; 0
     76c:	81 f0       	breq	.+32     	; 0x78e <schedule+0x4e>
     76e:	16 96       	adiw	r26, 0x06	; 6
     770:	8d 91       	ld	r24, X+
     772:	9d 91       	ld	r25, X+
     774:	0d 90       	ld	r0, X+
     776:	bc 91       	ld	r27, X
     778:	a0 2d       	mov	r26, r0
     77a:	2e 81       	ldd	r18, Y+6	; 0x06
     77c:	3f 81       	ldd	r19, Y+7	; 0x07
     77e:	48 85       	ldd	r20, Y+8	; 0x08
     780:	59 85       	ldd	r21, Y+9	; 0x09
     782:	82 1b       	sub	r24, r18
     784:	93 0b       	sbc	r25, r19
     786:	a4 0b       	sbc	r26, r20
     788:	b5 0b       	sbc	r27, r21
     78a:	b7 ff       	sbrs	r27, 7
     78c:	0f c0       	rjmp	.+30     	; 0x7ac <schedule+0x6c>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
     78e:	80 81       	ld	r24, Z
     790:	91 81       	ldd	r25, Z+1	; 0x01
     792:	90 93 50 01 	sts	0x0150, r25
     796:	80 93 4f 01 	sts	0x014F, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
     79a:	71 83       	std	Z+1, r23	; 0x01
     79c:	60 83       	st	Z, r22
    *stack = t;
     79e:	f0 93 52 01 	sts	0x0152, r31
     7a2:	e0 93 51 01 	sts	0x0151, r30

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
        push(pop(&threadPool), &activeStack);
        dispatch(activeStack);
     7a6:	cf 01       	movw	r24, r30
     7a8:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
    }
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <tinytimber>:
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
        ENABLE(status);
    }
}

int tinytimber(Object *obj, Method m, int arg) {
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	7c 01       	movw	r14, r24
     7c0:	eb 01       	movw	r28, r22
     7c2:	8a 01       	movw	r16, r20
    char status;
    DISABLE(status);
     7c4:	8f b7       	in	r24, 0x3f	; 63
     7c6:	f8 94       	cli
    initialize();
     7c8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <initialize>
    ENABLE(1);
     7cc:	78 94       	sei
    if (m != NULL)
     7ce:	20 97       	sbiw	r28, 0x00	; 0
     7d0:	21 f0       	breq	.+8      	; 0x7da <tinytimber+0x28>
        m(obj, arg);
     7d2:	b8 01       	movw	r22, r16
     7d4:	c7 01       	movw	r24, r14
     7d6:	fe 01       	movw	r30, r28
     7d8:	09 95       	icall
    DISABLE(status);
     7da:	8f b7       	in	r24, 0x3f	; 63
     7dc:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
     7de:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    ENABLE(1);
     7e2:	78 94       	sei
    while (1) {
        SLEEP();
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	83 bf       	out	0x33, r24	; 51
     7e8:	88 95       	sleep
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <tinytimber+0x34>

000007ec <__vector_7>:
    TIMER_OCLR();
    overflows++;
    TIMERSET(timerQ);
}

TIMER_COMPARE_INTERRUPT {
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	8f 92       	push	r8
     7f8:	9f 92       	push	r9
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ef 93       	push	r30
     824:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
     826:	c0 90 76 01 	lds	r12, 0x0176
     82a:	d0 90 77 01 	lds	r13, 0x0177
     82e:	20 91 84 00 	lds	r18, 0x0084
     832:	30 91 85 00 	lds	r19, 0x0085
     836:	b0 99       	sbic	0x16, 0	; 22
     838:	0a c0       	rjmp	.+20     	; 0x84e <__vector_7+0x62>
     83a:	c6 01       	movw	r24, r12
     83c:	aa 27       	eor	r26, r26
     83e:	97 fd       	sbrc	r25, 7
     840:	a0 95       	com	r26
     842:	ba 2f       	mov	r27, r26
     844:	8c 01       	movw	r16, r24
     846:	ff 24       	eor	r15, r15
     848:	ee 24       	eor	r14, r14
     84a:	c9 01       	movw	r24, r18
     84c:	12 c0       	rjmp	.+36     	; 0x872 <__vector_7+0x86>
     84e:	80 91 84 00 	lds	r24, 0x0084
     852:	90 91 85 00 	lds	r25, 0x0085
     856:	08 94       	sec
     858:	c1 1c       	adc	r12, r1
     85a:	d1 1c       	adc	r13, r1
     85c:	96 01       	movw	r18, r12
     85e:	44 27       	eor	r20, r20
     860:	37 fd       	sbrc	r19, 7
     862:	40 95       	com	r20
     864:	54 2f       	mov	r21, r20
     866:	08 94       	sec
     868:	c1 08       	sbc	r12, r1
     86a:	d1 08       	sbc	r13, r1
     86c:	89 01       	movw	r16, r18
     86e:	ff 24       	eor	r15, r15
     870:	ee 24       	eor	r14, r14
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	e8 2a       	or	r14, r24
     878:	f9 2a       	or	r15, r25
     87a:	0a 2b       	or	r16, r26
     87c:	1b 2b       	or	r17, r27
     87e:	b0 90 6e 01 	lds	r11, 0x016E
     882:	a0 90 6f 01 	lds	r10, 0x016F
     886:	c0 91 70 01 	lds	r28, 0x0170
     88a:	d0 91 71 01 	lds	r29, 0x0171
     88e:	2c c0       	rjmp	.+88     	; 0x8e8 <__vector_7+0xfc>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
     890:	98 80       	ld	r9, Y
     892:	89 80       	ldd	r8, Y+1	; 0x01
     894:	8b 2d       	mov	r24, r11
     896:	9a 2d       	mov	r25, r10
     898:	9c 01       	movw	r18, r24
     89a:	f9 01       	movw	r30, r18
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <__vector_7+0xc0>
/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
     8a2:	bf 01       	movw	r22, r30
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	9c 01       	movw	r18, r24
     8aa:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
     8ac:	30 97       	sbiw	r30, 0x00	; 0
     8ae:	69 f0       	breq	.+26     	; 0x8ca <__vector_7+0xde>
     8b0:	26 81       	ldd	r18, Z+6	; 0x06
     8b2:	37 81       	ldd	r19, Z+7	; 0x07
     8b4:	40 85       	ldd	r20, Z+8	; 0x08
     8b6:	51 85       	ldd	r21, Z+9	; 0x09
     8b8:	8e 81       	ldd	r24, Y+6	; 0x06
     8ba:	9f 81       	ldd	r25, Y+7	; 0x07
     8bc:	a8 85       	ldd	r26, Y+8	; 0x08
     8be:	b9 85       	ldd	r27, Y+9	; 0x09
     8c0:	82 17       	cp	r24, r18
     8c2:	93 07       	cpc	r25, r19
     8c4:	a4 07       	cpc	r26, r20
     8c6:	b5 07       	cpc	r27, r21
     8c8:	64 f7       	brge	.-40     	; 0x8a2 <__vector_7+0xb6>
        prev = q;
        q = q->next;
    }
    p->next = q;
     8ca:	f9 83       	std	Y+1, r31	; 0x01
     8cc:	e8 83       	st	Y, r30
    if (prev == NULL)
     8ce:	61 15       	cp	r22, r1
     8d0:	71 05       	cpc	r23, r1
     8d2:	19 f4       	brne	.+6      	; 0x8da <__vector_7+0xee>
     8d4:	bc 2e       	mov	r11, r28
     8d6:	ad 2e       	mov	r10, r29
     8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <__vector_7+0xf4>
        *queue = p;
    else
        prev->next = p;
     8da:	fb 01       	movw	r30, r22
     8dc:	d1 83       	std	Z+1, r29	; 0x01
     8de:	c0 83       	st	Z, r28
     8e0:	89 2d       	mov	r24, r9
     8e2:	98 2d       	mov	r25, r8
     8e4:	9c 01       	movw	r18, r24
     8e6:	e9 01       	movw	r28, r18

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
     8e8:	20 97       	sbiw	r28, 0x00	; 0
     8ea:	41 f1       	breq	.+80     	; 0x93c <__vector_7+0x150>
     8ec:	2a 81       	ldd	r18, Y+2	; 0x02
     8ee:	3b 81       	ldd	r19, Y+3	; 0x03
     8f0:	4c 81       	ldd	r20, Y+4	; 0x04
     8f2:	5d 81       	ldd	r21, Y+5	; 0x05
     8f4:	da 01       	movw	r26, r20
     8f6:	c9 01       	movw	r24, r18
     8f8:	8e 19       	sub	r24, r14
     8fa:	9f 09       	sbc	r25, r15
     8fc:	a0 0b       	sbc	r26, r16
     8fe:	b1 0b       	sbc	r27, r17
     900:	18 16       	cp	r1, r24
     902:	19 06       	cpc	r1, r25
     904:	1a 06       	cpc	r1, r26
     906:	1b 06       	cpc	r1, r27
     908:	1c f6       	brge	.-122    	; 0x890 <__vector_7+0xa4>
     90a:	44 c0       	rjmp	.+136    	; 0x994 <__vector_7+0x1a8>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     90c:	80 91 84 00 	lds	r24, 0x0084
     910:	90 91 85 00 	lds	r25, 0x0085
     914:	80 95       	com	r24
     916:	90 95       	com	r25
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	89 2b       	or	r24, r25
     91e:	31 f4       	brne	.+12     	; 0x92c <__vector_7+0x140>
     920:	20 91 84 00 	lds	r18, 0x0084
     924:	30 91 85 00 	lds	r19, 0x0085
     928:	2f 5f       	subi	r18, 0xFF	; 255
     92a:	3f 4f       	sbci	r19, 0xFF	; 255
     92c:	30 93 89 00 	sts	0x0089, r19
     930:	20 93 88 00 	sts	0x0088, r18
     934:	80 91 6f 00 	lds	r24, 0x006F
     938:	82 60       	ori	r24, 0x02	; 2
     93a:	0b c0       	rjmp	.+22     	; 0x952 <__vector_7+0x166>
     93c:	b0 92 6e 01 	sts	0x016E, r11
     940:	a0 92 6f 01 	sts	0x016F, r10
     944:	10 92 71 01 	sts	0x0171, r1
     948:	10 92 70 01 	sts	0x0170, r1
     94c:	80 91 6f 00 	lds	r24, 0x006F
     950:	8d 7f       	andi	r24, 0xFD	; 253
     952:	80 93 6f 00 	sts	0x006F, r24
    schedule();
     956:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
}
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	7f 91       	pop	r23
     96c:	6f 91       	pop	r22
     96e:	5f 91       	pop	r21
     970:	4f 91       	pop	r20
     972:	3f 91       	pop	r19
     974:	2f 91       	pop	r18
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	df 90       	pop	r13
     980:	cf 90       	pop	r12
     982:	bf 90       	pop	r11
     984:	af 90       	pop	r10
     986:	9f 90       	pop	r9
     988:	8f 90       	pop	r8
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti
     994:	b0 92 6e 01 	sts	0x016E, r11
     998:	a0 92 6f 01 	sts	0x016F, r10
     99c:	d0 93 71 01 	sts	0x0171, r29
     9a0:	c0 93 70 01 	sts	0x0170, r28
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     9a4:	ca 01       	movw	r24, r20
     9a6:	bb 27       	eor	r27, r27
     9a8:	97 fd       	sbrc	r25, 7
     9aa:	b0 95       	com	r27
     9ac:	ab 2f       	mov	r26, r27
     9ae:	c8 16       	cp	r12, r24
     9b0:	d9 06       	cpc	r13, r25
     9b2:	61 f6       	brne	.-104    	; 0x94c <__vector_7+0x160>
     9b4:	ab cf       	rjmp	.-170    	; 0x90c <__vector_7+0x120>

000009b6 <__vector_22>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
IRQ(IRQ_LCD,             LCD_vect);
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
     9d8:	60 91 76 01 	lds	r22, 0x0176
     9dc:	70 91 77 01 	lds	r23, 0x0177
     9e0:	20 91 84 00 	lds	r18, 0x0084
     9e4:	30 91 85 00 	lds	r19, 0x0085
     9e8:	cb 01       	movw	r24, r22
     9ea:	aa 27       	eor	r26, r26
     9ec:	97 fd       	sbrc	r25, 7
     9ee:	a0 95       	com	r26
     9f0:	ba 2f       	mov	r27, r26
     9f2:	dc 01       	movw	r26, r24
     9f4:	99 27       	eor	r25, r25
     9f6:	88 27       	eor	r24, r24
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	82 2b       	or	r24, r18
     9fe:	93 2b       	or	r25, r19
     a00:	a4 2b       	or	r26, r20
     a02:	b5 2b       	or	r27, r21
     a04:	80 93 72 01 	sts	0x0172, r24
     a08:	90 93 73 01 	sts	0x0173, r25
     a0c:	a0 93 74 01 	sts	0x0174, r26
     a10:	b0 93 75 01 	sts	0x0175, r27
     a14:	b0 9b       	sbis	0x16, 0	; 22
     a16:	1c c0       	rjmp	.+56     	; 0xa50 <__vector_22+0x9a>
     a18:	20 91 84 00 	lds	r18, 0x0084
     a1c:	30 91 85 00 	lds	r19, 0x0085
     a20:	6f 5f       	subi	r22, 0xFF	; 255
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	cb 01       	movw	r24, r22
     a26:	aa 27       	eor	r26, r26
     a28:	97 fd       	sbrc	r25, 7
     a2a:	a0 95       	com	r26
     a2c:	ba 2f       	mov	r27, r26
     a2e:	dc 01       	movw	r26, r24
     a30:	99 27       	eor	r25, r25
     a32:	88 27       	eor	r24, r24
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	82 2b       	or	r24, r18
     a3a:	93 2b       	or	r25, r19
     a3c:	a4 2b       	or	r26, r20
     a3e:	b5 2b       	or	r27, r21
     a40:	80 93 72 01 	sts	0x0172, r24
     a44:	90 93 73 01 	sts	0x0173, r25
     a48:	a0 93 74 01 	sts	0x0174, r26
     a4c:	b0 93 75 01 	sts	0x0175, r27
     a50:	e0 91 32 02 	lds	r30, 0x0232
     a54:	f0 91 33 02 	lds	r31, 0x0233
     a58:	30 97       	sbiw	r30, 0x00	; 0
     a5a:	39 f0       	breq	.+14     	; 0xa6a <__vector_22+0xb4>
     a5c:	61 e1       	ldi	r22, 0x11	; 17
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 91 9a 01 	lds	r24, 0x019A
     a64:	90 91 9b 01 	lds	r25, 0x019B
     a68:	09 95       	icall
     a6a:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <__vector_21>:
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	60 91 76 01 	lds	r22, 0x0176
     ab6:	70 91 77 01 	lds	r23, 0x0177
     aba:	20 91 84 00 	lds	r18, 0x0084
     abe:	30 91 85 00 	lds	r19, 0x0085
     ac2:	cb 01       	movw	r24, r22
     ac4:	aa 27       	eor	r26, r26
     ac6:	97 fd       	sbrc	r25, 7
     ac8:	a0 95       	com	r26
     aca:	ba 2f       	mov	r27, r26
     acc:	dc 01       	movw	r26, r24
     ace:	99 27       	eor	r25, r25
     ad0:	88 27       	eor	r24, r24
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	82 2b       	or	r24, r18
     ad8:	93 2b       	or	r25, r19
     ada:	a4 2b       	or	r26, r20
     adc:	b5 2b       	or	r27, r21
     ade:	80 93 72 01 	sts	0x0172, r24
     ae2:	90 93 73 01 	sts	0x0173, r25
     ae6:	a0 93 74 01 	sts	0x0174, r26
     aea:	b0 93 75 01 	sts	0x0175, r27
     aee:	b0 9b       	sbis	0x16, 0	; 22
     af0:	1c c0       	rjmp	.+56     	; 0xb2a <__vector_21+0x9a>
     af2:	20 91 84 00 	lds	r18, 0x0084
     af6:	30 91 85 00 	lds	r19, 0x0085
     afa:	6f 5f       	subi	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	cb 01       	movw	r24, r22
     b00:	aa 27       	eor	r26, r26
     b02:	97 fd       	sbrc	r25, 7
     b04:	a0 95       	com	r26
     b06:	ba 2f       	mov	r27, r26
     b08:	dc 01       	movw	r26, r24
     b0a:	99 27       	eor	r25, r25
     b0c:	88 27       	eor	r24, r24
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	82 2b       	or	r24, r18
     b14:	93 2b       	or	r25, r19
     b16:	a4 2b       	or	r26, r20
     b18:	b5 2b       	or	r27, r21
     b1a:	80 93 72 01 	sts	0x0172, r24
     b1e:	90 93 73 01 	sts	0x0173, r25
     b22:	a0 93 74 01 	sts	0x0174, r26
     b26:	b0 93 75 01 	sts	0x0175, r27
     b2a:	e0 91 30 02 	lds	r30, 0x0230
     b2e:	f0 91 31 02 	lds	r31, 0x0231
     b32:	30 97       	sbiw	r30, 0x00	; 0
     b34:	39 f0       	breq	.+14     	; 0xb44 <__vector_21+0xb4>
     b36:	60 e1       	ldi	r22, 0x10	; 16
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 91 98 01 	lds	r24, 0x0198
     b3e:	90 91 99 01 	lds	r25, 0x0199
     b42:	09 95       	icall
     b44:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <__vector_20>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	60 91 76 01 	lds	r22, 0x0176
     b90:	70 91 77 01 	lds	r23, 0x0177
     b94:	20 91 84 00 	lds	r18, 0x0084
     b98:	30 91 85 00 	lds	r19, 0x0085
     b9c:	cb 01       	movw	r24, r22
     b9e:	aa 27       	eor	r26, r26
     ba0:	97 fd       	sbrc	r25, 7
     ba2:	a0 95       	com	r26
     ba4:	ba 2f       	mov	r27, r26
     ba6:	dc 01       	movw	r26, r24
     ba8:	99 27       	eor	r25, r25
     baa:	88 27       	eor	r24, r24
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	82 2b       	or	r24, r18
     bb2:	93 2b       	or	r25, r19
     bb4:	a4 2b       	or	r26, r20
     bb6:	b5 2b       	or	r27, r21
     bb8:	80 93 72 01 	sts	0x0172, r24
     bbc:	90 93 73 01 	sts	0x0173, r25
     bc0:	a0 93 74 01 	sts	0x0174, r26
     bc4:	b0 93 75 01 	sts	0x0175, r27
     bc8:	b0 9b       	sbis	0x16, 0	; 22
     bca:	1c c0       	rjmp	.+56     	; 0xc04 <__vector_20+0x9a>
     bcc:	20 91 84 00 	lds	r18, 0x0084
     bd0:	30 91 85 00 	lds	r19, 0x0085
     bd4:	6f 5f       	subi	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	cb 01       	movw	r24, r22
     bda:	aa 27       	eor	r26, r26
     bdc:	97 fd       	sbrc	r25, 7
     bde:	a0 95       	com	r26
     be0:	ba 2f       	mov	r27, r26
     be2:	dc 01       	movw	r26, r24
     be4:	99 27       	eor	r25, r25
     be6:	88 27       	eor	r24, r24
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	82 2b       	or	r24, r18
     bee:	93 2b       	or	r25, r19
     bf0:	a4 2b       	or	r26, r20
     bf2:	b5 2b       	or	r27, r21
     bf4:	80 93 72 01 	sts	0x0172, r24
     bf8:	90 93 73 01 	sts	0x0173, r25
     bfc:	a0 93 74 01 	sts	0x0174, r26
     c00:	b0 93 75 01 	sts	0x0175, r27
     c04:	e0 91 2e 02 	lds	r30, 0x022E
     c08:	f0 91 2f 02 	lds	r31, 0x022F
     c0c:	30 97       	sbiw	r30, 0x00	; 0
     c0e:	39 f0       	breq	.+14     	; 0xc1e <__vector_20+0xb4>
     c10:	6f e0       	ldi	r22, 0x0F	; 15
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	80 91 96 01 	lds	r24, 0x0196
     c18:	90 91 97 01 	lds	r25, 0x0197
     c1c:	09 95       	icall
     c1e:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <__vector_19>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
     c66:	60 91 76 01 	lds	r22, 0x0176
     c6a:	70 91 77 01 	lds	r23, 0x0177
     c6e:	20 91 84 00 	lds	r18, 0x0084
     c72:	30 91 85 00 	lds	r19, 0x0085
     c76:	cb 01       	movw	r24, r22
     c78:	aa 27       	eor	r26, r26
     c7a:	97 fd       	sbrc	r25, 7
     c7c:	a0 95       	com	r26
     c7e:	ba 2f       	mov	r27, r26
     c80:	dc 01       	movw	r26, r24
     c82:	99 27       	eor	r25, r25
     c84:	88 27       	eor	r24, r24
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	82 2b       	or	r24, r18
     c8c:	93 2b       	or	r25, r19
     c8e:	a4 2b       	or	r26, r20
     c90:	b5 2b       	or	r27, r21
     c92:	80 93 72 01 	sts	0x0172, r24
     c96:	90 93 73 01 	sts	0x0173, r25
     c9a:	a0 93 74 01 	sts	0x0174, r26
     c9e:	b0 93 75 01 	sts	0x0175, r27
     ca2:	b0 9b       	sbis	0x16, 0	; 22
     ca4:	1c c0       	rjmp	.+56     	; 0xcde <__vector_19+0x9a>
     ca6:	20 91 84 00 	lds	r18, 0x0084
     caa:	30 91 85 00 	lds	r19, 0x0085
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	cb 01       	movw	r24, r22
     cb4:	aa 27       	eor	r26, r26
     cb6:	97 fd       	sbrc	r25, 7
     cb8:	a0 95       	com	r26
     cba:	ba 2f       	mov	r27, r26
     cbc:	dc 01       	movw	r26, r24
     cbe:	99 27       	eor	r25, r25
     cc0:	88 27       	eor	r24, r24
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	82 2b       	or	r24, r18
     cc8:	93 2b       	or	r25, r19
     cca:	a4 2b       	or	r26, r20
     ccc:	b5 2b       	or	r27, r21
     cce:	80 93 72 01 	sts	0x0172, r24
     cd2:	90 93 73 01 	sts	0x0173, r25
     cd6:	a0 93 74 01 	sts	0x0174, r26
     cda:	b0 93 75 01 	sts	0x0175, r27
     cde:	e0 91 2c 02 	lds	r30, 0x022C
     ce2:	f0 91 2d 02 	lds	r31, 0x022D
     ce6:	30 97       	sbiw	r30, 0x00	; 0
     ce8:	39 f0       	breq	.+14     	; 0xcf8 <__vector_19+0xb4>
     cea:	6e e0       	ldi	r22, 0x0E	; 14
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 91 94 01 	lds	r24, 0x0194
     cf2:	90 91 95 01 	lds	r25, 0x0195
     cf6:	09 95       	icall
     cf8:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_18>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	2f 93       	push	r18
     d2a:	3f 93       	push	r19
     d2c:	4f 93       	push	r20
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
     d40:	60 91 76 01 	lds	r22, 0x0176
     d44:	70 91 77 01 	lds	r23, 0x0177
     d48:	20 91 84 00 	lds	r18, 0x0084
     d4c:	30 91 85 00 	lds	r19, 0x0085
     d50:	cb 01       	movw	r24, r22
     d52:	aa 27       	eor	r26, r26
     d54:	97 fd       	sbrc	r25, 7
     d56:	a0 95       	com	r26
     d58:	ba 2f       	mov	r27, r26
     d5a:	dc 01       	movw	r26, r24
     d5c:	99 27       	eor	r25, r25
     d5e:	88 27       	eor	r24, r24
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	82 2b       	or	r24, r18
     d66:	93 2b       	or	r25, r19
     d68:	a4 2b       	or	r26, r20
     d6a:	b5 2b       	or	r27, r21
     d6c:	80 93 72 01 	sts	0x0172, r24
     d70:	90 93 73 01 	sts	0x0173, r25
     d74:	a0 93 74 01 	sts	0x0174, r26
     d78:	b0 93 75 01 	sts	0x0175, r27
     d7c:	b0 9b       	sbis	0x16, 0	; 22
     d7e:	1c c0       	rjmp	.+56     	; 0xdb8 <__vector_18+0x9a>
     d80:	20 91 84 00 	lds	r18, 0x0084
     d84:	30 91 85 00 	lds	r19, 0x0085
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	cb 01       	movw	r24, r22
     d8e:	aa 27       	eor	r26, r26
     d90:	97 fd       	sbrc	r25, 7
     d92:	a0 95       	com	r26
     d94:	ba 2f       	mov	r27, r26
     d96:	dc 01       	movw	r26, r24
     d98:	99 27       	eor	r25, r25
     d9a:	88 27       	eor	r24, r24
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	82 2b       	or	r24, r18
     da2:	93 2b       	or	r25, r19
     da4:	a4 2b       	or	r26, r20
     da6:	b5 2b       	or	r27, r21
     da8:	80 93 72 01 	sts	0x0172, r24
     dac:	90 93 73 01 	sts	0x0173, r25
     db0:	a0 93 74 01 	sts	0x0174, r26
     db4:	b0 93 75 01 	sts	0x0175, r27
     db8:	e0 91 2a 02 	lds	r30, 0x022A
     dbc:	f0 91 2b 02 	lds	r31, 0x022B
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <__vector_18+0xb4>
     dc4:	6d e0       	ldi	r22, 0x0D	; 13
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 91 92 01 	lds	r24, 0x0192
     dcc:	90 91 93 01 	lds	r25, 0x0193
     dd0:	09 95       	icall
     dd2:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_17>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
     e1a:	60 91 76 01 	lds	r22, 0x0176
     e1e:	70 91 77 01 	lds	r23, 0x0177
     e22:	20 91 84 00 	lds	r18, 0x0084
     e26:	30 91 85 00 	lds	r19, 0x0085
     e2a:	cb 01       	movw	r24, r22
     e2c:	aa 27       	eor	r26, r26
     e2e:	97 fd       	sbrc	r25, 7
     e30:	a0 95       	com	r26
     e32:	ba 2f       	mov	r27, r26
     e34:	dc 01       	movw	r26, r24
     e36:	99 27       	eor	r25, r25
     e38:	88 27       	eor	r24, r24
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	82 2b       	or	r24, r18
     e40:	93 2b       	or	r25, r19
     e42:	a4 2b       	or	r26, r20
     e44:	b5 2b       	or	r27, r21
     e46:	80 93 72 01 	sts	0x0172, r24
     e4a:	90 93 73 01 	sts	0x0173, r25
     e4e:	a0 93 74 01 	sts	0x0174, r26
     e52:	b0 93 75 01 	sts	0x0175, r27
     e56:	b0 9b       	sbis	0x16, 0	; 22
     e58:	1c c0       	rjmp	.+56     	; 0xe92 <__vector_17+0x9a>
     e5a:	20 91 84 00 	lds	r18, 0x0084
     e5e:	30 91 85 00 	lds	r19, 0x0085
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	cb 01       	movw	r24, r22
     e68:	aa 27       	eor	r26, r26
     e6a:	97 fd       	sbrc	r25, 7
     e6c:	a0 95       	com	r26
     e6e:	ba 2f       	mov	r27, r26
     e70:	dc 01       	movw	r26, r24
     e72:	99 27       	eor	r25, r25
     e74:	88 27       	eor	r24, r24
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	82 2b       	or	r24, r18
     e7c:	93 2b       	or	r25, r19
     e7e:	a4 2b       	or	r26, r20
     e80:	b5 2b       	or	r27, r21
     e82:	80 93 72 01 	sts	0x0172, r24
     e86:	90 93 73 01 	sts	0x0173, r25
     e8a:	a0 93 74 01 	sts	0x0174, r26
     e8e:	b0 93 75 01 	sts	0x0175, r27
     e92:	e0 91 28 02 	lds	r30, 0x0228
     e96:	f0 91 29 02 	lds	r31, 0x0229
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	39 f0       	breq	.+14     	; 0xeac <__vector_17+0xb4>
     e9e:	6c e0       	ldi	r22, 0x0C	; 12
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 91 90 01 	lds	r24, 0x0190
     ea6:	90 91 91 01 	lds	r25, 0x0191
     eaa:	09 95       	icall
     eac:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_16>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
     ef4:	60 91 76 01 	lds	r22, 0x0176
     ef8:	70 91 77 01 	lds	r23, 0x0177
     efc:	20 91 84 00 	lds	r18, 0x0084
     f00:	30 91 85 00 	lds	r19, 0x0085
     f04:	cb 01       	movw	r24, r22
     f06:	aa 27       	eor	r26, r26
     f08:	97 fd       	sbrc	r25, 7
     f0a:	a0 95       	com	r26
     f0c:	ba 2f       	mov	r27, r26
     f0e:	dc 01       	movw	r26, r24
     f10:	99 27       	eor	r25, r25
     f12:	88 27       	eor	r24, r24
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	82 2b       	or	r24, r18
     f1a:	93 2b       	or	r25, r19
     f1c:	a4 2b       	or	r26, r20
     f1e:	b5 2b       	or	r27, r21
     f20:	80 93 72 01 	sts	0x0172, r24
     f24:	90 93 73 01 	sts	0x0173, r25
     f28:	a0 93 74 01 	sts	0x0174, r26
     f2c:	b0 93 75 01 	sts	0x0175, r27
     f30:	b0 9b       	sbis	0x16, 0	; 22
     f32:	1c c0       	rjmp	.+56     	; 0xf6c <__vector_16+0x9a>
     f34:	20 91 84 00 	lds	r18, 0x0084
     f38:	30 91 85 00 	lds	r19, 0x0085
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	cb 01       	movw	r24, r22
     f42:	aa 27       	eor	r26, r26
     f44:	97 fd       	sbrc	r25, 7
     f46:	a0 95       	com	r26
     f48:	ba 2f       	mov	r27, r26
     f4a:	dc 01       	movw	r26, r24
     f4c:	99 27       	eor	r25, r25
     f4e:	88 27       	eor	r24, r24
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	82 2b       	or	r24, r18
     f56:	93 2b       	or	r25, r19
     f58:	a4 2b       	or	r26, r20
     f5a:	b5 2b       	or	r27, r21
     f5c:	80 93 72 01 	sts	0x0172, r24
     f60:	90 93 73 01 	sts	0x0173, r25
     f64:	a0 93 74 01 	sts	0x0174, r26
     f68:	b0 93 75 01 	sts	0x0175, r27
     f6c:	e0 91 26 02 	lds	r30, 0x0226
     f70:	f0 91 27 02 	lds	r31, 0x0227
     f74:	30 97       	sbiw	r30, 0x00	; 0
     f76:	39 f0       	breq	.+14     	; 0xf86 <__vector_16+0xb4>
     f78:	6b e0       	ldi	r22, 0x0B	; 11
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 91 8e 01 	lds	r24, 0x018E
     f80:	90 91 8f 01 	lds	r25, 0x018F
     f84:	09 95       	icall
     f86:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_15>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
     fce:	60 91 76 01 	lds	r22, 0x0176
     fd2:	70 91 77 01 	lds	r23, 0x0177
     fd6:	20 91 84 00 	lds	r18, 0x0084
     fda:	30 91 85 00 	lds	r19, 0x0085
     fde:	cb 01       	movw	r24, r22
     fe0:	aa 27       	eor	r26, r26
     fe2:	97 fd       	sbrc	r25, 7
     fe4:	a0 95       	com	r26
     fe6:	ba 2f       	mov	r27, r26
     fe8:	dc 01       	movw	r26, r24
     fea:	99 27       	eor	r25, r25
     fec:	88 27       	eor	r24, r24
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	82 2b       	or	r24, r18
     ff4:	93 2b       	or	r25, r19
     ff6:	a4 2b       	or	r26, r20
     ff8:	b5 2b       	or	r27, r21
     ffa:	80 93 72 01 	sts	0x0172, r24
     ffe:	90 93 73 01 	sts	0x0173, r25
    1002:	a0 93 74 01 	sts	0x0174, r26
    1006:	b0 93 75 01 	sts	0x0175, r27
    100a:	b0 9b       	sbis	0x16, 0	; 22
    100c:	1c c0       	rjmp	.+56     	; 0x1046 <__vector_15+0x9a>
    100e:	20 91 84 00 	lds	r18, 0x0084
    1012:	30 91 85 00 	lds	r19, 0x0085
    1016:	6f 5f       	subi	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	cb 01       	movw	r24, r22
    101c:	aa 27       	eor	r26, r26
    101e:	97 fd       	sbrc	r25, 7
    1020:	a0 95       	com	r26
    1022:	ba 2f       	mov	r27, r26
    1024:	dc 01       	movw	r26, r24
    1026:	99 27       	eor	r25, r25
    1028:	88 27       	eor	r24, r24
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	82 2b       	or	r24, r18
    1030:	93 2b       	or	r25, r19
    1032:	a4 2b       	or	r26, r20
    1034:	b5 2b       	or	r27, r21
    1036:	80 93 72 01 	sts	0x0172, r24
    103a:	90 93 73 01 	sts	0x0173, r25
    103e:	a0 93 74 01 	sts	0x0174, r26
    1042:	b0 93 75 01 	sts	0x0175, r27
    1046:	e0 91 24 02 	lds	r30, 0x0224
    104a:	f0 91 25 02 	lds	r31, 0x0225
    104e:	30 97       	sbiw	r30, 0x00	; 0
    1050:	39 f0       	breq	.+14     	; 0x1060 <__vector_15+0xb4>
    1052:	6a e0       	ldi	r22, 0x0A	; 10
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	80 91 8c 01 	lds	r24, 0x018C
    105a:	90 91 8d 01 	lds	r25, 0x018D
    105e:	09 95       	icall
    1060:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_14>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	60 91 76 01 	lds	r22, 0x0176
    10ac:	70 91 77 01 	lds	r23, 0x0177
    10b0:	20 91 84 00 	lds	r18, 0x0084
    10b4:	30 91 85 00 	lds	r19, 0x0085
    10b8:	cb 01       	movw	r24, r22
    10ba:	aa 27       	eor	r26, r26
    10bc:	97 fd       	sbrc	r25, 7
    10be:	a0 95       	com	r26
    10c0:	ba 2f       	mov	r27, r26
    10c2:	dc 01       	movw	r26, r24
    10c4:	99 27       	eor	r25, r25
    10c6:	88 27       	eor	r24, r24
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	82 2b       	or	r24, r18
    10ce:	93 2b       	or	r25, r19
    10d0:	a4 2b       	or	r26, r20
    10d2:	b5 2b       	or	r27, r21
    10d4:	80 93 72 01 	sts	0x0172, r24
    10d8:	90 93 73 01 	sts	0x0173, r25
    10dc:	a0 93 74 01 	sts	0x0174, r26
    10e0:	b0 93 75 01 	sts	0x0175, r27
    10e4:	b0 9b       	sbis	0x16, 0	; 22
    10e6:	1c c0       	rjmp	.+56     	; 0x1120 <__vector_14+0x9a>
    10e8:	20 91 84 00 	lds	r18, 0x0084
    10ec:	30 91 85 00 	lds	r19, 0x0085
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	cb 01       	movw	r24, r22
    10f6:	aa 27       	eor	r26, r26
    10f8:	97 fd       	sbrc	r25, 7
    10fa:	a0 95       	com	r26
    10fc:	ba 2f       	mov	r27, r26
    10fe:	dc 01       	movw	r26, r24
    1100:	99 27       	eor	r25, r25
    1102:	88 27       	eor	r24, r24
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	82 2b       	or	r24, r18
    110a:	93 2b       	or	r25, r19
    110c:	a4 2b       	or	r26, r20
    110e:	b5 2b       	or	r27, r21
    1110:	80 93 72 01 	sts	0x0172, r24
    1114:	90 93 73 01 	sts	0x0173, r25
    1118:	a0 93 74 01 	sts	0x0174, r26
    111c:	b0 93 75 01 	sts	0x0175, r27
    1120:	e0 91 22 02 	lds	r30, 0x0222
    1124:	f0 91 23 02 	lds	r31, 0x0223
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	39 f0       	breq	.+14     	; 0x113a <__vector_14+0xb4>
    112c:	69 e0       	ldi	r22, 0x09	; 9
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	80 91 8a 01 	lds	r24, 0x018A
    1134:	90 91 8b 01 	lds	r25, 0x018B
    1138:	09 95       	icall
    113a:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <__vector_13>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	60 91 76 01 	lds	r22, 0x0176
    1186:	70 91 77 01 	lds	r23, 0x0177
    118a:	20 91 84 00 	lds	r18, 0x0084
    118e:	30 91 85 00 	lds	r19, 0x0085
    1192:	cb 01       	movw	r24, r22
    1194:	aa 27       	eor	r26, r26
    1196:	97 fd       	sbrc	r25, 7
    1198:	a0 95       	com	r26
    119a:	ba 2f       	mov	r27, r26
    119c:	dc 01       	movw	r26, r24
    119e:	99 27       	eor	r25, r25
    11a0:	88 27       	eor	r24, r24
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	82 2b       	or	r24, r18
    11a8:	93 2b       	or	r25, r19
    11aa:	a4 2b       	or	r26, r20
    11ac:	b5 2b       	or	r27, r21
    11ae:	80 93 72 01 	sts	0x0172, r24
    11b2:	90 93 73 01 	sts	0x0173, r25
    11b6:	a0 93 74 01 	sts	0x0174, r26
    11ba:	b0 93 75 01 	sts	0x0175, r27
    11be:	b0 9b       	sbis	0x16, 0	; 22
    11c0:	1c c0       	rjmp	.+56     	; 0x11fa <__vector_13+0x9a>
    11c2:	20 91 84 00 	lds	r18, 0x0084
    11c6:	30 91 85 00 	lds	r19, 0x0085
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	cb 01       	movw	r24, r22
    11d0:	aa 27       	eor	r26, r26
    11d2:	97 fd       	sbrc	r25, 7
    11d4:	a0 95       	com	r26
    11d6:	ba 2f       	mov	r27, r26
    11d8:	dc 01       	movw	r26, r24
    11da:	99 27       	eor	r25, r25
    11dc:	88 27       	eor	r24, r24
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	82 2b       	or	r24, r18
    11e4:	93 2b       	or	r25, r19
    11e6:	a4 2b       	or	r26, r20
    11e8:	b5 2b       	or	r27, r21
    11ea:	80 93 72 01 	sts	0x0172, r24
    11ee:	90 93 73 01 	sts	0x0173, r25
    11f2:	a0 93 74 01 	sts	0x0174, r26
    11f6:	b0 93 75 01 	sts	0x0175, r27
    11fa:	e0 91 20 02 	lds	r30, 0x0220
    11fe:	f0 91 21 02 	lds	r31, 0x0221
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	39 f0       	breq	.+14     	; 0x1214 <__vector_13+0xb4>
    1206:	68 e0       	ldi	r22, 0x08	; 8
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 91 88 01 	lds	r24, 0x0188
    120e:	90 91 89 01 	lds	r25, 0x0189
    1212:	09 95       	icall
    1214:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_12>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
    125c:	60 91 76 01 	lds	r22, 0x0176
    1260:	70 91 77 01 	lds	r23, 0x0177
    1264:	20 91 84 00 	lds	r18, 0x0084
    1268:	30 91 85 00 	lds	r19, 0x0085
    126c:	cb 01       	movw	r24, r22
    126e:	aa 27       	eor	r26, r26
    1270:	97 fd       	sbrc	r25, 7
    1272:	a0 95       	com	r26
    1274:	ba 2f       	mov	r27, r26
    1276:	dc 01       	movw	r26, r24
    1278:	99 27       	eor	r25, r25
    127a:	88 27       	eor	r24, r24
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	82 2b       	or	r24, r18
    1282:	93 2b       	or	r25, r19
    1284:	a4 2b       	or	r26, r20
    1286:	b5 2b       	or	r27, r21
    1288:	80 93 72 01 	sts	0x0172, r24
    128c:	90 93 73 01 	sts	0x0173, r25
    1290:	a0 93 74 01 	sts	0x0174, r26
    1294:	b0 93 75 01 	sts	0x0175, r27
    1298:	b0 9b       	sbis	0x16, 0	; 22
    129a:	1c c0       	rjmp	.+56     	; 0x12d4 <__vector_12+0x9a>
    129c:	20 91 84 00 	lds	r18, 0x0084
    12a0:	30 91 85 00 	lds	r19, 0x0085
    12a4:	6f 5f       	subi	r22, 0xFF	; 255
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	cb 01       	movw	r24, r22
    12aa:	aa 27       	eor	r26, r26
    12ac:	97 fd       	sbrc	r25, 7
    12ae:	a0 95       	com	r26
    12b0:	ba 2f       	mov	r27, r26
    12b2:	dc 01       	movw	r26, r24
    12b4:	99 27       	eor	r25, r25
    12b6:	88 27       	eor	r24, r24
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	82 2b       	or	r24, r18
    12be:	93 2b       	or	r25, r19
    12c0:	a4 2b       	or	r26, r20
    12c2:	b5 2b       	or	r27, r21
    12c4:	80 93 72 01 	sts	0x0172, r24
    12c8:	90 93 73 01 	sts	0x0173, r25
    12cc:	a0 93 74 01 	sts	0x0174, r26
    12d0:	b0 93 75 01 	sts	0x0175, r27
    12d4:	e0 91 1e 02 	lds	r30, 0x021E
    12d8:	f0 91 1f 02 	lds	r31, 0x021F
    12dc:	30 97       	sbiw	r30, 0x00	; 0
    12de:	39 f0       	breq	.+14     	; 0x12ee <__vector_12+0xb4>
    12e0:	67 e0       	ldi	r22, 0x07	; 7
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	80 91 86 01 	lds	r24, 0x0186
    12e8:	90 91 87 01 	lds	r25, 0x0187
    12ec:	09 95       	icall
    12ee:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	bf 91       	pop	r27
    12f8:	af 91       	pop	r26
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <__vector_11>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	60 91 76 01 	lds	r22, 0x0176
    133a:	70 91 77 01 	lds	r23, 0x0177
    133e:	20 91 84 00 	lds	r18, 0x0084
    1342:	30 91 85 00 	lds	r19, 0x0085
    1346:	cb 01       	movw	r24, r22
    1348:	aa 27       	eor	r26, r26
    134a:	97 fd       	sbrc	r25, 7
    134c:	a0 95       	com	r26
    134e:	ba 2f       	mov	r27, r26
    1350:	dc 01       	movw	r26, r24
    1352:	99 27       	eor	r25, r25
    1354:	88 27       	eor	r24, r24
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	82 2b       	or	r24, r18
    135c:	93 2b       	or	r25, r19
    135e:	a4 2b       	or	r26, r20
    1360:	b5 2b       	or	r27, r21
    1362:	80 93 72 01 	sts	0x0172, r24
    1366:	90 93 73 01 	sts	0x0173, r25
    136a:	a0 93 74 01 	sts	0x0174, r26
    136e:	b0 93 75 01 	sts	0x0175, r27
    1372:	b0 9b       	sbis	0x16, 0	; 22
    1374:	1c c0       	rjmp	.+56     	; 0x13ae <__vector_11+0x9a>
    1376:	20 91 84 00 	lds	r18, 0x0084
    137a:	30 91 85 00 	lds	r19, 0x0085
    137e:	6f 5f       	subi	r22, 0xFF	; 255
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	cb 01       	movw	r24, r22
    1384:	aa 27       	eor	r26, r26
    1386:	97 fd       	sbrc	r25, 7
    1388:	a0 95       	com	r26
    138a:	ba 2f       	mov	r27, r26
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	82 2b       	or	r24, r18
    1398:	93 2b       	or	r25, r19
    139a:	a4 2b       	or	r26, r20
    139c:	b5 2b       	or	r27, r21
    139e:	80 93 72 01 	sts	0x0172, r24
    13a2:	90 93 73 01 	sts	0x0173, r25
    13a6:	a0 93 74 01 	sts	0x0174, r26
    13aa:	b0 93 75 01 	sts	0x0175, r27
    13ae:	e0 91 1c 02 	lds	r30, 0x021C
    13b2:	f0 91 1d 02 	lds	r31, 0x021D
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	39 f0       	breq	.+14     	; 0x13c8 <__vector_11+0xb4>
    13ba:	66 e0       	ldi	r22, 0x06	; 6
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 91 84 01 	lds	r24, 0x0184
    13c2:	90 91 85 01 	lds	r25, 0x0185
    13c6:	09 95       	icall
    13c8:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_10>:
IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	60 91 76 01 	lds	r22, 0x0176
    1414:	70 91 77 01 	lds	r23, 0x0177
    1418:	20 91 84 00 	lds	r18, 0x0084
    141c:	30 91 85 00 	lds	r19, 0x0085
    1420:	cb 01       	movw	r24, r22
    1422:	aa 27       	eor	r26, r26
    1424:	97 fd       	sbrc	r25, 7
    1426:	a0 95       	com	r26
    1428:	ba 2f       	mov	r27, r26
    142a:	dc 01       	movw	r26, r24
    142c:	99 27       	eor	r25, r25
    142e:	88 27       	eor	r24, r24
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	82 2b       	or	r24, r18
    1436:	93 2b       	or	r25, r19
    1438:	a4 2b       	or	r26, r20
    143a:	b5 2b       	or	r27, r21
    143c:	80 93 72 01 	sts	0x0172, r24
    1440:	90 93 73 01 	sts	0x0173, r25
    1444:	a0 93 74 01 	sts	0x0174, r26
    1448:	b0 93 75 01 	sts	0x0175, r27
    144c:	b0 9b       	sbis	0x16, 0	; 22
    144e:	1c c0       	rjmp	.+56     	; 0x1488 <__vector_10+0x9a>
    1450:	20 91 84 00 	lds	r18, 0x0084
    1454:	30 91 85 00 	lds	r19, 0x0085
    1458:	6f 5f       	subi	r22, 0xFF	; 255
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	cb 01       	movw	r24, r22
    145e:	aa 27       	eor	r26, r26
    1460:	97 fd       	sbrc	r25, 7
    1462:	a0 95       	com	r26
    1464:	ba 2f       	mov	r27, r26
    1466:	dc 01       	movw	r26, r24
    1468:	99 27       	eor	r25, r25
    146a:	88 27       	eor	r24, r24
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	82 2b       	or	r24, r18
    1472:	93 2b       	or	r25, r19
    1474:	a4 2b       	or	r26, r20
    1476:	b5 2b       	or	r27, r21
    1478:	80 93 72 01 	sts	0x0172, r24
    147c:	90 93 73 01 	sts	0x0173, r25
    1480:	a0 93 74 01 	sts	0x0174, r26
    1484:	b0 93 75 01 	sts	0x0175, r27
    1488:	e0 91 1a 02 	lds	r30, 0x021A
    148c:	f0 91 1b 02 	lds	r31, 0x021B
    1490:	30 97       	sbiw	r30, 0x00	; 0
    1492:	39 f0       	breq	.+14     	; 0x14a2 <__vector_10+0xb4>
    1494:	65 e0       	ldi	r22, 0x05	; 5
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 91 82 01 	lds	r24, 0x0182
    149c:	90 91 83 01 	lds	r25, 0x0183
    14a0:	09 95       	icall
    14a2:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <__vector_5>:

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
    14ea:	60 91 76 01 	lds	r22, 0x0176
    14ee:	70 91 77 01 	lds	r23, 0x0177
    14f2:	20 91 84 00 	lds	r18, 0x0084
    14f6:	30 91 85 00 	lds	r19, 0x0085
    14fa:	cb 01       	movw	r24, r22
    14fc:	aa 27       	eor	r26, r26
    14fe:	97 fd       	sbrc	r25, 7
    1500:	a0 95       	com	r26
    1502:	ba 2f       	mov	r27, r26
    1504:	dc 01       	movw	r26, r24
    1506:	99 27       	eor	r25, r25
    1508:	88 27       	eor	r24, r24
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	82 2b       	or	r24, r18
    1510:	93 2b       	or	r25, r19
    1512:	a4 2b       	or	r26, r20
    1514:	b5 2b       	or	r27, r21
    1516:	80 93 72 01 	sts	0x0172, r24
    151a:	90 93 73 01 	sts	0x0173, r25
    151e:	a0 93 74 01 	sts	0x0174, r26
    1522:	b0 93 75 01 	sts	0x0175, r27
    1526:	b0 9b       	sbis	0x16, 0	; 22
    1528:	1c c0       	rjmp	.+56     	; 0x1562 <__vector_5+0x9a>
    152a:	20 91 84 00 	lds	r18, 0x0084
    152e:	30 91 85 00 	lds	r19, 0x0085
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	cb 01       	movw	r24, r22
    1538:	aa 27       	eor	r26, r26
    153a:	97 fd       	sbrc	r25, 7
    153c:	a0 95       	com	r26
    153e:	ba 2f       	mov	r27, r26
    1540:	dc 01       	movw	r26, r24
    1542:	99 27       	eor	r25, r25
    1544:	88 27       	eor	r24, r24
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	82 2b       	or	r24, r18
    154c:	93 2b       	or	r25, r19
    154e:	a4 2b       	or	r26, r20
    1550:	b5 2b       	or	r27, r21
    1552:	80 93 72 01 	sts	0x0172, r24
    1556:	90 93 73 01 	sts	0x0173, r25
    155a:	a0 93 74 01 	sts	0x0174, r26
    155e:	b0 93 75 01 	sts	0x0175, r27
    1562:	e0 91 18 02 	lds	r30, 0x0218
    1566:	f0 91 19 02 	lds	r31, 0x0219
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	39 f0       	breq	.+14     	; 0x157c <__vector_5+0xb4>
    156e:	64 e0       	ldi	r22, 0x04	; 4
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 91 80 01 	lds	r24, 0x0180
    1576:	90 91 81 01 	lds	r25, 0x0181
    157a:	09 95       	icall
    157c:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_4>:
#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	60 91 76 01 	lds	r22, 0x0176
    15c8:	70 91 77 01 	lds	r23, 0x0177
    15cc:	20 91 84 00 	lds	r18, 0x0084
    15d0:	30 91 85 00 	lds	r19, 0x0085
    15d4:	cb 01       	movw	r24, r22
    15d6:	aa 27       	eor	r26, r26
    15d8:	97 fd       	sbrc	r25, 7
    15da:	a0 95       	com	r26
    15dc:	ba 2f       	mov	r27, r26
    15de:	dc 01       	movw	r26, r24
    15e0:	99 27       	eor	r25, r25
    15e2:	88 27       	eor	r24, r24
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	82 2b       	or	r24, r18
    15ea:	93 2b       	or	r25, r19
    15ec:	a4 2b       	or	r26, r20
    15ee:	b5 2b       	or	r27, r21
    15f0:	80 93 72 01 	sts	0x0172, r24
    15f4:	90 93 73 01 	sts	0x0173, r25
    15f8:	a0 93 74 01 	sts	0x0174, r26
    15fc:	b0 93 75 01 	sts	0x0175, r27
    1600:	b0 9b       	sbis	0x16, 0	; 22
    1602:	1c c0       	rjmp	.+56     	; 0x163c <__vector_4+0x9a>
    1604:	20 91 84 00 	lds	r18, 0x0084
    1608:	30 91 85 00 	lds	r19, 0x0085
    160c:	6f 5f       	subi	r22, 0xFF	; 255
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	cb 01       	movw	r24, r22
    1612:	aa 27       	eor	r26, r26
    1614:	97 fd       	sbrc	r25, 7
    1616:	a0 95       	com	r26
    1618:	ba 2f       	mov	r27, r26
    161a:	dc 01       	movw	r26, r24
    161c:	99 27       	eor	r25, r25
    161e:	88 27       	eor	r24, r24
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	82 2b       	or	r24, r18
    1626:	93 2b       	or	r25, r19
    1628:	a4 2b       	or	r26, r20
    162a:	b5 2b       	or	r27, r21
    162c:	80 93 72 01 	sts	0x0172, r24
    1630:	90 93 73 01 	sts	0x0173, r25
    1634:	a0 93 74 01 	sts	0x0174, r26
    1638:	b0 93 75 01 	sts	0x0175, r27
    163c:	e0 91 16 02 	lds	r30, 0x0216
    1640:	f0 91 17 02 	lds	r31, 0x0217
    1644:	30 97       	sbiw	r30, 0x00	; 0
    1646:	39 f0       	breq	.+14     	; 0x1656 <__vector_4+0xb4>
    1648:	63 e0       	ldi	r22, 0x03	; 3
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 91 7e 01 	lds	r24, 0x017E
    1650:	90 91 7f 01 	lds	r25, 0x017F
    1654:	09 95       	icall
    1656:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	bf 91       	pop	r27
    1660:	af 91       	pop	r26
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	7f 91       	pop	r23
    1668:	6f 91       	pop	r22
    166a:	5f 91       	pop	r21
    166c:	4f 91       	pop	r20
    166e:	3f 91       	pop	r19
    1670:	2f 91       	pop	r18
    1672:	0f 90       	pop	r0
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	0f 90       	pop	r0
    1678:	1f 90       	pop	r1
    167a:	18 95       	reti

0000167c <__vector_3>:

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	7f 93       	push	r23
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
    169e:	60 91 76 01 	lds	r22, 0x0176
    16a2:	70 91 77 01 	lds	r23, 0x0177
    16a6:	20 91 84 00 	lds	r18, 0x0084
    16aa:	30 91 85 00 	lds	r19, 0x0085
    16ae:	cb 01       	movw	r24, r22
    16b0:	aa 27       	eor	r26, r26
    16b2:	97 fd       	sbrc	r25, 7
    16b4:	a0 95       	com	r26
    16b6:	ba 2f       	mov	r27, r26
    16b8:	dc 01       	movw	r26, r24
    16ba:	99 27       	eor	r25, r25
    16bc:	88 27       	eor	r24, r24
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	82 2b       	or	r24, r18
    16c4:	93 2b       	or	r25, r19
    16c6:	a4 2b       	or	r26, r20
    16c8:	b5 2b       	or	r27, r21
    16ca:	80 93 72 01 	sts	0x0172, r24
    16ce:	90 93 73 01 	sts	0x0173, r25
    16d2:	a0 93 74 01 	sts	0x0174, r26
    16d6:	b0 93 75 01 	sts	0x0175, r27
    16da:	b0 9b       	sbis	0x16, 0	; 22
    16dc:	1c c0       	rjmp	.+56     	; 0x1716 <__vector_3+0x9a>
    16de:	20 91 84 00 	lds	r18, 0x0084
    16e2:	30 91 85 00 	lds	r19, 0x0085
    16e6:	6f 5f       	subi	r22, 0xFF	; 255
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	cb 01       	movw	r24, r22
    16ec:	aa 27       	eor	r26, r26
    16ee:	97 fd       	sbrc	r25, 7
    16f0:	a0 95       	com	r26
    16f2:	ba 2f       	mov	r27, r26
    16f4:	dc 01       	movw	r26, r24
    16f6:	99 27       	eor	r25, r25
    16f8:	88 27       	eor	r24, r24
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	82 2b       	or	r24, r18
    1700:	93 2b       	or	r25, r19
    1702:	a4 2b       	or	r26, r20
    1704:	b5 2b       	or	r27, r21
    1706:	80 93 72 01 	sts	0x0172, r24
    170a:	90 93 73 01 	sts	0x0173, r25
    170e:	a0 93 74 01 	sts	0x0174, r26
    1712:	b0 93 75 01 	sts	0x0175, r27
    1716:	e0 91 14 02 	lds	r30, 0x0214
    171a:	f0 91 15 02 	lds	r31, 0x0215
    171e:	30 97       	sbiw	r30, 0x00	; 0
    1720:	39 f0       	breq	.+14     	; 0x1730 <__vector_3+0xb4>
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	80 91 7c 01 	lds	r24, 0x017C
    172a:	90 91 7d 01 	lds	r25, 0x017D
    172e:	09 95       	icall
    1730:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_2>:
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	60 91 76 01 	lds	r22, 0x0176
    177c:	70 91 77 01 	lds	r23, 0x0177
    1780:	20 91 84 00 	lds	r18, 0x0084
    1784:	30 91 85 00 	lds	r19, 0x0085
    1788:	cb 01       	movw	r24, r22
    178a:	aa 27       	eor	r26, r26
    178c:	97 fd       	sbrc	r25, 7
    178e:	a0 95       	com	r26
    1790:	ba 2f       	mov	r27, r26
    1792:	dc 01       	movw	r26, r24
    1794:	99 27       	eor	r25, r25
    1796:	88 27       	eor	r24, r24
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	82 2b       	or	r24, r18
    179e:	93 2b       	or	r25, r19
    17a0:	a4 2b       	or	r26, r20
    17a2:	b5 2b       	or	r27, r21
    17a4:	80 93 72 01 	sts	0x0172, r24
    17a8:	90 93 73 01 	sts	0x0173, r25
    17ac:	a0 93 74 01 	sts	0x0174, r26
    17b0:	b0 93 75 01 	sts	0x0175, r27
    17b4:	b0 9b       	sbis	0x16, 0	; 22
    17b6:	1c c0       	rjmp	.+56     	; 0x17f0 <__vector_2+0x9a>
    17b8:	20 91 84 00 	lds	r18, 0x0084
    17bc:	30 91 85 00 	lds	r19, 0x0085
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	cb 01       	movw	r24, r22
    17c6:	aa 27       	eor	r26, r26
    17c8:	97 fd       	sbrc	r25, 7
    17ca:	a0 95       	com	r26
    17cc:	ba 2f       	mov	r27, r26
    17ce:	dc 01       	movw	r26, r24
    17d0:	99 27       	eor	r25, r25
    17d2:	88 27       	eor	r24, r24
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	82 2b       	or	r24, r18
    17da:	93 2b       	or	r25, r19
    17dc:	a4 2b       	or	r26, r20
    17de:	b5 2b       	or	r27, r21
    17e0:	80 93 72 01 	sts	0x0172, r24
    17e4:	90 93 73 01 	sts	0x0173, r25
    17e8:	a0 93 74 01 	sts	0x0174, r26
    17ec:	b0 93 75 01 	sts	0x0175, r27
    17f0:	e0 91 12 02 	lds	r30, 0x0212
    17f4:	f0 91 13 02 	lds	r31, 0x0213
    17f8:	30 97       	sbiw	r30, 0x00	; 0
    17fa:	39 f0       	breq	.+14     	; 0x180a <__vector_2+0xb4>
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	80 91 7a 01 	lds	r24, 0x017A
    1804:	90 91 7b 01 	lds	r25, 0x017B
    1808:	09 95       	icall
    180a:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	bf 91       	pop	r27
    1814:	af 91       	pop	r26
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	7f 91       	pop	r23
    181c:	6f 91       	pop	r22
    181e:	5f 91       	pop	r21
    1820:	4f 91       	pop	r20
    1822:	3f 91       	pop	r19
    1824:	2f 91       	pop	r18
    1826:	0f 90       	pop	r0
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	0f 90       	pop	r0
    182c:	1f 90       	pop	r1
    182e:	18 95       	reti

00001830 <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
    1830:	1f 92       	push	r1
    1832:	0f 92       	push	r0
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	0f 92       	push	r0
    1838:	11 24       	eor	r1, r1
    183a:	2f 93       	push	r18
    183c:	3f 93       	push	r19
    183e:	4f 93       	push	r20
    1840:	5f 93       	push	r21
    1842:	6f 93       	push	r22
    1844:	7f 93       	push	r23
    1846:	8f 93       	push	r24
    1848:	9f 93       	push	r25
    184a:	af 93       	push	r26
    184c:	bf 93       	push	r27
    184e:	ef 93       	push	r30
    1850:	ff 93       	push	r31
    1852:	60 91 76 01 	lds	r22, 0x0176
    1856:	70 91 77 01 	lds	r23, 0x0177
    185a:	20 91 84 00 	lds	r18, 0x0084
    185e:	30 91 85 00 	lds	r19, 0x0085
    1862:	cb 01       	movw	r24, r22
    1864:	aa 27       	eor	r26, r26
    1866:	97 fd       	sbrc	r25, 7
    1868:	a0 95       	com	r26
    186a:	ba 2f       	mov	r27, r26
    186c:	dc 01       	movw	r26, r24
    186e:	99 27       	eor	r25, r25
    1870:	88 27       	eor	r24, r24
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	82 2b       	or	r24, r18
    1878:	93 2b       	or	r25, r19
    187a:	a4 2b       	or	r26, r20
    187c:	b5 2b       	or	r27, r21
    187e:	80 93 72 01 	sts	0x0172, r24
    1882:	90 93 73 01 	sts	0x0173, r25
    1886:	a0 93 74 01 	sts	0x0174, r26
    188a:	b0 93 75 01 	sts	0x0175, r27
    188e:	b0 9b       	sbis	0x16, 0	; 22
    1890:	1c c0       	rjmp	.+56     	; 0x18ca <__vector_1+0x9a>
    1892:	20 91 84 00 	lds	r18, 0x0084
    1896:	30 91 85 00 	lds	r19, 0x0085
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	cb 01       	movw	r24, r22
    18a0:	aa 27       	eor	r26, r26
    18a2:	97 fd       	sbrc	r25, 7
    18a4:	a0 95       	com	r26
    18a6:	ba 2f       	mov	r27, r26
    18a8:	dc 01       	movw	r26, r24
    18aa:	99 27       	eor	r25, r25
    18ac:	88 27       	eor	r24, r24
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	82 2b       	or	r24, r18
    18b4:	93 2b       	or	r25, r19
    18b6:	a4 2b       	or	r26, r20
    18b8:	b5 2b       	or	r27, r21
    18ba:	80 93 72 01 	sts	0x0172, r24
    18be:	90 93 73 01 	sts	0x0173, r25
    18c2:	a0 93 74 01 	sts	0x0174, r26
    18c6:	b0 93 75 01 	sts	0x0175, r27
    18ca:	e0 91 10 02 	lds	r30, 0x0210
    18ce:	f0 91 11 02 	lds	r31, 0x0211
    18d2:	30 97       	sbiw	r30, 0x00	; 0
    18d4:	39 f0       	breq	.+14     	; 0x18e4 <__vector_1+0xb4>
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	80 91 78 01 	lds	r24, 0x0178
    18de:	90 91 79 01 	lds	r25, 0x0179
    18e2:	09 95       	icall
    18e4:	0e 94 a0 03 	call	0x740	; 0x740 <schedule>
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <sync>:
    
    ENABLE(status);
    return m;
}

int sync(Object *to, Method meth, int arg) {
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	ec 01       	movw	r28, r24
    191a:	6b 01       	movw	r12, r22
    191c:	8a 01       	movw	r16, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    191e:	ff b6       	in	r15, 0x3f	; 63
    1920:	80 e8       	ldi	r24, 0x80	; 128
    1922:	f8 22       	and	r15, r24
    1924:	f8 94       	cli
    t = to->ownedBy;
    1926:	88 81       	ld	r24, Y
    1928:	99 81       	ldd	r25, Y+1	; 0x01
    if (t) {                            // to is already locked
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	19 f4       	brne	.+6      	; 0x1934 <sync+0x2a>
    192e:	33 c0       	rjmp	.+102    	; 0x1996 <sync+0x8c>
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    1934:	dc 01       	movw	r26, r24
    1936:	14 96       	adiw	r26, 0x04	; 4
    1938:	ed 91       	ld	r30, X+
    193a:	fc 91       	ld	r31, X
    193c:	15 97       	sbiw	r26, 0x05	; 5
    193e:	30 97       	sbiw	r30, 0x00	; 0
    1940:	b9 f7       	brne	.-18     	; 0x1930 <sync+0x26>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    1942:	a0 91 53 01 	lds	r26, 0x0153
    1946:	b0 91 54 01 	lds	r27, 0x0154
    194a:	8a 17       	cp	r24, r26
    194c:	9b 07       	cpc	r25, r27
    194e:	21 f0       	breq	.+8      	; 0x1958 <sync+0x4e>
    1950:	ff 20       	and	r15, r15
    1952:	09 f4       	brne	.+2      	; 0x1956 <sync+0x4c>
    1954:	46 c0       	rjmp	.+140    	; 0x19e2 <sync+0xd8>
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <sync+0x58>
            ENABLE(status);
    1958:	ff 20       	and	r15, r15
    195a:	09 f4       	brne	.+2      	; 0x195e <sync+0x54>
    195c:	42 c0       	rjmp	.+132    	; 0x19e2 <sync+0xd8>
    195e:	78 94       	sei
    1960:	40 c0       	rjmp	.+128    	; 0x19e2 <sync+0xd8>
            return -1;
        }
        if (to->wantedBy)               // must be a lower priority thread
    1962:	ea 81       	ldd	r30, Y+2	; 0x02
    1964:	fb 81       	ldd	r31, Y+3	; 0x03
    1966:	30 97       	sbiw	r30, 0x00	; 0
    1968:	11 f0       	breq	.+4      	; 0x196e <sync+0x64>
            to->wantedBy->waitsFor = NULL;
    196a:	15 82       	std	Z+5, r1	; 0x05
    196c:	14 82       	std	Z+4, r1	; 0x04
        to->wantedBy = current;
    196e:	bb 83       	std	Y+3, r27	; 0x03
    1970:	aa 83       	std	Y+2, r26	; 0x02
        current->waitsFor = to;
    1972:	15 96       	adiw	r26, 0x05	; 5
    1974:	dc 93       	st	X, r29
    1976:	ce 93       	st	-X, r28
    1978:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    197a:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    197e:	e0 91 53 01 	lds	r30, 0x0153
    1982:	f0 91 54 01 	lds	r31, 0x0154
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	93 81       	ldd	r25, Z+3	; 0x03
    198a:	89 2b       	or	r24, r25
    198c:	21 f4       	brne	.+8      	; 0x1996 <sync+0x8c>
            ENABLE(status);
    198e:	78 94       	sei
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	10 e0       	ldi	r17, 0x00	; 0
    1994:	28 c0       	rjmp	.+80     	; 0x19e6 <sync+0xdc>
            return 0;
        }
    }
    to->ownedBy = current;
    1996:	80 91 53 01 	lds	r24, 0x0153
    199a:	90 91 54 01 	lds	r25, 0x0154
    199e:	99 83       	std	Y+1, r25	; 0x01
    19a0:	88 83       	st	Y, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    19a2:	ff 20       	and	r15, r15
    19a4:	29 f0       	breq	.+10     	; 0x19b0 <sync+0xa6>
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	9b 81       	ldd	r25, Y+3	; 0x03
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <sync+0xa6>
    19ae:	78 94       	sei
    result = meth(to, arg);
    19b0:	b8 01       	movw	r22, r16
    19b2:	ce 01       	movw	r24, r28
    19b4:	f6 01       	movw	r30, r12
    19b6:	09 95       	icall
    19b8:	8c 01       	movw	r16, r24
    DISABLE(status_ignore);
    19ba:	8f b7       	in	r24, 0x3f	; 63
    19bc:	f8 94       	cli
    to->ownedBy = NULL; 
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	18 82       	st	Y, r1
    t = to->wantedBy;
    19c2:	ea 81       	ldd	r30, Y+2	; 0x02
    19c4:	fb 81       	ldd	r31, Y+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    19c6:	e2 30       	cpi	r30, 0x02	; 2
    19c8:	f1 05       	cpc	r31, r1
    19ca:	38 f0       	brcs	.+14     	; 0x19da <sync+0xd0>
        to->wantedBy = NULL; 
    19cc:	1b 82       	std	Y+3, r1	; 0x03
    19ce:	1a 82       	std	Y+2, r1	; 0x02
        t->waitsFor = NULL;
    19d0:	15 82       	std	Z+5, r1	; 0x05
    19d2:	14 82       	std	Z+4, r1	; 0x04
        dispatch(t);
    19d4:	cf 01       	movw	r24, r30
    19d6:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
    }
    ENABLE(status);
    19da:	ff 20       	and	r15, r15
    19dc:	21 f0       	breq	.+8      	; 0x19e6 <sync+0xdc>
    19de:	78 94       	sei
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <sync+0xdc>
    19e2:	0f ef       	ldi	r16, 0xFF	; 255
    19e4:	1f ef       	ldi	r17, 0xFF	; 255
    return result;
}
    19e6:	c8 01       	movw	r24, r16
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	08 95       	ret

000019f8 <run>:
        current = next;
        longjmp( next->context, 1 );
    }
}

static void run(void) {
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    19fc:	e0 91 53 01 	lds	r30, 0x0153
    1a00:	f0 91 54 01 	lds	r31, 0x0154
    else
        prev->next = p;
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1a04:	c0 91 6e 01 	lds	r28, 0x016E
    1a08:	d0 91 6f 01 	lds	r29, 0x016F
    if (m)
    1a0c:	20 97       	sbiw	r28, 0x00	; 0
    1a0e:	69 f1       	breq	.+90     	; 0x1a6a <run+0x72>
        *queue = m->next;
    1a10:	88 81       	ld	r24, Y
    1a12:	99 81       	ldd	r25, Y+1	; 0x01
    1a14:	90 93 6f 01 	sts	0x016F, r25
    1a18:	80 93 6e 01 	sts	0x016E, r24
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    1a1c:	d3 83       	std	Z+3, r29	; 0x03
    1a1e:	c2 83       	std	Z+2, r28	; 0x02
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    1a20:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    1a22:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a24:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a26:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a28:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2e:	0e 94 85 0c 	call	0x190a	; 0x190a <sync>
        DISABLE(status);
    1a32:	8f b7       	in	r24, 0x3f	; 63
    1a34:	f8 94       	cli
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
    1a36:	80 91 4d 01 	lds	r24, 0x014D
    1a3a:	90 91 4e 01 	lds	r25, 0x014E
    1a3e:	99 83       	std	Y+1, r25	; 0x01
    1a40:	88 83       	st	Y, r24
    *queue = m;
    1a42:	d0 93 4e 01 	sts	0x014E, r29
    1a46:	c0 93 4d 01 	sts	0x014D, r28
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
    1a4a:	60 91 51 01 	lds	r22, 0x0151
    1a4e:	70 91 52 01 	lds	r23, 0x0152
    1a52:	fb 01       	movw	r30, r22
    1a54:	c0 81       	ld	r28, Z
    1a56:	d1 81       	ldd	r29, Z+1	; 0x01
    1a58:	2a 81       	ldd	r18, Y+2	; 0x02
    1a5a:	3b 81       	ldd	r19, Y+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    1a5c:	e0 91 6e 01 	lds	r30, 0x016E
    1a60:	f0 91 6f 01 	lds	r31, 0x016F
    1a64:	30 97       	sbiw	r30, 0x00	; 0
    1a66:	61 f4       	brne	.+24     	; 0x1a80 <run+0x88>
    1a68:	22 c0       	rjmp	.+68     	; 0x1aae <run+0xb6>
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	80 93 ec 00 	sts	0x00EC, r24
    1a70:	80 93 ed 00 	sts	0x00ED, r24
    1a74:	80 93 ee 00 	sts	0x00EE, r24
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	83 bf       	out	0x33, r24	; 51
    1a7c:	88 95       	sleep
    1a7e:	fd cf       	rjmp	.-6      	; 0x1a7a <run+0x82>
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    1a80:	21 15       	cp	r18, r1
    1a82:	31 05       	cpc	r19, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <run+0x90>
    1a86:	ba cf       	rjmp	.-140    	; 0x19fc <run+0x4>
    1a88:	86 81       	ldd	r24, Z+6	; 0x06
    1a8a:	97 81       	ldd	r25, Z+7	; 0x07
    1a8c:	a0 85       	ldd	r26, Z+8	; 0x08
    1a8e:	b1 85       	ldd	r27, Z+9	; 0x09
    1a90:	f9 01       	movw	r30, r18
    1a92:	26 81       	ldd	r18, Z+6	; 0x06
    1a94:	37 81       	ldd	r19, Z+7	; 0x07
    1a96:	40 85       	ldd	r20, Z+8	; 0x08
    1a98:	51 85       	ldd	r21, Z+9	; 0x09
    1a9a:	82 1b       	sub	r24, r18
    1a9c:	93 0b       	sbc	r25, r19
    1a9e:	a4 0b       	sbc	r26, r20
    1aa0:	b5 0b       	sbc	r27, r21
    1aa2:	18 16       	cp	r1, r24
    1aa4:	19 06       	cpc	r1, r25
    1aa6:	1a 06       	cpc	r1, r26
    1aa8:	1b 06       	cpc	r1, r27
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <run+0xb6>
    1aac:	a7 cf       	rjmp	.-178    	; 0x19fc <run+0x4>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1aae:	d0 93 52 01 	sts	0x0152, r29
    1ab2:	c0 93 51 01 	sts	0x0151, r28
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1ab6:	80 91 4f 01 	lds	r24, 0x014F
    1aba:	90 91 50 01 	lds	r25, 0x0150
    1abe:	fb 01       	movw	r30, r22
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    *stack = t;
    1ac4:	70 93 50 01 	sts	0x0150, r23
    1ac8:	60 93 4f 01 	sts	0x014F, r22
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <run+0xda>
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
	            t = t->waitsFor->ownedBy;
    1ace:	c0 81       	ld	r28, Z
    1ad0:	d1 81       	ldd	r29, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    1ad2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ad6:	30 97       	sbiw	r30, 0x00	; 0
    1ad8:	d1 f7       	brne	.-12     	; 0x1ace <run+0xd6>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    1ada:	ce 01       	movw	r24, r28
    1adc:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
    1ae0:	8d cf       	rjmp	.-230    	; 0x19fc <run+0x4>

00001ae2 <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    1ae2:	3f 92       	push	r3
    1ae4:	4f 92       	push	r4
    1ae6:	5f 92       	push	r5
    1ae8:	6f 92       	push	r6
    1aea:	7f 92       	push	r7
    1aec:	8f 92       	push	r8
    1aee:	9f 92       	push	r9
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	0f 93       	push	r16
    1afe:	1f 93       	push	r17
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	2b 01       	movw	r4, r22
    1b06:	3c 01       	movw	r6, r24
    1b08:	49 01       	movw	r8, r18
    1b0a:	5a 01       	movw	r10, r20
    1b0c:	98 01       	movw	r18, r16
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1b0e:	8f b7       	in	r24, 0x3f	; 63
    1b10:	f8 94       	cli
    else
        prev->next = p;
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1b12:	00 91 4d 01 	lds	r16, 0x014D
    1b16:	10 91 4e 01 	lds	r17, 0x014E
    if (m)
    1b1a:	01 15       	cp	r16, r1
    1b1c:	11 05       	cpc	r17, r1
    1b1e:	d1 f0       	breq	.+52     	; 0x1b54 <async+0x72>
/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1b20:	70 e8       	ldi	r23, 0x80	; 128
    1b22:	37 2e       	mov	r3, r23
    1b24:	38 22       	and	r3, r24
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    1b26:	d8 01       	movw	r26, r16
    1b28:	8d 91       	ld	r24, X+
    1b2a:	9c 91       	ld	r25, X
    1b2c:	11 97       	sbiw	r26, 0x01	; 1
    1b2e:	90 93 4e 01 	sts	0x014E, r25
    1b32:	80 93 4d 01 	sts	0x014D, r24
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    m = dequeue(&msgPool);
    m->to = to; 
    1b36:	1b 96       	adiw	r26, 0x0b	; 11
    1b38:	3c 93       	st	X, r19
    1b3a:	2e 93       	st	-X, r18
    1b3c:	1a 97       	sbiw	r26, 0x0a	; 10
    m->method = meth; 
    1b3e:	1d 96       	adiw	r26, 0x0d	; 13
    1b40:	fc 92       	st	X, r15
    1b42:	ee 92       	st	-X, r14
    1b44:	1c 97       	sbiw	r26, 0x0c	; 12
    m->arg = arg;
    1b46:	1f 96       	adiw	r26, 0x0f	; 15
    1b48:	dc 92       	st	X, r13
    1b4a:	ce 92       	st	-X, r12
    1b4c:	1e 97       	sbiw	r26, 0x0e	; 14
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1b4e:	33 20       	and	r3, r3
    1b50:	61 f4       	brne	.+24     	; 0x1b6a <async+0x88>
    1b52:	17 c0       	rjmp	.+46     	; 0x1b82 <async+0xa0>
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	80 93 ec 00 	sts	0x00EC, r24
    1b5a:	80 93 ed 00 	sts	0x00ED, r24
    1b5e:	80 93 ee 00 	sts	0x00EE, r24
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	83 bf       	out	0x33, r24	; 51
    1b66:	88 95       	sleep
    1b68:	fd cf       	rjmp	.-6      	; 0x1b64 <async+0x82>
    DISABLE(status);
    m = dequeue(&msgPool);
    m->to = to; 
    m->method = meth; 
    m->arg = arg;
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1b6a:	e0 91 53 01 	lds	r30, 0x0153
    1b6e:	f0 91 54 01 	lds	r31, 0x0154
    1b72:	02 80       	ldd	r0, Z+2	; 0x02
    1b74:	f3 81       	ldd	r31, Z+3	; 0x03
    1b76:	e0 2d       	mov	r30, r0
    1b78:	62 81       	ldd	r22, Z+2	; 0x02
    1b7a:	73 81       	ldd	r23, Z+3	; 0x03
    1b7c:	84 81       	ldd	r24, Z+4	; 0x04
    1b7e:	95 81       	ldd	r25, Z+5	; 0x05
    1b80:	08 c0       	rjmp	.+16     	; 0x1b92 <async+0xb0>
    1b82:	60 91 72 01 	lds	r22, 0x0172
    1b86:	70 91 73 01 	lds	r23, 0x0173
    1b8a:	80 91 74 01 	lds	r24, 0x0174
    1b8e:	90 91 75 01 	lds	r25, 0x0175
    1b92:	9b 01       	movw	r18, r22
    1b94:	ac 01       	movw	r20, r24
    1b96:	24 0d       	add	r18, r4
    1b98:	35 1d       	adc	r19, r5
    1b9a:	46 1d       	adc	r20, r6
    1b9c:	57 1d       	adc	r21, r7
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	22 83       	std	Z+2, r18	; 0x02
    1ba2:	33 83       	std	Z+3, r19	; 0x03
    1ba4:	44 83       	std	Z+4, r20	; 0x04
    1ba6:	55 83       	std	Z+5, r21	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    1ba8:	18 14       	cp	r1, r8
    1baa:	19 04       	cpc	r1, r9
    1bac:	1a 04       	cpc	r1, r10
    1bae:	1b 04       	cpc	r1, r11
    1bb0:	44 f0       	brlt	.+16     	; 0x1bc2 <async+0xe0>
    1bb2:	6f ef       	ldi	r22, 0xFF	; 255
    1bb4:	86 2e       	mov	r8, r22
    1bb6:	6f ef       	ldi	r22, 0xFF	; 255
    1bb8:	96 2e       	mov	r9, r22
    1bba:	6f ef       	ldi	r22, 0xFF	; 255
    1bbc:	a6 2e       	mov	r10, r22
    1bbe:	6f e7       	ldi	r22, 0x7F	; 127
    1bc0:	b6 2e       	mov	r11, r22
    1bc2:	34 01       	movw	r6, r8
    1bc4:	45 01       	movw	r8, r10
    1bc6:	62 0e       	add	r6, r18
    1bc8:	73 1e       	adc	r7, r19
    1bca:	84 1e       	adc	r8, r20
    1bcc:	95 1e       	adc	r9, r21
    1bce:	d8 01       	movw	r26, r16
    1bd0:	16 96       	adiw	r26, 0x06	; 6
    1bd2:	6d 92       	st	X+, r6
    1bd4:	7d 92       	st	X+, r7
    1bd6:	8d 92       	st	X+, r8
    1bd8:	9c 92       	st	X, r9
    1bda:	19 97       	sbiw	r26, 0x09	; 9
    
    TIMERGET(now);
    1bdc:	e0 90 76 01 	lds	r14, 0x0176
    1be0:	f0 90 77 01 	lds	r15, 0x0177
    1be4:	e0 91 84 00 	lds	r30, 0x0084
    1be8:	f0 91 85 00 	lds	r31, 0x0085
    1bec:	b0 99       	sbic	0x16, 0	; 22
    1bee:	0a c0       	rjmp	.+20     	; 0x1c04 <async+0x122>
    1bf0:	c7 01       	movw	r24, r14
    1bf2:	aa 27       	eor	r26, r26
    1bf4:	97 fd       	sbrc	r25, 7
    1bf6:	a0 95       	com	r26
    1bf8:	ba 2f       	mov	r27, r26
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	33 27       	eor	r19, r19
    1bfe:	22 27       	eor	r18, r18
    1c00:	cf 01       	movw	r24, r30
    1c02:	12 c0       	rjmp	.+36     	; 0x1c28 <async+0x146>
    1c04:	80 91 84 00 	lds	r24, 0x0084
    1c08:	90 91 85 00 	lds	r25, 0x0085
    1c0c:	08 94       	sec
    1c0e:	e1 1c       	adc	r14, r1
    1c10:	f1 1c       	adc	r15, r1
    1c12:	97 01       	movw	r18, r14
    1c14:	44 27       	eor	r20, r20
    1c16:	37 fd       	sbrc	r19, 7
    1c18:	40 95       	com	r20
    1c1a:	54 2f       	mov	r21, r20
    1c1c:	08 94       	sec
    1c1e:	e1 08       	sbc	r14, r1
    1c20:	f1 08       	sbc	r15, r1
    1c22:	a9 01       	movw	r20, r18
    1c24:	33 27       	eor	r19, r19
    1c26:	22 27       	eor	r18, r18
    1c28:	a0 e0       	ldi	r26, 0x00	; 0
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	28 2b       	or	r18, r24
    1c2e:	39 2b       	or	r19, r25
    1c30:	4a 2b       	or	r20, r26
    1c32:	5b 2b       	or	r21, r27
    if (m->baseline - now > 0) {        // baseline has not yet passed
    1c34:	f8 01       	movw	r30, r16
    1c36:	a2 80       	ldd	r10, Z+2	; 0x02
    1c38:	b3 80       	ldd	r11, Z+3	; 0x03
    1c3a:	c4 80       	ldd	r12, Z+4	; 0x04
    1c3c:	d5 80       	ldd	r13, Z+5	; 0x05
    1c3e:	d6 01       	movw	r26, r12
    1c40:	c5 01       	movw	r24, r10
    1c42:	82 1b       	sub	r24, r18
    1c44:	93 0b       	sbc	r25, r19
    1c46:	a4 0b       	sbc	r26, r20
    1c48:	b5 0b       	sbc	r27, r21
    1c4a:	18 16       	cp	r1, r24
    1c4c:	19 06       	cpc	r1, r25
    1c4e:	1a 06       	cpc	r1, r26
    1c50:	1b 06       	cpc	r1, r27
    1c52:	0c f0       	brlt	.+2      	; 0x1c56 <async+0x174>
    1c54:	56 c0       	rjmp	.+172    	; 0x1d02 <async+0x220>
    else
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    1c56:	e0 91 70 01 	lds	r30, 0x0170
    1c5a:	f0 91 71 01 	lds	r31, 0x0171
    1c5e:	c0 e0       	ldi	r28, 0x00	; 0
    1c60:	d0 e0       	ldi	r29, 0x00	; 0
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <async+0x18c>
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    1c64:	ef 01       	movw	r28, r30
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	f9 01       	movw	r30, r18
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
    1c6e:	30 97       	sbiw	r30, 0x00	; 0
    1c70:	49 f0       	breq	.+18     	; 0x1c84 <async+0x1a2>
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	a4 81       	ldd	r26, Z+4	; 0x04
    1c78:	b5 81       	ldd	r27, Z+5	; 0x05
    1c7a:	a8 16       	cp	r10, r24
    1c7c:	b9 06       	cpc	r11, r25
    1c7e:	ca 06       	cpc	r12, r26
    1c80:	db 06       	cpc	r13, r27
    1c82:	84 f7       	brge	.-32     	; 0x1c64 <async+0x182>
        prev = q;
        q = q->next;
    }
    p->next = q;
    1c84:	d8 01       	movw	r26, r16
    1c86:	ed 93       	st	X+, r30
    1c88:	fc 93       	st	X, r31
    if (prev == NULL)
    1c8a:	20 97       	sbiw	r28, 0x00	; 0
    1c8c:	29 f4       	brne	.+10     	; 0x1c98 <async+0x1b6>
        *queue = p;
    1c8e:	10 93 71 01 	sts	0x0171, r17
    1c92:	00 93 70 01 	sts	0x0170, r16
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <async+0x1ba>
    else
        prev->next = p;
    1c98:	19 83       	std	Y+1, r17	; 0x01
    1c9a:	08 83       	st	Y, r16
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    
    TIMERGET(now);
    if (m->baseline - now > 0) {        // baseline has not yet passed
        enqueueByBaseline(m, &timerQ);
        TIMERSET(timerQ);
    1c9c:	e0 91 70 01 	lds	r30, 0x0170
    1ca0:	f0 91 71 01 	lds	r31, 0x0171
    1ca4:	30 97       	sbiw	r30, 0x00	; 0
    1ca6:	21 f1       	breq	.+72     	; 0x1cf0 <async+0x20e>
    1ca8:	22 81       	ldd	r18, Z+2	; 0x02
    1caa:	33 81       	ldd	r19, Z+3	; 0x03
    1cac:	44 81       	ldd	r20, Z+4	; 0x04
    1cae:	55 81       	ldd	r21, Z+5	; 0x05
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	97 fd       	sbrc	r25, 7
    1cb6:	b0 95       	com	r27
    1cb8:	ab 2f       	mov	r26, r27
    1cba:	e8 16       	cp	r14, r24
    1cbc:	f9 06       	cpc	r15, r25
    1cbe:	c1 f4       	brne	.+48     	; 0x1cf0 <async+0x20e>
    1cc0:	80 91 84 00 	lds	r24, 0x0084
    1cc4:	90 91 85 00 	lds	r25, 0x0085
    1cc8:	80 95       	com	r24
    1cca:	90 95       	com	r25
    1ccc:	82 0f       	add	r24, r18
    1cce:	93 1f       	adc	r25, r19
    1cd0:	89 2b       	or	r24, r25
    1cd2:	31 f4       	brne	.+12     	; 0x1ce0 <async+0x1fe>
    1cd4:	20 91 84 00 	lds	r18, 0x0084
    1cd8:	30 91 85 00 	lds	r19, 0x0085
    1cdc:	2f 5f       	subi	r18, 0xFF	; 255
    1cde:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce0:	30 93 89 00 	sts	0x0089, r19
    1ce4:	20 93 88 00 	sts	0x0088, r18
    1ce8:	80 91 6f 00 	lds	r24, 0x006F
    1cec:	82 60       	ori	r24, 0x02	; 2
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <async+0x214>
    1cf0:	80 91 6f 00 	lds	r24, 0x006F
    1cf4:	8d 7f       	andi	r24, 0xFD	; 253
    1cf6:	80 93 6f 00 	sts	0x006F, r24
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
        }
    }
    
    ENABLE(status);
    1cfa:	33 20       	and	r3, r3
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <async+0x21e>
    1cfe:	57 c0       	rjmp	.+174    	; 0x1dae <async+0x2cc>
    1d00:	57 c0       	rjmp	.+174    	; 0x1db0 <async+0x2ce>

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    1d02:	e0 91 6e 01 	lds	r30, 0x016E
    1d06:	f0 91 6f 01 	lds	r31, 0x016F
    1d0a:	c0 e0       	ldi	r28, 0x00	; 0
    1d0c:	d0 e0       	ldi	r29, 0x00	; 0
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <async+0x238>
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    1d10:	ef 01       	movw	r28, r30
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	9c 01       	movw	r18, r24
    1d18:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1d1a:	30 97       	sbiw	r30, 0x00	; 0
    1d1c:	49 f0       	breq	.+18     	; 0x1d30 <async+0x24e>
    1d1e:	86 81       	ldd	r24, Z+6	; 0x06
    1d20:	97 81       	ldd	r25, Z+7	; 0x07
    1d22:	a0 85       	ldd	r26, Z+8	; 0x08
    1d24:	b1 85       	ldd	r27, Z+9	; 0x09
    1d26:	68 16       	cp	r6, r24
    1d28:	79 06       	cpc	r7, r25
    1d2a:	8a 06       	cpc	r8, r26
    1d2c:	9b 06       	cpc	r9, r27
    1d2e:	84 f7       	brge	.-32     	; 0x1d10 <async+0x22e>
        prev = q;
        q = q->next;
    }
    p->next = q;
    1d30:	d8 01       	movw	r26, r16
    1d32:	ed 93       	st	X+, r30
    1d34:	fc 93       	st	X, r31
    if (prev == NULL)
    1d36:	20 97       	sbiw	r28, 0x00	; 0
    1d38:	29 f4       	brne	.+10     	; 0x1d44 <async+0x262>
        *queue = p;
    1d3a:	10 93 6f 01 	sts	0x016F, r17
    1d3e:	00 93 6e 01 	sts	0x016E, r16
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <async+0x266>
    else
        prev->next = p;
    1d44:	19 83       	std	Y+1, r17	; 0x01
    1d46:	08 83       	st	Y, r16
    if (m->baseline - now > 0) {        // baseline has not yet passed
        enqueueByBaseline(m, &timerQ);
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    1d48:	33 20       	and	r3, r3
    1d4a:	91 f1       	breq	.+100    	; 0x1db0 <async+0x2ce>
    1d4c:	c0 91 4f 01 	lds	r28, 0x014F
    1d50:	d0 91 50 01 	lds	r29, 0x0150
    1d54:	20 97       	sbiw	r28, 0x00	; 0
    1d56:	59 f1       	breq	.+86     	; 0x1dae <async+0x2cc>
    1d58:	60 91 51 01 	lds	r22, 0x0151
    1d5c:	70 91 52 01 	lds	r23, 0x0152
    1d60:	e0 91 6e 01 	lds	r30, 0x016E
    1d64:	f0 91 6f 01 	lds	r31, 0x016F
    1d68:	db 01       	movw	r26, r22
    1d6a:	12 96       	adiw	r26, 0x02	; 2
    1d6c:	2d 91       	ld	r18, X+
    1d6e:	3c 91       	ld	r19, X
    1d70:	13 97       	sbiw	r26, 0x03	; 3
    1d72:	86 81       	ldd	r24, Z+6	; 0x06
    1d74:	97 81       	ldd	r25, Z+7	; 0x07
    1d76:	a0 85       	ldd	r26, Z+8	; 0x08
    1d78:	b1 85       	ldd	r27, Z+9	; 0x09
    1d7a:	f9 01       	movw	r30, r18
    1d7c:	26 81       	ldd	r18, Z+6	; 0x06
    1d7e:	37 81       	ldd	r19, Z+7	; 0x07
    1d80:	40 85       	ldd	r20, Z+8	; 0x08
    1d82:	51 85       	ldd	r21, Z+9	; 0x09
    1d84:	82 1b       	sub	r24, r18
    1d86:	93 0b       	sbc	r25, r19
    1d88:	a4 0b       	sbc	r26, r20
    1d8a:	b5 0b       	sbc	r27, r21
    1d8c:	b7 ff       	sbrs	r27, 7
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <async+0x2cc>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1d90:	88 81       	ld	r24, Y
    1d92:	99 81       	ldd	r25, Y+1	; 0x01
    1d94:	90 93 50 01 	sts	0x0150, r25
    1d98:	80 93 4f 01 	sts	0x014F, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1d9c:	79 83       	std	Y+1, r23	; 0x01
    1d9e:	68 83       	st	Y, r22
    *stack = t;
    1da0:	d0 93 52 01 	sts	0x0152, r29
    1da4:	c0 93 51 01 	sts	0x0151, r28
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
    1da8:	ce 01       	movw	r24, r28
    1daa:	0e 94 80 03 	call	0x700	; 0x700 <dispatch>
        }
    }
    
    ENABLE(status);
    1dae:	78 94       	sei
    return m;
}
    1db0:	c8 01       	movw	r24, r16
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	7f 90       	pop	r7
    1dcc:	6f 90       	pop	r6
    1dce:	5f 90       	pop	r5
    1dd0:	4f 90       	pop	r4
    1dd2:	3f 90       	pop	r3
    1dd4:	08 95       	ret

00001dd6 <writeDigit>:
#define clrscr {LCDDR0&=0x66;LCDDR1&=0x66;LCDDR2&=0x66;LCDDR5=0x00;LCDDR6=0x00;LCDDR7=0x00;LCDDR10=0x00;LCDDR11=0x00;LCDDR12=0x00;LCDDR15=0x00;LCDDR16=0x00;LCDDR17=0x00;}

static int seg[]={0x1551,0x8110,0x11e1,0x11b1,0x05b0,0x14b1,0x14f1,0x1110,0x15f1,0x15b1};

int  writeDigit(LCD *self, int digitPos)
{
    1dd6:	fb 01       	movw	r30, r22
	switch(digitPos%10)
    1dd8:	cb 01       	movw	r24, r22
    1dda:	6a e0       	ldi	r22, 0x0A	; 10
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    1de2:	82 30       	cpi	r24, 0x02	; 2
    1de4:	91 05       	cpc	r25, r1
    1de6:	09 f4       	brne	.+2      	; 0x1dea <writeDigit+0x14>
    1de8:	82 c0       	rjmp	.+260    	; 0x1eee <writeDigit+0x118>
    1dea:	83 30       	cpi	r24, 0x03	; 3
    1dec:	91 05       	cpc	r25, r1
    1dee:	34 f4       	brge	.+12     	; 0x1dfc <writeDigit+0x26>
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	81 f0       	breq	.+32     	; 0x1e14 <writeDigit+0x3e>
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <writeDigit+0x24>
    1df8:	53 c1       	rjmp	.+678    	; 0x20a0 <writeDigit+0x2ca>
    1dfa:	41 c0       	rjmp	.+130    	; 0x1e7e <writeDigit+0xa8>
    1dfc:	84 30       	cpi	r24, 0x04	; 4
    1dfe:	91 05       	cpc	r25, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <writeDigit+0x2e>
    1e02:	e2 c0       	rjmp	.+452    	; 0x1fc8 <writeDigit+0x1f2>
    1e04:	84 30       	cpi	r24, 0x04	; 4
    1e06:	91 05       	cpc	r25, r1
    1e08:	0c f4       	brge	.+2      	; 0x1e0c <writeDigit+0x36>
    1e0a:	a6 c0       	rjmp	.+332    	; 0x1f58 <writeDigit+0x182>
    1e0c:	05 97       	sbiw	r24, 0x05	; 5
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <writeDigit+0x3c>
    1e10:	47 c1       	rjmp	.+654    	; 0x20a0 <writeDigit+0x2ca>
    1e12:	0f c1       	rjmp	.+542    	; 0x2032 <writeDigit+0x25c>
	{
		case 0:
		{
			LCDDR0 = (LCDDR0 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1e14:	40 91 ec 00 	lds	r20, 0x00EC
    1e18:	cf 01       	movw	r24, r30
    1e1a:	6a e0       	ldi	r22, 0x0A	; 10
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    1e22:	fb 01       	movw	r30, r22
    1e24:	ee 0f       	add	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	eb 5a       	subi	r30, 0xAB	; 171
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	20 81       	ld	r18, Z
    1e2e:	31 81       	ldd	r19, Z+1	; 0x01
    1e30:	83 2f       	mov	r24, r19
    1e32:	82 95       	swap	r24
    1e34:	8f 70       	andi	r24, 0x0F	; 15
    1e36:	40 7f       	andi	r20, 0xF0	; 240
    1e38:	48 2b       	or	r20, r24
    1e3a:	40 93 ec 00 	sts	0x00EC, r20
			LCDDR5 = (LCDDR5 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1e3e:	40 91 f1 00 	lds	r20, 0x00F1
    1e42:	83 2f       	mov	r24, r19
    1e44:	99 27       	eor	r25, r25
    1e46:	87 fd       	sbrc	r24, 7
    1e48:	9a 95       	dec	r25
    1e4a:	8f 70       	andi	r24, 0x0F	; 15
    1e4c:	40 7f       	andi	r20, 0xF0	; 240
    1e4e:	84 2b       	or	r24, r20
    1e50:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1e54:	40 91 f6 00 	lds	r20, 0x00F6
    1e58:	c9 01       	movw	r24, r18
    1e5a:	e4 e0       	ldi	r30, 0x04	; 4
    1e5c:	95 95       	asr	r25
    1e5e:	87 95       	ror	r24
    1e60:	ea 95       	dec	r30
    1e62:	e1 f7       	brne	.-8      	; 0x1e5c <writeDigit+0x86>
    1e64:	8f 70       	andi	r24, 0x0F	; 15
    1e66:	40 7f       	andi	r20, 0xF0	; 240
    1e68:	84 2b       	or	r24, r20
    1e6a:	80 93 f6 00 	sts	0x00F6, r24
			LCDDR15 = (LCDDR15 & 0xf0) | (seg[digitPos/10]&0x000f);
    1e6e:	80 91 fb 00 	lds	r24, 0x00FB
    1e72:	2f 70       	andi	r18, 0x0F	; 15
    1e74:	80 7f       	andi	r24, 0xF0	; 240
    1e76:	28 2b       	or	r18, r24
    1e78:	20 93 fb 00 	sts	0x00FB, r18
    1e7c:	08 95       	ret
			break;
		}
		case 1:
		{
			LCDDR0 = (LCDDR0 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1e7e:	20 91 ec 00 	lds	r18, 0x00EC
    1e82:	cf 01       	movw	r24, r30
    1e84:	6a e0       	ldi	r22, 0x0A	; 10
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    1e8c:	fb 01       	movw	r30, r22
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	eb 5a       	subi	r30, 0xAB	; 171
    1e94:	fe 4f       	sbci	r31, 0xFE	; 254
    1e96:	40 81       	ld	r20, Z
    1e98:	51 81       	ldd	r21, Z+1	; 0x01
    1e9a:	85 2f       	mov	r24, r21
    1e9c:	99 27       	eor	r25, r25
    1e9e:	87 fd       	sbrc	r24, 7
    1ea0:	9a 95       	dec	r25
    1ea2:	80 7f       	andi	r24, 0xF0	; 240
    1ea4:	2f 70       	andi	r18, 0x0F	; 15
    1ea6:	82 2b       	or	r24, r18
    1ea8:	80 93 ec 00 	sts	0x00EC, r24
			LCDDR5 = (LCDDR5 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1eac:	20 91 f1 00 	lds	r18, 0x00F1
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	34 e0       	ldi	r19, 0x04	; 4
    1eb4:	95 95       	asr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	3a 95       	dec	r19
    1eba:	e1 f7       	brne	.-8      	; 0x1eb4 <writeDigit+0xde>
    1ebc:	80 7f       	andi	r24, 0xF0	; 240
    1ebe:	2f 70       	andi	r18, 0x0F	; 15
    1ec0:	82 2b       	or	r24, r18
    1ec2:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1ec6:	80 91 f6 00 	lds	r24, 0x00F6
    1eca:	94 2f       	mov	r25, r20
    1ecc:	90 7f       	andi	r25, 0xF0	; 240
    1ece:	8f 70       	andi	r24, 0x0F	; 15
    1ed0:	98 2b       	or	r25, r24
    1ed2:	90 93 f6 00 	sts	0x00F6, r25
			LCDDR15 = (LCDDR15 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1ed6:	80 91 fb 00 	lds	r24, 0x00FB
    1eda:	b4 e0       	ldi	r27, 0x04	; 4
    1edc:	44 0f       	add	r20, r20
    1ede:	55 1f       	adc	r21, r21
    1ee0:	ba 95       	dec	r27
    1ee2:	e1 f7       	brne	.-8      	; 0x1edc <writeDigit+0x106>
    1ee4:	8f 70       	andi	r24, 0x0F	; 15
    1ee6:	84 2b       	or	r24, r20
    1ee8:	80 93 fb 00 	sts	0x00FB, r24
    1eec:	08 95       	ret
			break;
		}
		case 2:
		{
			LCDDR1 = (LCDDR1 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1eee:	40 91 ed 00 	lds	r20, 0x00ED
    1ef2:	cf 01       	movw	r24, r30
    1ef4:	6a e0       	ldi	r22, 0x0A	; 10
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    1efc:	fb 01       	movw	r30, r22
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	eb 5a       	subi	r30, 0xAB	; 171
    1f04:	fe 4f       	sbci	r31, 0xFE	; 254
    1f06:	20 81       	ld	r18, Z
    1f08:	31 81       	ldd	r19, Z+1	; 0x01
    1f0a:	83 2f       	mov	r24, r19
    1f0c:	82 95       	swap	r24
    1f0e:	8f 70       	andi	r24, 0x0F	; 15
    1f10:	40 7f       	andi	r20, 0xF0	; 240
    1f12:	48 2b       	or	r20, r24
    1f14:	40 93 ed 00 	sts	0x00ED, r20
			LCDDR6 = (LCDDR6 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1f18:	40 91 f2 00 	lds	r20, 0x00F2
    1f1c:	83 2f       	mov	r24, r19
    1f1e:	99 27       	eor	r25, r25
    1f20:	87 fd       	sbrc	r24, 7
    1f22:	9a 95       	dec	r25
    1f24:	8f 70       	andi	r24, 0x0F	; 15
    1f26:	40 7f       	andi	r20, 0xF0	; 240
    1f28:	84 2b       	or	r24, r20
    1f2a:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1f2e:	40 91 f7 00 	lds	r20, 0x00F7
    1f32:	c9 01       	movw	r24, r18
    1f34:	e4 e0       	ldi	r30, 0x04	; 4
    1f36:	95 95       	asr	r25
    1f38:	87 95       	ror	r24
    1f3a:	ea 95       	dec	r30
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <writeDigit+0x160>
    1f3e:	8f 70       	andi	r24, 0x0F	; 15
    1f40:	40 7f       	andi	r20, 0xF0	; 240
    1f42:	84 2b       	or	r24, r20
    1f44:	80 93 f7 00 	sts	0x00F7, r24
			LCDDR16 = (LCDDR16 & 0xf0) | (seg[digitPos/10]&0x000f);
    1f48:	80 91 fc 00 	lds	r24, 0x00FC
    1f4c:	2f 70       	andi	r18, 0x0F	; 15
    1f4e:	80 7f       	andi	r24, 0xF0	; 240
    1f50:	28 2b       	or	r18, r24
    1f52:	20 93 fc 00 	sts	0x00FC, r18
    1f56:	08 95       	ret
			break;
		}
		case 3:
		{
			LCDDR1 = (LCDDR1 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1f58:	20 91 ed 00 	lds	r18, 0x00ED
    1f5c:	cf 01       	movw	r24, r30
    1f5e:	6a e0       	ldi	r22, 0x0A	; 10
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    1f66:	fb 01       	movw	r30, r22
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	eb 5a       	subi	r30, 0xAB	; 171
    1f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f70:	40 81       	ld	r20, Z
    1f72:	51 81       	ldd	r21, Z+1	; 0x01
    1f74:	85 2f       	mov	r24, r21
    1f76:	99 27       	eor	r25, r25
    1f78:	87 fd       	sbrc	r24, 7
    1f7a:	9a 95       	dec	r25
    1f7c:	80 7f       	andi	r24, 0xF0	; 240
    1f7e:	2f 70       	andi	r18, 0x0F	; 15
    1f80:	82 2b       	or	r24, r18
    1f82:	80 93 ed 00 	sts	0x00ED, r24
			LCDDR6 = (LCDDR6 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1f86:	20 91 f2 00 	lds	r18, 0x00F2
    1f8a:	ca 01       	movw	r24, r20
    1f8c:	34 e0       	ldi	r19, 0x04	; 4
    1f8e:	95 95       	asr	r25
    1f90:	87 95       	ror	r24
    1f92:	3a 95       	dec	r19
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <writeDigit+0x1b8>
    1f96:	80 7f       	andi	r24, 0xF0	; 240
    1f98:	2f 70       	andi	r18, 0x0F	; 15
    1f9a:	82 2b       	or	r24, r18
    1f9c:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1fa0:	80 91 f7 00 	lds	r24, 0x00F7
    1fa4:	94 2f       	mov	r25, r20
    1fa6:	90 7f       	andi	r25, 0xF0	; 240
    1fa8:	8f 70       	andi	r24, 0x0F	; 15
    1faa:	98 2b       	or	r25, r24
    1fac:	90 93 f7 00 	sts	0x00F7, r25
			LCDDR16 = (LCDDR16 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1fb0:	80 91 fc 00 	lds	r24, 0x00FC
    1fb4:	b4 e0       	ldi	r27, 0x04	; 4
    1fb6:	44 0f       	add	r20, r20
    1fb8:	55 1f       	adc	r21, r21
    1fba:	ba 95       	dec	r27
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <writeDigit+0x1e0>
    1fbe:	8f 70       	andi	r24, 0x0F	; 15
    1fc0:	84 2b       	or	r24, r20
    1fc2:	80 93 fc 00 	sts	0x00FC, r24
    1fc6:	08 95       	ret
			break;
		}
		case 4:
		{
			LCDDR2 = (LCDDR2 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1fc8:	40 91 ee 00 	lds	r20, 0x00EE
    1fcc:	cf 01       	movw	r24, r30
    1fce:	6a e0       	ldi	r22, 0x0A	; 10
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	eb 5a       	subi	r30, 0xAB	; 171
    1fde:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe0:	20 81       	ld	r18, Z
    1fe2:	31 81       	ldd	r19, Z+1	; 0x01
    1fe4:	83 2f       	mov	r24, r19
    1fe6:	82 95       	swap	r24
    1fe8:	8f 70       	andi	r24, 0x0F	; 15
    1fea:	40 7f       	andi	r20, 0xF0	; 240
    1fec:	48 2b       	or	r20, r24
    1fee:	40 93 ee 00 	sts	0x00EE, r20
			LCDDR7 = (LCDDR7 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1ff2:	40 91 f3 00 	lds	r20, 0x00F3
    1ff6:	83 2f       	mov	r24, r19
    1ff8:	99 27       	eor	r25, r25
    1ffa:	87 fd       	sbrc	r24, 7
    1ffc:	9a 95       	dec	r25
    1ffe:	8f 70       	andi	r24, 0x0F	; 15
    2000:	40 7f       	andi	r20, 0xF0	; 240
    2002:	84 2b       	or	r24, r20
    2004:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    2008:	40 91 f8 00 	lds	r20, 0x00F8
    200c:	c9 01       	movw	r24, r18
    200e:	e4 e0       	ldi	r30, 0x04	; 4
    2010:	95 95       	asr	r25
    2012:	87 95       	ror	r24
    2014:	ea 95       	dec	r30
    2016:	e1 f7       	brne	.-8      	; 0x2010 <writeDigit+0x23a>
    2018:	8f 70       	andi	r24, 0x0F	; 15
    201a:	40 7f       	andi	r20, 0xF0	; 240
    201c:	84 2b       	or	r24, r20
    201e:	80 93 f8 00 	sts	0x00F8, r24
			LCDDR17 = (LCDDR17 & 0xf0) | (seg[digitPos/10]&0x000f);
    2022:	80 91 fd 00 	lds	r24, 0x00FD
    2026:	2f 70       	andi	r18, 0x0F	; 15
    2028:	80 7f       	andi	r24, 0xF0	; 240
    202a:	28 2b       	or	r18, r24
    202c:	20 93 fd 00 	sts	0x00FD, r18
    2030:	08 95       	ret
			break;
		}
		case 5:
		{
			LCDDR2 = (LCDDR2 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    2032:	20 91 ee 00 	lds	r18, 0x00EE
    2036:	cf 01       	movw	r24, r30
    2038:	6a e0       	ldi	r22, 0x0A	; 10
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    2040:	fb 01       	movw	r30, r22
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	eb 5a       	subi	r30, 0xAB	; 171
    2048:	fe 4f       	sbci	r31, 0xFE	; 254
    204a:	40 81       	ld	r20, Z
    204c:	51 81       	ldd	r21, Z+1	; 0x01
    204e:	85 2f       	mov	r24, r21
    2050:	99 27       	eor	r25, r25
    2052:	87 fd       	sbrc	r24, 7
    2054:	9a 95       	dec	r25
    2056:	80 7f       	andi	r24, 0xF0	; 240
    2058:	2f 70       	andi	r18, 0x0F	; 15
    205a:	82 2b       	or	r24, r18
    205c:	80 93 ee 00 	sts	0x00EE, r24
			LCDDR7 = (LCDDR7 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    2060:	20 91 f3 00 	lds	r18, 0x00F3
    2064:	ca 01       	movw	r24, r20
    2066:	34 e0       	ldi	r19, 0x04	; 4
    2068:	95 95       	asr	r25
    206a:	87 95       	ror	r24
    206c:	3a 95       	dec	r19
    206e:	e1 f7       	brne	.-8      	; 0x2068 <writeDigit+0x292>
    2070:	80 7f       	andi	r24, 0xF0	; 240
    2072:	2f 70       	andi	r18, 0x0F	; 15
    2074:	82 2b       	or	r24, r18
    2076:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    207a:	80 91 f8 00 	lds	r24, 0x00F8
    207e:	94 2f       	mov	r25, r20
    2080:	90 7f       	andi	r25, 0xF0	; 240
    2082:	8f 70       	andi	r24, 0x0F	; 15
    2084:	98 2b       	or	r25, r24
    2086:	90 93 f8 00 	sts	0x00F8, r25
			LCDDR17 = (LCDDR17 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    208a:	80 91 fd 00 	lds	r24, 0x00FD
    208e:	94 e0       	ldi	r25, 0x04	; 4
    2090:	44 0f       	add	r20, r20
    2092:	55 1f       	adc	r21, r21
    2094:	9a 95       	dec	r25
    2096:	e1 f7       	brne	.-8      	; 0x2090 <writeDigit+0x2ba>
    2098:	8f 70       	andi	r24, 0x0F	; 15
    209a:	84 2b       	or	r24, r20
    209c:	80 93 fd 00 	sts	0x00FD, r24
			break;
		}
		default:;
	}
}
    20a0:	08 95       	ret

000020a2 <writeInt>:


int  writeInt(LCD *self, int val)
{
    20a2:	af 92       	push	r10
    20a4:	bf 92       	push	r11
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <writeInt+0x14>
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <writeInt+0x16>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <writeInt+0x18>
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	5c 01       	movw	r10, r24
    20c0:	16 2f       	mov	r17, r22
    20c2:	47 2f       	mov	r20, r23
	unsigned char a[6],j=5,n=1,k;
	int temp=val;
	
	clrscr;
    20c4:	80 91 ec 00 	lds	r24, 0x00EC
    20c8:	86 76       	andi	r24, 0x66	; 102
    20ca:	80 93 ec 00 	sts	0x00EC, r24
    20ce:	80 91 ed 00 	lds	r24, 0x00ED
    20d2:	86 76       	andi	r24, 0x66	; 102
    20d4:	80 93 ed 00 	sts	0x00ED, r24
    20d8:	80 91 ee 00 	lds	r24, 0x00EE
    20dc:	86 76       	andi	r24, 0x66	; 102
    20de:	80 93 ee 00 	sts	0x00EE, r24
    20e2:	10 92 f1 00 	sts	0x00F1, r1
    20e6:	10 92 f2 00 	sts	0x00F2, r1
    20ea:	10 92 f3 00 	sts	0x00F3, r1
    20ee:	10 92 f6 00 	sts	0x00F6, r1
    20f2:	10 92 f7 00 	sts	0x00F7, r1
    20f6:	10 92 f8 00 	sts	0x00F8, r1
    20fa:	10 92 fb 00 	sts	0x00FB, r1
    20fe:	10 92 fc 00 	sts	0x00FC, r1
    2102:	10 92 fd 00 	sts	0x00FD, r1
    2106:	26 2f       	mov	r18, r22
    2108:	37 2f       	mov	r19, r23
    210a:	c9 01       	movw	r24, r18
    210c:	01 e0       	ldi	r16, 0x01	; 1
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <writeInt+0x70>
	
	while(temp/=10) n++;
    2110:	0f 5f       	subi	r16, 0xFF	; 255
    2112:	6a e0       	ldi	r22, 0x0A	; 10
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    211a:	cb 01       	movw	r24, r22
    211c:	61 15       	cp	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	b9 f7       	brne	.-18     	; 0x2110 <writeInt+0x6e>
	if(n>6) n=6;
    2122:	07 30       	cpi	r16, 0x07	; 7
    2124:	08 f0       	brcs	.+2      	; 0x2128 <writeInt+0x86>
    2126:	06 e0       	ldi	r16, 0x06	; 6
    2128:	30 2f       	mov	r19, r16
    212a:	25 e0       	ldi	r18, 0x05	; 5
	k=n;
	while(k--)
	{
		a[j]=val%10;
    212c:	7e 01       	movw	r14, r28
    212e:	08 94       	sec
    2130:	e1 1c       	adc	r14, r1
    2132:	f1 1c       	adc	r15, r1
    2134:	14 c0       	rjmp	.+40     	; 0x215e <writeInt+0xbc>
    2136:	f7 01       	movw	r30, r14
    2138:	e2 0f       	add	r30, r18
    213a:	f1 1d       	adc	r31, r1
    213c:	81 2f       	mov	r24, r17
    213e:	94 2f       	mov	r25, r20
    2140:	6a e0       	ldi	r22, 0x0A	; 10
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    2148:	80 83       	st	Z, r24
		val/=10;
    214a:	81 2f       	mov	r24, r17
    214c:	94 2f       	mov	r25, r20
    214e:	6a e0       	ldi	r22, 0x0A	; 10
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    2156:	16 2f       	mov	r17, r22
    2158:	47 2f       	mov	r20, r23
		j--;
    215a:	21 50       	subi	r18, 0x01	; 1
    215c:	31 50       	subi	r19, 0x01	; 1
	clrscr;
	
	while(temp/=10) n++;
	if(n>6) n=6;
	k=n;
	while(k--)
    215e:	33 23       	and	r19, r19
    2160:	51 f7       	brne	.-44     	; 0x2136 <writeInt+0x94>
    2162:	15 e0       	ldi	r17, 0x05	; 5
		j--;
	}
	j=5;
	while(n--)
	{
		writeDigit(self, a[j]*10+j);
    2164:	7e 01       	movw	r14, r28
    2166:	08 94       	sec
    2168:	e1 1c       	adc	r14, r1
    216a:	f1 1c       	adc	r15, r1
    216c:	ba e0       	ldi	r27, 0x0A	; 10
    216e:	db 2e       	mov	r13, r27
    2170:	10 c0       	rjmp	.+32     	; 0x2192 <writeInt+0xf0>
    2172:	81 2f       	mov	r24, r17
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	f7 01       	movw	r30, r14
    2178:	e8 0f       	add	r30, r24
    217a:	f9 1f       	adc	r31, r25
    217c:	60 81       	ld	r22, Z
    217e:	6d 9d       	mul	r22, r13
    2180:	b0 01       	movw	r22, r0
    2182:	11 24       	eor	r1, r1
    2184:	68 0f       	add	r22, r24
    2186:	79 1f       	adc	r23, r25
    2188:	c5 01       	movw	r24, r10
    218a:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <writeDigit>
		j--;
    218e:	11 50       	subi	r17, 0x01	; 1
    2190:	01 50       	subi	r16, 0x01	; 1
		a[j]=val%10;
		val/=10;
		j--;
	}
	j=5;
	while(n--)
    2192:	00 23       	and	r16, r16
    2194:	71 f7       	brne	.-36     	; 0x2172 <writeInt+0xd0>
	{
		writeDigit(self, a[j]*10+j);
		j--;
	}
}
    2196:	26 96       	adiw	r28, 0x06	; 6
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	df 90       	pop	r13
    21b0:	bf 90       	pop	r11
    21b2:	af 90       	pop	r10
    21b4:	08 95       	ret

000021b6 <segmentOn>:


int  segmentOn(LCD *self, int segment)
{
	switch(segment)
    21b6:	65 30       	cpi	r22, 0x05	; 5
    21b8:	71 05       	cpc	r23, r1
    21ba:	c1 f1       	breq	.+112    	; 0x222c <segmentOn+0x76>
    21bc:	66 30       	cpi	r22, 0x06	; 6
    21be:	71 05       	cpc	r23, r1
    21c0:	94 f4       	brge	.+36     	; 0x21e6 <segmentOn+0x30>
    21c2:	62 30       	cpi	r22, 0x02	; 2
    21c4:	71 05       	cpc	r23, r1
    21c6:	21 f1       	breq	.+72     	; 0x2210 <segmentOn+0x5a>
    21c8:	63 30       	cpi	r22, 0x03	; 3
    21ca:	71 05       	cpc	r23, r1
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <segmentOn+0x22>
    21ce:	61 30       	cpi	r22, 0x01	; 1
    21d0:	71 05       	cpc	r23, r1
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <segmentOn+0x20>
    21d4:	40 c0       	rjmp	.+128    	; 0x2256 <segmentOn+0xa0>
    21d6:	18 c0       	rjmp	.+48     	; 0x2208 <segmentOn+0x52>
    21d8:	63 30       	cpi	r22, 0x03	; 3
    21da:	71 05       	cpc	r23, r1
    21dc:	f9 f0       	breq	.+62     	; 0x221c <segmentOn+0x66>
    21de:	64 30       	cpi	r22, 0x04	; 4
    21e0:	71 05       	cpc	r23, r1
    21e2:	c9 f5       	brne	.+114    	; 0x2256 <segmentOn+0xa0>
    21e4:	1f c0       	rjmp	.+62     	; 0x2224 <segmentOn+0x6e>
    21e6:	68 30       	cpi	r22, 0x08	; 8
    21e8:	71 05       	cpc	r23, r1
    21ea:	31 f1       	breq	.+76     	; 0x2238 <segmentOn+0x82>
    21ec:	69 30       	cpi	r22, 0x09	; 9
    21ee:	71 05       	cpc	r23, r1
    21f0:	24 f4       	brge	.+8      	; 0x21fa <segmentOn+0x44>
    21f2:	67 30       	cpi	r22, 0x07	; 7
    21f4:	71 05       	cpc	r23, r1
    21f6:	79 f5       	brne	.+94     	; 0x2256 <segmentOn+0xa0>
    21f8:	1f c0       	rjmp	.+62     	; 0x2238 <segmentOn+0x82>
    21fa:	69 30       	cpi	r22, 0x09	; 9
    21fc:	71 05       	cpc	r23, r1
    21fe:	01 f1       	breq	.+64     	; 0x2240 <segmentOn+0x8a>
    2200:	6a 30       	cpi	r22, 0x0A	; 10
    2202:	71 05       	cpc	r23, r1
    2204:	41 f5       	brne	.+80     	; 0x2256 <segmentOn+0xa0>
    2206:	22 c0       	rjmp	.+68     	; 0x224c <segmentOn+0x96>
	{
		case 1: LCDDR0|=0x04;break;
    2208:	80 91 ec 00 	lds	r24, 0x00EC
    220c:	84 60       	ori	r24, 0x04	; 4
    220e:	03 c0       	rjmp	.+6      	; 0x2216 <segmentOn+0x60>
		case 2: LCDDR0|=0x40;break;
    2210:	80 91 ec 00 	lds	r24, 0x00EC
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	80 93 ec 00 	sts	0x00EC, r24
    221a:	08 95       	ret
		case 3: LCDDR3 =0x01;break;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	80 93 ef 00 	sts	0x00EF, r24
    2222:	08 95       	ret
		case 4: LCDDR1|=0x02;break;
    2224:	80 91 ed 00 	lds	r24, 0x00ED
    2228:	82 60       	ori	r24, 0x02	; 2
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <segmentOn+0x7c>
		case 5: LCDDR1|=0x20;break;
    222c:	80 91 ed 00 	lds	r24, 0x00ED
    2230:	80 62       	ori	r24, 0x20	; 32
    2232:	80 93 ed 00 	sts	0x00ED, r24
    2236:	08 95       	ret
		case 7: LCDDR18=0x01;break;
		case 8: LCDDR18=0x01;break;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 fe 00 	sts	0x00FE, r24
    223e:	08 95       	ret
		case 9: LCDDR2|=0x04;break;
    2240:	80 91 ee 00 	lds	r24, 0x00EE
    2244:	84 60       	ori	r24, 0x04	; 4
    2246:	80 93 ee 00 	sts	0x00EE, r24
    224a:	08 95       	ret
		case 10: LCDDR2|=0x40;break;
    224c:	80 91 ee 00 	lds	r24, 0x00EE
    2250:	80 64       	ori	r24, 0x40	; 64
    2252:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    2256:	08 95       	ret

00002258 <segmentOff>:


int  segmentOff(LCD *self, int segment)
{
	switch(segment)
    2258:	65 30       	cpi	r22, 0x05	; 5
    225a:	71 05       	cpc	r23, r1
    225c:	b1 f1       	breq	.+108    	; 0x22ca <segmentOff+0x72>
    225e:	66 30       	cpi	r22, 0x06	; 6
    2260:	71 05       	cpc	r23, r1
    2262:	8c f4       	brge	.+34     	; 0x2286 <segmentOff+0x2e>
    2264:	62 30       	cpi	r22, 0x02	; 2
    2266:	71 05       	cpc	r23, r1
    2268:	19 f1       	breq	.+70     	; 0x22b0 <segmentOff+0x58>
    226a:	63 30       	cpi	r22, 0x03	; 3
    226c:	71 05       	cpc	r23, r1
    226e:	24 f4       	brge	.+8      	; 0x2278 <segmentOff+0x20>
    2270:	61 30       	cpi	r22, 0x01	; 1
    2272:	71 05       	cpc	r23, r1
    2274:	f1 f5       	brne	.+124    	; 0x22f2 <segmentOff+0x9a>
    2276:	18 c0       	rjmp	.+48     	; 0x22a8 <segmentOff+0x50>
    2278:	63 30       	cpi	r22, 0x03	; 3
    227a:	71 05       	cpc	r23, r1
    227c:	f9 f0       	breq	.+62     	; 0x22bc <segmentOff+0x64>
    227e:	64 30       	cpi	r22, 0x04	; 4
    2280:	71 05       	cpc	r23, r1
    2282:	b9 f5       	brne	.+110    	; 0x22f2 <segmentOff+0x9a>
    2284:	1e c0       	rjmp	.+60     	; 0x22c2 <segmentOff+0x6a>
    2286:	68 30       	cpi	r22, 0x08	; 8
    2288:	71 05       	cpc	r23, r1
    228a:	29 f1       	breq	.+74     	; 0x22d6 <segmentOff+0x7e>
    228c:	69 30       	cpi	r22, 0x09	; 9
    228e:	71 05       	cpc	r23, r1
    2290:	24 f4       	brge	.+8      	; 0x229a <segmentOff+0x42>
    2292:	67 30       	cpi	r22, 0x07	; 7
    2294:	71 05       	cpc	r23, r1
    2296:	69 f5       	brne	.+90     	; 0x22f2 <segmentOff+0x9a>
    2298:	1e c0       	rjmp	.+60     	; 0x22d6 <segmentOff+0x7e>
    229a:	69 30       	cpi	r22, 0x09	; 9
    229c:	71 05       	cpc	r23, r1
    229e:	f1 f0       	breq	.+60     	; 0x22dc <segmentOff+0x84>
    22a0:	6a 30       	cpi	r22, 0x0A	; 10
    22a2:	71 05       	cpc	r23, r1
    22a4:	31 f5       	brne	.+76     	; 0x22f2 <segmentOff+0x9a>
    22a6:	20 c0       	rjmp	.+64     	; 0x22e8 <segmentOff+0x90>
	{
		case 1: LCDDR0&=~0x04;break;
    22a8:	80 91 ec 00 	lds	r24, 0x00EC
    22ac:	8b 7f       	andi	r24, 0xFB	; 251
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <segmentOff+0x5e>
		case 2: LCDDR0&=~0x40;break;
    22b0:	80 91 ec 00 	lds	r24, 0x00EC
    22b4:	8f 7b       	andi	r24, 0xBF	; 191
    22b6:	80 93 ec 00 	sts	0x00EC, r24
    22ba:	08 95       	ret
		case 3: LCDDR3 = 0x00;break;
    22bc:	10 92 ef 00 	sts	0x00EF, r1
    22c0:	08 95       	ret
		case 4: LCDDR1&=~0x02;break;
    22c2:	80 91 ed 00 	lds	r24, 0x00ED
    22c6:	8d 7f       	andi	r24, 0xFD	; 253
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <segmentOff+0x78>
		case 5: LCDDR1&=~0x20;break;
    22ca:	80 91 ed 00 	lds	r24, 0x00ED
    22ce:	8f 7d       	andi	r24, 0xDF	; 223
    22d0:	80 93 ed 00 	sts	0x00ED, r24
    22d4:	08 95       	ret
		case 7: LCDDR18= 0x00;break;
		case 8: LCDDR18= 0x00;break;
    22d6:	10 92 fe 00 	sts	0x00FE, r1
    22da:	08 95       	ret
		case 9: LCDDR2&=~0x04;break;
    22dc:	80 91 ee 00 	lds	r24, 0x00EE
    22e0:	8b 7f       	andi	r24, 0xFB	; 251
    22e2:	80 93 ee 00 	sts	0x00EE, r24
    22e6:	08 95       	ret
		case 10: LCDDR2&=~0x40;break;
    22e8:	80 91 ee 00 	lds	r24, 0x00EE
    22ec:	8f 7b       	andi	r24, 0xBF	; 191
    22ee:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    22f2:	08 95       	ret

000022f4 <is_prime>:
#include "primes.h"
#include <math.h>
#include <avr/io.h>

int is_prime(int i)
{
    22f4:	fc 01       	movw	r30, r24
	int n;
	//int sqrt_value;
	if(i==0||i==1) return 0;
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	91 05       	cpc	r25, r1
    22fa:	90 f0       	brcs	.+36     	; 0x2320 <is_prime+0x2c>
	else if (i==2) return 1;
    22fc:	82 30       	cpi	r24, 0x02	; 2
    22fe:	91 05       	cpc	r25, r1
    2300:	91 f0       	breq	.+36     	; 0x2326 <is_prime+0x32>
    2302:	22 e0       	ldi	r18, 0x02	; 2
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	08 c0       	rjmp	.+16     	; 0x2318 <is_prime+0x24>
	else
	{
		//sqrt_value=sqrt(i)+1;
		for(n=2;n<i;n++)
		{
			if(i%n==0) return 0;
    2308:	cf 01       	movw	r24, r30
    230a:	b9 01       	movw	r22, r18
    230c:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    2310:	89 2b       	or	r24, r25
    2312:	31 f0       	breq	.+12     	; 0x2320 <is_prime+0x2c>
	if(i==0||i==1) return 0;
	else if (i==2) return 1;
	else
	{
		//sqrt_value=sqrt(i)+1;
		for(n=2;n<i;n++)
    2314:	2f 5f       	subi	r18, 0xFF	; 255
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	2e 17       	cp	r18, r30
    231a:	3f 07       	cpc	r19, r31
    231c:	ac f3       	brlt	.-22     	; 0x2308 <is_prime+0x14>
    231e:	03 c0       	rjmp	.+6      	; 0x2326 <is_prime+0x32>
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	02 c0       	rjmp	.+4      	; 0x232a <is_prime+0x36>
    2326:	21 e0       	ldi	r18, 0x01	; 1
    2328:	30 e0       	ldi	r19, 0x00	; 0
			if(i%n==0) return 0;
		}
		return 1;
	}
	
}
    232a:	c9 01       	movw	r24, r18
    232c:	08 95       	ret

0000232e <primes>:



//primes for ex1.2
int primes(PrimeCalculator *self, int x)
{
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	8c 01       	movw	r16, r24
    2338:	eb 01       	movw	r28, r22
    233a:	08 c0       	rjmp	.+16     	; 0x234c <primes+0x1e>
	while(1)
	{
		while(!(is_prime(x)))
		{
			if(x==32767) x=0;
    233c:	8f e7       	ldi	r24, 0x7F	; 127
    233e:	cf 3f       	cpi	r28, 0xFF	; 255
    2340:	d8 07       	cpc	r29, r24
    2342:	19 f4       	brne	.+6      	; 0x234a <primes+0x1c>
    2344:	c0 e0       	ldi	r28, 0x00	; 0
    2346:	d0 e0       	ldi	r29, 0x00	; 0
    2348:	01 c0       	rjmp	.+2      	; 0x234c <primes+0x1e>
			else x++;
    234a:	21 96       	adiw	r28, 0x01	; 1
//primes for ex1.2
int primes(PrimeCalculator *self, int x)
{
	while(1)
	{
		while(!(is_prime(x)))
    234c:	ce 01       	movw	r24, r28
    234e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <is_prime>
    2352:	89 2b       	or	r24, r25
    2354:	99 f3       	breq	.-26     	; 0x233c <primes+0xe>
		{
			if(x==32767) x=0;
			else x++;
		}
		SYNC(self->lcd,writeInt,x);
    2356:	ae 01       	movw	r20, r28
    2358:	61 e5       	ldi	r22, 0x51	; 81
    235a:	70 e1       	ldi	r23, 0x10	; 16
    235c:	f8 01       	movw	r30, r16
    235e:	84 81       	ldd	r24, Z+4	; 0x04
    2360:	95 81       	ldd	r25, Z+5	; 0x05
    2362:	0e 94 85 0c 	call	0x190a	; 0x190a <sync>
    2366:	f1 cf       	rjmp	.-30     	; 0x234a <primes+0x1c>

00002368 <stopBlinking>:
}


int stopBlinking(Blinker *self, int nothing)
{
	flag_blinking=0;
    2368:	10 92 c1 04 	sts	0x04C1, r1
}
    236c:	08 95       	ret

0000236e <setPeriod>:


int setPeriod(Blinker *self, int period)
{
    236e:	fc 01       	movw	r30, r24
    2370:	80 85       	ldd	r24, Z+8	; 0x08
    2372:	91 85       	ldd	r25, Z+9	; 0x09
    2374:	62 e0       	ldi	r22, 0x02	; 2
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    237c:	cb 01       	movw	r24, r22
	return self->period/2;
}
    237e:	08 95       	ret

00002380 <Blinking>:
#include "blinker.h"

char flag_blinking;

int Blinking(Blinker *self, int on)
{
    2380:	af 92       	push	r10
    2382:	bf 92       	push	r11
    2384:	cf 92       	push	r12
    2386:	df 92       	push	r13
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	ec 01       	movw	r28, r24
    2396:	5b 01       	movw	r10, r22
	if (flag_blinking)
    2398:	80 91 c1 04 	lds	r24, 0x04C1
    239c:	88 23       	and	r24, r24
    239e:	09 f4       	brne	.+2      	; 0x23a2 <Blinking+0x22>
    23a0:	41 c0       	rjmp	.+130    	; 0x2424 <Blinking+0xa4>
	{
		AFTER(MSEC(setPeriod(self,0)),self,Blinking,1-on);
    23a2:	01 e0       	ldi	r16, 0x01	; 1
    23a4:	10 e0       	ldi	r17, 0x00	; 0
    23a6:	06 1b       	sub	r16, r22
    23a8:	17 0b       	sbc	r17, r23
    23aa:	88 85       	ldd	r24, Y+8	; 0x08
    23ac:	99 85       	ldd	r25, Y+9	; 0x09
    23ae:	62 e0       	ldi	r22, 0x02	; 2
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	0e 94 85 12 	call	0x250a	; 0x250a <__divmodhi4>
    23b6:	88 27       	eor	r24, r24
    23b8:	77 fd       	sbrc	r23, 7
    23ba:	80 95       	com	r24
    23bc:	98 2f       	mov	r25, r24
    23be:	2d e7       	ldi	r18, 0x7D	; 125
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	0e 94 66 12 	call	0x24cc	; 0x24cc <__mulsi3>
    23ca:	24 e0       	ldi	r18, 0x04	; 4
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	0e 94 98 12 	call	0x2530	; 0x2530 <__divmodsi4>
    23d6:	ca 01       	movw	r24, r20
    23d8:	b9 01       	movw	r22, r18
    23da:	68 01       	movw	r12, r16
    23dc:	20 ec       	ldi	r18, 0xC0	; 192
    23de:	e2 2e       	mov	r14, r18
    23e0:	21 e1       	ldi	r18, 0x11	; 17
    23e2:	f2 2e       	mov	r15, r18
    23e4:	8e 01       	movw	r16, r28
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <async>
    23f2:	ce 80       	ldd	r12, Y+6	; 0x06
    23f4:	df 80       	ldd	r13, Y+7	; 0x07
    23f6:	0c 81       	ldd	r16, Y+4	; 0x04
    23f8:	1d 81       	ldd	r17, Y+5	; 0x05
		if(on)
    23fa:	ab 28       	or	r10, r11
    23fc:	29 f0       	breq	.+10     	; 0x2408 <Blinking+0x88>
		{
			ASYNC(self->lcd,segmentOff,self->segment);
    23fe:	9c e2       	ldi	r25, 0x2C	; 44
    2400:	e9 2e       	mov	r14, r25
    2402:	91 e1       	ldi	r25, 0x11	; 17
    2404:	f9 2e       	mov	r15, r25
    2406:	04 c0       	rjmp	.+8      	; 0x2410 <Blinking+0x90>
		}
		else
		{
			ASYNC(self->lcd,segmentOn,self->segment);
    2408:	8b ed       	ldi	r24, 0xDB	; 219
    240a:	e8 2e       	mov	r14, r24
    240c:	80 e1       	ldi	r24, 0x10	; 16
    240e:	f8 2e       	mov	r15, r24
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <async>
		}
	}
	
}
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	cf 90       	pop	r12
    2434:	bf 90       	pop	r11
    2436:	af 90       	pop	r10
    2438:	08 95       	ret

0000243a <startBlinking>:

int startBlinking(Blinker *self, int nothing)
{
	flag_blinking=1;
    243a:	21 e0       	ldi	r18, 0x01	; 1
    243c:	20 93 c1 04 	sts	0x04C1, r18
	Blinking(self,0);
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	0e 94 c0 11 	call	0x2380	; 0x2380 <Blinking>
}
    2448:	08 95       	ret

0000244a <setjmp>:
    244a:	dc 01       	movw	r26, r24
    244c:	2d 92       	st	X+, r2
    244e:	3d 92       	st	X+, r3
    2450:	4d 92       	st	X+, r4
    2452:	5d 92       	st	X+, r5
    2454:	6d 92       	st	X+, r6
    2456:	7d 92       	st	X+, r7
    2458:	8d 92       	st	X+, r8
    245a:	9d 92       	st	X+, r9
    245c:	ad 92       	st	X+, r10
    245e:	bd 92       	st	X+, r11
    2460:	cd 92       	st	X+, r12
    2462:	dd 92       	st	X+, r13
    2464:	ed 92       	st	X+, r14
    2466:	fd 92       	st	X+, r15
    2468:	0d 93       	st	X+, r16
    246a:	1d 93       	st	X+, r17
    246c:	cd 93       	st	X+, r28
    246e:	dd 93       	st	X+, r29
    2470:	ff 91       	pop	r31
    2472:	ef 91       	pop	r30
    2474:	8d b7       	in	r24, 0x3d	; 61
    2476:	8d 93       	st	X+, r24
    2478:	8e b7       	in	r24, 0x3e	; 62
    247a:	8d 93       	st	X+, r24
    247c:	8f b7       	in	r24, 0x3f	; 63
    247e:	8d 93       	st	X+, r24
    2480:	ed 93       	st	X+, r30
    2482:	fd 93       	st	X+, r31
    2484:	88 27       	eor	r24, r24
    2486:	99 27       	eor	r25, r25
    2488:	09 94       	ijmp

0000248a <longjmp>:
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	91 05       	cpc	r25, r1
    2492:	81 1d       	adc	r24, r1
    2494:	2d 90       	ld	r2, X+
    2496:	3d 90       	ld	r3, X+
    2498:	4d 90       	ld	r4, X+
    249a:	5d 90       	ld	r5, X+
    249c:	6d 90       	ld	r6, X+
    249e:	7d 90       	ld	r7, X+
    24a0:	8d 90       	ld	r8, X+
    24a2:	9d 90       	ld	r9, X+
    24a4:	ad 90       	ld	r10, X+
    24a6:	bd 90       	ld	r11, X+
    24a8:	cd 90       	ld	r12, X+
    24aa:	dd 90       	ld	r13, X+
    24ac:	ed 90       	ld	r14, X+
    24ae:	fd 90       	ld	r15, X+
    24b0:	0d 91       	ld	r16, X+
    24b2:	1d 91       	ld	r17, X+
    24b4:	cd 91       	ld	r28, X+
    24b6:	dd 91       	ld	r29, X+
    24b8:	ed 91       	ld	r30, X+
    24ba:	fd 91       	ld	r31, X+
    24bc:	0d 90       	ld	r0, X+
    24be:	f8 94       	cli
    24c0:	fe bf       	out	0x3e, r31	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	ed bf       	out	0x3d, r30	; 61
    24c6:	ed 91       	ld	r30, X+
    24c8:	fd 91       	ld	r31, X+
    24ca:	09 94       	ijmp

000024cc <__mulsi3>:
    24cc:	62 9f       	mul	r22, r18
    24ce:	d0 01       	movw	r26, r0
    24d0:	73 9f       	mul	r23, r19
    24d2:	f0 01       	movw	r30, r0
    24d4:	82 9f       	mul	r24, r18
    24d6:	e0 0d       	add	r30, r0
    24d8:	f1 1d       	adc	r31, r1
    24da:	64 9f       	mul	r22, r20
    24dc:	e0 0d       	add	r30, r0
    24de:	f1 1d       	adc	r31, r1
    24e0:	92 9f       	mul	r25, r18
    24e2:	f0 0d       	add	r31, r0
    24e4:	83 9f       	mul	r24, r19
    24e6:	f0 0d       	add	r31, r0
    24e8:	74 9f       	mul	r23, r20
    24ea:	f0 0d       	add	r31, r0
    24ec:	65 9f       	mul	r22, r21
    24ee:	f0 0d       	add	r31, r0
    24f0:	99 27       	eor	r25, r25
    24f2:	72 9f       	mul	r23, r18
    24f4:	b0 0d       	add	r27, r0
    24f6:	e1 1d       	adc	r30, r1
    24f8:	f9 1f       	adc	r31, r25
    24fa:	63 9f       	mul	r22, r19
    24fc:	b0 0d       	add	r27, r0
    24fe:	e1 1d       	adc	r30, r1
    2500:	f9 1f       	adc	r31, r25
    2502:	bd 01       	movw	r22, r26
    2504:	cf 01       	movw	r24, r30
    2506:	11 24       	eor	r1, r1
    2508:	08 95       	ret

0000250a <__divmodhi4>:
    250a:	97 fb       	bst	r25, 7
    250c:	09 2e       	mov	r0, r25
    250e:	07 26       	eor	r0, r23
    2510:	0a d0       	rcall	.+20     	; 0x2526 <__divmodhi4_neg1>
    2512:	77 fd       	sbrc	r23, 7
    2514:	04 d0       	rcall	.+8      	; 0x251e <__divmodhi4_neg2>
    2516:	27 d0       	rcall	.+78     	; 0x2566 <__udivmodhi4>
    2518:	06 d0       	rcall	.+12     	; 0x2526 <__divmodhi4_neg1>
    251a:	00 20       	and	r0, r0
    251c:	1a f4       	brpl	.+6      	; 0x2524 <__divmodhi4_exit>

0000251e <__divmodhi4_neg2>:
    251e:	70 95       	com	r23
    2520:	61 95       	neg	r22
    2522:	7f 4f       	sbci	r23, 0xFF	; 255

00002524 <__divmodhi4_exit>:
    2524:	08 95       	ret

00002526 <__divmodhi4_neg1>:
    2526:	f6 f7       	brtc	.-4      	; 0x2524 <__divmodhi4_exit>
    2528:	90 95       	com	r25
    252a:	81 95       	neg	r24
    252c:	9f 4f       	sbci	r25, 0xFF	; 255
    252e:	08 95       	ret

00002530 <__divmodsi4>:
    2530:	97 fb       	bst	r25, 7
    2532:	09 2e       	mov	r0, r25
    2534:	05 26       	eor	r0, r21
    2536:	0e d0       	rcall	.+28     	; 0x2554 <__divmodsi4_neg1>
    2538:	57 fd       	sbrc	r21, 7
    253a:	04 d0       	rcall	.+8      	; 0x2544 <__divmodsi4_neg2>
    253c:	28 d0       	rcall	.+80     	; 0x258e <__udivmodsi4>
    253e:	0a d0       	rcall	.+20     	; 0x2554 <__divmodsi4_neg1>
    2540:	00 1c       	adc	r0, r0
    2542:	38 f4       	brcc	.+14     	; 0x2552 <__divmodsi4_exit>

00002544 <__divmodsi4_neg2>:
    2544:	50 95       	com	r21
    2546:	40 95       	com	r20
    2548:	30 95       	com	r19
    254a:	21 95       	neg	r18
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	4f 4f       	sbci	r20, 0xFF	; 255
    2550:	5f 4f       	sbci	r21, 0xFF	; 255

00002552 <__divmodsi4_exit>:
    2552:	08 95       	ret

00002554 <__divmodsi4_neg1>:
    2554:	f6 f7       	brtc	.-4      	; 0x2552 <__divmodsi4_exit>
    2556:	90 95       	com	r25
    2558:	80 95       	com	r24
    255a:	70 95       	com	r23
    255c:	61 95       	neg	r22
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	8f 4f       	sbci	r24, 0xFF	; 255
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	08 95       	ret

00002566 <__udivmodhi4>:
    2566:	aa 1b       	sub	r26, r26
    2568:	bb 1b       	sub	r27, r27
    256a:	51 e1       	ldi	r21, 0x11	; 17
    256c:	07 c0       	rjmp	.+14     	; 0x257c <__udivmodhi4_ep>

0000256e <__udivmodhi4_loop>:
    256e:	aa 1f       	adc	r26, r26
    2570:	bb 1f       	adc	r27, r27
    2572:	a6 17       	cp	r26, r22
    2574:	b7 07       	cpc	r27, r23
    2576:	10 f0       	brcs	.+4      	; 0x257c <__udivmodhi4_ep>
    2578:	a6 1b       	sub	r26, r22
    257a:	b7 0b       	sbc	r27, r23

0000257c <__udivmodhi4_ep>:
    257c:	88 1f       	adc	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	5a 95       	dec	r21
    2582:	a9 f7       	brne	.-22     	; 0x256e <__udivmodhi4_loop>
    2584:	80 95       	com	r24
    2586:	90 95       	com	r25
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	08 95       	ret

0000258e <__udivmodsi4>:
    258e:	a1 e2       	ldi	r26, 0x21	; 33
    2590:	1a 2e       	mov	r1, r26
    2592:	aa 1b       	sub	r26, r26
    2594:	bb 1b       	sub	r27, r27
    2596:	fd 01       	movw	r30, r26
    2598:	0d c0       	rjmp	.+26     	; 0x25b4 <__udivmodsi4_ep>

0000259a <__udivmodsi4_loop>:
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	ee 1f       	adc	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	a2 17       	cp	r26, r18
    25a4:	b3 07       	cpc	r27, r19
    25a6:	e4 07       	cpc	r30, r20
    25a8:	f5 07       	cpc	r31, r21
    25aa:	20 f0       	brcs	.+8      	; 0x25b4 <__udivmodsi4_ep>
    25ac:	a2 1b       	sub	r26, r18
    25ae:	b3 0b       	sbc	r27, r19
    25b0:	e4 0b       	sbc	r30, r20
    25b2:	f5 0b       	sbc	r31, r21

000025b4 <__udivmodsi4_ep>:
    25b4:	66 1f       	adc	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	88 1f       	adc	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	1a 94       	dec	r1
    25be:	69 f7       	brne	.-38     	; 0x259a <__udivmodsi4_loop>
    25c0:	60 95       	com	r22
    25c2:	70 95       	com	r23
    25c4:	80 95       	com	r24
    25c6:	90 95       	com	r25
    25c8:	9b 01       	movw	r18, r22
    25ca:	ac 01       	movw	r20, r24
    25cc:	bd 01       	movw	r22, r26
    25ce:	cf 01       	movw	r24, r30
    25d0:	08 95       	ret

000025d2 <_exit>:
    25d2:	f8 94       	cli

000025d4 <__stop_program>:
    25d4:	ff cf       	rjmp	.-2      	; 0x25d4 <__stop_program>

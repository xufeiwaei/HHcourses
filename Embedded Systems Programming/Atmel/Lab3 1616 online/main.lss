
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00002e3a  00002eae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e3a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  00800160  00002e9a  00002f0e  2**0
                  ALLOC
  3 .stab         00002bec  00000000  00000000  00002f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b1  00000000  00000000  00005afc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_1>
       8:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__vector_2>
       c:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_3>
      10:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__vector_4>
      14:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_9>
      28:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_10>
      2c:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_11>
      30:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_12>
      34:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_13>
      38:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_14>
      3c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_15>
      40:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_16>
      44:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_17>
      48:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_18>
      4c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_19>
      50:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__vector_20>
      54:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_21>
      58:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea e3       	ldi	r30, 0x3A	; 58
      70:	fe e2       	ldi	r31, 0x2E	; 46
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	a0 36       	cpi	r26, 0x60	; 96
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	14 e0       	ldi	r17, 0x04	; 4
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 3b       	cpi	r26, 0xB9	; 185
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
      92:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:



int main()
{
	ENPIEZO;
      9a:	25 9a       	sbi	0x04, 5	; 4
	return TINYTIMBER(&app,startup,0);
      9c:	40 e0       	ldi	r20, 0x00	; 0
      9e:	50 e0       	ldi	r21, 0x00	; 0
      a0:	67 e5       	ldi	r22, 0x57	; 87
      a2:	70 e0       	ldi	r23, 0x00	; 0
      a4:	88 e0       	ldi	r24, 0x08	; 8
      a6:	91 e0       	ldi	r25, 0x01	; 1
      a8:	0e 94 46 04 	call	0x88c	; 0x88c <tinytimber>
      ac:	08 95       	ret

000000ae <startup>:
Piezo piezo = initPiezo();
Tone tone = initTone(&piezo,523);
APP app = initAPP(&tone);


int startup(APP * self, int x){
      ae:	8f 92       	push	r8
      b0:	9f 92       	push	r9
      b2:	af 92       	push	r10
      b4:	bf 92       	push	r11
      b6:	cf 92       	push	r12
      b8:	df 92       	push	r13
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	4c 01       	movw	r8, r24
  AFTER(MSEC(800),self->tone,stop_playing,0);
      c4:	fc 01       	movw	r30, r24
      c6:	04 81       	ldd	r16, Z+4	; 0x04
      c8:	15 81       	ldd	r17, Z+5	; 0x05
      ca:	cc 24       	eor	r12, r12
      cc:	dd 24       	eor	r13, r13
      ce:	e6 e5       	ldi	r30, 0x56	; 86
      d0:	ee 2e       	mov	r14, r30
      d2:	e4 e1       	ldi	r30, 0x14	; 20
      d4:	fe 2e       	mov	r15, r30
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	68 ea       	ldi	r22, 0xA8	; 168
      e0:	71 e6       	ldi	r23, 0x61	; 97
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  AFTER(MSEC(700),self->tone,setFrequency,1047);
      ea:	79 e5       	ldi	r23, 0x59	; 89
      ec:	a7 2e       	mov	r10, r23
      ee:	74 e1       	ldi	r23, 0x14	; 20
      f0:	b7 2e       	mov	r11, r23
      f2:	f4 01       	movw	r30, r8
      f4:	04 81       	ldd	r16, Z+4	; 0x04
      f6:	15 81       	ldd	r17, Z+5	; 0x05
      f8:	67 e1       	ldi	r22, 0x17	; 23
      fa:	c6 2e       	mov	r12, r22
      fc:	64 e0       	ldi	r22, 0x04	; 4
      fe:	d6 2e       	mov	r13, r22
     100:	75 01       	movw	r14, r10
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	63 e7       	ldi	r22, 0x73	; 115
     10c:	75 e5       	ldi	r23, 0x55	; 85
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  AFTER(MSEC(600),self->tone,setFrequency,988);
     116:	f4 01       	movw	r30, r8
     118:	04 81       	ldd	r16, Z+4	; 0x04
     11a:	15 81       	ldd	r17, Z+5	; 0x05
     11c:	5c ed       	ldi	r21, 0xDC	; 220
     11e:	c5 2e       	mov	r12, r21
     120:	53 e0       	ldi	r21, 0x03	; 3
     122:	d5 2e       	mov	r13, r21
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	50 e0       	ldi	r21, 0x00	; 0
     12c:	6e e3       	ldi	r22, 0x3E	; 62
     12e:	79 e4       	ldi	r23, 0x49	; 73
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  AFTER(MSEC(500),self->tone,setFrequency,880);
     138:	f4 01       	movw	r30, r8
     13a:	04 81       	ldd	r16, Z+4	; 0x04
     13c:	15 81       	ldd	r17, Z+5	; 0x05
     13e:	40 e7       	ldi	r20, 0x70	; 112
     140:	c4 2e       	mov	r12, r20
     142:	43 e0       	ldi	r20, 0x03	; 3
     144:	d4 2e       	mov	r13, r20
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	40 e0       	ldi	r20, 0x00	; 0
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	69 e0       	ldi	r22, 0x09	; 9
     150:	7d e3       	ldi	r23, 0x3D	; 61
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  AFTER(MSEC(400),self->tone,setFrequency,784);
     15a:	f4 01       	movw	r30, r8
     15c:	04 81       	ldd	r16, Z+4	; 0x04
     15e:	15 81       	ldd	r17, Z+5	; 0x05
     160:	30 e1       	ldi	r19, 0x10	; 16
     162:	c3 2e       	mov	r12, r19
     164:	33 e0       	ldi	r19, 0x03	; 3
     166:	d3 2e       	mov	r13, r19
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	64 ed       	ldi	r22, 0xD4	; 212
     172:	70 e3       	ldi	r23, 0x30	; 48
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  AFTER(MSEC(300),self->tone,setFrequency,698);
     17c:	f4 01       	movw	r30, r8
     17e:	04 81       	ldd	r16, Z+4	; 0x04
     180:	15 81       	ldd	r17, Z+5	; 0x05
     182:	2a eb       	ldi	r18, 0xBA	; 186
     184:	c2 2e       	mov	r12, r18
     186:	22 e0       	ldi	r18, 0x02	; 2
     188:	d2 2e       	mov	r13, r18
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	6f e9       	ldi	r22, 0x9F	; 159
     194:	74 e2       	ldi	r23, 0x24	; 36
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  AFTER(MSEC(200),self->tone,setFrequency,659);
     19e:	f4 01       	movw	r30, r8
     1a0:	04 81       	ldd	r16, Z+4	; 0x04
     1a2:	15 81       	ldd	r17, Z+5	; 0x05
     1a4:	93 e9       	ldi	r25, 0x93	; 147
     1a6:	c9 2e       	mov	r12, r25
     1a8:	92 e0       	ldi	r25, 0x02	; 2
     1aa:	d9 2e       	mov	r13, r25
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	6a e6       	ldi	r22, 0x6A	; 106
     1b6:	78 e1       	ldi	r23, 0x18	; 24
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  AFTER(MSEC(100),self->tone,setFrequency,587);
     1c0:	f4 01       	movw	r30, r8
     1c2:	04 81       	ldd	r16, Z+4	; 0x04
     1c4:	15 81       	ldd	r17, Z+5	; 0x05
     1c6:	8b e4       	ldi	r24, 0x4B	; 75
     1c8:	c8 2e       	mov	r12, r24
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	d8 2e       	mov	r13, r24
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	65 e3       	ldi	r22, 0x35	; 53
     1d8:	7c e0       	ldi	r23, 0x0C	; 12
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
  SYNC(self->tone,start_playing,0);
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	6d e5       	ldi	r22, 0x5D	; 93
     1e8:	74 e1       	ldi	r23, 0x14	; 20
     1ea:	f4 01       	movw	r30, r8
     1ec:	84 81       	ldd	r24, Z+4	; 0x04
     1ee:	95 81       	ldd	r25, Z+5	; 0x05
     1f0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <sync>
}
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	af 90       	pop	r10
     204:	9f 90       	pop	r9
     206:	8f 90       	pop	r8
     208:	08 95       	ret

0000020a <DUMP>:

#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
     20a:	fc 01       	movw	r30, r24
     20c:	01 c0       	rjmp	.+2      	; 0x210 <DUMP+0x6>
  while (*s)
    DUMPC(*s++);
     20e:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     210:	80 81       	ld	r24, Z
     212:	88 23       	and	r24, r24
     214:	e1 f7       	brne	.-8      	; 0x20e <DUMP+0x4>
    DUMPC(*s++);
}
     216:	08 95       	ret

00000218 <DUMPH>:
void DUMPH(unsigned int val) {
    char buf[8];
    int i = 0;
    do {
        buf[i++] = hex[val & 0x0F];
        val = val >> 4;
     218:	24 e0       	ldi	r18, 0x04	; 4
     21a:	96 95       	lsr	r25
     21c:	87 95       	ror	r24
     21e:	2a 95       	dec	r18
     220:	e1 f7       	brne	.-8      	; 0x21a <DUMPH+0x2>
    } while (val);
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	c9 f7       	brne	.-14     	; 0x218 <DUMPH>
    while (i)
        DUMPC(buf[--i]);
}
     226:	08 95       	ret

00000228 <DUMP_INIT>:
#define INFINITY        0x7fffffffL
#define INF(a)          ( (a)==0 ? INFINITY : (a) )

void DUMP_INIT() {

}
     228:	08 95       	ret

0000022a <DUMPC>:

void DUMPC(char c) {
    
}
     22a:	08 95       	ret

0000022c <enqueueByDeadline>:
#pragma	DATA default

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
     23e:	db 01       	movw	r26, r22
     240:	ed 91       	ld	r30, X+
     242:	fc 91       	ld	r31, X
     244:	c0 e0       	ldi	r28, 0x00	; 0
     246:	d0 e0       	ldi	r29, 0x00	; 0
     248:	05 c0       	rjmp	.+10     	; 0x254 <enqueueByDeadline+0x28>
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
     24a:	ef 01       	movw	r28, r30
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	9c 01       	movw	r18, r24
     252:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
     254:	30 97       	sbiw	r30, 0x00	; 0
     256:	81 f0       	breq	.+32     	; 0x278 <enqueueByDeadline+0x4c>
     258:	26 81       	ldd	r18, Z+6	; 0x06
     25a:	37 81       	ldd	r19, Z+7	; 0x07
     25c:	40 85       	ldd	r20, Z+8	; 0x08
     25e:	51 85       	ldd	r21, Z+9	; 0x09
     260:	d8 01       	movw	r26, r16
     262:	16 96       	adiw	r26, 0x06	; 6
     264:	cd 90       	ld	r12, X+
     266:	dd 90       	ld	r13, X+
     268:	ed 90       	ld	r14, X+
     26a:	fc 90       	ld	r15, X
     26c:	19 97       	sbiw	r26, 0x09	; 9
     26e:	c2 16       	cp	r12, r18
     270:	d3 06       	cpc	r13, r19
     272:	e4 06       	cpc	r14, r20
     274:	f5 06       	cpc	r15, r21
     276:	4c f7       	brge	.-46     	; 0x24a <enqueueByDeadline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     278:	d8 01       	movw	r26, r16
     27a:	ed 93       	st	X+, r30
     27c:	fc 93       	st	X, r31
    if (prev == NULL)
     27e:	20 97       	sbiw	r28, 0x00	; 0
     280:	21 f4       	brne	.+8      	; 0x28a <enqueueByDeadline+0x5e>
        *queue = p;
     282:	fb 01       	movw	r30, r22
     284:	11 83       	std	Z+1, r17	; 0x01
     286:	00 83       	st	Z, r16
     288:	02 c0       	rjmp	.+4      	; 0x28e <enqueueByDeadline+0x62>
    else
        prev->next = p;
     28a:	19 83       	std	Y+1, r17	; 0x01
     28c:	08 83       	st	Y, r16
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
     29e:	08 95       	ret

000002a0 <enqueueByBaseline>:

void enqueueByBaseline(Msg p, Msg *queue) {
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	8c 01       	movw	r16, r24
    Msg prev = NULL, q = *queue;
     2b2:	db 01       	movw	r26, r22
     2b4:	ed 91       	ld	r30, X+
     2b6:	fc 91       	ld	r31, X
     2b8:	c0 e0       	ldi	r28, 0x00	; 0
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <enqueueByBaseline+0x28>
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
     2be:	ef 01       	movw	r28, r30
     2c0:	80 81       	ld	r24, Z
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	9c 01       	movw	r18, r24
     2c6:	f9 01       	movw	r30, r18
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
     2c8:	30 97       	sbiw	r30, 0x00	; 0
     2ca:	81 f0       	breq	.+32     	; 0x2ec <enqueueByBaseline+0x4c>
     2cc:	22 81       	ldd	r18, Z+2	; 0x02
     2ce:	33 81       	ldd	r19, Z+3	; 0x03
     2d0:	44 81       	ldd	r20, Z+4	; 0x04
     2d2:	55 81       	ldd	r21, Z+5	; 0x05
     2d4:	d8 01       	movw	r26, r16
     2d6:	12 96       	adiw	r26, 0x02	; 2
     2d8:	cd 90       	ld	r12, X+
     2da:	dd 90       	ld	r13, X+
     2dc:	ed 90       	ld	r14, X+
     2de:	fc 90       	ld	r15, X
     2e0:	15 97       	sbiw	r26, 0x05	; 5
     2e2:	c2 16       	cp	r12, r18
     2e4:	d3 06       	cpc	r13, r19
     2e6:	e4 06       	cpc	r14, r20
     2e8:	f5 06       	cpc	r15, r21
     2ea:	4c f7       	brge	.-46     	; 0x2be <enqueueByBaseline+0x1e>
        prev = q;
        q = q->next;
    }
    p->next = q;
     2ec:	d8 01       	movw	r26, r16
     2ee:	ed 93       	st	X+, r30
     2f0:	fc 93       	st	X, r31
    if (prev == NULL)
     2f2:	20 97       	sbiw	r28, 0x00	; 0
     2f4:	21 f4       	brne	.+8      	; 0x2fe <enqueueByBaseline+0x5e>
        *queue = p;
     2f6:	fb 01       	movw	r30, r22
     2f8:	11 83       	std	Z+1, r17	; 0x01
     2fa:	00 83       	st	Z, r16
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <enqueueByBaseline+0x62>
    else
        prev->next = p;
     2fe:	19 83       	std	Y+1, r17	; 0x01
     300:	08 83       	st	Y, r16
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	08 95       	ret

00000314 <dequeue>:

Msg dequeue(Msg *queue) {
     314:	dc 01       	movw	r26, r24
    Msg m = *queue;
     316:	ed 91       	ld	r30, X+
     318:	fc 91       	ld	r31, X
     31a:	11 97       	sbiw	r26, 0x01	; 1
    if (m)
     31c:	30 97       	sbiw	r30, 0x00	; 0
     31e:	31 f0       	breq	.+12     	; 0x32c <dequeue+0x18>
        *queue = m->next;
     320:	80 81       	ld	r24, Z
     322:	91 81       	ldd	r25, Z+1	; 0x01
     324:	8d 93       	st	X+, r24
     326:	9c 93       	st	X, r25
    else
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}
     328:	cf 01       	movw	r24, r30
     32a:	08 95       	ret
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	80 93 ec 00 	sts	0x00EC, r24
     332:	80 93 ed 00 	sts	0x00ED, r24
     336:	80 93 ee 00 	sts	0x00EE, r24
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	83 bf       	out	0x33, r24	; 51
     33e:	88 95       	sleep
     340:	fd cf       	rjmp	.-6      	; 0x33c <dequeue+0x28>

00000342 <insert>:
    return m;
}

void insert(Msg m, Msg *queue) {
     342:	dc 01       	movw	r26, r24
     344:	fb 01       	movw	r30, r22
    m->next = *queue;
     346:	80 81       	ld	r24, Z
     348:	91 81       	ldd	r25, Z+1	; 0x01
     34a:	11 96       	adiw	r26, 0x01	; 1
     34c:	9c 93       	st	X, r25
     34e:	8e 93       	st	-X, r24
    *queue = m;
     350:	b1 83       	std	Z+1, r27	; 0x01
     352:	a0 83       	st	Z, r26
}
     354:	08 95       	ret

00000356 <push>:

void push(Thread t, Thread *stack) {
     356:	dc 01       	movw	r26, r24
     358:	fb 01       	movw	r30, r22
    t->next = *stack;
     35a:	80 81       	ld	r24, Z
     35c:	91 81       	ldd	r25, Z+1	; 0x01
     35e:	11 96       	adiw	r26, 0x01	; 1
     360:	9c 93       	st	X, r25
     362:	8e 93       	st	-X, r24
    *stack = t;
     364:	b1 83       	std	Z+1, r27	; 0x01
     366:	a0 83       	st	Z, r26
}
     368:	08 95       	ret

0000036a <pop>:

Thread pop(Thread *stack) {
     36a:	fc 01       	movw	r30, r24
    Thread t = *stack;
     36c:	a0 81       	ld	r26, Z
     36e:	b1 81       	ldd	r27, Z+1	; 0x01
    *stack = t->next;
     370:	8d 91       	ld	r24, X+
     372:	9c 91       	ld	r25, X
     374:	11 97       	sbiw	r26, 0x01	; 1
     376:	91 83       	std	Z+1, r25	; 0x01
     378:	80 83       	st	Z, r24
    return t;
}
     37a:	cd 01       	movw	r24, r26
     37c:	08 95       	ret

0000037e <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	4f 93       	push	r20
     38e:	5f 93       	push	r21
     390:	6f 93       	push	r22
     392:	7f 93       	push	r23
     394:	8f 93       	push	r24
     396:	9f 93       	push	r25
     398:	af 93       	push	r26
     39a:	bf 93       	push	r27
     39c:	ef 93       	push	r30
     39e:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
     3a0:	60 91 6c 01 	lds	r22, 0x016C
     3a4:	70 91 6d 01 	lds	r23, 0x016D
     3a8:	6f 5f       	subi	r22, 0xFF	; 255
     3aa:	7f 4f       	sbci	r23, 0xFF	; 255
     3ac:	70 93 6d 01 	sts	0x016D, r23
     3b0:	60 93 6c 01 	sts	0x016C, r22
    TIMERSET(timerQ);
     3b4:	e0 91 66 01 	lds	r30, 0x0166
     3b8:	f0 91 67 01 	lds	r31, 0x0167
     3bc:	30 97       	sbiw	r30, 0x00	; 0
     3be:	21 f1       	breq	.+72     	; 0x408 <__vector_9+0x8a>
     3c0:	22 81       	ldd	r18, Z+2	; 0x02
     3c2:	33 81       	ldd	r19, Z+3	; 0x03
     3c4:	44 81       	ldd	r20, Z+4	; 0x04
     3c6:	55 81       	ldd	r21, Z+5	; 0x05
     3c8:	ca 01       	movw	r24, r20
     3ca:	bb 27       	eor	r27, r27
     3cc:	97 fd       	sbrc	r25, 7
     3ce:	b0 95       	com	r27
     3d0:	ab 2f       	mov	r26, r27
     3d2:	68 17       	cp	r22, r24
     3d4:	79 07       	cpc	r23, r25
     3d6:	c1 f4       	brne	.+48     	; 0x408 <__vector_9+0x8a>
     3d8:	80 91 84 00 	lds	r24, 0x0084
     3dc:	90 91 85 00 	lds	r25, 0x0085
     3e0:	80 95       	com	r24
     3e2:	90 95       	com	r25
     3e4:	82 0f       	add	r24, r18
     3e6:	93 1f       	adc	r25, r19
     3e8:	89 2b       	or	r24, r25
     3ea:	31 f4       	brne	.+12     	; 0x3f8 <__vector_9+0x7a>
     3ec:	20 91 84 00 	lds	r18, 0x0084
     3f0:	30 91 85 00 	lds	r19, 0x0085
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	30 93 89 00 	sts	0x0089, r19
     3fc:	20 93 88 00 	sts	0x0088, r18
     400:	80 91 6f 00 	lds	r24, 0x006F
     404:	82 60       	ori	r24, 0x02	; 2
     406:	03 c0       	rjmp	.+6      	; 0x40e <__vector_9+0x90>
     408:	80 91 6f 00 	lds	r24, 0x006F
     40c:	8d 7f       	andi	r24, 0xFD	; 253
     40e:	80 93 6f 00 	sts	0x006F, r24
}
     412:	ff 91       	pop	r31
     414:	ef 91       	pop	r30
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	7f 91       	pop	r23
     420:	6f 91       	pop	r22
     422:	5f 91       	pop	r21
     424:	4f 91       	pop	r20
     426:	3f 91       	pop	r19
     428:	2f 91       	pop	r18
     42a:	0f 90       	pop	r0
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	0f 90       	pop	r0
     430:	1f 90       	pop	r1
     432:	18 95       	reti

00000434 <ABORT>:
    }
    ENABLE(status);
    return result;
}

void ABORT(Msg m) {
     434:	dc 01       	movw	r26, r24
    char status;
    DISABLE(status);
     436:	6f b7       	in	r22, 0x3f	; 63
     438:	f8 94       	cli
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     43a:	20 91 66 01 	lds	r18, 0x0166
     43e:	30 91 67 01 	lds	r19, 0x0167
     442:	e0 e0       	ldi	r30, 0x00	; 0
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	04 c0       	rjmp	.+8      	; 0x450 <ABORT+0x1c>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     448:	f9 01       	movw	r30, r18
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     450:	21 15       	cp	r18, r1
     452:	31 05       	cpc	r19, r1
     454:	69 f0       	breq	.+26     	; 0x470 <ABORT+0x3c>
     456:	2a 17       	cp	r18, r26
     458:	3b 07       	cpc	r19, r27
     45a:	b1 f7       	brne	.-20     	; 0x448 <ABORT+0x14>
     45c:	8d 91       	ld	r24, X+
     45e:	9c 91       	ld	r25, X
     460:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     462:	30 97       	sbiw	r30, 0x00	; 0
     464:	d9 f4       	brne	.+54     	; 0x49c <ABORT+0x68>
            prev->next = q->next;
        else
            *queue = q->next;
     466:	90 93 67 01 	sts	0x0167, r25
     46a:	80 93 66 01 	sts	0x0166, r24
     46e:	3a c0       	rjmp	.+116    	; 0x4e4 <ABORT+0xb0>
    *stack = t->next;
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
     470:	20 91 64 01 	lds	r18, 0x0164
     474:	30 91 65 01 	lds	r19, 0x0165
     478:	e0 e0       	ldi	r30, 0x00	; 0
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <ABORT+0x52>
    while (q && (q != m)) {
        prev = q;
        q = q->next;
     47e:	f9 01       	movw	r30, r18
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	9c 01       	movw	r18, r24
    return t;
}

static int remove(Msg m, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q != m)) {
     486:	21 15       	cp	r18, r1
     488:	31 05       	cpc	r19, r1
     48a:	81 f0       	breq	.+32     	; 0x4ac <ABORT+0x78>
     48c:	2a 17       	cp	r18, r26
     48e:	3b 07       	cpc	r19, r27
     490:	b1 f7       	brne	.-20     	; 0x47e <ABORT+0x4a>
     492:	8d 91       	ld	r24, X+
     494:	9c 91       	ld	r25, X
     496:	11 97       	sbiw	r26, 0x01	; 1
        prev = q;
        q = q->next;
    }
    if (q) {
        if (prev)
     498:	30 97       	sbiw	r30, 0x00	; 0
     49a:	19 f0       	breq	.+6      	; 0x4a2 <ABORT+0x6e>
            prev->next = q->next;
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24
     4a0:	21 c0       	rjmp	.+66     	; 0x4e4 <ABORT+0xb0>
        else
            *queue = q->next;
     4a2:	90 93 65 01 	sts	0x0165, r25
     4a6:	80 93 64 01 	sts	0x0164, r24
     4aa:	1c c0       	rjmp	.+56     	; 0x4e4 <ABORT+0xb0>
    char status;
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
     4ac:	e0 91 47 01 	lds	r30, 0x0147
     4b0:	f0 91 48 01 	lds	r31, 0x0148
        while (t) {
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
     4b4:	40 91 49 01 	lds	r20, 0x0149
     4b8:	50 91 4a 01 	lds	r21, 0x014A
     4bc:	22 c0       	rjmp	.+68     	; 0x502 <__stack+0x3>
     4be:	e4 17       	cp	r30, r20
     4c0:	f5 07       	cpc	r31, r21
     4c2:	e1 f0       	breq	.+56     	; 0x4fc <ABORT+0xc8>
     4c4:	82 81       	ldd	r24, Z+2	; 0x02
     4c6:	93 81       	ldd	r25, Z+3	; 0x03
     4c8:	8a 17       	cp	r24, r26
     4ca:	9b 07       	cpc	r25, r27
     4cc:	b9 f4       	brne	.+46     	; 0x4fc <ABORT+0xc8>
     4ce:	24 81       	ldd	r18, Z+4	; 0x04
     4d0:	35 81       	ldd	r19, Z+5	; 0x05
     4d2:	1a 96       	adiw	r26, 0x0a	; 10
     4d4:	8d 91       	ld	r24, X+
     4d6:	9c 91       	ld	r25, X
     4d8:	1b 97       	sbiw	r26, 0x0b	; 11
     4da:	28 17       	cp	r18, r24
     4dc:	39 07       	cpc	r19, r25
     4de:	71 f4       	brne	.+28     	; 0x4fc <ABORT+0xc8>
	            t->msg = NULL;
     4e0:	13 82       	std	Z+3, r1	; 0x03
     4e2:	12 82       	std	Z+2, r1	; 0x02
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
     4e4:	80 91 43 01 	lds	r24, 0x0143
     4e8:	90 91 44 01 	lds	r25, 0x0144
     4ec:	11 96       	adiw	r26, 0x01	; 1
     4ee:	9c 93       	st	X, r25
     4f0:	8e 93       	st	-X, r24
    *queue = m;
     4f2:	b0 93 44 01 	sts	0x0144, r27
     4f6:	a0 93 43 01 	sts	0x0143, r26
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <__stack+0x7>
            if ((t != current) && (t->msg == m) && (t->waitsFor == m->to)) {
	            t->msg = NULL;
	            insert(m, &msgPool);
	            break;
            }
            t = t->next;
     4fc:	01 90       	ld	r0, Z+
     4fe:	f0 81       	ld	r31, Z
     500:	e0 2d       	mov	r30, r0
    DISABLE(status);
    if (remove(m, &timerQ) || remove(m, &msgQ))
        insert(m, &msgPool);
    else {
        Thread t = activeStack;
        while (t) {
     502:	30 97       	sbiw	r30, 0x00	; 0
     504:	e1 f6       	brne	.-72     	; 0x4be <ABORT+0x8a>
	            break;
            }
            t = t->next;
        }
    }
    ENABLE(status);
     506:	67 ff       	sbrs	r22, 7
     508:	01 c0       	rjmp	.+2      	; 0x50c <__stack+0xd>
     50a:	78 94       	sei
     50c:	08 95       	ret

0000050e <T_RESET>:
}

void T_RESET(Timer *t) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ec 01       	movw	r28, r24
    t->accum = STATUS() ? current->msg->baseline : timestamp;
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	07 fe       	sbrs	r0, 7
     518:	0c c0       	rjmp	.+24     	; 0x532 <T_RESET+0x24>
     51a:	e0 91 49 01 	lds	r30, 0x0149
     51e:	f0 91 4a 01 	lds	r31, 0x014A
     522:	02 80       	ldd	r0, Z+2	; 0x02
     524:	f3 81       	ldd	r31, Z+3	; 0x03
     526:	e0 2d       	mov	r30, r0
     528:	82 81       	ldd	r24, Z+2	; 0x02
     52a:	93 81       	ldd	r25, Z+3	; 0x03
     52c:	a4 81       	ldd	r26, Z+4	; 0x04
     52e:	b5 81       	ldd	r27, Z+5	; 0x05
     530:	08 c0       	rjmp	.+16     	; 0x542 <T_RESET+0x34>
     532:	80 91 68 01 	lds	r24, 0x0168
     536:	90 91 69 01 	lds	r25, 0x0169
     53a:	a0 91 6a 01 	lds	r26, 0x016A
     53e:	b0 91 6b 01 	lds	r27, 0x016B
     542:	88 83       	st	Y, r24
     544:	99 83       	std	Y+1, r25	; 0x01
     546:	aa 83       	std	Y+2, r26	; 0x02
     548:	bb 83       	std	Y+3, r27	; 0x03
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <T_SAMPLE>:

Time T_SAMPLE(Timer *t) {
     550:	dc 01       	movw	r26, r24
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	07 fe       	sbrs	r0, 7
     556:	0c c0       	rjmp	.+24     	; 0x570 <T_SAMPLE+0x20>
     558:	e0 91 49 01 	lds	r30, 0x0149
     55c:	f0 91 4a 01 	lds	r31, 0x014A
     560:	02 80       	ldd	r0, Z+2	; 0x02
     562:	f3 81       	ldd	r31, Z+3	; 0x03
     564:	e0 2d       	mov	r30, r0
     566:	22 81       	ldd	r18, Z+2	; 0x02
     568:	33 81       	ldd	r19, Z+3	; 0x03
     56a:	44 81       	ldd	r20, Z+4	; 0x04
     56c:	55 81       	ldd	r21, Z+5	; 0x05
     56e:	08 c0       	rjmp	.+16     	; 0x580 <T_SAMPLE+0x30>
     570:	20 91 68 01 	lds	r18, 0x0168
     574:	30 91 69 01 	lds	r19, 0x0169
     578:	40 91 6a 01 	lds	r20, 0x016A
     57c:	50 91 6b 01 	lds	r21, 0x016B
     580:	8d 91       	ld	r24, X+
     582:	9d 91       	ld	r25, X+
     584:	0d 90       	ld	r0, X+
     586:	bc 91       	ld	r27, X
     588:	a0 2d       	mov	r26, r0
     58a:	28 1b       	sub	r18, r24
     58c:	39 0b       	sbc	r19, r25
     58e:	4a 0b       	sbc	r20, r26
     590:	5b 0b       	sbc	r21, r27
}
     592:	b9 01       	movw	r22, r18
     594:	ca 01       	movw	r24, r20
     596:	08 95       	ret

00000598 <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
    char status;
    Time now;
    DISABLE(status);
     5a0:	6f b7       	in	r22, 0x3f	; 63
     5a2:	f8 94       	cli
    TIMERGET(now);
     5a4:	40 91 6c 01 	lds	r20, 0x016C
     5a8:	50 91 6d 01 	lds	r21, 0x016D
     5ac:	20 91 84 00 	lds	r18, 0x0084
     5b0:	30 91 85 00 	lds	r19, 0x0085
     5b4:	b0 99       	sbic	0x16, 0	; 22
     5b6:	10 c0       	rjmp	.+32     	; 0x5d8 <CURRENT_OFFSET+0x40>
     5b8:	ca 01       	movw	r24, r20
     5ba:	aa 27       	eor	r26, r26
     5bc:	97 fd       	sbrc	r25, 7
     5be:	a0 95       	com	r26
     5c0:	ba 2f       	mov	r27, r26
     5c2:	8c 01       	movw	r16, r24
     5c4:	ff 24       	eor	r15, r15
     5c6:	ee 24       	eor	r14, r14
     5c8:	c9 01       	movw	r24, r18
     5ca:	a0 e0       	ldi	r26, 0x00	; 0
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	e8 2a       	or	r14, r24
     5d0:	f9 2a       	or	r15, r25
     5d2:	0a 2b       	or	r16, r26
     5d4:	1b 2b       	or	r17, r27
     5d6:	14 c0       	rjmp	.+40     	; 0x600 <CURRENT_OFFSET+0x68>
     5d8:	20 91 84 00 	lds	r18, 0x0084
     5dc:	30 91 85 00 	lds	r19, 0x0085
     5e0:	4f 5f       	subi	r20, 0xFF	; 255
     5e2:	5f 4f       	sbci	r21, 0xFF	; 255
     5e4:	ca 01       	movw	r24, r20
     5e6:	aa 27       	eor	r26, r26
     5e8:	97 fd       	sbrc	r25, 7
     5ea:	a0 95       	com	r26
     5ec:	ba 2f       	mov	r27, r26
     5ee:	8c 01       	movw	r16, r24
     5f0:	ff 24       	eor	r15, r15
     5f2:	ee 24       	eor	r14, r14
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	e2 2a       	or	r14, r18
     5fa:	f3 2a       	or	r15, r19
     5fc:	04 2b       	or	r16, r20
     5fe:	15 2b       	or	r17, r21
    ENABLE(status);
     600:	67 ff       	sbrs	r22, 7
     602:	0d c0       	rjmp	.+26     	; 0x61e <CURRENT_OFFSET+0x86>
     604:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
     606:	e0 91 49 01 	lds	r30, 0x0149
     60a:	f0 91 4a 01 	lds	r31, 0x014A
     60e:	02 80       	ldd	r0, Z+2	; 0x02
     610:	f3 81       	ldd	r31, Z+3	; 0x03
     612:	e0 2d       	mov	r30, r0
     614:	82 81       	ldd	r24, Z+2	; 0x02
     616:	93 81       	ldd	r25, Z+3	; 0x03
     618:	a4 81       	ldd	r26, Z+4	; 0x04
     61a:	b5 81       	ldd	r27, Z+5	; 0x05
     61c:	08 c0       	rjmp	.+16     	; 0x62e <CURRENT_OFFSET+0x96>
     61e:	80 91 68 01 	lds	r24, 0x0168
     622:	90 91 69 01 	lds	r25, 0x0169
     626:	a0 91 6a 01 	lds	r26, 0x016A
     62a:	b0 91 6b 01 	lds	r27, 0x016B
     62e:	a8 01       	movw	r20, r16
     630:	97 01       	movw	r18, r14
     632:	28 1b       	sub	r18, r24
     634:	39 0b       	sbc	r19, r25
     636:	4a 0b       	sbc	r20, r26
     638:	5b 0b       	sbc	r21, r27
}
     63a:	b9 01       	movw	r22, r18
     63c:	ca 01       	movw	r24, r20
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	08 95       	ret

00000648 <install>:
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
    if (i >= 0 && i < N_VECTORS) {
     64e:	42 31       	cpi	r20, 0x12	; 18
     650:	b0 f4       	brcc	.+44     	; 0x67e <install+0x36>
        char status;
        DISABLE(status);
     652:	2f b7       	in	r18, 0x3f	; 63
     654:	f8 94       	cli
        otable[i] = obj;
     656:	e4 2f       	mov	r30, r20
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	df 01       	movw	r26, r30
     660:	a2 59       	subi	r26, 0x92	; 146
     662:	be 4f       	sbci	r27, 0xFE	; 254
     664:	cd 93       	st	X+, r28
     666:	dc 93       	st	X, r29
        mtable[i] = m;
     668:	ea 5f       	subi	r30, 0xFA	; 250
     66a:	fd 4f       	sbci	r31, 0xFD	; 253
     66c:	71 83       	std	Z+1, r23	; 0x01
     66e:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9b 83       	std	Y+3, r25	; 0x03
     676:	8a 83       	std	Y+2, r24	; 0x02
        ENABLE(status);
     678:	27 ff       	sbrs	r18, 7
     67a:	01 c0       	rjmp	.+2      	; 0x67e <install+0x36>
     67c:	78 94       	sei
    }
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <initialize>:
    return now - (status ? current->msg->baseline : timestamp);
}

    
/* initialization */
static void initialize(void) {
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	00 d0       	rcall	.+0      	; 0x68a <initialize+0x6>
     68a:	00 d0       	rcall	.+0      	; 0x68c <initialize+0x8>
     68c:	00 d0       	rcall	.+0      	; 0x68e <initialize+0xa>
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	87 e5       	ldi	r24, 0x57	; 87
     694:	92 e0       	ldi	r25, 0x02	; 2
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     696:	27 e3       	ldi	r18, 0x37	; 55
     698:	33 e0       	ldi	r19, 0x03	; 3
        messages[i].next = &messages[i+1];
     69a:	fc 01       	movw	r30, r24
     69c:	70 97       	sbiw	r30, 0x10	; 16
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	80 83       	st	Z, r24
     6a2:	40 96       	adiw	r24, 0x10	; 16
static void initialize(void) {
    int i;

    DUMP_INIT();
    
    for (i=0; i<NMSGS-1; i++)
     6a4:	82 17       	cp	r24, r18
     6a6:	93 07       	cpc	r25, r19
     6a8:	c1 f7       	brne	.-16     	; 0x69a <initialize+0x16>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
     6aa:	10 92 28 03 	sts	0x0328, r1
     6ae:	10 92 27 03 	sts	0x0327, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
     6b2:	8f ea       	ldi	r24, 0xAF	; 175
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	90 93 93 01 	sts	0x0193, r25
     6ba:	80 93 92 01 	sts	0x0192, r24
     6be:	4d 96       	adiw	r24, 0x1d	; 29
     6c0:	90 93 b0 01 	sts	0x01B0, r25
     6c4:	80 93 af 01 	sts	0x01AF, r24
     6c8:	ca 97       	sbiw	r24, 0x3a	; 58
     6ca:	29 ee       	ldi	r18, 0xE9	; 233
     6cc:	31 e0       	ldi	r19, 0x01	; 1
     6ce:	30 93 cd 01 	sts	0x01CD, r19
     6d2:	20 93 cc 01 	sts	0x01CC, r18
    threads[NTHREADS-1].next = NULL;
     6d6:	10 92 ea 01 	sts	0x01EA, r1
     6da:	10 92 e9 01 	sts	0x01E9, r1
     6de:	23 e9       	ldi	r18, 0x93	; 147
     6e0:	33 e0       	ldi	r19, 0x03	; 3
     6e2:	3c 83       	std	Y+4, r19	; 0x04
     6e4:	2b 83       	std	Y+3, r18	; 0x03
     6e6:	ac 01       	movw	r20, r24
     6e8:	4c 5f       	subi	r20, 0xFC	; 252
     6ea:	5f 4f       	sbci	r21, 0xFF	; 255
     6ec:	5a 83       	std	Y+2, r21	; 0x02
     6ee:	49 83       	std	Y+1, r20	; 0x01
     6f0:	1e 82       	std	Y+6, r1	; 0x06
     6f2:	1d 82       	std	Y+5, r1	; 0x05
    
    for (i=0; i<NTHREADS; i++) {
        setjmp( threads[i].context );
     6f4:	ad 81       	ldd	r26, Y+5	; 0x05
     6f6:	be 81       	ldd	r27, Y+6	; 0x06
     6f8:	ed e1       	ldi	r30, 0x1D	; 29
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	ae 9f       	mul	r26, r30
     6fe:	c0 01       	movw	r24, r0
     700:	af 9f       	mul	r26, r31
     702:	90 0d       	add	r25, r0
     704:	be 9f       	mul	r27, r30
     706:	90 0d       	add	r25, r0
     708:	11 24       	eor	r1, r1
     70a:	06 96       	adiw	r24, 0x06	; 6
     70c:	8e 56       	subi	r24, 0x6E	; 110
     70e:	9e 4f       	sbci	r25, 0xFE	; 254
     710:	0e 94 ce 14 	call	0x299c	; 0x299c <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
     714:	2d 81       	ldd	r18, Y+5	; 0x05
     716:	3e 81       	ldd	r19, Y+6	; 0x06
     718:	4d e1       	ldi	r20, 0x1D	; 29
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	24 9f       	mul	r18, r20
     71e:	f0 01       	movw	r30, r0
     720:	25 9f       	mul	r18, r21
     722:	f0 0d       	add	r31, r0
     724:	34 9f       	mul	r19, r20
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	36 96       	adiw	r30, 0x06	; 6
     72c:	ee 56       	subi	r30, 0x6E	; 110
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	9c 81       	ldd	r25, Y+4	; 0x04
     734:	91 8b       	std	Z+17, r25	; 0x11
     736:	80 8b       	std	Z+16, r24	; 0x10
     738:	93 8b       	std	Z+19, r25	; 0x13
     73a:	82 8b       	std	Z+18, r24	; 0x12
        SETPC( &threads[i].context, run );
     73c:	a9 e6       	ldi	r26, 0x69	; 105
     73e:	bd e0       	ldi	r27, 0x0D	; 13
     740:	b6 8b       	std	Z+22, r27	; 0x16
     742:	a5 8b       	std	Z+21, r26	; 0x15
        threads[i].waitsFor = NULL;
     744:	e9 81       	ldd	r30, Y+1	; 0x01
     746:	fa 81       	ldd	r31, Y+2	; 0x02
     748:	11 82       	std	Z+1, r1	; 0x01
     74a:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	3e 83       	std	Y+6, r19	; 0x06
     752:	2d 83       	std	Y+5, r18	; 0x05
     754:	80 5a       	subi	r24, 0xA0	; 160
     756:	9f 4f       	sbci	r25, 0xFF	; 255
     758:	9c 83       	std	Y+4, r25	; 0x04
     75a:	8b 83       	std	Y+3, r24	; 0x03
     75c:	7d 96       	adiw	r30, 0x1d	; 29
     75e:	fa 83       	std	Y+2, r31	; 0x02
     760:	e9 83       	std	Y+1, r30	; 0x01
     762:	24 30       	cpi	r18, 0x04	; 4
     764:	31 05       	cpc	r19, r1
     766:	31 f6       	brne	.-116    	; 0x6f4 <initialize+0x70>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
     768:	10 92 2b 02 	sts	0x022B, r1
     76c:	10 92 2a 02 	sts	0x022A, r1
    thread0.waitsFor = NULL;
     770:	10 92 2f 02 	sts	0x022F, r1
     774:	10 92 2e 02 	sts	0x022E, r1
    thread0.msg = NULL;
     778:	10 92 2d 02 	sts	0x022D, r1
     77c:	10 92 2c 02 	sts	0x022C, r1
     780:	ee e0       	ldi	r30, 0x0E	; 14
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	01 c0       	rjmp	.+2      	; 0x788 <initialize+0x104>

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
    DUMPC(*s++);
     786:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     788:	80 81       	ld	r24, Z
     78a:	88 23       	and	r24, r24
     78c:	e1 f7       	brne	.-8      	; 0x786 <initialize+0x102>
     78e:	ec e1       	ldi	r30, 0x1C	; 28
     790:	f1 e0       	ldi	r31, 0x01	; 1
     792:	01 c0       	rjmp	.+2      	; 0x796 <initialize+0x112>
    DUMPC(*s++);
     794:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     796:	80 81       	ld	r24, Z
     798:	88 23       	and	r24, r24
     79a:	e1 f7       	brne	.-8      	; 0x794 <initialize+0x110>
     79c:	ef e2       	ldi	r30, 0x2F	; 47
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <initialize+0x120>
    DUMPC(*s++);
     7a2:	31 96       	adiw	r30, 0x01	; 1
#include "TinyTimber.h"

void DUMPC(char);

void DUMP(char *s) {
  while (*s)
     7a4:	80 81       	ld	r24, Z
     7a6:	88 23       	and	r24, r24
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <initialize+0x11e>
    thread0.msg = NULL;
    
    DUMP("\n\rTinyTimber ");
    DUMP(TINYTIMBER_VERSION);
    DUMP("\n\r");
    TIMER_INIT();
     7aa:	e1 e6       	ldi	r30, 0x61	; 97
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 e8       	ldi	r24, 0x80	; 128
     7b0:	80 83       	st	Z, r24
     7b2:	10 82       	st	Z, r1
     7b4:	10 92 85 00 	sts	0x0085, r1
     7b8:	10 92 84 00 	sts	0x0084, r1
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	80 93 81 00 	sts	0x0081, r24
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	80 93 6f 00 	sts	0x006F, r24
}
     7c8:	26 96       	adiw	r28, 0x06	; 6
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	cf 91       	pop	r28
     7d6:	df 91       	pop	r29
     7d8:	08 95       	ret

000007da <dispatch>:
    TIMERSET(timerQ);
    schedule();
}

/* context switching */
static void dispatch( Thread next ) {
     7da:	df 93       	push	r29
     7dc:	cf 93       	push	r28
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <dispatch+0x6>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	9a 83       	std	Y+2, r25	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp( current->context ) == 0) {
     7e8:	80 91 49 01 	lds	r24, 0x0149
     7ec:	90 91 4a 01 	lds	r25, 0x014A
     7f0:	06 96       	adiw	r24, 0x06	; 6
     7f2:	0e 94 ce 14 	call	0x299c	; 0x299c <setjmp>
     7f6:	89 2b       	or	r24, r25
     7f8:	59 f4       	brne	.+22     	; 0x810 <dispatch+0x36>
        current = next;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	90 93 4a 01 	sts	0x014A, r25
     802:	80 93 49 01 	sts	0x0149, r24
        longjmp( next->context, 1 );
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	06 96       	adiw	r24, 0x06	; 6
     80c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <longjmp>
    }
}
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <schedule>:
    while (1) {
        SLEEP();
    }
}

static void schedule(void) {
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
    Msg topMsg = activeStack->msg;
     81e:	60 91 47 01 	lds	r22, 0x0147
     822:	70 91 48 01 	lds	r23, 0x0148
     826:	fb 01       	movw	r30, r22
     828:	c2 81       	ldd	r28, Z+2	; 0x02
     82a:	d3 81       	ldd	r29, Z+3	; 0x03
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
     82c:	a0 91 64 01 	lds	r26, 0x0164
     830:	b0 91 65 01 	lds	r27, 0x0165
     834:	10 97       	sbiw	r26, 0x00	; 0
     836:	39 f1       	breq	.+78     	; 0x886 <schedule+0x6c>
     838:	e0 91 45 01 	lds	r30, 0x0145
     83c:	f0 91 46 01 	lds	r31, 0x0146
     840:	30 97       	sbiw	r30, 0x00	; 0
     842:	09 f1       	breq	.+66     	; 0x886 <schedule+0x6c>
     844:	20 97       	sbiw	r28, 0x00	; 0
     846:	81 f0       	breq	.+32     	; 0x868 <schedule+0x4e>
     848:	16 96       	adiw	r26, 0x06	; 6
     84a:	8d 91       	ld	r24, X+
     84c:	9d 91       	ld	r25, X+
     84e:	0d 90       	ld	r0, X+
     850:	bc 91       	ld	r27, X
     852:	a0 2d       	mov	r26, r0
     854:	2e 81       	ldd	r18, Y+6	; 0x06
     856:	3f 81       	ldd	r19, Y+7	; 0x07
     858:	48 85       	ldd	r20, Y+8	; 0x08
     85a:	59 85       	ldd	r21, Y+9	; 0x09
     85c:	82 1b       	sub	r24, r18
     85e:	93 0b       	sbc	r25, r19
     860:	a4 0b       	sbc	r26, r20
     862:	b5 0b       	sbc	r27, r21
     864:	b7 ff       	sbrs	r27, 7
     866:	0f c0       	rjmp	.+30     	; 0x886 <schedule+0x6c>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	90 93 46 01 	sts	0x0146, r25
     870:	80 93 45 01 	sts	0x0145, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
     874:	71 83       	std	Z+1, r23	; 0x01
     876:	60 83       	st	Z, r22
    *stack = t;
     878:	f0 93 48 01 	sts	0x0148, r31
     87c:	e0 93 47 01 	sts	0x0147, r30

static void schedule(void) {
    Msg topMsg = activeStack->msg;
    if (msgQ && threadPool && ((!topMsg) || (msgQ->deadline - topMsg->deadline < 0))) {
        push(pop(&threadPool), &activeStack);
        dispatch(activeStack);
     880:	cf 01       	movw	r24, r30
     882:	0e 94 ed 03 	call	0x7da	; 0x7da <dispatch>
    }
}
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <tinytimber>:
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
        ENABLE(status);
    }
}

int tinytimber(Object *obj, Method m, int arg) {
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	7c 01       	movw	r14, r24
     89a:	eb 01       	movw	r28, r22
     89c:	8a 01       	movw	r16, r20
    char status;
    DISABLE(status);
     89e:	8f b7       	in	r24, 0x3f	; 63
     8a0:	f8 94       	cli
    initialize();
     8a2:	0e 94 42 03 	call	0x684	; 0x684 <initialize>
    ENABLE(1);
     8a6:	78 94       	sei
    if (m != NULL)
     8a8:	20 97       	sbiw	r28, 0x00	; 0
     8aa:	21 f0       	breq	.+8      	; 0x8b4 <tinytimber+0x28>
        m(obj, arg);
     8ac:	b8 01       	movw	r22, r16
     8ae:	c7 01       	movw	r24, r14
     8b0:	fe 01       	movw	r30, r28
     8b2:	09 95       	icall
    DISABLE(status);
     8b4:	8f b7       	in	r24, 0x3f	; 63
     8b6:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
     8b8:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    ENABLE(1);
     8bc:	78 94       	sei
    while (1) {
        SLEEP();
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	83 bf       	out	0x33, r24	; 51
     8c2:	88 95       	sleep
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <tinytimber+0x34>

000008c6 <__vector_7>:
    TIMER_OCLR();
    overflows++;
    TIMERSET(timerQ);
}

TIMER_COMPARE_INTERRUPT {
     8c6:	1f 92       	push	r1
     8c8:	0f 92       	push	r0
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	2f 93       	push	r18
     8e6:	3f 93       	push	r19
     8e8:	4f 93       	push	r20
     8ea:	5f 93       	push	r21
     8ec:	6f 93       	push	r22
     8ee:	7f 93       	push	r23
     8f0:	8f 93       	push	r24
     8f2:	9f 93       	push	r25
     8f4:	af 93       	push	r26
     8f6:	bf 93       	push	r27
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ef 93       	push	r30
     8fe:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
     900:	c0 90 6c 01 	lds	r12, 0x016C
     904:	d0 90 6d 01 	lds	r13, 0x016D
     908:	20 91 84 00 	lds	r18, 0x0084
     90c:	30 91 85 00 	lds	r19, 0x0085
     910:	b0 99       	sbic	0x16, 0	; 22
     912:	0a c0       	rjmp	.+20     	; 0x928 <__vector_7+0x62>
     914:	c6 01       	movw	r24, r12
     916:	aa 27       	eor	r26, r26
     918:	97 fd       	sbrc	r25, 7
     91a:	a0 95       	com	r26
     91c:	ba 2f       	mov	r27, r26
     91e:	8c 01       	movw	r16, r24
     920:	ff 24       	eor	r15, r15
     922:	ee 24       	eor	r14, r14
     924:	c9 01       	movw	r24, r18
     926:	12 c0       	rjmp	.+36     	; 0x94c <__vector_7+0x86>
     928:	80 91 84 00 	lds	r24, 0x0084
     92c:	90 91 85 00 	lds	r25, 0x0085
     930:	08 94       	sec
     932:	c1 1c       	adc	r12, r1
     934:	d1 1c       	adc	r13, r1
     936:	96 01       	movw	r18, r12
     938:	44 27       	eor	r20, r20
     93a:	37 fd       	sbrc	r19, 7
     93c:	40 95       	com	r20
     93e:	54 2f       	mov	r21, r20
     940:	08 94       	sec
     942:	c1 08       	sbc	r12, r1
     944:	d1 08       	sbc	r13, r1
     946:	89 01       	movw	r16, r18
     948:	ff 24       	eor	r15, r15
     94a:	ee 24       	eor	r14, r14
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	e8 2a       	or	r14, r24
     952:	f9 2a       	or	r15, r25
     954:	0a 2b       	or	r16, r26
     956:	1b 2b       	or	r17, r27
     958:	b0 90 64 01 	lds	r11, 0x0164
     95c:	a0 90 65 01 	lds	r10, 0x0165
     960:	c0 91 66 01 	lds	r28, 0x0166
     964:	d0 91 67 01 	lds	r29, 0x0167
     968:	2c c0       	rjmp	.+88     	; 0x9c2 <__vector_7+0xfc>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
     96a:	98 80       	ld	r9, Y
     96c:	89 80       	ldd	r8, Y+1	; 0x01
     96e:	8b 2d       	mov	r24, r11
     970:	9a 2d       	mov	r25, r10
     972:	9c 01       	movw	r18, r24
     974:	f9 01       	movw	r30, r18
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	05 c0       	rjmp	.+10     	; 0x986 <__vector_7+0xc0>
/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
     97c:	bf 01       	movw	r22, r30
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	9c 01       	movw	r18, r24
     984:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
     986:	30 97       	sbiw	r30, 0x00	; 0
     988:	69 f0       	breq	.+26     	; 0x9a4 <__vector_7+0xde>
     98a:	26 81       	ldd	r18, Z+6	; 0x06
     98c:	37 81       	ldd	r19, Z+7	; 0x07
     98e:	40 85       	ldd	r20, Z+8	; 0x08
     990:	51 85       	ldd	r21, Z+9	; 0x09
     992:	8e 81       	ldd	r24, Y+6	; 0x06
     994:	9f 81       	ldd	r25, Y+7	; 0x07
     996:	a8 85       	ldd	r26, Y+8	; 0x08
     998:	b9 85       	ldd	r27, Y+9	; 0x09
     99a:	82 17       	cp	r24, r18
     99c:	93 07       	cpc	r25, r19
     99e:	a4 07       	cpc	r26, r20
     9a0:	b5 07       	cpc	r27, r21
     9a2:	64 f7       	brge	.-40     	; 0x97c <__vector_7+0xb6>
        prev = q;
        q = q->next;
    }
    p->next = q;
     9a4:	f9 83       	std	Y+1, r31	; 0x01
     9a6:	e8 83       	st	Y, r30
    if (prev == NULL)
     9a8:	61 15       	cp	r22, r1
     9aa:	71 05       	cpc	r23, r1
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <__vector_7+0xee>
     9ae:	bc 2e       	mov	r11, r28
     9b0:	ad 2e       	mov	r10, r29
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <__vector_7+0xf4>
        *queue = p;
    else
        prev->next = p;
     9b4:	fb 01       	movw	r30, r22
     9b6:	d1 83       	std	Z+1, r29	; 0x01
     9b8:	c0 83       	st	Z, r28
     9ba:	89 2d       	mov	r24, r9
     9bc:	98 2d       	mov	r25, r8
     9be:	9c 01       	movw	r18, r24
     9c0:	e9 01       	movw	r28, r18

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
     9c2:	20 97       	sbiw	r28, 0x00	; 0
     9c4:	41 f1       	breq	.+80     	; 0xa16 <__vector_7+0x150>
     9c6:	2a 81       	ldd	r18, Y+2	; 0x02
     9c8:	3b 81       	ldd	r19, Y+3	; 0x03
     9ca:	4c 81       	ldd	r20, Y+4	; 0x04
     9cc:	5d 81       	ldd	r21, Y+5	; 0x05
     9ce:	da 01       	movw	r26, r20
     9d0:	c9 01       	movw	r24, r18
     9d2:	8e 19       	sub	r24, r14
     9d4:	9f 09       	sbc	r25, r15
     9d6:	a0 0b       	sbc	r26, r16
     9d8:	b1 0b       	sbc	r27, r17
     9da:	18 16       	cp	r1, r24
     9dc:	19 06       	cpc	r1, r25
     9de:	1a 06       	cpc	r1, r26
     9e0:	1b 06       	cpc	r1, r27
     9e2:	1c f6       	brge	.-122    	; 0x96a <__vector_7+0xa4>
     9e4:	44 c0       	rjmp	.+136    	; 0xa6e <__vector_7+0x1a8>
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     9e6:	80 91 84 00 	lds	r24, 0x0084
     9ea:	90 91 85 00 	lds	r25, 0x0085
     9ee:	80 95       	com	r24
     9f0:	90 95       	com	r25
     9f2:	82 0f       	add	r24, r18
     9f4:	93 1f       	adc	r25, r19
     9f6:	89 2b       	or	r24, r25
     9f8:	31 f4       	brne	.+12     	; 0xa06 <__vector_7+0x140>
     9fa:	20 91 84 00 	lds	r18, 0x0084
     9fe:	30 91 85 00 	lds	r19, 0x0085
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	30 93 89 00 	sts	0x0089, r19
     a0a:	20 93 88 00 	sts	0x0088, r18
     a0e:	80 91 6f 00 	lds	r24, 0x006F
     a12:	82 60       	ori	r24, 0x02	; 2
     a14:	0b c0       	rjmp	.+22     	; 0xa2c <__vector_7+0x166>
     a16:	b0 92 64 01 	sts	0x0164, r11
     a1a:	a0 92 65 01 	sts	0x0165, r10
     a1e:	10 92 67 01 	sts	0x0167, r1
     a22:	10 92 66 01 	sts	0x0166, r1
     a26:	80 91 6f 00 	lds	r24, 0x006F
     a2a:	8d 7f       	andi	r24, 0xFD	; 253
     a2c:	80 93 6f 00 	sts	0x006F, r24
    schedule();
     a30:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
}
     a34:	ff 91       	pop	r31
     a36:	ef 91       	pop	r30
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	bf 91       	pop	r27
     a3e:	af 91       	pop	r26
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	7f 91       	pop	r23
     a46:	6f 91       	pop	r22
     a48:	5f 91       	pop	r21
     a4a:	4f 91       	pop	r20
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	9f 90       	pop	r9
     a62:	8f 90       	pop	r8
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	0f 90       	pop	r0
     a6a:	1f 90       	pop	r1
     a6c:	18 95       	reti
     a6e:	b0 92 64 01 	sts	0x0164, r11
     a72:	a0 92 65 01 	sts	0x0165, r10
     a76:	d0 93 67 01 	sts	0x0167, r29
     a7a:	c0 93 66 01 	sts	0x0166, r28
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
     a7e:	ca 01       	movw	r24, r20
     a80:	bb 27       	eor	r27, r27
     a82:	97 fd       	sbrc	r25, 7
     a84:	b0 95       	com	r27
     a86:	ab 2f       	mov	r26, r27
     a88:	c8 16       	cp	r12, r24
     a8a:	d9 06       	cpc	r13, r25
     a8c:	61 f6       	brne	.-104    	; 0xa26 <__vector_7+0x160>
     a8e:	ab cf       	rjmp	.-170    	; 0x9e6 <__vector_7+0x120>

00000a90 <__vector_22>:
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
IRQ(IRQ_LCD,             LCD_vect);
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	60 91 6c 01 	lds	r22, 0x016C
     ab6:	70 91 6d 01 	lds	r23, 0x016D
     aba:	20 91 84 00 	lds	r18, 0x0084
     abe:	30 91 85 00 	lds	r19, 0x0085
     ac2:	cb 01       	movw	r24, r22
     ac4:	aa 27       	eor	r26, r26
     ac6:	97 fd       	sbrc	r25, 7
     ac8:	a0 95       	com	r26
     aca:	ba 2f       	mov	r27, r26
     acc:	dc 01       	movw	r26, r24
     ace:	99 27       	eor	r25, r25
     ad0:	88 27       	eor	r24, r24
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	82 2b       	or	r24, r18
     ad8:	93 2b       	or	r25, r19
     ada:	a4 2b       	or	r26, r20
     adc:	b5 2b       	or	r27, r21
     ade:	80 93 68 01 	sts	0x0168, r24
     ae2:	90 93 69 01 	sts	0x0169, r25
     ae6:	a0 93 6a 01 	sts	0x016A, r26
     aea:	b0 93 6b 01 	sts	0x016B, r27
     aee:	b0 9b       	sbis	0x16, 0	; 22
     af0:	1c c0       	rjmp	.+56     	; 0xb2a <__vector_22+0x9a>
     af2:	20 91 84 00 	lds	r18, 0x0084
     af6:	30 91 85 00 	lds	r19, 0x0085
     afa:	6f 5f       	subi	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	cb 01       	movw	r24, r22
     b00:	aa 27       	eor	r26, r26
     b02:	97 fd       	sbrc	r25, 7
     b04:	a0 95       	com	r26
     b06:	ba 2f       	mov	r27, r26
     b08:	dc 01       	movw	r26, r24
     b0a:	99 27       	eor	r25, r25
     b0c:	88 27       	eor	r24, r24
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	82 2b       	or	r24, r18
     b14:	93 2b       	or	r25, r19
     b16:	a4 2b       	or	r26, r20
     b18:	b5 2b       	or	r27, r21
     b1a:	80 93 68 01 	sts	0x0168, r24
     b1e:	90 93 69 01 	sts	0x0169, r25
     b22:	a0 93 6a 01 	sts	0x016A, r26
     b26:	b0 93 6b 01 	sts	0x016B, r27
     b2a:	e0 91 28 02 	lds	r30, 0x0228
     b2e:	f0 91 29 02 	lds	r31, 0x0229
     b32:	30 97       	sbiw	r30, 0x00	; 0
     b34:	39 f0       	breq	.+14     	; 0xb44 <__vector_22+0xb4>
     b36:	61 e1       	ldi	r22, 0x11	; 17
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 91 90 01 	lds	r24, 0x0190
     b3e:	90 91 91 01 	lds	r25, 0x0191
     b42:	09 95       	icall
     b44:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <__vector_21>:
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
IRQ(IRQ_SPM_READY,       SPM_READY_vect);
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	60 91 6c 01 	lds	r22, 0x016C
     b90:	70 91 6d 01 	lds	r23, 0x016D
     b94:	20 91 84 00 	lds	r18, 0x0084
     b98:	30 91 85 00 	lds	r19, 0x0085
     b9c:	cb 01       	movw	r24, r22
     b9e:	aa 27       	eor	r26, r26
     ba0:	97 fd       	sbrc	r25, 7
     ba2:	a0 95       	com	r26
     ba4:	ba 2f       	mov	r27, r26
     ba6:	dc 01       	movw	r26, r24
     ba8:	99 27       	eor	r25, r25
     baa:	88 27       	eor	r24, r24
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	82 2b       	or	r24, r18
     bb2:	93 2b       	or	r25, r19
     bb4:	a4 2b       	or	r26, r20
     bb6:	b5 2b       	or	r27, r21
     bb8:	80 93 68 01 	sts	0x0168, r24
     bbc:	90 93 69 01 	sts	0x0169, r25
     bc0:	a0 93 6a 01 	sts	0x016A, r26
     bc4:	b0 93 6b 01 	sts	0x016B, r27
     bc8:	b0 9b       	sbis	0x16, 0	; 22
     bca:	1c c0       	rjmp	.+56     	; 0xc04 <__vector_21+0x9a>
     bcc:	20 91 84 00 	lds	r18, 0x0084
     bd0:	30 91 85 00 	lds	r19, 0x0085
     bd4:	6f 5f       	subi	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	cb 01       	movw	r24, r22
     bda:	aa 27       	eor	r26, r26
     bdc:	97 fd       	sbrc	r25, 7
     bde:	a0 95       	com	r26
     be0:	ba 2f       	mov	r27, r26
     be2:	dc 01       	movw	r26, r24
     be4:	99 27       	eor	r25, r25
     be6:	88 27       	eor	r24, r24
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	82 2b       	or	r24, r18
     bee:	93 2b       	or	r25, r19
     bf0:	a4 2b       	or	r26, r20
     bf2:	b5 2b       	or	r27, r21
     bf4:	80 93 68 01 	sts	0x0168, r24
     bf8:	90 93 69 01 	sts	0x0169, r25
     bfc:	a0 93 6a 01 	sts	0x016A, r26
     c00:	b0 93 6b 01 	sts	0x016B, r27
     c04:	e0 91 26 02 	lds	r30, 0x0226
     c08:	f0 91 27 02 	lds	r31, 0x0227
     c0c:	30 97       	sbiw	r30, 0x00	; 0
     c0e:	39 f0       	breq	.+14     	; 0xc1e <__vector_21+0xb4>
     c10:	60 e1       	ldi	r22, 0x10	; 16
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	80 91 8e 01 	lds	r24, 0x018E
     c18:	90 91 8f 01 	lds	r25, 0x018F
     c1c:	09 95       	icall
     c1e:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <__vector_20>:
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
IRQ(IRQ_EE_READY,        EE_READY_vect);
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	2f 93       	push	r18
     c50:	3f 93       	push	r19
     c52:	4f 93       	push	r20
     c54:	5f 93       	push	r21
     c56:	6f 93       	push	r22
     c58:	7f 93       	push	r23
     c5a:	8f 93       	push	r24
     c5c:	9f 93       	push	r25
     c5e:	af 93       	push	r26
     c60:	bf 93       	push	r27
     c62:	ef 93       	push	r30
     c64:	ff 93       	push	r31
     c66:	60 91 6c 01 	lds	r22, 0x016C
     c6a:	70 91 6d 01 	lds	r23, 0x016D
     c6e:	20 91 84 00 	lds	r18, 0x0084
     c72:	30 91 85 00 	lds	r19, 0x0085
     c76:	cb 01       	movw	r24, r22
     c78:	aa 27       	eor	r26, r26
     c7a:	97 fd       	sbrc	r25, 7
     c7c:	a0 95       	com	r26
     c7e:	ba 2f       	mov	r27, r26
     c80:	dc 01       	movw	r26, r24
     c82:	99 27       	eor	r25, r25
     c84:	88 27       	eor	r24, r24
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	82 2b       	or	r24, r18
     c8c:	93 2b       	or	r25, r19
     c8e:	a4 2b       	or	r26, r20
     c90:	b5 2b       	or	r27, r21
     c92:	80 93 68 01 	sts	0x0168, r24
     c96:	90 93 69 01 	sts	0x0169, r25
     c9a:	a0 93 6a 01 	sts	0x016A, r26
     c9e:	b0 93 6b 01 	sts	0x016B, r27
     ca2:	b0 9b       	sbis	0x16, 0	; 22
     ca4:	1c c0       	rjmp	.+56     	; 0xcde <__vector_20+0x9a>
     ca6:	20 91 84 00 	lds	r18, 0x0084
     caa:	30 91 85 00 	lds	r19, 0x0085
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	cb 01       	movw	r24, r22
     cb4:	aa 27       	eor	r26, r26
     cb6:	97 fd       	sbrc	r25, 7
     cb8:	a0 95       	com	r26
     cba:	ba 2f       	mov	r27, r26
     cbc:	dc 01       	movw	r26, r24
     cbe:	99 27       	eor	r25, r25
     cc0:	88 27       	eor	r24, r24
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	82 2b       	or	r24, r18
     cc8:	93 2b       	or	r25, r19
     cca:	a4 2b       	or	r26, r20
     ccc:	b5 2b       	or	r27, r21
     cce:	80 93 68 01 	sts	0x0168, r24
     cd2:	90 93 69 01 	sts	0x0169, r25
     cd6:	a0 93 6a 01 	sts	0x016A, r26
     cda:	b0 93 6b 01 	sts	0x016B, r27
     cde:	e0 91 24 02 	lds	r30, 0x0224
     ce2:	f0 91 25 02 	lds	r31, 0x0225
     ce6:	30 97       	sbiw	r30, 0x00	; 0
     ce8:	39 f0       	breq	.+14     	; 0xcf8 <__vector_20+0xb4>
     cea:	6f e0       	ldi	r22, 0x0F	; 15
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 91 8c 01 	lds	r24, 0x018C
     cf2:	90 91 8d 01 	lds	r25, 0x018D
     cf6:	09 95       	icall
     cf8:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_19>:
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
IRQ(IRQ_ADC,             ADC_vect);
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	2f 93       	push	r18
     d2a:	3f 93       	push	r19
     d2c:	4f 93       	push	r20
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
     d40:	60 91 6c 01 	lds	r22, 0x016C
     d44:	70 91 6d 01 	lds	r23, 0x016D
     d48:	20 91 84 00 	lds	r18, 0x0084
     d4c:	30 91 85 00 	lds	r19, 0x0085
     d50:	cb 01       	movw	r24, r22
     d52:	aa 27       	eor	r26, r26
     d54:	97 fd       	sbrc	r25, 7
     d56:	a0 95       	com	r26
     d58:	ba 2f       	mov	r27, r26
     d5a:	dc 01       	movw	r26, r24
     d5c:	99 27       	eor	r25, r25
     d5e:	88 27       	eor	r24, r24
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	82 2b       	or	r24, r18
     d66:	93 2b       	or	r25, r19
     d68:	a4 2b       	or	r26, r20
     d6a:	b5 2b       	or	r27, r21
     d6c:	80 93 68 01 	sts	0x0168, r24
     d70:	90 93 69 01 	sts	0x0169, r25
     d74:	a0 93 6a 01 	sts	0x016A, r26
     d78:	b0 93 6b 01 	sts	0x016B, r27
     d7c:	b0 9b       	sbis	0x16, 0	; 22
     d7e:	1c c0       	rjmp	.+56     	; 0xdb8 <__vector_19+0x9a>
     d80:	20 91 84 00 	lds	r18, 0x0084
     d84:	30 91 85 00 	lds	r19, 0x0085
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	cb 01       	movw	r24, r22
     d8e:	aa 27       	eor	r26, r26
     d90:	97 fd       	sbrc	r25, 7
     d92:	a0 95       	com	r26
     d94:	ba 2f       	mov	r27, r26
     d96:	dc 01       	movw	r26, r24
     d98:	99 27       	eor	r25, r25
     d9a:	88 27       	eor	r24, r24
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	82 2b       	or	r24, r18
     da2:	93 2b       	or	r25, r19
     da4:	a4 2b       	or	r26, r20
     da6:	b5 2b       	or	r27, r21
     da8:	80 93 68 01 	sts	0x0168, r24
     dac:	90 93 69 01 	sts	0x0169, r25
     db0:	a0 93 6a 01 	sts	0x016A, r26
     db4:	b0 93 6b 01 	sts	0x016B, r27
     db8:	e0 91 22 02 	lds	r30, 0x0222
     dbc:	f0 91 23 02 	lds	r31, 0x0223
     dc0:	30 97       	sbiw	r30, 0x00	; 0
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <__vector_19+0xb4>
     dc4:	6e e0       	ldi	r22, 0x0E	; 14
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	80 91 8a 01 	lds	r24, 0x018A
     dcc:	90 91 8b 01 	lds	r25, 0x018B
     dd0:	09 95       	icall
     dd2:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_18>:
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
IRQ(IRQ_ANALOG_COMP,     ANALOG_COMP_vect);
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
     e1a:	60 91 6c 01 	lds	r22, 0x016C
     e1e:	70 91 6d 01 	lds	r23, 0x016D
     e22:	20 91 84 00 	lds	r18, 0x0084
     e26:	30 91 85 00 	lds	r19, 0x0085
     e2a:	cb 01       	movw	r24, r22
     e2c:	aa 27       	eor	r26, r26
     e2e:	97 fd       	sbrc	r25, 7
     e30:	a0 95       	com	r26
     e32:	ba 2f       	mov	r27, r26
     e34:	dc 01       	movw	r26, r24
     e36:	99 27       	eor	r25, r25
     e38:	88 27       	eor	r24, r24
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	82 2b       	or	r24, r18
     e40:	93 2b       	or	r25, r19
     e42:	a4 2b       	or	r26, r20
     e44:	b5 2b       	or	r27, r21
     e46:	80 93 68 01 	sts	0x0168, r24
     e4a:	90 93 69 01 	sts	0x0169, r25
     e4e:	a0 93 6a 01 	sts	0x016A, r26
     e52:	b0 93 6b 01 	sts	0x016B, r27
     e56:	b0 9b       	sbis	0x16, 0	; 22
     e58:	1c c0       	rjmp	.+56     	; 0xe92 <__vector_18+0x9a>
     e5a:	20 91 84 00 	lds	r18, 0x0084
     e5e:	30 91 85 00 	lds	r19, 0x0085
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	cb 01       	movw	r24, r22
     e68:	aa 27       	eor	r26, r26
     e6a:	97 fd       	sbrc	r25, 7
     e6c:	a0 95       	com	r26
     e6e:	ba 2f       	mov	r27, r26
     e70:	dc 01       	movw	r26, r24
     e72:	99 27       	eor	r25, r25
     e74:	88 27       	eor	r24, r24
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	82 2b       	or	r24, r18
     e7c:	93 2b       	or	r25, r19
     e7e:	a4 2b       	or	r26, r20
     e80:	b5 2b       	or	r27, r21
     e82:	80 93 68 01 	sts	0x0168, r24
     e86:	90 93 69 01 	sts	0x0169, r25
     e8a:	a0 93 6a 01 	sts	0x016A, r26
     e8e:	b0 93 6b 01 	sts	0x016B, r27
     e92:	e0 91 20 02 	lds	r30, 0x0220
     e96:	f0 91 21 02 	lds	r31, 0x0221
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	39 f0       	breq	.+14     	; 0xeac <__vector_18+0xb4>
     e9e:	6d e0       	ldi	r22, 0x0D	; 13
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 91 88 01 	lds	r24, 0x0188
     ea6:	90 91 89 01 	lds	r25, 0x0189
     eaa:	09 95       	icall
     eac:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_17>:
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
IRQ(IRQ_USI_OVERFLOW,    USI_OVERFLOW_vect);
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
     ef4:	60 91 6c 01 	lds	r22, 0x016C
     ef8:	70 91 6d 01 	lds	r23, 0x016D
     efc:	20 91 84 00 	lds	r18, 0x0084
     f00:	30 91 85 00 	lds	r19, 0x0085
     f04:	cb 01       	movw	r24, r22
     f06:	aa 27       	eor	r26, r26
     f08:	97 fd       	sbrc	r25, 7
     f0a:	a0 95       	com	r26
     f0c:	ba 2f       	mov	r27, r26
     f0e:	dc 01       	movw	r26, r24
     f10:	99 27       	eor	r25, r25
     f12:	88 27       	eor	r24, r24
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	82 2b       	or	r24, r18
     f1a:	93 2b       	or	r25, r19
     f1c:	a4 2b       	or	r26, r20
     f1e:	b5 2b       	or	r27, r21
     f20:	80 93 68 01 	sts	0x0168, r24
     f24:	90 93 69 01 	sts	0x0169, r25
     f28:	a0 93 6a 01 	sts	0x016A, r26
     f2c:	b0 93 6b 01 	sts	0x016B, r27
     f30:	b0 9b       	sbis	0x16, 0	; 22
     f32:	1c c0       	rjmp	.+56     	; 0xf6c <__vector_17+0x9a>
     f34:	20 91 84 00 	lds	r18, 0x0084
     f38:	30 91 85 00 	lds	r19, 0x0085
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	cb 01       	movw	r24, r22
     f42:	aa 27       	eor	r26, r26
     f44:	97 fd       	sbrc	r25, 7
     f46:	a0 95       	com	r26
     f48:	ba 2f       	mov	r27, r26
     f4a:	dc 01       	movw	r26, r24
     f4c:	99 27       	eor	r25, r25
     f4e:	88 27       	eor	r24, r24
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	82 2b       	or	r24, r18
     f56:	93 2b       	or	r25, r19
     f58:	a4 2b       	or	r26, r20
     f5a:	b5 2b       	or	r27, r21
     f5c:	80 93 68 01 	sts	0x0168, r24
     f60:	90 93 69 01 	sts	0x0169, r25
     f64:	a0 93 6a 01 	sts	0x016A, r26
     f68:	b0 93 6b 01 	sts	0x016B, r27
     f6c:	e0 91 1e 02 	lds	r30, 0x021E
     f70:	f0 91 1f 02 	lds	r31, 0x021F
     f74:	30 97       	sbiw	r30, 0x00	; 0
     f76:	39 f0       	breq	.+14     	; 0xf86 <__vector_17+0xb4>
     f78:	6c e0       	ldi	r22, 0x0C	; 12
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 91 86 01 	lds	r24, 0x0186
     f80:	90 91 87 01 	lds	r25, 0x0187
     f84:	09 95       	icall
     f86:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_16>:
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
IRQ(IRQ_USI_START,       USI_START_vect);
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
     fce:	60 91 6c 01 	lds	r22, 0x016C
     fd2:	70 91 6d 01 	lds	r23, 0x016D
     fd6:	20 91 84 00 	lds	r18, 0x0084
     fda:	30 91 85 00 	lds	r19, 0x0085
     fde:	cb 01       	movw	r24, r22
     fe0:	aa 27       	eor	r26, r26
     fe2:	97 fd       	sbrc	r25, 7
     fe4:	a0 95       	com	r26
     fe6:	ba 2f       	mov	r27, r26
     fe8:	dc 01       	movw	r26, r24
     fea:	99 27       	eor	r25, r25
     fec:	88 27       	eor	r24, r24
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	82 2b       	or	r24, r18
     ff4:	93 2b       	or	r25, r19
     ff6:	a4 2b       	or	r26, r20
     ff8:	b5 2b       	or	r27, r21
     ffa:	80 93 68 01 	sts	0x0168, r24
     ffe:	90 93 69 01 	sts	0x0169, r25
    1002:	a0 93 6a 01 	sts	0x016A, r26
    1006:	b0 93 6b 01 	sts	0x016B, r27
    100a:	b0 9b       	sbis	0x16, 0	; 22
    100c:	1c c0       	rjmp	.+56     	; 0x1046 <__vector_16+0x9a>
    100e:	20 91 84 00 	lds	r18, 0x0084
    1012:	30 91 85 00 	lds	r19, 0x0085
    1016:	6f 5f       	subi	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	cb 01       	movw	r24, r22
    101c:	aa 27       	eor	r26, r26
    101e:	97 fd       	sbrc	r25, 7
    1020:	a0 95       	com	r26
    1022:	ba 2f       	mov	r27, r26
    1024:	dc 01       	movw	r26, r24
    1026:	99 27       	eor	r25, r25
    1028:	88 27       	eor	r24, r24
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	82 2b       	or	r24, r18
    1030:	93 2b       	or	r25, r19
    1032:	a4 2b       	or	r26, r20
    1034:	b5 2b       	or	r27, r21
    1036:	80 93 68 01 	sts	0x0168, r24
    103a:	90 93 69 01 	sts	0x0169, r25
    103e:	a0 93 6a 01 	sts	0x016A, r26
    1042:	b0 93 6b 01 	sts	0x016B, r27
    1046:	e0 91 1c 02 	lds	r30, 0x021C
    104a:	f0 91 1d 02 	lds	r31, 0x021D
    104e:	30 97       	sbiw	r30, 0x00	; 0
    1050:	39 f0       	breq	.+14     	; 0x1060 <__vector_16+0xb4>
    1052:	6b e0       	ldi	r22, 0x0B	; 11
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	80 91 84 01 	lds	r24, 0x0184
    105a:	90 91 85 01 	lds	r25, 0x0185
    105e:	09 95       	icall
    1060:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <__vector_15>:
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
IRQ(IRQ_USART0_TX,       USART0_TX_vect);
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	2f 93       	push	r18
    1092:	3f 93       	push	r19
    1094:	4f 93       	push	r20
    1096:	5f 93       	push	r21
    1098:	6f 93       	push	r22
    109a:	7f 93       	push	r23
    109c:	8f 93       	push	r24
    109e:	9f 93       	push	r25
    10a0:	af 93       	push	r26
    10a2:	bf 93       	push	r27
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
    10a8:	60 91 6c 01 	lds	r22, 0x016C
    10ac:	70 91 6d 01 	lds	r23, 0x016D
    10b0:	20 91 84 00 	lds	r18, 0x0084
    10b4:	30 91 85 00 	lds	r19, 0x0085
    10b8:	cb 01       	movw	r24, r22
    10ba:	aa 27       	eor	r26, r26
    10bc:	97 fd       	sbrc	r25, 7
    10be:	a0 95       	com	r26
    10c0:	ba 2f       	mov	r27, r26
    10c2:	dc 01       	movw	r26, r24
    10c4:	99 27       	eor	r25, r25
    10c6:	88 27       	eor	r24, r24
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	82 2b       	or	r24, r18
    10ce:	93 2b       	or	r25, r19
    10d0:	a4 2b       	or	r26, r20
    10d2:	b5 2b       	or	r27, r21
    10d4:	80 93 68 01 	sts	0x0168, r24
    10d8:	90 93 69 01 	sts	0x0169, r25
    10dc:	a0 93 6a 01 	sts	0x016A, r26
    10e0:	b0 93 6b 01 	sts	0x016B, r27
    10e4:	b0 9b       	sbis	0x16, 0	; 22
    10e6:	1c c0       	rjmp	.+56     	; 0x1120 <__vector_15+0x9a>
    10e8:	20 91 84 00 	lds	r18, 0x0084
    10ec:	30 91 85 00 	lds	r19, 0x0085
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	cb 01       	movw	r24, r22
    10f6:	aa 27       	eor	r26, r26
    10f8:	97 fd       	sbrc	r25, 7
    10fa:	a0 95       	com	r26
    10fc:	ba 2f       	mov	r27, r26
    10fe:	dc 01       	movw	r26, r24
    1100:	99 27       	eor	r25, r25
    1102:	88 27       	eor	r24, r24
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	82 2b       	or	r24, r18
    110a:	93 2b       	or	r25, r19
    110c:	a4 2b       	or	r26, r20
    110e:	b5 2b       	or	r27, r21
    1110:	80 93 68 01 	sts	0x0168, r24
    1114:	90 93 69 01 	sts	0x0169, r25
    1118:	a0 93 6a 01 	sts	0x016A, r26
    111c:	b0 93 6b 01 	sts	0x016B, r27
    1120:	e0 91 1a 02 	lds	r30, 0x021A
    1124:	f0 91 1b 02 	lds	r31, 0x021B
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	39 f0       	breq	.+14     	; 0x113a <__vector_15+0xb4>
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	80 91 82 01 	lds	r24, 0x0182
    1134:	90 91 83 01 	lds	r25, 0x0183
    1138:	09 95       	icall
    113a:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <__vector_14>:
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
IRQ(IRQ_USART0_UDRE,     USART0_UDRE_vect);
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	60 91 6c 01 	lds	r22, 0x016C
    1186:	70 91 6d 01 	lds	r23, 0x016D
    118a:	20 91 84 00 	lds	r18, 0x0084
    118e:	30 91 85 00 	lds	r19, 0x0085
    1192:	cb 01       	movw	r24, r22
    1194:	aa 27       	eor	r26, r26
    1196:	97 fd       	sbrc	r25, 7
    1198:	a0 95       	com	r26
    119a:	ba 2f       	mov	r27, r26
    119c:	dc 01       	movw	r26, r24
    119e:	99 27       	eor	r25, r25
    11a0:	88 27       	eor	r24, r24
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	82 2b       	or	r24, r18
    11a8:	93 2b       	or	r25, r19
    11aa:	a4 2b       	or	r26, r20
    11ac:	b5 2b       	or	r27, r21
    11ae:	80 93 68 01 	sts	0x0168, r24
    11b2:	90 93 69 01 	sts	0x0169, r25
    11b6:	a0 93 6a 01 	sts	0x016A, r26
    11ba:	b0 93 6b 01 	sts	0x016B, r27
    11be:	b0 9b       	sbis	0x16, 0	; 22
    11c0:	1c c0       	rjmp	.+56     	; 0x11fa <__vector_14+0x9a>
    11c2:	20 91 84 00 	lds	r18, 0x0084
    11c6:	30 91 85 00 	lds	r19, 0x0085
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	cb 01       	movw	r24, r22
    11d0:	aa 27       	eor	r26, r26
    11d2:	97 fd       	sbrc	r25, 7
    11d4:	a0 95       	com	r26
    11d6:	ba 2f       	mov	r27, r26
    11d8:	dc 01       	movw	r26, r24
    11da:	99 27       	eor	r25, r25
    11dc:	88 27       	eor	r24, r24
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	82 2b       	or	r24, r18
    11e4:	93 2b       	or	r25, r19
    11e6:	a4 2b       	or	r26, r20
    11e8:	b5 2b       	or	r27, r21
    11ea:	80 93 68 01 	sts	0x0168, r24
    11ee:	90 93 69 01 	sts	0x0169, r25
    11f2:	a0 93 6a 01 	sts	0x016A, r26
    11f6:	b0 93 6b 01 	sts	0x016B, r27
    11fa:	e0 91 18 02 	lds	r30, 0x0218
    11fe:	f0 91 19 02 	lds	r31, 0x0219
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	39 f0       	breq	.+14     	; 0x1214 <__vector_14+0xb4>
    1206:	69 e0       	ldi	r22, 0x09	; 9
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 91 80 01 	lds	r24, 0x0180
    120e:	90 91 81 01 	lds	r25, 0x0181
    1212:	09 95       	icall
    1214:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_13>:
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
IRQ(IRQ_USART0_RX,       USART0_RX_vect);
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
    125c:	60 91 6c 01 	lds	r22, 0x016C
    1260:	70 91 6d 01 	lds	r23, 0x016D
    1264:	20 91 84 00 	lds	r18, 0x0084
    1268:	30 91 85 00 	lds	r19, 0x0085
    126c:	cb 01       	movw	r24, r22
    126e:	aa 27       	eor	r26, r26
    1270:	97 fd       	sbrc	r25, 7
    1272:	a0 95       	com	r26
    1274:	ba 2f       	mov	r27, r26
    1276:	dc 01       	movw	r26, r24
    1278:	99 27       	eor	r25, r25
    127a:	88 27       	eor	r24, r24
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	82 2b       	or	r24, r18
    1282:	93 2b       	or	r25, r19
    1284:	a4 2b       	or	r26, r20
    1286:	b5 2b       	or	r27, r21
    1288:	80 93 68 01 	sts	0x0168, r24
    128c:	90 93 69 01 	sts	0x0169, r25
    1290:	a0 93 6a 01 	sts	0x016A, r26
    1294:	b0 93 6b 01 	sts	0x016B, r27
    1298:	b0 9b       	sbis	0x16, 0	; 22
    129a:	1c c0       	rjmp	.+56     	; 0x12d4 <__vector_13+0x9a>
    129c:	20 91 84 00 	lds	r18, 0x0084
    12a0:	30 91 85 00 	lds	r19, 0x0085
    12a4:	6f 5f       	subi	r22, 0xFF	; 255
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	cb 01       	movw	r24, r22
    12aa:	aa 27       	eor	r26, r26
    12ac:	97 fd       	sbrc	r25, 7
    12ae:	a0 95       	com	r26
    12b0:	ba 2f       	mov	r27, r26
    12b2:	dc 01       	movw	r26, r24
    12b4:	99 27       	eor	r25, r25
    12b6:	88 27       	eor	r24, r24
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	82 2b       	or	r24, r18
    12be:	93 2b       	or	r25, r19
    12c0:	a4 2b       	or	r26, r20
    12c2:	b5 2b       	or	r27, r21
    12c4:	80 93 68 01 	sts	0x0168, r24
    12c8:	90 93 69 01 	sts	0x0169, r25
    12cc:	a0 93 6a 01 	sts	0x016A, r26
    12d0:	b0 93 6b 01 	sts	0x016B, r27
    12d4:	e0 91 16 02 	lds	r30, 0x0216
    12d8:	f0 91 17 02 	lds	r31, 0x0217
    12dc:	30 97       	sbiw	r30, 0x00	; 0
    12de:	39 f0       	breq	.+14     	; 0x12ee <__vector_13+0xb4>
    12e0:	68 e0       	ldi	r22, 0x08	; 8
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	80 91 7e 01 	lds	r24, 0x017E
    12e8:	90 91 7f 01 	lds	r25, 0x017F
    12ec:	09 95       	icall
    12ee:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	bf 91       	pop	r27
    12f8:	af 91       	pop	r26
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <__vector_12>:
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
IRQ(IRQ_SPI_STC,         SPI_STC_vect);
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	60 91 6c 01 	lds	r22, 0x016C
    133a:	70 91 6d 01 	lds	r23, 0x016D
    133e:	20 91 84 00 	lds	r18, 0x0084
    1342:	30 91 85 00 	lds	r19, 0x0085
    1346:	cb 01       	movw	r24, r22
    1348:	aa 27       	eor	r26, r26
    134a:	97 fd       	sbrc	r25, 7
    134c:	a0 95       	com	r26
    134e:	ba 2f       	mov	r27, r26
    1350:	dc 01       	movw	r26, r24
    1352:	99 27       	eor	r25, r25
    1354:	88 27       	eor	r24, r24
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	82 2b       	or	r24, r18
    135c:	93 2b       	or	r25, r19
    135e:	a4 2b       	or	r26, r20
    1360:	b5 2b       	or	r27, r21
    1362:	80 93 68 01 	sts	0x0168, r24
    1366:	90 93 69 01 	sts	0x0169, r25
    136a:	a0 93 6a 01 	sts	0x016A, r26
    136e:	b0 93 6b 01 	sts	0x016B, r27
    1372:	b0 9b       	sbis	0x16, 0	; 22
    1374:	1c c0       	rjmp	.+56     	; 0x13ae <__vector_12+0x9a>
    1376:	20 91 84 00 	lds	r18, 0x0084
    137a:	30 91 85 00 	lds	r19, 0x0085
    137e:	6f 5f       	subi	r22, 0xFF	; 255
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	cb 01       	movw	r24, r22
    1384:	aa 27       	eor	r26, r26
    1386:	97 fd       	sbrc	r25, 7
    1388:	a0 95       	com	r26
    138a:	ba 2f       	mov	r27, r26
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	82 2b       	or	r24, r18
    1398:	93 2b       	or	r25, r19
    139a:	a4 2b       	or	r26, r20
    139c:	b5 2b       	or	r27, r21
    139e:	80 93 68 01 	sts	0x0168, r24
    13a2:	90 93 69 01 	sts	0x0169, r25
    13a6:	a0 93 6a 01 	sts	0x016A, r26
    13aa:	b0 93 6b 01 	sts	0x016B, r27
    13ae:	e0 91 14 02 	lds	r30, 0x0214
    13b2:	f0 91 15 02 	lds	r31, 0x0215
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	39 f0       	breq	.+14     	; 0x13c8 <__vector_12+0xb4>
    13ba:	67 e0       	ldi	r22, 0x07	; 7
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 91 7c 01 	lds	r24, 0x017C
    13c2:	90 91 7d 01 	lds	r25, 0x017D
    13c6:	09 95       	icall
    13c8:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_11>:
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
IRQ(IRQ_TIMER0_OVF,      TIMER0_OVF_vect);
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	60 91 6c 01 	lds	r22, 0x016C
    1414:	70 91 6d 01 	lds	r23, 0x016D
    1418:	20 91 84 00 	lds	r18, 0x0084
    141c:	30 91 85 00 	lds	r19, 0x0085
    1420:	cb 01       	movw	r24, r22
    1422:	aa 27       	eor	r26, r26
    1424:	97 fd       	sbrc	r25, 7
    1426:	a0 95       	com	r26
    1428:	ba 2f       	mov	r27, r26
    142a:	dc 01       	movw	r26, r24
    142c:	99 27       	eor	r25, r25
    142e:	88 27       	eor	r24, r24
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	82 2b       	or	r24, r18
    1436:	93 2b       	or	r25, r19
    1438:	a4 2b       	or	r26, r20
    143a:	b5 2b       	or	r27, r21
    143c:	80 93 68 01 	sts	0x0168, r24
    1440:	90 93 69 01 	sts	0x0169, r25
    1444:	a0 93 6a 01 	sts	0x016A, r26
    1448:	b0 93 6b 01 	sts	0x016B, r27
    144c:	b0 9b       	sbis	0x16, 0	; 22
    144e:	1c c0       	rjmp	.+56     	; 0x1488 <__vector_11+0x9a>
    1450:	20 91 84 00 	lds	r18, 0x0084
    1454:	30 91 85 00 	lds	r19, 0x0085
    1458:	6f 5f       	subi	r22, 0xFF	; 255
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	cb 01       	movw	r24, r22
    145e:	aa 27       	eor	r26, r26
    1460:	97 fd       	sbrc	r25, 7
    1462:	a0 95       	com	r26
    1464:	ba 2f       	mov	r27, r26
    1466:	dc 01       	movw	r26, r24
    1468:	99 27       	eor	r25, r25
    146a:	88 27       	eor	r24, r24
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	82 2b       	or	r24, r18
    1472:	93 2b       	or	r25, r19
    1474:	a4 2b       	or	r26, r20
    1476:	b5 2b       	or	r27, r21
    1478:	80 93 68 01 	sts	0x0168, r24
    147c:	90 93 69 01 	sts	0x0169, r25
    1480:	a0 93 6a 01 	sts	0x016A, r26
    1484:	b0 93 6b 01 	sts	0x016B, r27
    1488:	e0 91 12 02 	lds	r30, 0x0212
    148c:	f0 91 13 02 	lds	r31, 0x0213
    1490:	30 97       	sbiw	r30, 0x00	; 0
    1492:	39 f0       	breq	.+14     	; 0x14a2 <__vector_11+0xb4>
    1494:	66 e0       	ldi	r22, 0x06	; 6
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 91 7a 01 	lds	r24, 0x017A
    149c:	90 91 7b 01 	lds	r25, 0x017B
    14a0:	09 95       	icall
    14a2:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <__vector_10>:
IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
IRQ(IRQ_TIMER0_COMP,     TIMER0_COMP_vect);
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
    14ea:	60 91 6c 01 	lds	r22, 0x016C
    14ee:	70 91 6d 01 	lds	r23, 0x016D
    14f2:	20 91 84 00 	lds	r18, 0x0084
    14f6:	30 91 85 00 	lds	r19, 0x0085
    14fa:	cb 01       	movw	r24, r22
    14fc:	aa 27       	eor	r26, r26
    14fe:	97 fd       	sbrc	r25, 7
    1500:	a0 95       	com	r26
    1502:	ba 2f       	mov	r27, r26
    1504:	dc 01       	movw	r26, r24
    1506:	99 27       	eor	r25, r25
    1508:	88 27       	eor	r24, r24
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	82 2b       	or	r24, r18
    1510:	93 2b       	or	r25, r19
    1512:	a4 2b       	or	r26, r20
    1514:	b5 2b       	or	r27, r21
    1516:	80 93 68 01 	sts	0x0168, r24
    151a:	90 93 69 01 	sts	0x0169, r25
    151e:	a0 93 6a 01 	sts	0x016A, r26
    1522:	b0 93 6b 01 	sts	0x016B, r27
    1526:	b0 9b       	sbis	0x16, 0	; 22
    1528:	1c c0       	rjmp	.+56     	; 0x1562 <__vector_10+0x9a>
    152a:	20 91 84 00 	lds	r18, 0x0084
    152e:	30 91 85 00 	lds	r19, 0x0085
    1532:	6f 5f       	subi	r22, 0xFF	; 255
    1534:	7f 4f       	sbci	r23, 0xFF	; 255
    1536:	cb 01       	movw	r24, r22
    1538:	aa 27       	eor	r26, r26
    153a:	97 fd       	sbrc	r25, 7
    153c:	a0 95       	com	r26
    153e:	ba 2f       	mov	r27, r26
    1540:	dc 01       	movw	r26, r24
    1542:	99 27       	eor	r25, r25
    1544:	88 27       	eor	r24, r24
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	82 2b       	or	r24, r18
    154c:	93 2b       	or	r25, r19
    154e:	a4 2b       	or	r26, r20
    1550:	b5 2b       	or	r27, r21
    1552:	80 93 68 01 	sts	0x0168, r24
    1556:	90 93 69 01 	sts	0x0169, r25
    155a:	a0 93 6a 01 	sts	0x016A, r26
    155e:	b0 93 6b 01 	sts	0x016B, r27
    1562:	e0 91 10 02 	lds	r30, 0x0210
    1566:	f0 91 11 02 	lds	r31, 0x0211
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	39 f0       	breq	.+14     	; 0x157c <__vector_10+0xb4>
    156e:	65 e0       	ldi	r22, 0x05	; 5
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 91 78 01 	lds	r24, 0x0178
    1576:	90 91 79 01 	lds	r25, 0x0179
    157a:	09 95       	icall
    157c:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_5>:

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
IRQ(IRQ_TIMER2_OVF,      TIMER2_OVF_vect);
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	60 91 6c 01 	lds	r22, 0x016C
    15c8:	70 91 6d 01 	lds	r23, 0x016D
    15cc:	20 91 84 00 	lds	r18, 0x0084
    15d0:	30 91 85 00 	lds	r19, 0x0085
    15d4:	cb 01       	movw	r24, r22
    15d6:	aa 27       	eor	r26, r26
    15d8:	97 fd       	sbrc	r25, 7
    15da:	a0 95       	com	r26
    15dc:	ba 2f       	mov	r27, r26
    15de:	dc 01       	movw	r26, r24
    15e0:	99 27       	eor	r25, r25
    15e2:	88 27       	eor	r24, r24
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	82 2b       	or	r24, r18
    15ea:	93 2b       	or	r25, r19
    15ec:	a4 2b       	or	r26, r20
    15ee:	b5 2b       	or	r27, r21
    15f0:	80 93 68 01 	sts	0x0168, r24
    15f4:	90 93 69 01 	sts	0x0169, r25
    15f8:	a0 93 6a 01 	sts	0x016A, r26
    15fc:	b0 93 6b 01 	sts	0x016B, r27
    1600:	b0 9b       	sbis	0x16, 0	; 22
    1602:	1c c0       	rjmp	.+56     	; 0x163c <__vector_5+0x9a>
    1604:	20 91 84 00 	lds	r18, 0x0084
    1608:	30 91 85 00 	lds	r19, 0x0085
    160c:	6f 5f       	subi	r22, 0xFF	; 255
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	cb 01       	movw	r24, r22
    1612:	aa 27       	eor	r26, r26
    1614:	97 fd       	sbrc	r25, 7
    1616:	a0 95       	com	r26
    1618:	ba 2f       	mov	r27, r26
    161a:	dc 01       	movw	r26, r24
    161c:	99 27       	eor	r25, r25
    161e:	88 27       	eor	r24, r24
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	82 2b       	or	r24, r18
    1626:	93 2b       	or	r25, r19
    1628:	a4 2b       	or	r26, r20
    162a:	b5 2b       	or	r27, r21
    162c:	80 93 68 01 	sts	0x0168, r24
    1630:	90 93 69 01 	sts	0x0169, r25
    1634:	a0 93 6a 01 	sts	0x016A, r26
    1638:	b0 93 6b 01 	sts	0x016B, r27
    163c:	e0 91 0e 02 	lds	r30, 0x020E
    1640:	f0 91 0f 02 	lds	r31, 0x020F
    1644:	30 97       	sbiw	r30, 0x00	; 0
    1646:	39 f0       	breq	.+14     	; 0x1656 <__vector_5+0xb4>
    1648:	64 e0       	ldi	r22, 0x04	; 4
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 91 76 01 	lds	r24, 0x0176
    1650:	90 91 77 01 	lds	r25, 0x0177
    1654:	09 95       	icall
    1656:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    165a:	ff 91       	pop	r31
    165c:	ef 91       	pop	r30
    165e:	bf 91       	pop	r27
    1660:	af 91       	pop	r26
    1662:	9f 91       	pop	r25
    1664:	8f 91       	pop	r24
    1666:	7f 91       	pop	r23
    1668:	6f 91       	pop	r22
    166a:	5f 91       	pop	r21
    166c:	4f 91       	pop	r20
    166e:	3f 91       	pop	r19
    1670:	2f 91       	pop	r18
    1672:	0f 90       	pop	r0
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	0f 90       	pop	r0
    1678:	1f 90       	pop	r1
    167a:	18 95       	reti

0000167c <__vector_4>:
#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
IRQ(IRQ_TIMER2_COMP,     TIMER2_COMP_vect);
    167c:	1f 92       	push	r1
    167e:	0f 92       	push	r0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	0f 92       	push	r0
    1684:	11 24       	eor	r1, r1
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	7f 93       	push	r23
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
    169e:	60 91 6c 01 	lds	r22, 0x016C
    16a2:	70 91 6d 01 	lds	r23, 0x016D
    16a6:	20 91 84 00 	lds	r18, 0x0084
    16aa:	30 91 85 00 	lds	r19, 0x0085
    16ae:	cb 01       	movw	r24, r22
    16b0:	aa 27       	eor	r26, r26
    16b2:	97 fd       	sbrc	r25, 7
    16b4:	a0 95       	com	r26
    16b6:	ba 2f       	mov	r27, r26
    16b8:	dc 01       	movw	r26, r24
    16ba:	99 27       	eor	r25, r25
    16bc:	88 27       	eor	r24, r24
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	82 2b       	or	r24, r18
    16c4:	93 2b       	or	r25, r19
    16c6:	a4 2b       	or	r26, r20
    16c8:	b5 2b       	or	r27, r21
    16ca:	80 93 68 01 	sts	0x0168, r24
    16ce:	90 93 69 01 	sts	0x0169, r25
    16d2:	a0 93 6a 01 	sts	0x016A, r26
    16d6:	b0 93 6b 01 	sts	0x016B, r27
    16da:	b0 9b       	sbis	0x16, 0	; 22
    16dc:	1c c0       	rjmp	.+56     	; 0x1716 <__vector_4+0x9a>
    16de:	20 91 84 00 	lds	r18, 0x0084
    16e2:	30 91 85 00 	lds	r19, 0x0085
    16e6:	6f 5f       	subi	r22, 0xFF	; 255
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	cb 01       	movw	r24, r22
    16ec:	aa 27       	eor	r26, r26
    16ee:	97 fd       	sbrc	r25, 7
    16f0:	a0 95       	com	r26
    16f2:	ba 2f       	mov	r27, r26
    16f4:	dc 01       	movw	r26, r24
    16f6:	99 27       	eor	r25, r25
    16f8:	88 27       	eor	r24, r24
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	82 2b       	or	r24, r18
    1700:	93 2b       	or	r25, r19
    1702:	a4 2b       	or	r26, r20
    1704:	b5 2b       	or	r27, r21
    1706:	80 93 68 01 	sts	0x0168, r24
    170a:	90 93 69 01 	sts	0x0169, r25
    170e:	a0 93 6a 01 	sts	0x016A, r26
    1712:	b0 93 6b 01 	sts	0x016B, r27
    1716:	e0 91 0c 02 	lds	r30, 0x020C
    171a:	f0 91 0d 02 	lds	r31, 0x020D
    171e:	30 97       	sbiw	r30, 0x00	; 0
    1720:	39 f0       	breq	.+14     	; 0x1730 <__vector_4+0xb4>
    1722:	63 e0       	ldi	r22, 0x03	; 3
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	80 91 74 01 	lds	r24, 0x0174
    172a:	90 91 75 01 	lds	r25, 0x0175
    172e:	09 95       	icall
    1730:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_3>:

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
IRQ(IRQ_PCINT1,          PCINT1_vect);
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	60 91 6c 01 	lds	r22, 0x016C
    177c:	70 91 6d 01 	lds	r23, 0x016D
    1780:	20 91 84 00 	lds	r18, 0x0084
    1784:	30 91 85 00 	lds	r19, 0x0085
    1788:	cb 01       	movw	r24, r22
    178a:	aa 27       	eor	r26, r26
    178c:	97 fd       	sbrc	r25, 7
    178e:	a0 95       	com	r26
    1790:	ba 2f       	mov	r27, r26
    1792:	dc 01       	movw	r26, r24
    1794:	99 27       	eor	r25, r25
    1796:	88 27       	eor	r24, r24
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	82 2b       	or	r24, r18
    179e:	93 2b       	or	r25, r19
    17a0:	a4 2b       	or	r26, r20
    17a2:	b5 2b       	or	r27, r21
    17a4:	80 93 68 01 	sts	0x0168, r24
    17a8:	90 93 69 01 	sts	0x0169, r25
    17ac:	a0 93 6a 01 	sts	0x016A, r26
    17b0:	b0 93 6b 01 	sts	0x016B, r27
    17b4:	b0 9b       	sbis	0x16, 0	; 22
    17b6:	1c c0       	rjmp	.+56     	; 0x17f0 <__vector_3+0x9a>
    17b8:	20 91 84 00 	lds	r18, 0x0084
    17bc:	30 91 85 00 	lds	r19, 0x0085
    17c0:	6f 5f       	subi	r22, 0xFF	; 255
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	cb 01       	movw	r24, r22
    17c6:	aa 27       	eor	r26, r26
    17c8:	97 fd       	sbrc	r25, 7
    17ca:	a0 95       	com	r26
    17cc:	ba 2f       	mov	r27, r26
    17ce:	dc 01       	movw	r26, r24
    17d0:	99 27       	eor	r25, r25
    17d2:	88 27       	eor	r24, r24
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	82 2b       	or	r24, r18
    17da:	93 2b       	or	r25, r19
    17dc:	a4 2b       	or	r26, r20
    17de:	b5 2b       	or	r27, r21
    17e0:	80 93 68 01 	sts	0x0168, r24
    17e4:	90 93 69 01 	sts	0x0169, r25
    17e8:	a0 93 6a 01 	sts	0x016A, r26
    17ec:	b0 93 6b 01 	sts	0x016B, r27
    17f0:	e0 91 0a 02 	lds	r30, 0x020A
    17f4:	f0 91 0b 02 	lds	r31, 0x020B
    17f8:	30 97       	sbiw	r30, 0x00	; 0
    17fa:	39 f0       	breq	.+14     	; 0x180a <__vector_3+0xb4>
    17fc:	62 e0       	ldi	r22, 0x02	; 2
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	80 91 72 01 	lds	r24, 0x0172
    1804:	90 91 73 01 	lds	r25, 0x0173
    1808:	09 95       	icall
    180a:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	bf 91       	pop	r27
    1814:	af 91       	pop	r26
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	7f 91       	pop	r23
    181c:	6f 91       	pop	r22
    181e:	5f 91       	pop	r21
    1820:	4f 91       	pop	r20
    1822:	3f 91       	pop	r19
    1824:	2f 91       	pop	r18
    1826:	0f 90       	pop	r0
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	0f 90       	pop	r0
    182c:	1f 90       	pop	r1
    182e:	18 95       	reti

00001830 <__vector_2>:
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
IRQ(IRQ_PCINT0,          PCINT0_vect);
    1830:	1f 92       	push	r1
    1832:	0f 92       	push	r0
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	0f 92       	push	r0
    1838:	11 24       	eor	r1, r1
    183a:	2f 93       	push	r18
    183c:	3f 93       	push	r19
    183e:	4f 93       	push	r20
    1840:	5f 93       	push	r21
    1842:	6f 93       	push	r22
    1844:	7f 93       	push	r23
    1846:	8f 93       	push	r24
    1848:	9f 93       	push	r25
    184a:	af 93       	push	r26
    184c:	bf 93       	push	r27
    184e:	ef 93       	push	r30
    1850:	ff 93       	push	r31
    1852:	60 91 6c 01 	lds	r22, 0x016C
    1856:	70 91 6d 01 	lds	r23, 0x016D
    185a:	20 91 84 00 	lds	r18, 0x0084
    185e:	30 91 85 00 	lds	r19, 0x0085
    1862:	cb 01       	movw	r24, r22
    1864:	aa 27       	eor	r26, r26
    1866:	97 fd       	sbrc	r25, 7
    1868:	a0 95       	com	r26
    186a:	ba 2f       	mov	r27, r26
    186c:	dc 01       	movw	r26, r24
    186e:	99 27       	eor	r25, r25
    1870:	88 27       	eor	r24, r24
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	82 2b       	or	r24, r18
    1878:	93 2b       	or	r25, r19
    187a:	a4 2b       	or	r26, r20
    187c:	b5 2b       	or	r27, r21
    187e:	80 93 68 01 	sts	0x0168, r24
    1882:	90 93 69 01 	sts	0x0169, r25
    1886:	a0 93 6a 01 	sts	0x016A, r26
    188a:	b0 93 6b 01 	sts	0x016B, r27
    188e:	b0 9b       	sbis	0x16, 0	; 22
    1890:	1c c0       	rjmp	.+56     	; 0x18ca <__vector_2+0x9a>
    1892:	20 91 84 00 	lds	r18, 0x0084
    1896:	30 91 85 00 	lds	r19, 0x0085
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	cb 01       	movw	r24, r22
    18a0:	aa 27       	eor	r26, r26
    18a2:	97 fd       	sbrc	r25, 7
    18a4:	a0 95       	com	r26
    18a6:	ba 2f       	mov	r27, r26
    18a8:	dc 01       	movw	r26, r24
    18aa:	99 27       	eor	r25, r25
    18ac:	88 27       	eor	r24, r24
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	82 2b       	or	r24, r18
    18b4:	93 2b       	or	r25, r19
    18b6:	a4 2b       	or	r26, r20
    18b8:	b5 2b       	or	r27, r21
    18ba:	80 93 68 01 	sts	0x0168, r24
    18be:	90 93 69 01 	sts	0x0169, r25
    18c2:	a0 93 6a 01 	sts	0x016A, r26
    18c6:	b0 93 6b 01 	sts	0x016B, r27
    18ca:	e0 91 08 02 	lds	r30, 0x0208
    18ce:	f0 91 09 02 	lds	r31, 0x0209
    18d2:	30 97       	sbiw	r30, 0x00	; 0
    18d4:	39 f0       	breq	.+14     	; 0x18e4 <__vector_2+0xb4>
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	80 91 70 01 	lds	r24, 0x0170
    18de:	90 91 71 01 	lds	r25, 0x0171
    18e2:	09 95       	icall
    18e4:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__vector_1>:
#define TIMER_COMPARE_INTERRUPT  ISR(TIMER1_COMPA_vect)
#define TIMER_OVERFLOW_INTERRUPT ISR(TIMER1_OVF_vect)

#define IRQ(n,v) ISR(v) { TIMERGET(timestamp); if (mtable[n]) mtable[n](otable[n],n); schedule(); }

IRQ(IRQ_INT0,            INT0_vect);
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
    192c:	60 91 6c 01 	lds	r22, 0x016C
    1930:	70 91 6d 01 	lds	r23, 0x016D
    1934:	20 91 84 00 	lds	r18, 0x0084
    1938:	30 91 85 00 	lds	r19, 0x0085
    193c:	cb 01       	movw	r24, r22
    193e:	aa 27       	eor	r26, r26
    1940:	97 fd       	sbrc	r25, 7
    1942:	a0 95       	com	r26
    1944:	ba 2f       	mov	r27, r26
    1946:	dc 01       	movw	r26, r24
    1948:	99 27       	eor	r25, r25
    194a:	88 27       	eor	r24, r24
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	82 2b       	or	r24, r18
    1952:	93 2b       	or	r25, r19
    1954:	a4 2b       	or	r26, r20
    1956:	b5 2b       	or	r27, r21
    1958:	80 93 68 01 	sts	0x0168, r24
    195c:	90 93 69 01 	sts	0x0169, r25
    1960:	a0 93 6a 01 	sts	0x016A, r26
    1964:	b0 93 6b 01 	sts	0x016B, r27
    1968:	b0 9b       	sbis	0x16, 0	; 22
    196a:	1c c0       	rjmp	.+56     	; 0x19a4 <__vector_1+0x9a>
    196c:	20 91 84 00 	lds	r18, 0x0084
    1970:	30 91 85 00 	lds	r19, 0x0085
    1974:	6f 5f       	subi	r22, 0xFF	; 255
    1976:	7f 4f       	sbci	r23, 0xFF	; 255
    1978:	cb 01       	movw	r24, r22
    197a:	aa 27       	eor	r26, r26
    197c:	97 fd       	sbrc	r25, 7
    197e:	a0 95       	com	r26
    1980:	ba 2f       	mov	r27, r26
    1982:	dc 01       	movw	r26, r24
    1984:	99 27       	eor	r25, r25
    1986:	88 27       	eor	r24, r24
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	82 2b       	or	r24, r18
    198e:	93 2b       	or	r25, r19
    1990:	a4 2b       	or	r26, r20
    1992:	b5 2b       	or	r27, r21
    1994:	80 93 68 01 	sts	0x0168, r24
    1998:	90 93 69 01 	sts	0x0169, r25
    199c:	a0 93 6a 01 	sts	0x016A, r26
    19a0:	b0 93 6b 01 	sts	0x016B, r27
    19a4:	e0 91 06 02 	lds	r30, 0x0206
    19a8:	f0 91 07 02 	lds	r31, 0x0207
    19ac:	30 97       	sbiw	r30, 0x00	; 0
    19ae:	39 f0       	breq	.+14     	; 0x19be <__vector_1+0xb4>
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	80 91 6e 01 	lds	r24, 0x016E
    19b8:	90 91 6f 01 	lds	r25, 0x016F
    19bc:	09 95       	icall
    19be:	0e 94 0d 04 	call	0x81a	; 0x81a <schedule>
    19c2:	ff 91       	pop	r31
    19c4:	ef 91       	pop	r30
    19c6:	bf 91       	pop	r27
    19c8:	af 91       	pop	r26
    19ca:	9f 91       	pop	r25
    19cc:	8f 91       	pop	r24
    19ce:	7f 91       	pop	r23
    19d0:	6f 91       	pop	r22
    19d2:	5f 91       	pop	r21
    19d4:	4f 91       	pop	r20
    19d6:	3f 91       	pop	r19
    19d8:	2f 91       	pop	r18
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 90       	pop	r0
    19e0:	1f 90       	pop	r1
    19e2:	18 95       	reti

000019e4 <sync>:
    
    ENABLE(status);
    return m;
}

int sync(Object *to, Method meth, int arg) {
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	ec 01       	movw	r28, r24
    19f4:	6b 01       	movw	r12, r22
    19f6:	8a 01       	movw	r16, r20
    Thread t;
    int result;
    char status, status_ignore;
    
    DISABLE(status);
    19f8:	ff b6       	in	r15, 0x3f	; 63
    19fa:	80 e8       	ldi	r24, 0x80	; 128
    19fc:	f8 22       	and	r15, r24
    19fe:	f8 94       	cli
    t = to->ownedBy;
    1a00:	88 81       	ld	r24, Y
    1a02:	99 81       	ldd	r25, Y+1	; 0x01
    if (t) {                            // to is already locked
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	19 f4       	brne	.+6      	; 0x1a0e <sync+0x2a>
    1a08:	33 c0       	rjmp	.+102    	; 0x1a70 <sync+0x8c>
        while (t->waitsFor) 
            t = t->waitsFor->ownedBy;
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    char status, status_ignore;
    
    DISABLE(status);
    t = to->ownedBy;
    if (t) {                            // to is already locked
        while (t->waitsFor) 
    1a0e:	dc 01       	movw	r26, r24
    1a10:	14 96       	adiw	r26, 0x04	; 4
    1a12:	ed 91       	ld	r30, X+
    1a14:	fc 91       	ld	r31, X
    1a16:	15 97       	sbiw	r26, 0x05	; 5
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	b9 f7       	brne	.-18     	; 0x1a0a <sync+0x26>
            t = t->waitsFor->ownedBy;
        if (t == current || !status) {  // deadlock!
    1a1c:	a0 91 49 01 	lds	r26, 0x0149
    1a20:	b0 91 4a 01 	lds	r27, 0x014A
    1a24:	8a 17       	cp	r24, r26
    1a26:	9b 07       	cpc	r25, r27
    1a28:	21 f0       	breq	.+8      	; 0x1a32 <sync+0x4e>
    1a2a:	ff 20       	and	r15, r15
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <sync+0x4c>
    1a2e:	46 c0       	rjmp	.+140    	; 0x1abc <sync+0xd8>
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <sync+0x58>
            ENABLE(status);
    1a32:	ff 20       	and	r15, r15
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <sync+0x54>
    1a36:	42 c0       	rjmp	.+132    	; 0x1abc <sync+0xd8>
    1a38:	78 94       	sei
    1a3a:	40 c0       	rjmp	.+128    	; 0x1abc <sync+0xd8>
            return -1;
        }
        if (to->wantedBy)               // must be a lower priority thread
    1a3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a40:	30 97       	sbiw	r30, 0x00	; 0
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <sync+0x64>
            to->wantedBy->waitsFor = NULL;
    1a44:	15 82       	std	Z+5, r1	; 0x05
    1a46:	14 82       	std	Z+4, r1	; 0x04
        to->wantedBy = current;
    1a48:	bb 83       	std	Y+3, r27	; 0x03
    1a4a:	aa 83       	std	Y+2, r26	; 0x02
        current->waitsFor = to;
    1a4c:	15 96       	adiw	r26, 0x05	; 5
    1a4e:	dc 93       	st	X, r29
    1a50:	ce 93       	st	-X, r28
    1a52:	14 97       	sbiw	r26, 0x04	; 4
        dispatch(t);
    1a54:	0e 94 ed 03 	call	0x7da	; 0x7da <dispatch>
        if (current->msg == NULL) {     // message was aborted (when called from run)
    1a58:	e0 91 49 01 	lds	r30, 0x0149
    1a5c:	f0 91 4a 01 	lds	r31, 0x014A
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	89 2b       	or	r24, r25
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <sync+0x8c>
            ENABLE(status);
    1a68:	78 94       	sei
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	10 e0       	ldi	r17, 0x00	; 0
    1a6e:	28 c0       	rjmp	.+80     	; 0x1ac0 <sync+0xdc>
            return 0;
        }
    }
    to->ownedBy = current;
    1a70:	80 91 49 01 	lds	r24, 0x0149
    1a74:	90 91 4a 01 	lds	r25, 0x014A
    1a78:	99 83       	std	Y+1, r25	; 0x01
    1a7a:	88 83       	st	Y, r24
    ENABLE(status && (to->wantedBy != INSTALLED_TAG));
    1a7c:	ff 20       	and	r15, r15
    1a7e:	29 f0       	breq	.+10     	; 0x1a8a <sync+0xa6>
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <sync+0xa6>
    1a88:	78 94       	sei
    result = meth(to, arg);
    1a8a:	b8 01       	movw	r22, r16
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	f6 01       	movw	r30, r12
    1a90:	09 95       	icall
    1a92:	8c 01       	movw	r16, r24
    DISABLE(status_ignore);
    1a94:	8f b7       	in	r24, 0x3f	; 63
    1a96:	f8 94       	cli
    to->ownedBy = NULL; 
    1a98:	19 82       	std	Y+1, r1	; 0x01
    1a9a:	18 82       	st	Y, r1
    t = to->wantedBy;
    1a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    if (t && (t != INSTALLED_TAG)) {      // we have run on someone's behalf
    1aa0:	e2 30       	cpi	r30, 0x02	; 2
    1aa2:	f1 05       	cpc	r31, r1
    1aa4:	38 f0       	brcs	.+14     	; 0x1ab4 <sync+0xd0>
        to->wantedBy = NULL; 
    1aa6:	1b 82       	std	Y+3, r1	; 0x03
    1aa8:	1a 82       	std	Y+2, r1	; 0x02
        t->waitsFor = NULL;
    1aaa:	15 82       	std	Z+5, r1	; 0x05
    1aac:	14 82       	std	Z+4, r1	; 0x04
        dispatch(t);
    1aae:	cf 01       	movw	r24, r30
    1ab0:	0e 94 ed 03 	call	0x7da	; 0x7da <dispatch>
    }
    ENABLE(status);
    1ab4:	ff 20       	and	r15, r15
    1ab6:	21 f0       	breq	.+8      	; 0x1ac0 <sync+0xdc>
    1ab8:	78 94       	sei
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <sync+0xdc>
    1abc:	0f ef       	ldi	r16, 0xFF	; 255
    1abe:	1f ef       	ldi	r17, 0xFF	; 255
    return result;
}
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	08 95       	ret

00001ad2 <run>:
        current = next;
        longjmp( next->context, 1 );
    }
}

static void run(void) {
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    1ad6:	e0 91 49 01 	lds	r30, 0x0149
    1ada:	f0 91 4a 01 	lds	r31, 0x014A
    else
        prev->next = p;
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1ade:	c0 91 64 01 	lds	r28, 0x0164
    1ae2:	d0 91 65 01 	lds	r29, 0x0165
    if (m)
    1ae6:	20 97       	sbiw	r28, 0x00	; 0
    1ae8:	69 f1       	breq	.+90     	; 0x1b44 <run+0x72>
        *queue = m->next;
    1aea:	88 81       	ld	r24, Y
    1aec:	99 81       	ldd	r25, Y+1	; 0x01
    1aee:	90 93 65 01 	sts	0x0165, r25
    1af2:	80 93 64 01 	sts	0x0164, r24
    }
}

static void run(void) {
    while (1) {
        Msg this = current->msg = dequeue(&msgQ);
    1af6:	d3 83       	std	Z+3, r29	; 0x03
    1af8:	c2 83       	std	Z+2, r28	; 0x02
        Msg oldMsg;
        char status = 1;
        
        ENABLE(status);
    1afa:	78 94       	sei
        SYNC(this->to, this->method, this->arg);
    1afc:	4e 85       	ldd	r20, Y+14	; 0x0e
    1afe:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b00:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b02:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b08:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <sync>
        DISABLE(status);
    1b0c:	8f b7       	in	r24, 0x3f	; 63
    1b0e:	f8 94       	cli
        PANIC();  // Empty queue, kernel panic!!!
    return m;
}

void insert(Msg m, Msg *queue) {
    m->next = *queue;
    1b10:	80 91 43 01 	lds	r24, 0x0143
    1b14:	90 91 44 01 	lds	r25, 0x0144
    1b18:	99 83       	std	Y+1, r25	; 0x01
    1b1a:	88 83       	st	Y, r24
    *queue = m;
    1b1c:	d0 93 44 01 	sts	0x0144, r29
    1b20:	c0 93 43 01 	sts	0x0143, r28
        ENABLE(status);
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
    1b24:	60 91 47 01 	lds	r22, 0x0147
    1b28:	70 91 48 01 	lds	r23, 0x0148
    1b2c:	fb 01       	movw	r30, r22
    1b2e:	c0 81       	ld	r28, Z
    1b30:	d1 81       	ldd	r29, Z+1	; 0x01
    1b32:	2a 81       	ldd	r18, Y+2	; 0x02
    1b34:	3b 81       	ldd	r19, Y+3	; 0x03
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    1b36:	e0 91 64 01 	lds	r30, 0x0164
    1b3a:	f0 91 65 01 	lds	r31, 0x0165
    1b3e:	30 97       	sbiw	r30, 0x00	; 0
    1b40:	61 f4       	brne	.+24     	; 0x1b5a <run+0x88>
    1b42:	22 c0       	rjmp	.+68     	; 0x1b88 <run+0xb6>
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	80 93 ec 00 	sts	0x00EC, r24
    1b4a:	80 93 ed 00 	sts	0x00ED, r24
    1b4e:	80 93 ee 00 	sts	0x00EE, r24
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	83 bf       	out	0x33, r24	; 51
    1b56:	88 95       	sleep
    1b58:	fd cf       	rjmp	.-6      	; 0x1b54 <run+0x82>
        SYNC(this->to, this->method, this->arg);
        DISABLE(status);
        insert(this, &msgPool);
       
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
    1b5a:	21 15       	cp	r18, r1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <run+0x90>
    1b60:	ba cf       	rjmp	.-140    	; 0x1ad6 <run+0x4>
    1b62:	86 81       	ldd	r24, Z+6	; 0x06
    1b64:	97 81       	ldd	r25, Z+7	; 0x07
    1b66:	a0 85       	ldd	r26, Z+8	; 0x08
    1b68:	b1 85       	ldd	r27, Z+9	; 0x09
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	26 81       	ldd	r18, Z+6	; 0x06
    1b6e:	37 81       	ldd	r19, Z+7	; 0x07
    1b70:	40 85       	ldd	r20, Z+8	; 0x08
    1b72:	51 85       	ldd	r21, Z+9	; 0x09
    1b74:	82 1b       	sub	r24, r18
    1b76:	93 0b       	sbc	r25, r19
    1b78:	a4 0b       	sbc	r26, r20
    1b7a:	b5 0b       	sbc	r27, r21
    1b7c:	18 16       	cp	r1, r24
    1b7e:	19 06       	cpc	r1, r25
    1b80:	1a 06       	cpc	r1, r26
    1b82:	1b 06       	cpc	r1, r27
    1b84:	0c f0       	brlt	.+2      	; 0x1b88 <run+0xb6>
    1b86:	a7 cf       	rjmp	.-178    	; 0x1ad6 <run+0x4>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1b88:	d0 93 48 01 	sts	0x0148, r29
    1b8c:	c0 93 47 01 	sts	0x0147, r28
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1b90:	80 91 45 01 	lds	r24, 0x0145
    1b94:	90 91 46 01 	lds	r25, 0x0146
    1b98:	fb 01       	movw	r30, r22
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    *stack = t;
    1b9e:	70 93 46 01 	sts	0x0146, r23
    1ba2:	60 93 45 01 	sts	0x0145, r22
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <run+0xda>
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
	            t = t->waitsFor->ownedBy;
    1ba8:	c0 81       	ld	r28, Z
    1baa:	d1 81       	ldd	r29, Z+1	; 0x01
        oldMsg = activeStack->next->msg;
        if (!msgQ || (oldMsg && (msgQ->deadline - oldMsg->deadline > 0))) {
            Thread t;
            push(pop(&activeStack), &threadPool);
            t = activeStack;  // can't be NULL, may be &thread0
            while (t->waitsFor) 
    1bac:	ec 81       	ldd	r30, Y+4	; 0x04
    1bae:	fd 81       	ldd	r31, Y+5	; 0x05
    1bb0:	30 97       	sbiw	r30, 0x00	; 0
    1bb2:	d1 f7       	brne	.-12     	; 0x1ba8 <run+0xd6>
	            t = t->waitsFor->ownedBy;
            dispatch(t);
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	0e 94 ed 03 	call	0x7da	; 0x7da <dispatch>
    1bba:	8d cf       	rjmp	.-230    	; 0x1ad6 <run+0x4>

00001bbc <async>:
        dispatch(activeStack);
    }
}

/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    1bbc:	3f 92       	push	r3
    1bbe:	4f 92       	push	r4
    1bc0:	5f 92       	push	r5
    1bc2:	6f 92       	push	r6
    1bc4:	7f 92       	push	r7
    1bc6:	8f 92       	push	r8
    1bc8:	9f 92       	push	r9
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	2b 01       	movw	r4, r22
    1be0:	3c 01       	movw	r6, r24
    1be2:	49 01       	movw	r8, r18
    1be4:	5a 01       	movw	r10, r20
    1be6:	98 01       	movw	r18, r16
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1be8:	8f b7       	in	r24, 0x3f	; 63
    1bea:	f8 94       	cli
    else
        prev->next = p;
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    1bec:	00 91 43 01 	lds	r16, 0x0143
    1bf0:	10 91 44 01 	lds	r17, 0x0144
    if (m)
    1bf4:	01 15       	cp	r16, r1
    1bf6:	11 05       	cpc	r17, r1
    1bf8:	d1 f0       	breq	.+52     	; 0x1c2e <async+0x72>
/* communication primitives */
Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    1bfa:	70 e8       	ldi	r23, 0x80	; 128
    1bfc:	37 2e       	mov	r3, r23
    1bfe:	38 22       	and	r3, r24
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    1c00:	d8 01       	movw	r26, r16
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	11 97       	sbiw	r26, 0x01	; 1
    1c08:	90 93 44 01 	sts	0x0144, r25
    1c0c:	80 93 43 01 	sts	0x0143, r24
    Msg m;
    Time now;
    char status;
    DISABLE(status);
    m = dequeue(&msgPool);
    m->to = to; 
    1c10:	1b 96       	adiw	r26, 0x0b	; 11
    1c12:	3c 93       	st	X, r19
    1c14:	2e 93       	st	-X, r18
    1c16:	1a 97       	sbiw	r26, 0x0a	; 10
    m->method = meth; 
    1c18:	1d 96       	adiw	r26, 0x0d	; 13
    1c1a:	fc 92       	st	X, r15
    1c1c:	ee 92       	st	-X, r14
    1c1e:	1c 97       	sbiw	r26, 0x0c	; 12
    m->arg = arg;
    1c20:	1f 96       	adiw	r26, 0x0f	; 15
    1c22:	dc 92       	st	X, r13
    1c24:	ce 92       	st	-X, r12
    1c26:	1e 97       	sbiw	r26, 0x0e	; 14
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1c28:	33 20       	and	r3, r3
    1c2a:	61 f4       	brne	.+24     	; 0x1c44 <async+0x88>
    1c2c:	17 c0       	rjmp	.+46     	; 0x1c5c <async+0xa0>
Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    else
        PANIC();  // Empty queue, kernel panic!!!
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	80 93 ec 00 	sts	0x00EC, r24
    1c34:	80 93 ed 00 	sts	0x00ED, r24
    1c38:	80 93 ee 00 	sts	0x00EE, r24
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	83 bf       	out	0x33, r24	; 51
    1c40:	88 95       	sleep
    1c42:	fd cf       	rjmp	.-6      	; 0x1c3e <async+0x82>
    DISABLE(status);
    m = dequeue(&msgPool);
    m->to = to; 
    m->method = meth; 
    m->arg = arg;
    m->baseline = (status ? current->msg->baseline : timestamp) + bl;
    1c44:	e0 91 49 01 	lds	r30, 0x0149
    1c48:	f0 91 4a 01 	lds	r31, 0x014A
    1c4c:	02 80       	ldd	r0, Z+2	; 0x02
    1c4e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c50:	e0 2d       	mov	r30, r0
    1c52:	62 81       	ldd	r22, Z+2	; 0x02
    1c54:	73 81       	ldd	r23, Z+3	; 0x03
    1c56:	84 81       	ldd	r24, Z+4	; 0x04
    1c58:	95 81       	ldd	r25, Z+5	; 0x05
    1c5a:	08 c0       	rjmp	.+16     	; 0x1c6c <async+0xb0>
    1c5c:	60 91 68 01 	lds	r22, 0x0168
    1c60:	70 91 69 01 	lds	r23, 0x0169
    1c64:	80 91 6a 01 	lds	r24, 0x016A
    1c68:	90 91 6b 01 	lds	r25, 0x016B
    1c6c:	9b 01       	movw	r18, r22
    1c6e:	ac 01       	movw	r20, r24
    1c70:	24 0d       	add	r18, r4
    1c72:	35 1d       	adc	r19, r5
    1c74:	46 1d       	adc	r20, r6
    1c76:	57 1d       	adc	r21, r7
    1c78:	f8 01       	movw	r30, r16
    1c7a:	22 83       	std	Z+2, r18	; 0x02
    1c7c:	33 83       	std	Z+3, r19	; 0x03
    1c7e:	44 83       	std	Z+4, r20	; 0x04
    1c80:	55 83       	std	Z+5, r21	; 0x05
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    1c82:	18 14       	cp	r1, r8
    1c84:	19 04       	cpc	r1, r9
    1c86:	1a 04       	cpc	r1, r10
    1c88:	1b 04       	cpc	r1, r11
    1c8a:	44 f0       	brlt	.+16     	; 0x1c9c <async+0xe0>
    1c8c:	6f ef       	ldi	r22, 0xFF	; 255
    1c8e:	86 2e       	mov	r8, r22
    1c90:	6f ef       	ldi	r22, 0xFF	; 255
    1c92:	96 2e       	mov	r9, r22
    1c94:	6f ef       	ldi	r22, 0xFF	; 255
    1c96:	a6 2e       	mov	r10, r22
    1c98:	6f e7       	ldi	r22, 0x7F	; 127
    1c9a:	b6 2e       	mov	r11, r22
    1c9c:	34 01       	movw	r6, r8
    1c9e:	45 01       	movw	r8, r10
    1ca0:	62 0e       	add	r6, r18
    1ca2:	73 1e       	adc	r7, r19
    1ca4:	84 1e       	adc	r8, r20
    1ca6:	95 1e       	adc	r9, r21
    1ca8:	d8 01       	movw	r26, r16
    1caa:	16 96       	adiw	r26, 0x06	; 6
    1cac:	6d 92       	st	X+, r6
    1cae:	7d 92       	st	X+, r7
    1cb0:	8d 92       	st	X+, r8
    1cb2:	9c 92       	st	X, r9
    1cb4:	19 97       	sbiw	r26, 0x09	; 9
    
    TIMERGET(now);
    1cb6:	e0 90 6c 01 	lds	r14, 0x016C
    1cba:	f0 90 6d 01 	lds	r15, 0x016D
    1cbe:	e0 91 84 00 	lds	r30, 0x0084
    1cc2:	f0 91 85 00 	lds	r31, 0x0085
    1cc6:	b0 99       	sbic	0x16, 0	; 22
    1cc8:	0a c0       	rjmp	.+20     	; 0x1cde <async+0x122>
    1cca:	c7 01       	movw	r24, r14
    1ccc:	aa 27       	eor	r26, r26
    1cce:	97 fd       	sbrc	r25, 7
    1cd0:	a0 95       	com	r26
    1cd2:	ba 2f       	mov	r27, r26
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	33 27       	eor	r19, r19
    1cd8:	22 27       	eor	r18, r18
    1cda:	cf 01       	movw	r24, r30
    1cdc:	12 c0       	rjmp	.+36     	; 0x1d02 <async+0x146>
    1cde:	80 91 84 00 	lds	r24, 0x0084
    1ce2:	90 91 85 00 	lds	r25, 0x0085
    1ce6:	08 94       	sec
    1ce8:	e1 1c       	adc	r14, r1
    1cea:	f1 1c       	adc	r15, r1
    1cec:	97 01       	movw	r18, r14
    1cee:	44 27       	eor	r20, r20
    1cf0:	37 fd       	sbrc	r19, 7
    1cf2:	40 95       	com	r20
    1cf4:	54 2f       	mov	r21, r20
    1cf6:	08 94       	sec
    1cf8:	e1 08       	sbc	r14, r1
    1cfa:	f1 08       	sbc	r15, r1
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	33 27       	eor	r19, r19
    1d00:	22 27       	eor	r18, r18
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	28 2b       	or	r18, r24
    1d08:	39 2b       	or	r19, r25
    1d0a:	4a 2b       	or	r20, r26
    1d0c:	5b 2b       	or	r21, r27
    if (m->baseline - now > 0) {        // baseline has not yet passed
    1d0e:	f8 01       	movw	r30, r16
    1d10:	a2 80       	ldd	r10, Z+2	; 0x02
    1d12:	b3 80       	ldd	r11, Z+3	; 0x03
    1d14:	c4 80       	ldd	r12, Z+4	; 0x04
    1d16:	d5 80       	ldd	r13, Z+5	; 0x05
    1d18:	d6 01       	movw	r26, r12
    1d1a:	c5 01       	movw	r24, r10
    1d1c:	82 1b       	sub	r24, r18
    1d1e:	93 0b       	sbc	r25, r19
    1d20:	a4 0b       	sbc	r26, r20
    1d22:	b5 0b       	sbc	r27, r21
    1d24:	18 16       	cp	r1, r24
    1d26:	19 06       	cpc	r1, r25
    1d28:	1a 06       	cpc	r1, r26
    1d2a:	1b 06       	cpc	r1, r27
    1d2c:	0c f0       	brlt	.+2      	; 0x1d30 <async+0x174>
    1d2e:	56 c0       	rjmp	.+172    	; 0x1ddc <async+0x220>
    else
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    1d30:	e0 91 66 01 	lds	r30, 0x0166
    1d34:	f0 91 67 01 	lds	r31, 0x0167
    1d38:	c0 e0       	ldi	r28, 0x00	; 0
    1d3a:	d0 e0       	ldi	r29, 0x00	; 0
    1d3c:	05 c0       	rjmp	.+10     	; 0x1d48 <async+0x18c>
    while (q && (q->baseline <= p->baseline )) {
        prev = q;
        q = q->next;
    1d3e:	ef 01       	movw	r28, r30
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	9c 01       	movw	r18, r24
    1d46:	f9 01       	movw	r30, r18
        prev->next = p;
}

void enqueueByBaseline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->baseline <= p->baseline )) {
    1d48:	30 97       	sbiw	r30, 0x00	; 0
    1d4a:	49 f0       	breq	.+18     	; 0x1d5e <async+0x1a2>
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	a4 81       	ldd	r26, Z+4	; 0x04
    1d52:	b5 81       	ldd	r27, Z+5	; 0x05
    1d54:	a8 16       	cp	r10, r24
    1d56:	b9 06       	cpc	r11, r25
    1d58:	ca 06       	cpc	r12, r26
    1d5a:	db 06       	cpc	r13, r27
    1d5c:	84 f7       	brge	.-32     	; 0x1d3e <async+0x182>
        prev = q;
        q = q->next;
    }
    p->next = q;
    1d5e:	d8 01       	movw	r26, r16
    1d60:	ed 93       	st	X+, r30
    1d62:	fc 93       	st	X, r31
    if (prev == NULL)
    1d64:	20 97       	sbiw	r28, 0x00	; 0
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <async+0x1b6>
        *queue = p;
    1d68:	10 93 67 01 	sts	0x0167, r17
    1d6c:	00 93 66 01 	sts	0x0166, r16
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <async+0x1ba>
    else
        prev->next = p;
    1d72:	19 83       	std	Y+1, r17	; 0x01
    1d74:	08 83       	st	Y, r16
    m->deadline = m->baseline + (dl > 0 ? dl : INFINITY);
    
    TIMERGET(now);
    if (m->baseline - now > 0) {        // baseline has not yet passed
        enqueueByBaseline(m, &timerQ);
        TIMERSET(timerQ);
    1d76:	e0 91 66 01 	lds	r30, 0x0166
    1d7a:	f0 91 67 01 	lds	r31, 0x0167
    1d7e:	30 97       	sbiw	r30, 0x00	; 0
    1d80:	21 f1       	breq	.+72     	; 0x1dca <async+0x20e>
    1d82:	22 81       	ldd	r18, Z+2	; 0x02
    1d84:	33 81       	ldd	r19, Z+3	; 0x03
    1d86:	44 81       	ldd	r20, Z+4	; 0x04
    1d88:	55 81       	ldd	r21, Z+5	; 0x05
    1d8a:	ca 01       	movw	r24, r20
    1d8c:	bb 27       	eor	r27, r27
    1d8e:	97 fd       	sbrc	r25, 7
    1d90:	b0 95       	com	r27
    1d92:	ab 2f       	mov	r26, r27
    1d94:	e8 16       	cp	r14, r24
    1d96:	f9 06       	cpc	r15, r25
    1d98:	c1 f4       	brne	.+48     	; 0x1dca <async+0x20e>
    1d9a:	80 91 84 00 	lds	r24, 0x0084
    1d9e:	90 91 85 00 	lds	r25, 0x0085
    1da2:	80 95       	com	r24
    1da4:	90 95       	com	r25
    1da6:	82 0f       	add	r24, r18
    1da8:	93 1f       	adc	r25, r19
    1daa:	89 2b       	or	r24, r25
    1dac:	31 f4       	brne	.+12     	; 0x1dba <async+0x1fe>
    1dae:	20 91 84 00 	lds	r18, 0x0084
    1db2:	30 91 85 00 	lds	r19, 0x0085
    1db6:	2f 5f       	subi	r18, 0xFF	; 255
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	30 93 89 00 	sts	0x0089, r19
    1dbe:	20 93 88 00 	sts	0x0088, r18
    1dc2:	80 91 6f 00 	lds	r24, 0x006F
    1dc6:	82 60       	ori	r24, 0x02	; 2
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <async+0x214>
    1dca:	80 91 6f 00 	lds	r24, 0x006F
    1dce:	8d 7f       	andi	r24, 0xFD	; 253
    1dd0:	80 93 6f 00 	sts	0x006F, r24
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
        }
    }
    
    ENABLE(status);
    1dd4:	33 20       	and	r3, r3
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <async+0x21e>
    1dd8:	57 c0       	rjmp	.+174    	; 0x1e88 <async+0x2cc>
    1dda:	57 c0       	rjmp	.+174    	; 0x1e8a <async+0x2ce>

#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    1ddc:	e0 91 64 01 	lds	r30, 0x0164
    1de0:	f0 91 65 01 	lds	r31, 0x0165
    1de4:	c0 e0       	ldi	r28, 0x00	; 0
    1de6:	d0 e0       	ldi	r29, 0x00	; 0
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <async+0x238>
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    1dea:	ef 01       	movw	r28, r30
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	9c 01       	movw	r18, r24
    1df2:	f9 01       	movw	r30, r18
#endif

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1df4:	30 97       	sbiw	r30, 0x00	; 0
    1df6:	49 f0       	breq	.+18     	; 0x1e0a <async+0x24e>
    1df8:	86 81       	ldd	r24, Z+6	; 0x06
    1dfa:	97 81       	ldd	r25, Z+7	; 0x07
    1dfc:	a0 85       	ldd	r26, Z+8	; 0x08
    1dfe:	b1 85       	ldd	r27, Z+9	; 0x09
    1e00:	68 16       	cp	r6, r24
    1e02:	79 06       	cpc	r7, r25
    1e04:	8a 06       	cpc	r8, r26
    1e06:	9b 06       	cpc	r9, r27
    1e08:	84 f7       	brge	.-32     	; 0x1dea <async+0x22e>
        prev = q;
        q = q->next;
    }
    p->next = q;
    1e0a:	d8 01       	movw	r26, r16
    1e0c:	ed 93       	st	X+, r30
    1e0e:	fc 93       	st	X, r31
    if (prev == NULL)
    1e10:	20 97       	sbiw	r28, 0x00	; 0
    1e12:	29 f4       	brne	.+10     	; 0x1e1e <async+0x262>
        *queue = p;
    1e14:	10 93 65 01 	sts	0x0165, r17
    1e18:	00 93 64 01 	sts	0x0164, r16
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <async+0x266>
    else
        prev->next = p;
    1e1e:	19 83       	std	Y+1, r17	; 0x01
    1e20:	08 83       	st	Y, r16
    if (m->baseline - now > 0) {        // baseline has not yet passed
        enqueueByBaseline(m, &timerQ);
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
    1e22:	33 20       	and	r3, r3
    1e24:	91 f1       	breq	.+100    	; 0x1e8a <async+0x2ce>
    1e26:	c0 91 45 01 	lds	r28, 0x0145
    1e2a:	d0 91 46 01 	lds	r29, 0x0146
    1e2e:	20 97       	sbiw	r28, 0x00	; 0
    1e30:	59 f1       	breq	.+86     	; 0x1e88 <async+0x2cc>
    1e32:	60 91 47 01 	lds	r22, 0x0147
    1e36:	70 91 48 01 	lds	r23, 0x0148
    1e3a:	e0 91 64 01 	lds	r30, 0x0164
    1e3e:	f0 91 65 01 	lds	r31, 0x0165
    1e42:	db 01       	movw	r26, r22
    1e44:	12 96       	adiw	r26, 0x02	; 2
    1e46:	2d 91       	ld	r18, X+
    1e48:	3c 91       	ld	r19, X
    1e4a:	13 97       	sbiw	r26, 0x03	; 3
    1e4c:	86 81       	ldd	r24, Z+6	; 0x06
    1e4e:	97 81       	ldd	r25, Z+7	; 0x07
    1e50:	a0 85       	ldd	r26, Z+8	; 0x08
    1e52:	b1 85       	ldd	r27, Z+9	; 0x09
    1e54:	f9 01       	movw	r30, r18
    1e56:	26 81       	ldd	r18, Z+6	; 0x06
    1e58:	37 81       	ldd	r19, Z+7	; 0x07
    1e5a:	40 85       	ldd	r20, Z+8	; 0x08
    1e5c:	51 85       	ldd	r21, Z+9	; 0x09
    1e5e:	82 1b       	sub	r24, r18
    1e60:	93 0b       	sbc	r25, r19
    1e62:	a4 0b       	sbc	r26, r20
    1e64:	b5 0b       	sbc	r27, r21
    1e66:	b7 ff       	sbrs	r27, 7
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <async+0x2cc>
    *stack = t;
}

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    1e6a:	88 81       	ld	r24, Y
    1e6c:	99 81       	ldd	r25, Y+1	; 0x01
    1e6e:	90 93 46 01 	sts	0x0146, r25
    1e72:	80 93 45 01 	sts	0x0145, r24
    m->next = *queue;
    *queue = m;
}

void push(Thread t, Thread *stack) {
    t->next = *stack;
    1e76:	79 83       	std	Y+1, r23	; 0x01
    1e78:	68 83       	st	Y, r22
    *stack = t;
    1e7a:	d0 93 48 01 	sts	0x0148, r29
    1e7e:	c0 93 47 01 	sts	0x0147, r28
        TIMERSET(timerQ);
    } else {                            // m is immediately schedulable
        enqueueByDeadline(m, &msgQ);
        if (status && threadPool && (msgQ->deadline - activeStack->msg->deadline < 0)) {
            push(pop(&threadPool), &activeStack);
            dispatch(activeStack);
    1e82:	ce 01       	movw	r24, r28
    1e84:	0e 94 ed 03 	call	0x7da	; 0x7da <dispatch>
        }
    }
    
    ENABLE(status);
    1e88:	78 94       	sei
    return m;
}
    1e8a:	c8 01       	movw	r24, r16
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	5f 90       	pop	r5
    1eaa:	4f 90       	pop	r4
    1eac:	3f 90       	pop	r3
    1eae:	08 95       	ret

00001eb0 <writeDigit>:
#define clrscr {LCDDR0&=0x66;LCDDR1&=0x66;LCDDR2&=0x66;LCDDR5=0x00;LCDDR6=0x00;LCDDR7=0x00;LCDDR10=0x00;LCDDR11=0x00;LCDDR12=0x00;LCDDR15=0x00;LCDDR16=0x00;LCDDR17=0x00;}

static int seg[]={0x1551,0x8110,0x11e1,0x11b1,0x05b0,0x14b1,0x14f1,0x1110,0x15f1,0x15b1};

int  writeDigit(LCD *self, int digitPos)
{
    1eb0:	fb 01       	movw	r30, r22
	switch(digitPos%10)
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	6a e0       	ldi	r22, 0x0A	; 10
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    1ebc:	82 30       	cpi	r24, 0x02	; 2
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <writeDigit+0x14>
    1ec2:	82 c0       	rjmp	.+260    	; 0x1fc8 <writeDigit+0x118>
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	34 f4       	brge	.+12     	; 0x1ed6 <writeDigit+0x26>
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	81 f0       	breq	.+32     	; 0x1eee <writeDigit+0x3e>
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <writeDigit+0x24>
    1ed2:	53 c1       	rjmp	.+678    	; 0x217a <writeDigit+0x2ca>
    1ed4:	41 c0       	rjmp	.+130    	; 0x1f58 <writeDigit+0xa8>
    1ed6:	84 30       	cpi	r24, 0x04	; 4
    1ed8:	91 05       	cpc	r25, r1
    1eda:	09 f4       	brne	.+2      	; 0x1ede <writeDigit+0x2e>
    1edc:	e2 c0       	rjmp	.+452    	; 0x20a2 <writeDigit+0x1f2>
    1ede:	84 30       	cpi	r24, 0x04	; 4
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	0c f4       	brge	.+2      	; 0x1ee6 <writeDigit+0x36>
    1ee4:	a6 c0       	rjmp	.+332    	; 0x2032 <writeDigit+0x182>
    1ee6:	05 97       	sbiw	r24, 0x05	; 5
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <writeDigit+0x3c>
    1eea:	47 c1       	rjmp	.+654    	; 0x217a <writeDigit+0x2ca>
    1eec:	0f c1       	rjmp	.+542    	; 0x210c <writeDigit+0x25c>
	{
		case 0:
		{
			LCDDR0 = (LCDDR0 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1eee:	40 91 ec 00 	lds	r20, 0x00EC
    1ef2:	cf 01       	movw	r24, r30
    1ef4:	6a e0       	ldi	r22, 0x0A	; 10
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    1efc:	fb 01       	movw	r30, r22
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	e5 5b       	subi	r30, 0xB5	; 181
    1f04:	fe 4f       	sbci	r31, 0xFE	; 254
    1f06:	20 81       	ld	r18, Z
    1f08:	31 81       	ldd	r19, Z+1	; 0x01
    1f0a:	83 2f       	mov	r24, r19
    1f0c:	82 95       	swap	r24
    1f0e:	8f 70       	andi	r24, 0x0F	; 15
    1f10:	40 7f       	andi	r20, 0xF0	; 240
    1f12:	48 2b       	or	r20, r24
    1f14:	40 93 ec 00 	sts	0x00EC, r20
			LCDDR5 = (LCDDR5 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1f18:	40 91 f1 00 	lds	r20, 0x00F1
    1f1c:	83 2f       	mov	r24, r19
    1f1e:	99 27       	eor	r25, r25
    1f20:	87 fd       	sbrc	r24, 7
    1f22:	9a 95       	dec	r25
    1f24:	8f 70       	andi	r24, 0x0F	; 15
    1f26:	40 7f       	andi	r20, 0xF0	; 240
    1f28:	84 2b       	or	r24, r20
    1f2a:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    1f2e:	40 91 f6 00 	lds	r20, 0x00F6
    1f32:	c9 01       	movw	r24, r18
    1f34:	e4 e0       	ldi	r30, 0x04	; 4
    1f36:	95 95       	asr	r25
    1f38:	87 95       	ror	r24
    1f3a:	ea 95       	dec	r30
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <writeDigit+0x86>
    1f3e:	8f 70       	andi	r24, 0x0F	; 15
    1f40:	40 7f       	andi	r20, 0xF0	; 240
    1f42:	84 2b       	or	r24, r20
    1f44:	80 93 f6 00 	sts	0x00F6, r24
			LCDDR15 = (LCDDR15 & 0xf0) | (seg[digitPos/10]&0x000f);
    1f48:	80 91 fb 00 	lds	r24, 0x00FB
    1f4c:	2f 70       	andi	r18, 0x0F	; 15
    1f4e:	80 7f       	andi	r24, 0xF0	; 240
    1f50:	28 2b       	or	r18, r24
    1f52:	20 93 fb 00 	sts	0x00FB, r18
    1f56:	08 95       	ret
			break;
		}
		case 1:
		{
			LCDDR0 = (LCDDR0 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    1f58:	20 91 ec 00 	lds	r18, 0x00EC
    1f5c:	cf 01       	movw	r24, r30
    1f5e:	6a e0       	ldi	r22, 0x0A	; 10
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    1f66:	fb 01       	movw	r30, r22
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	e5 5b       	subi	r30, 0xB5	; 181
    1f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f70:	40 81       	ld	r20, Z
    1f72:	51 81       	ldd	r21, Z+1	; 0x01
    1f74:	85 2f       	mov	r24, r21
    1f76:	99 27       	eor	r25, r25
    1f78:	87 fd       	sbrc	r24, 7
    1f7a:	9a 95       	dec	r25
    1f7c:	80 7f       	andi	r24, 0xF0	; 240
    1f7e:	2f 70       	andi	r18, 0x0F	; 15
    1f80:	82 2b       	or	r24, r18
    1f82:	80 93 ec 00 	sts	0x00EC, r24
			LCDDR5 = (LCDDR5 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    1f86:	20 91 f1 00 	lds	r18, 0x00F1
    1f8a:	ca 01       	movw	r24, r20
    1f8c:	34 e0       	ldi	r19, 0x04	; 4
    1f8e:	95 95       	asr	r25
    1f90:	87 95       	ror	r24
    1f92:	3a 95       	dec	r19
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <writeDigit+0xde>
    1f96:	80 7f       	andi	r24, 0xF0	; 240
    1f98:	2f 70       	andi	r18, 0x0F	; 15
    1f9a:	82 2b       	or	r24, r18
    1f9c:	80 93 f1 00 	sts	0x00F1, r24
			LCDDR10 = (LCDDR10 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    1fa0:	80 91 f6 00 	lds	r24, 0x00F6
    1fa4:	94 2f       	mov	r25, r20
    1fa6:	90 7f       	andi	r25, 0xF0	; 240
    1fa8:	8f 70       	andi	r24, 0x0F	; 15
    1faa:	98 2b       	or	r25, r24
    1fac:	90 93 f6 00 	sts	0x00F6, r25
			LCDDR15 = (LCDDR15 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    1fb0:	80 91 fb 00 	lds	r24, 0x00FB
    1fb4:	b4 e0       	ldi	r27, 0x04	; 4
    1fb6:	44 0f       	add	r20, r20
    1fb8:	55 1f       	adc	r21, r21
    1fba:	ba 95       	dec	r27
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <writeDigit+0x106>
    1fbe:	8f 70       	andi	r24, 0x0F	; 15
    1fc0:	84 2b       	or	r24, r20
    1fc2:	80 93 fb 00 	sts	0x00FB, r24
    1fc6:	08 95       	ret
			break;
		}
		case 2:
		{
			LCDDR1 = (LCDDR1 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    1fc8:	40 91 ed 00 	lds	r20, 0x00ED
    1fcc:	cf 01       	movw	r24, r30
    1fce:	6a e0       	ldi	r22, 0x0A	; 10
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	e5 5b       	subi	r30, 0xB5	; 181
    1fde:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe0:	20 81       	ld	r18, Z
    1fe2:	31 81       	ldd	r19, Z+1	; 0x01
    1fe4:	83 2f       	mov	r24, r19
    1fe6:	82 95       	swap	r24
    1fe8:	8f 70       	andi	r24, 0x0F	; 15
    1fea:	40 7f       	andi	r20, 0xF0	; 240
    1fec:	48 2b       	or	r20, r24
    1fee:	40 93 ed 00 	sts	0x00ED, r20
			LCDDR6 = (LCDDR6 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    1ff2:	40 91 f2 00 	lds	r20, 0x00F2
    1ff6:	83 2f       	mov	r24, r19
    1ff8:	99 27       	eor	r25, r25
    1ffa:	87 fd       	sbrc	r24, 7
    1ffc:	9a 95       	dec	r25
    1ffe:	8f 70       	andi	r24, 0x0F	; 15
    2000:	40 7f       	andi	r20, 0xF0	; 240
    2002:	84 2b       	or	r24, r20
    2004:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    2008:	40 91 f7 00 	lds	r20, 0x00F7
    200c:	c9 01       	movw	r24, r18
    200e:	e4 e0       	ldi	r30, 0x04	; 4
    2010:	95 95       	asr	r25
    2012:	87 95       	ror	r24
    2014:	ea 95       	dec	r30
    2016:	e1 f7       	brne	.-8      	; 0x2010 <writeDigit+0x160>
    2018:	8f 70       	andi	r24, 0x0F	; 15
    201a:	40 7f       	andi	r20, 0xF0	; 240
    201c:	84 2b       	or	r24, r20
    201e:	80 93 f7 00 	sts	0x00F7, r24
			LCDDR16 = (LCDDR16 & 0xf0) | (seg[digitPos/10]&0x000f);
    2022:	80 91 fc 00 	lds	r24, 0x00FC
    2026:	2f 70       	andi	r18, 0x0F	; 15
    2028:	80 7f       	andi	r24, 0xF0	; 240
    202a:	28 2b       	or	r18, r24
    202c:	20 93 fc 00 	sts	0x00FC, r18
    2030:	08 95       	ret
			break;
		}
		case 3:
		{
			LCDDR1 = (LCDDR1 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    2032:	20 91 ed 00 	lds	r18, 0x00ED
    2036:	cf 01       	movw	r24, r30
    2038:	6a e0       	ldi	r22, 0x0A	; 10
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    2040:	fb 01       	movw	r30, r22
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	e5 5b       	subi	r30, 0xB5	; 181
    2048:	fe 4f       	sbci	r31, 0xFE	; 254
    204a:	40 81       	ld	r20, Z
    204c:	51 81       	ldd	r21, Z+1	; 0x01
    204e:	85 2f       	mov	r24, r21
    2050:	99 27       	eor	r25, r25
    2052:	87 fd       	sbrc	r24, 7
    2054:	9a 95       	dec	r25
    2056:	80 7f       	andi	r24, 0xF0	; 240
    2058:	2f 70       	andi	r18, 0x0F	; 15
    205a:	82 2b       	or	r24, r18
    205c:	80 93 ed 00 	sts	0x00ED, r24
			LCDDR6 = (LCDDR6 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    2060:	20 91 f2 00 	lds	r18, 0x00F2
    2064:	ca 01       	movw	r24, r20
    2066:	34 e0       	ldi	r19, 0x04	; 4
    2068:	95 95       	asr	r25
    206a:	87 95       	ror	r24
    206c:	3a 95       	dec	r19
    206e:	e1 f7       	brne	.-8      	; 0x2068 <writeDigit+0x1b8>
    2070:	80 7f       	andi	r24, 0xF0	; 240
    2072:	2f 70       	andi	r18, 0x0F	; 15
    2074:	82 2b       	or	r24, r18
    2076:	80 93 f2 00 	sts	0x00F2, r24
			LCDDR11 = (LCDDR11 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    207a:	80 91 f7 00 	lds	r24, 0x00F7
    207e:	94 2f       	mov	r25, r20
    2080:	90 7f       	andi	r25, 0xF0	; 240
    2082:	8f 70       	andi	r24, 0x0F	; 15
    2084:	98 2b       	or	r25, r24
    2086:	90 93 f7 00 	sts	0x00F7, r25
			LCDDR16 = (LCDDR16 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    208a:	80 91 fc 00 	lds	r24, 0x00FC
    208e:	b4 e0       	ldi	r27, 0x04	; 4
    2090:	44 0f       	add	r20, r20
    2092:	55 1f       	adc	r21, r21
    2094:	ba 95       	dec	r27
    2096:	e1 f7       	brne	.-8      	; 0x2090 <writeDigit+0x1e0>
    2098:	8f 70       	andi	r24, 0x0F	; 15
    209a:	84 2b       	or	r24, r20
    209c:	80 93 fc 00 	sts	0x00FC, r24
    20a0:	08 95       	ret
			break;
		}
		case 4:
		{
			LCDDR2 = (LCDDR2 & 0xf0) | ((seg[digitPos/10]>>12)&0x000f);
    20a2:	40 91 ee 00 	lds	r20, 0x00EE
    20a6:	cf 01       	movw	r24, r30
    20a8:	6a e0       	ldi	r22, 0x0A	; 10
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    20b0:	fb 01       	movw	r30, r22
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	e5 5b       	subi	r30, 0xB5	; 181
    20b8:	fe 4f       	sbci	r31, 0xFE	; 254
    20ba:	20 81       	ld	r18, Z
    20bc:	31 81       	ldd	r19, Z+1	; 0x01
    20be:	83 2f       	mov	r24, r19
    20c0:	82 95       	swap	r24
    20c2:	8f 70       	andi	r24, 0x0F	; 15
    20c4:	40 7f       	andi	r20, 0xF0	; 240
    20c6:	48 2b       	or	r20, r24
    20c8:	40 93 ee 00 	sts	0x00EE, r20
			LCDDR7 = (LCDDR7 & 0xf0) | ((seg[digitPos/10]>>8)&0x000f);
    20cc:	40 91 f3 00 	lds	r20, 0x00F3
    20d0:	83 2f       	mov	r24, r19
    20d2:	99 27       	eor	r25, r25
    20d4:	87 fd       	sbrc	r24, 7
    20d6:	9a 95       	dec	r25
    20d8:	8f 70       	andi	r24, 0x0F	; 15
    20da:	40 7f       	andi	r20, 0xF0	; 240
    20dc:	84 2b       	or	r24, r20
    20de:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0xf0) | ((seg[digitPos/10]>>4)&0x000f);
    20e2:	40 91 f8 00 	lds	r20, 0x00F8
    20e6:	c9 01       	movw	r24, r18
    20e8:	e4 e0       	ldi	r30, 0x04	; 4
    20ea:	95 95       	asr	r25
    20ec:	87 95       	ror	r24
    20ee:	ea 95       	dec	r30
    20f0:	e1 f7       	brne	.-8      	; 0x20ea <writeDigit+0x23a>
    20f2:	8f 70       	andi	r24, 0x0F	; 15
    20f4:	40 7f       	andi	r20, 0xF0	; 240
    20f6:	84 2b       	or	r24, r20
    20f8:	80 93 f8 00 	sts	0x00F8, r24
			LCDDR17 = (LCDDR17 & 0xf0) | (seg[digitPos/10]&0x000f);
    20fc:	80 91 fd 00 	lds	r24, 0x00FD
    2100:	2f 70       	andi	r18, 0x0F	; 15
    2102:	80 7f       	andi	r24, 0xF0	; 240
    2104:	28 2b       	or	r18, r24
    2106:	20 93 fd 00 	sts	0x00FD, r18
    210a:	08 95       	ret
			break;
		}
		case 5:
		{
			LCDDR2 = (LCDDR2 & 0x0f) | ((seg[digitPos/10]>>8)&0x00f0);
    210c:	20 91 ee 00 	lds	r18, 0x00EE
    2110:	cf 01       	movw	r24, r30
    2112:	6a e0       	ldi	r22, 0x0A	; 10
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    211a:	fb 01       	movw	r30, r22
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	e5 5b       	subi	r30, 0xB5	; 181
    2122:	fe 4f       	sbci	r31, 0xFE	; 254
    2124:	40 81       	ld	r20, Z
    2126:	51 81       	ldd	r21, Z+1	; 0x01
    2128:	85 2f       	mov	r24, r21
    212a:	99 27       	eor	r25, r25
    212c:	87 fd       	sbrc	r24, 7
    212e:	9a 95       	dec	r25
    2130:	80 7f       	andi	r24, 0xF0	; 240
    2132:	2f 70       	andi	r18, 0x0F	; 15
    2134:	82 2b       	or	r24, r18
    2136:	80 93 ee 00 	sts	0x00EE, r24
			LCDDR7 = (LCDDR7 & 0x0f) | ((seg[digitPos/10]>>4)&0x00f0);
    213a:	20 91 f3 00 	lds	r18, 0x00F3
    213e:	ca 01       	movw	r24, r20
    2140:	34 e0       	ldi	r19, 0x04	; 4
    2142:	95 95       	asr	r25
    2144:	87 95       	ror	r24
    2146:	3a 95       	dec	r19
    2148:	e1 f7       	brne	.-8      	; 0x2142 <writeDigit+0x292>
    214a:	80 7f       	andi	r24, 0xF0	; 240
    214c:	2f 70       	andi	r18, 0x0F	; 15
    214e:	82 2b       	or	r24, r18
    2150:	80 93 f3 00 	sts	0x00F3, r24
			LCDDR12 = (LCDDR12 & 0x0f) | ((seg[digitPos/10])&0x00f0);
    2154:	80 91 f8 00 	lds	r24, 0x00F8
    2158:	94 2f       	mov	r25, r20
    215a:	90 7f       	andi	r25, 0xF0	; 240
    215c:	8f 70       	andi	r24, 0x0F	; 15
    215e:	98 2b       	or	r25, r24
    2160:	90 93 f8 00 	sts	0x00F8, r25
			LCDDR17 = (LCDDR17 & 0x0f) | ((seg[digitPos/10]<<4)&0x00f0);
    2164:	80 91 fd 00 	lds	r24, 0x00FD
    2168:	94 e0       	ldi	r25, 0x04	; 4
    216a:	44 0f       	add	r20, r20
    216c:	55 1f       	adc	r21, r21
    216e:	9a 95       	dec	r25
    2170:	e1 f7       	brne	.-8      	; 0x216a <writeDigit+0x2ba>
    2172:	8f 70       	andi	r24, 0x0F	; 15
    2174:	84 2b       	or	r24, r20
    2176:	80 93 fd 00 	sts	0x00FD, r24
			break;
		}
		default:;
	}
}
    217a:	08 95       	ret

0000217c <writeInt>:


int  writeInt(LCD *self, int val)
{
    217c:	6f 92       	push	r6
    217e:	7f 92       	push	r7
    2180:	9f 92       	push	r9
    2182:	af 92       	push	r10
    2184:	bf 92       	push	r11
    2186:	cf 92       	push	r12
    2188:	df 92       	push	r13
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	00 d0       	rcall	.+0      	; 0x2198 <writeInt+0x1c>
    2198:	00 d0       	rcall	.+0      	; 0x219a <writeInt+0x1e>
    219a:	00 d0       	rcall	.+0      	; 0x219c <writeInt+0x20>
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	16 2f       	mov	r17, r22
    21a2:	47 2f       	mov	r20, r23
	unsigned char a[6],j=5,n=1,k;
	int temp=val;
	
	clrscr;
    21a4:	80 91 ec 00 	lds	r24, 0x00EC
    21a8:	86 76       	andi	r24, 0x66	; 102
    21aa:	80 93 ec 00 	sts	0x00EC, r24
    21ae:	80 91 ed 00 	lds	r24, 0x00ED
    21b2:	86 76       	andi	r24, 0x66	; 102
    21b4:	80 93 ed 00 	sts	0x00ED, r24
    21b8:	80 91 ee 00 	lds	r24, 0x00EE
    21bc:	86 76       	andi	r24, 0x66	; 102
    21be:	80 93 ee 00 	sts	0x00EE, r24
    21c2:	10 92 f1 00 	sts	0x00F1, r1
    21c6:	10 92 f2 00 	sts	0x00F2, r1
    21ca:	10 92 f3 00 	sts	0x00F3, r1
    21ce:	10 92 f6 00 	sts	0x00F6, r1
    21d2:	10 92 f7 00 	sts	0x00F7, r1
    21d6:	10 92 f8 00 	sts	0x00F8, r1
    21da:	10 92 fb 00 	sts	0x00FB, r1
    21de:	10 92 fc 00 	sts	0x00FC, r1
    21e2:	10 92 fd 00 	sts	0x00FD, r1
    21e6:	26 2f       	mov	r18, r22
    21e8:	37 2f       	mov	r19, r23
    21ea:	c9 01       	movw	r24, r18
    21ec:	99 24       	eor	r9, r9
    21ee:	93 94       	inc	r9
    21f0:	01 c0       	rjmp	.+2      	; 0x21f4 <writeInt+0x78>
	
	while(temp/=10) n++;
    21f2:	93 94       	inc	r9
    21f4:	6a e0       	ldi	r22, 0x0A	; 10
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    21fc:	cb 01       	movw	r24, r22
    21fe:	61 15       	cp	r22, r1
    2200:	71 05       	cpc	r23, r1
    2202:	b9 f7       	brne	.-18     	; 0x21f2 <writeInt+0x76>
	if(n>6) n=6;
    2204:	86 e0       	ldi	r24, 0x06	; 6
    2206:	89 15       	cp	r24, r9
    2208:	10 f4       	brcc	.+4      	; 0x220e <writeInt+0x92>
    220a:	66 e0       	ldi	r22, 0x06	; 6
    220c:	96 2e       	mov	r9, r22
    220e:	39 2d       	mov	r19, r9
    2210:	25 e0       	ldi	r18, 0x05	; 5
	k=n;
	while(k--)
	{
		a[j]=val%10;
    2212:	7e 01       	movw	r14, r28
    2214:	08 94       	sec
    2216:	e1 1c       	adc	r14, r1
    2218:	f1 1c       	adc	r15, r1
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <writeInt+0xc8>
    221c:	f7 01       	movw	r30, r14
    221e:	e2 0f       	add	r30, r18
    2220:	f1 1d       	adc	r31, r1
    2222:	81 2f       	mov	r24, r17
    2224:	94 2f       	mov	r25, r20
    2226:	6a e0       	ldi	r22, 0x0A	; 10
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    222e:	80 83       	st	Z, r24
		val/=10;
    2230:	81 2f       	mov	r24, r17
    2232:	94 2f       	mov	r25, r20
    2234:	6a e0       	ldi	r22, 0x0A	; 10
    2236:	70 e0       	ldi	r23, 0x00	; 0
    2238:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    223c:	16 2f       	mov	r17, r22
    223e:	47 2f       	mov	r20, r23
		j--;
    2240:	21 50       	subi	r18, 0x01	; 1
    2242:	31 50       	subi	r19, 0x01	; 1
	clrscr;
	
	while(temp/=10) n++;
	if(n>6) n=6;
	k=n;
	while(k--)
    2244:	33 23       	and	r19, r19
    2246:	51 f7       	brne	.-44     	; 0x221c <writeInt+0xa0>
		//ASYNC(self,writeDigit,a[j]*10+n);
		switch(j)
		{
			case 0:
			{
				LCDDR0 = (LCDDR0 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	a8 2e       	mov	r10, r24
    224c:	bb 24       	eor	r11, r11
				LCDDR15 = (LCDDR15 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 1:
			{
				LCDDR0 = (LCDDR0 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	c8 2e       	mov	r12, r24
    2252:	dd 24       	eor	r13, r13
				LCDDR15 = (LCDDR15 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 2:
			{
				LCDDR1 = (LCDDR1 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	e8 2e       	mov	r14, r24
    2258:	ff 24       	eor	r15, r15
				LCDDR16 = (LCDDR16 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 3:
			{
				LCDDR1 = (LCDDR1 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    225a:	8c 81       	ldd	r24, Y+4	; 0x04
    225c:	08 2f       	mov	r16, r24
    225e:	10 e0       	ldi	r17, 0x00	; 0
				LCDDR16 = (LCDDR16 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 4:
			{
				LCDDR2 = (LCDDR2 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	a8 2f       	mov	r26, r24
    2264:	b0 e0       	ldi	r27, 0x00	; 0
				LCDDR17 = (LCDDR17 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 5:
			{
				LCDDR2 = (LCDDR2 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	68 2e       	mov	r6, r24
    226a:	77 24       	eor	r7, r7
    226c:	65 e0       	ldi	r22, 0x05	; 5
				LCDDR15 = (LCDDR15 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 2:
			{
				LCDDR1 = (LCDDR1 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    226e:	ee 0c       	add	r14, r14
    2270:	ff 1c       	adc	r15, r15
    2272:	eb e4       	ldi	r30, 0x4B	; 75
    2274:	f1 e0       	ldi	r31, 0x01	; 1
    2276:	ee 0e       	add	r14, r30
    2278:	ff 1e       	adc	r15, r31
				LCDDR16 = (LCDDR16 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
				break;
			}
			case 4:
			{
				LCDDR2 = (LCDDR2 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    227a:	aa 0f       	add	r26, r26
    227c:	bb 1f       	adc	r27, r27
    227e:	ae 0f       	add	r26, r30
    2280:	bf 1f       	adc	r27, r31
				LCDDR16 = (LCDDR16 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 3:
			{
				LCDDR1 = (LCDDR1 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2282:	00 0f       	add	r16, r16
    2284:	11 1f       	adc	r17, r17
    2286:	0e 0f       	add	r16, r30
    2288:	1f 1f       	adc	r17, r31
				LCDDR17 = (LCDDR17 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 5:
			{
				LCDDR2 = (LCDDR2 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    228a:	66 0c       	add	r6, r6
    228c:	77 1c       	adc	r7, r7
    228e:	6e 0e       	add	r6, r30
    2290:	7f 1e       	adc	r7, r31
		//ASYNC(self,writeDigit,a[j]*10+n);
		switch(j)
		{
			case 0:
			{
				LCDDR0 = (LCDDR0 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2292:	aa 0c       	add	r10, r10
    2294:	bb 1c       	adc	r11, r11
    2296:	ae 0e       	add	r10, r30
    2298:	bf 1e       	adc	r11, r31
				LCDDR15 = (LCDDR15 & 0xf0) | (seg[a[j]]&0x000f);
				break;
			}
			case 1:
			{
				LCDDR0 = (LCDDR0 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    229a:	cc 0c       	add	r12, r12
    229c:	dd 1c       	adc	r13, r13
    229e:	ce 0e       	add	r12, r30
    22a0:	df 1e       	adc	r13, r31
    22a2:	27 c1       	rjmp	.+590    	; 0x24f2 <writeInt+0x376>
	}
	j=5;
	while(n--)
	{
		//ASYNC(self,writeDigit,a[j]*10+n);
		switch(j)
    22a4:	62 30       	cpi	r22, 0x02	; 2
    22a6:	09 f4       	brne	.+2      	; 0x22aa <writeInt+0x12e>
    22a8:	6d c0       	rjmp	.+218    	; 0x2384 <writeInt+0x208>
    22aa:	63 30       	cpi	r22, 0x03	; 3
    22ac:	30 f4       	brcc	.+12     	; 0x22ba <writeInt+0x13e>
    22ae:	66 23       	and	r22, r22
    22b0:	71 f0       	breq	.+28     	; 0x22ce <writeInt+0x152>
    22b2:	61 30       	cpi	r22, 0x01	; 1
    22b4:	09 f0       	breq	.+2      	; 0x22b8 <writeInt+0x13c>
    22b6:	1b c1       	rjmp	.+566    	; 0x24ee <writeInt+0x372>
    22b8:	36 c0       	rjmp	.+108    	; 0x2326 <writeInt+0x1aa>
    22ba:	64 30       	cpi	r22, 0x04	; 4
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <writeInt+0x144>
    22be:	bd c0       	rjmp	.+378    	; 0x243a <writeInt+0x2be>
    22c0:	64 30       	cpi	r22, 0x04	; 4
    22c2:	08 f4       	brcc	.+2      	; 0x22c6 <writeInt+0x14a>
    22c4:	8b c0       	rjmp	.+278    	; 0x23dc <writeInt+0x260>
    22c6:	65 30       	cpi	r22, 0x05	; 5
    22c8:	09 f0       	breq	.+2      	; 0x22cc <writeInt+0x150>
    22ca:	11 c1       	rjmp	.+546    	; 0x24ee <writeInt+0x372>
    22cc:	e2 c0       	rjmp	.+452    	; 0x2492 <writeInt+0x316>
		{
			case 0:
			{
				LCDDR0 = (LCDDR0 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    22ce:	80 91 ec 00 	lds	r24, 0x00EC
    22d2:	f5 01       	movw	r30, r10
    22d4:	20 81       	ld	r18, Z
    22d6:	31 81       	ldd	r19, Z+1	; 0x01
    22d8:	93 2f       	mov	r25, r19
    22da:	92 95       	swap	r25
    22dc:	9f 70       	andi	r25, 0x0F	; 15
    22de:	80 7f       	andi	r24, 0xF0	; 240
    22e0:	89 2b       	or	r24, r25
    22e2:	80 93 ec 00 	sts	0x00EC, r24
				LCDDR5 = (LCDDR5 & 0xf0) | ((seg[a[j]]>>8)&0x000f);
    22e6:	40 91 f1 00 	lds	r20, 0x00F1
    22ea:	83 2f       	mov	r24, r19
    22ec:	99 27       	eor	r25, r25
    22ee:	87 fd       	sbrc	r24, 7
    22f0:	9a 95       	dec	r25
    22f2:	8f 70       	andi	r24, 0x0F	; 15
    22f4:	40 7f       	andi	r20, 0xF0	; 240
    22f6:	84 2b       	or	r24, r20
    22f8:	80 93 f1 00 	sts	0x00F1, r24
				LCDDR10 = (LCDDR10 & 0xf0) | ((seg[a[j]]>>4)&0x000f);
    22fc:	40 91 f6 00 	lds	r20, 0x00F6
    2300:	c9 01       	movw	r24, r18
    2302:	e4 e0       	ldi	r30, 0x04	; 4
    2304:	95 95       	asr	r25
    2306:	87 95       	ror	r24
    2308:	ea 95       	dec	r30
    230a:	e1 f7       	brne	.-8      	; 0x2304 <writeInt+0x188>
    230c:	8f 70       	andi	r24, 0x0F	; 15
    230e:	40 7f       	andi	r20, 0xF0	; 240
    2310:	84 2b       	or	r24, r20
    2312:	80 93 f6 00 	sts	0x00F6, r24
				LCDDR15 = (LCDDR15 & 0xf0) | (seg[a[j]]&0x000f);
    2316:	80 91 fb 00 	lds	r24, 0x00FB
    231a:	2f 70       	andi	r18, 0x0F	; 15
    231c:	80 7f       	andi	r24, 0xF0	; 240
    231e:	28 2b       	or	r18, r24
    2320:	20 93 fb 00 	sts	0x00FB, r18
    2324:	e4 c0       	rjmp	.+456    	; 0x24ee <writeInt+0x372>
				break;
			}
			case 1:
			{
				LCDDR0 = (LCDDR0 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2326:	20 91 ec 00 	lds	r18, 0x00EC
    232a:	f6 01       	movw	r30, r12
    232c:	40 81       	ld	r20, Z
    232e:	51 81       	ldd	r21, Z+1	; 0x01
    2330:	85 2f       	mov	r24, r21
    2332:	99 27       	eor	r25, r25
    2334:	87 fd       	sbrc	r24, 7
    2336:	9a 95       	dec	r25
    2338:	80 7f       	andi	r24, 0xF0	; 240
    233a:	2f 70       	andi	r18, 0x0F	; 15
    233c:	82 2b       	or	r24, r18
    233e:	80 93 ec 00 	sts	0x00EC, r24
				LCDDR5 = (LCDDR5 & 0x0f) | ((seg[a[j]]>>4)&0x00f0);
    2342:	20 91 f1 00 	lds	r18, 0x00F1
    2346:	ca 01       	movw	r24, r20
    2348:	34 e0       	ldi	r19, 0x04	; 4
    234a:	95 95       	asr	r25
    234c:	87 95       	ror	r24
    234e:	3a 95       	dec	r19
    2350:	e1 f7       	brne	.-8      	; 0x234a <writeInt+0x1ce>
    2352:	80 7f       	andi	r24, 0xF0	; 240
    2354:	2f 70       	andi	r18, 0x0F	; 15
    2356:	82 2b       	or	r24, r18
    2358:	80 93 f1 00 	sts	0x00F1, r24
				LCDDR10 = (LCDDR10 & 0x0f) | ((seg[a[j]])&0x00f0);
    235c:	80 91 f6 00 	lds	r24, 0x00F6
    2360:	94 2f       	mov	r25, r20
    2362:	90 7f       	andi	r25, 0xF0	; 240
    2364:	8f 70       	andi	r24, 0x0F	; 15
    2366:	98 2b       	or	r25, r24
    2368:	90 93 f6 00 	sts	0x00F6, r25
				LCDDR15 = (LCDDR15 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
    236c:	80 91 fb 00 	lds	r24, 0x00FB
    2370:	94 e0       	ldi	r25, 0x04	; 4
    2372:	44 0f       	add	r20, r20
    2374:	55 1f       	adc	r21, r21
    2376:	9a 95       	dec	r25
    2378:	e1 f7       	brne	.-8      	; 0x2372 <writeInt+0x1f6>
    237a:	8f 70       	andi	r24, 0x0F	; 15
    237c:	84 2b       	or	r24, r20
    237e:	80 93 fb 00 	sts	0x00FB, r24
    2382:	b5 c0       	rjmp	.+362    	; 0x24ee <writeInt+0x372>
				break;
			}
			case 2:
			{
				LCDDR1 = (LCDDR1 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    2384:	80 91 ed 00 	lds	r24, 0x00ED
    2388:	f7 01       	movw	r30, r14
    238a:	20 81       	ld	r18, Z
    238c:	31 81       	ldd	r19, Z+1	; 0x01
    238e:	93 2f       	mov	r25, r19
    2390:	92 95       	swap	r25
    2392:	9f 70       	andi	r25, 0x0F	; 15
    2394:	80 7f       	andi	r24, 0xF0	; 240
    2396:	89 2b       	or	r24, r25
    2398:	80 93 ed 00 	sts	0x00ED, r24
				LCDDR6 = (LCDDR6 & 0xf0) | ((seg[a[j]]>>8)&0x000f);
    239c:	40 91 f2 00 	lds	r20, 0x00F2
    23a0:	83 2f       	mov	r24, r19
    23a2:	99 27       	eor	r25, r25
    23a4:	87 fd       	sbrc	r24, 7
    23a6:	9a 95       	dec	r25
    23a8:	8f 70       	andi	r24, 0x0F	; 15
    23aa:	40 7f       	andi	r20, 0xF0	; 240
    23ac:	84 2b       	or	r24, r20
    23ae:	80 93 f2 00 	sts	0x00F2, r24
				LCDDR11 = (LCDDR11 & 0xf0) | ((seg[a[j]]>>4)&0x000f);
    23b2:	40 91 f7 00 	lds	r20, 0x00F7
    23b6:	c9 01       	movw	r24, r18
    23b8:	e4 e0       	ldi	r30, 0x04	; 4
    23ba:	95 95       	asr	r25
    23bc:	87 95       	ror	r24
    23be:	ea 95       	dec	r30
    23c0:	e1 f7       	brne	.-8      	; 0x23ba <writeInt+0x23e>
    23c2:	8f 70       	andi	r24, 0x0F	; 15
    23c4:	40 7f       	andi	r20, 0xF0	; 240
    23c6:	84 2b       	or	r24, r20
    23c8:	80 93 f7 00 	sts	0x00F7, r24
				LCDDR16 = (LCDDR16 & 0xf0) | (seg[a[j]]&0x000f);
    23cc:	80 91 fc 00 	lds	r24, 0x00FC
    23d0:	2f 70       	andi	r18, 0x0F	; 15
    23d2:	80 7f       	andi	r24, 0xF0	; 240
    23d4:	28 2b       	or	r18, r24
    23d6:	20 93 fc 00 	sts	0x00FC, r18
    23da:	89 c0       	rjmp	.+274    	; 0x24ee <writeInt+0x372>
				break;
			}
			case 3:
			{
				LCDDR1 = (LCDDR1 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    23dc:	20 91 ed 00 	lds	r18, 0x00ED
    23e0:	f8 01       	movw	r30, r16
    23e2:	40 81       	ld	r20, Z
    23e4:	51 81       	ldd	r21, Z+1	; 0x01
    23e6:	85 2f       	mov	r24, r21
    23e8:	99 27       	eor	r25, r25
    23ea:	87 fd       	sbrc	r24, 7
    23ec:	9a 95       	dec	r25
    23ee:	80 7f       	andi	r24, 0xF0	; 240
    23f0:	2f 70       	andi	r18, 0x0F	; 15
    23f2:	82 2b       	or	r24, r18
    23f4:	80 93 ed 00 	sts	0x00ED, r24
				LCDDR6 = (LCDDR6 & 0x0f) | ((seg[a[j]]>>4)&0x00f0);
    23f8:	20 91 f2 00 	lds	r18, 0x00F2
    23fc:	ca 01       	movw	r24, r20
    23fe:	34 e0       	ldi	r19, 0x04	; 4
    2400:	95 95       	asr	r25
    2402:	87 95       	ror	r24
    2404:	3a 95       	dec	r19
    2406:	e1 f7       	brne	.-8      	; 0x2400 <writeInt+0x284>
    2408:	80 7f       	andi	r24, 0xF0	; 240
    240a:	2f 70       	andi	r18, 0x0F	; 15
    240c:	82 2b       	or	r24, r18
    240e:	80 93 f2 00 	sts	0x00F2, r24
				LCDDR11 = (LCDDR11 & 0x0f) | ((seg[a[j]])&0x00f0);
    2412:	80 91 f7 00 	lds	r24, 0x00F7
    2416:	94 2f       	mov	r25, r20
    2418:	90 7f       	andi	r25, 0xF0	; 240
    241a:	8f 70       	andi	r24, 0x0F	; 15
    241c:	98 2b       	or	r25, r24
    241e:	90 93 f7 00 	sts	0x00F7, r25
				LCDDR16 = (LCDDR16 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
    2422:	80 91 fc 00 	lds	r24, 0x00FC
    2426:	94 e0       	ldi	r25, 0x04	; 4
    2428:	44 0f       	add	r20, r20
    242a:	55 1f       	adc	r21, r21
    242c:	9a 95       	dec	r25
    242e:	e1 f7       	brne	.-8      	; 0x2428 <writeInt+0x2ac>
    2430:	8f 70       	andi	r24, 0x0F	; 15
    2432:	84 2b       	or	r24, r20
    2434:	80 93 fc 00 	sts	0x00FC, r24
    2438:	5a c0       	rjmp	.+180    	; 0x24ee <writeInt+0x372>
				break;
			}
			case 4:
			{
				LCDDR2 = (LCDDR2 & 0xf0) | ((seg[a[j]]>>12)&0x000f);
    243a:	80 91 ee 00 	lds	r24, 0x00EE
    243e:	2d 91       	ld	r18, X+
    2440:	3c 91       	ld	r19, X
    2442:	11 97       	sbiw	r26, 0x01	; 1
    2444:	93 2f       	mov	r25, r19
    2446:	92 95       	swap	r25
    2448:	9f 70       	andi	r25, 0x0F	; 15
    244a:	80 7f       	andi	r24, 0xF0	; 240
    244c:	89 2b       	or	r24, r25
    244e:	80 93 ee 00 	sts	0x00EE, r24
				LCDDR7 = (LCDDR7 & 0xf0) | ((seg[a[j]]>>8)&0x000f);
    2452:	40 91 f3 00 	lds	r20, 0x00F3
    2456:	83 2f       	mov	r24, r19
    2458:	99 27       	eor	r25, r25
    245a:	87 fd       	sbrc	r24, 7
    245c:	9a 95       	dec	r25
    245e:	8f 70       	andi	r24, 0x0F	; 15
    2460:	40 7f       	andi	r20, 0xF0	; 240
    2462:	84 2b       	or	r24, r20
    2464:	80 93 f3 00 	sts	0x00F3, r24
				LCDDR12 = (LCDDR12 & 0xf0) | ((seg[a[j]]>>4)&0x000f);
    2468:	40 91 f8 00 	lds	r20, 0x00F8
    246c:	c9 01       	movw	r24, r18
    246e:	e4 e0       	ldi	r30, 0x04	; 4
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	ea 95       	dec	r30
    2476:	e1 f7       	brne	.-8      	; 0x2470 <writeInt+0x2f4>
    2478:	8f 70       	andi	r24, 0x0F	; 15
    247a:	40 7f       	andi	r20, 0xF0	; 240
    247c:	84 2b       	or	r24, r20
    247e:	80 93 f8 00 	sts	0x00F8, r24
				LCDDR17 = (LCDDR17 & 0xf0) | (seg[a[j]]&0x000f);
    2482:	80 91 fd 00 	lds	r24, 0x00FD
    2486:	2f 70       	andi	r18, 0x0F	; 15
    2488:	80 7f       	andi	r24, 0xF0	; 240
    248a:	28 2b       	or	r18, r24
    248c:	20 93 fd 00 	sts	0x00FD, r18
    2490:	2e c0       	rjmp	.+92     	; 0x24ee <writeInt+0x372>
				break;
			}
			case 5:
			{
				LCDDR2 = (LCDDR2 & 0x0f) | ((seg[a[j]]>>8)&0x00f0);
    2492:	20 91 ee 00 	lds	r18, 0x00EE
    2496:	f3 01       	movw	r30, r6
    2498:	40 81       	ld	r20, Z
    249a:	51 81       	ldd	r21, Z+1	; 0x01
    249c:	85 2f       	mov	r24, r21
    249e:	99 27       	eor	r25, r25
    24a0:	87 fd       	sbrc	r24, 7
    24a2:	9a 95       	dec	r25
    24a4:	80 7f       	andi	r24, 0xF0	; 240
    24a6:	2f 70       	andi	r18, 0x0F	; 15
    24a8:	82 2b       	or	r24, r18
    24aa:	80 93 ee 00 	sts	0x00EE, r24
				LCDDR7 = (LCDDR7 & 0x0f) | ((seg[a[j]]>>4)&0x00f0);
    24ae:	20 91 f3 00 	lds	r18, 0x00F3
    24b2:	ca 01       	movw	r24, r20
    24b4:	34 e0       	ldi	r19, 0x04	; 4
    24b6:	95 95       	asr	r25
    24b8:	87 95       	ror	r24
    24ba:	3a 95       	dec	r19
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <writeInt+0x33a>
    24be:	80 7f       	andi	r24, 0xF0	; 240
    24c0:	2f 70       	andi	r18, 0x0F	; 15
    24c2:	82 2b       	or	r24, r18
    24c4:	80 93 f3 00 	sts	0x00F3, r24
				LCDDR12 = (LCDDR12 & 0x0f) | ((seg[a[j]])&0x00f0);
    24c8:	80 91 f8 00 	lds	r24, 0x00F8
    24cc:	94 2f       	mov	r25, r20
    24ce:	90 7f       	andi	r25, 0xF0	; 240
    24d0:	8f 70       	andi	r24, 0x0F	; 15
    24d2:	98 2b       	or	r25, r24
    24d4:	90 93 f8 00 	sts	0x00F8, r25
				LCDDR17 = (LCDDR17 & 0x0f) | ((seg[a[j]]<<4)&0x00f0);
    24d8:	80 91 fd 00 	lds	r24, 0x00FD
    24dc:	94 e0       	ldi	r25, 0x04	; 4
    24de:	44 0f       	add	r20, r20
    24e0:	55 1f       	adc	r21, r21
    24e2:	9a 95       	dec	r25
    24e4:	e1 f7       	brne	.-8      	; 0x24de <writeInt+0x362>
    24e6:	8f 70       	andi	r24, 0x0F	; 15
    24e8:	84 2b       	or	r24, r20
    24ea:	80 93 fd 00 	sts	0x00FD, r24
				break;
			}
			default:;
		}
		j--;
    24ee:	61 50       	subi	r22, 0x01	; 1
    24f0:	9a 94       	dec	r9
		a[j]=val%10;
		val/=10;
		j--;
	}
	j=5;
	while(n--)
    24f2:	99 20       	and	r9, r9
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <writeInt+0x37c>
    24f6:	d6 ce       	rjmp	.-596    	; 0x22a4 <writeInt+0x128>
			}
			default:;
		}
		j--;
	}
}
    24f8:	26 96       	adiw	r28, 0x06	; 6
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
    2514:	bf 90       	pop	r11
    2516:	af 90       	pop	r10
    2518:	9f 90       	pop	r9
    251a:	7f 90       	pop	r7
    251c:	6f 90       	pop	r6
    251e:	08 95       	ret

00002520 <segmentOn>:


int  segmentOn(LCD *self, int segment)
{
	switch(segment)
    2520:	65 30       	cpi	r22, 0x05	; 5
    2522:	71 05       	cpc	r23, r1
    2524:	c1 f1       	breq	.+112    	; 0x2596 <segmentOn+0x76>
    2526:	66 30       	cpi	r22, 0x06	; 6
    2528:	71 05       	cpc	r23, r1
    252a:	94 f4       	brge	.+36     	; 0x2550 <segmentOn+0x30>
    252c:	62 30       	cpi	r22, 0x02	; 2
    252e:	71 05       	cpc	r23, r1
    2530:	21 f1       	breq	.+72     	; 0x257a <segmentOn+0x5a>
    2532:	63 30       	cpi	r22, 0x03	; 3
    2534:	71 05       	cpc	r23, r1
    2536:	2c f4       	brge	.+10     	; 0x2542 <segmentOn+0x22>
    2538:	61 30       	cpi	r22, 0x01	; 1
    253a:	71 05       	cpc	r23, r1
    253c:	09 f0       	breq	.+2      	; 0x2540 <segmentOn+0x20>
    253e:	40 c0       	rjmp	.+128    	; 0x25c0 <segmentOn+0xa0>
    2540:	18 c0       	rjmp	.+48     	; 0x2572 <segmentOn+0x52>
    2542:	63 30       	cpi	r22, 0x03	; 3
    2544:	71 05       	cpc	r23, r1
    2546:	f9 f0       	breq	.+62     	; 0x2586 <segmentOn+0x66>
    2548:	64 30       	cpi	r22, 0x04	; 4
    254a:	71 05       	cpc	r23, r1
    254c:	c9 f5       	brne	.+114    	; 0x25c0 <segmentOn+0xa0>
    254e:	1f c0       	rjmp	.+62     	; 0x258e <segmentOn+0x6e>
    2550:	68 30       	cpi	r22, 0x08	; 8
    2552:	71 05       	cpc	r23, r1
    2554:	31 f1       	breq	.+76     	; 0x25a2 <segmentOn+0x82>
    2556:	69 30       	cpi	r22, 0x09	; 9
    2558:	71 05       	cpc	r23, r1
    255a:	24 f4       	brge	.+8      	; 0x2564 <segmentOn+0x44>
    255c:	67 30       	cpi	r22, 0x07	; 7
    255e:	71 05       	cpc	r23, r1
    2560:	79 f5       	brne	.+94     	; 0x25c0 <segmentOn+0xa0>
    2562:	1f c0       	rjmp	.+62     	; 0x25a2 <segmentOn+0x82>
    2564:	69 30       	cpi	r22, 0x09	; 9
    2566:	71 05       	cpc	r23, r1
    2568:	01 f1       	breq	.+64     	; 0x25aa <segmentOn+0x8a>
    256a:	6a 30       	cpi	r22, 0x0A	; 10
    256c:	71 05       	cpc	r23, r1
    256e:	41 f5       	brne	.+80     	; 0x25c0 <segmentOn+0xa0>
    2570:	22 c0       	rjmp	.+68     	; 0x25b6 <segmentOn+0x96>
	{
		case 1: LCDDR0|=0x04;break;
    2572:	80 91 ec 00 	lds	r24, 0x00EC
    2576:	84 60       	ori	r24, 0x04	; 4
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <segmentOn+0x60>
		case 2: LCDDR0|=0x40;break;
    257a:	80 91 ec 00 	lds	r24, 0x00EC
    257e:	80 64       	ori	r24, 0x40	; 64
    2580:	80 93 ec 00 	sts	0x00EC, r24
    2584:	08 95       	ret
		case 3: LCDDR3 =0x01;break;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	80 93 ef 00 	sts	0x00EF, r24
    258c:	08 95       	ret
		case 4: LCDDR1|=0x02;break;
    258e:	80 91 ed 00 	lds	r24, 0x00ED
    2592:	82 60       	ori	r24, 0x02	; 2
    2594:	03 c0       	rjmp	.+6      	; 0x259c <segmentOn+0x7c>
		case 5: LCDDR1|=0x20;break;
    2596:	80 91 ed 00 	lds	r24, 0x00ED
    259a:	80 62       	ori	r24, 0x20	; 32
    259c:	80 93 ed 00 	sts	0x00ED, r24
    25a0:	08 95       	ret
		case 7: LCDDR18=0x01;break;
		case 8: LCDDR18=0x01;break;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	80 93 fe 00 	sts	0x00FE, r24
    25a8:	08 95       	ret
		case 9: LCDDR2|=0x04;break;
    25aa:	80 91 ee 00 	lds	r24, 0x00EE
    25ae:	84 60       	ori	r24, 0x04	; 4
    25b0:	80 93 ee 00 	sts	0x00EE, r24
    25b4:	08 95       	ret
		case 10: LCDDR2|=0x40;break;
    25b6:	80 91 ee 00 	lds	r24, 0x00EE
    25ba:	80 64       	ori	r24, 0x40	; 64
    25bc:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    25c0:	08 95       	ret

000025c2 <segmentOff>:


int  segmentOff(LCD *self, int segment)
{
	switch(segment)
    25c2:	65 30       	cpi	r22, 0x05	; 5
    25c4:	71 05       	cpc	r23, r1
    25c6:	b1 f1       	breq	.+108    	; 0x2634 <segmentOff+0x72>
    25c8:	66 30       	cpi	r22, 0x06	; 6
    25ca:	71 05       	cpc	r23, r1
    25cc:	8c f4       	brge	.+34     	; 0x25f0 <segmentOff+0x2e>
    25ce:	62 30       	cpi	r22, 0x02	; 2
    25d0:	71 05       	cpc	r23, r1
    25d2:	19 f1       	breq	.+70     	; 0x261a <segmentOff+0x58>
    25d4:	63 30       	cpi	r22, 0x03	; 3
    25d6:	71 05       	cpc	r23, r1
    25d8:	24 f4       	brge	.+8      	; 0x25e2 <segmentOff+0x20>
    25da:	61 30       	cpi	r22, 0x01	; 1
    25dc:	71 05       	cpc	r23, r1
    25de:	f1 f5       	brne	.+124    	; 0x265c <segmentOff+0x9a>
    25e0:	18 c0       	rjmp	.+48     	; 0x2612 <segmentOff+0x50>
    25e2:	63 30       	cpi	r22, 0x03	; 3
    25e4:	71 05       	cpc	r23, r1
    25e6:	f9 f0       	breq	.+62     	; 0x2626 <segmentOff+0x64>
    25e8:	64 30       	cpi	r22, 0x04	; 4
    25ea:	71 05       	cpc	r23, r1
    25ec:	b9 f5       	brne	.+110    	; 0x265c <segmentOff+0x9a>
    25ee:	1e c0       	rjmp	.+60     	; 0x262c <segmentOff+0x6a>
    25f0:	68 30       	cpi	r22, 0x08	; 8
    25f2:	71 05       	cpc	r23, r1
    25f4:	29 f1       	breq	.+74     	; 0x2640 <segmentOff+0x7e>
    25f6:	69 30       	cpi	r22, 0x09	; 9
    25f8:	71 05       	cpc	r23, r1
    25fa:	24 f4       	brge	.+8      	; 0x2604 <segmentOff+0x42>
    25fc:	67 30       	cpi	r22, 0x07	; 7
    25fe:	71 05       	cpc	r23, r1
    2600:	69 f5       	brne	.+90     	; 0x265c <segmentOff+0x9a>
    2602:	1e c0       	rjmp	.+60     	; 0x2640 <segmentOff+0x7e>
    2604:	69 30       	cpi	r22, 0x09	; 9
    2606:	71 05       	cpc	r23, r1
    2608:	f1 f0       	breq	.+60     	; 0x2646 <segmentOff+0x84>
    260a:	6a 30       	cpi	r22, 0x0A	; 10
    260c:	71 05       	cpc	r23, r1
    260e:	31 f5       	brne	.+76     	; 0x265c <segmentOff+0x9a>
    2610:	20 c0       	rjmp	.+64     	; 0x2652 <segmentOff+0x90>
	{
		case 1: LCDDR0&=~0x04;break;
    2612:	80 91 ec 00 	lds	r24, 0x00EC
    2616:	8b 7f       	andi	r24, 0xFB	; 251
    2618:	03 c0       	rjmp	.+6      	; 0x2620 <segmentOff+0x5e>
		case 2: LCDDR0&=~0x40;break;
    261a:	80 91 ec 00 	lds	r24, 0x00EC
    261e:	8f 7b       	andi	r24, 0xBF	; 191
    2620:	80 93 ec 00 	sts	0x00EC, r24
    2624:	08 95       	ret
		case 3: LCDDR3 = 0x00;break;
    2626:	10 92 ef 00 	sts	0x00EF, r1
    262a:	08 95       	ret
		case 4: LCDDR1&=~0x02;break;
    262c:	80 91 ed 00 	lds	r24, 0x00ED
    2630:	8d 7f       	andi	r24, 0xFD	; 253
    2632:	03 c0       	rjmp	.+6      	; 0x263a <segmentOff+0x78>
		case 5: LCDDR1&=~0x20;break;
    2634:	80 91 ed 00 	lds	r24, 0x00ED
    2638:	8f 7d       	andi	r24, 0xDF	; 223
    263a:	80 93 ed 00 	sts	0x00ED, r24
    263e:	08 95       	ret
		case 7: LCDDR18= 0x00;break;
		case 8: LCDDR18= 0x00;break;
    2640:	10 92 fe 00 	sts	0x00FE, r1
    2644:	08 95       	ret
		case 9: LCDDR2&=~0x04;break;
    2646:	80 91 ee 00 	lds	r24, 0x00EE
    264a:	8b 7f       	andi	r24, 0xFB	; 251
    264c:	80 93 ee 00 	sts	0x00EE, r24
    2650:	08 95       	ret
		case 10: LCDDR2&=~0x40;break;
    2652:	80 91 ee 00 	lds	r24, 0x00EE
    2656:	8f 7b       	andi	r24, 0xBF	; 191
    2658:	80 93 ee 00 	sts	0x00EE, r24
	}
}
    265c:	08 95       	ret

0000265e <is_prime>:
#include "primes.h"
#include "blinker.h"
#include <math.h>

int is_prime(int i)
{
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	ec 01       	movw	r28, r24
	int n;
	int sqrt_value;
	if(i==0||i==1) return 0;
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	91 05       	cpc	r25, r1
    2668:	20 f1       	brcs	.+72     	; 0x26b2 <is_prime+0x54>
	else if (i==2) return 1;
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	91 05       	cpc	r25, r1
    266e:	21 f1       	breq	.+72     	; 0x26b8 <is_prime+0x5a>
	else
	{
		sqrt_value=sqrt(i)+1;
    2670:	be 01       	movw	r22, r28
    2672:	88 27       	eor	r24, r24
    2674:	77 fd       	sbrc	r23, 7
    2676:	80 95       	com	r24
    2678:	98 2f       	mov	r25, r24
    267a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__floatsisf>
    267e:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <sqrt>
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e8       	ldi	r20, 0x80	; 128
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__addsf3>
    268e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__fixsfsi>
    2692:	fb 01       	movw	r30, r22
    2694:	22 e0       	ldi	r18, 0x02	; 2
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	08 c0       	rjmp	.+16     	; 0x26aa <is_prime+0x4c>
		for(n=2;n<sqrt_value;n++)
		{
			if(i%n==0) return 0;
    269a:	ce 01       	movw	r24, r28
    269c:	b9 01       	movw	r22, r18
    269e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    26a2:	89 2b       	or	r24, r25
    26a4:	31 f0       	breq	.+12     	; 0x26b2 <is_prime+0x54>
	if(i==0||i==1) return 0;
	else if (i==2) return 1;
	else
	{
		sqrt_value=sqrt(i)+1;
		for(n=2;n<sqrt_value;n++)
    26a6:	2f 5f       	subi	r18, 0xFF	; 255
    26a8:	3f 4f       	sbci	r19, 0xFF	; 255
    26aa:	2e 17       	cp	r18, r30
    26ac:	3f 07       	cpc	r19, r31
    26ae:	ac f3       	brlt	.-22     	; 0x269a <is_prime+0x3c>
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <is_prime+0x5a>
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <is_prime+0x5e>
    26b8:	21 e0       	ldi	r18, 0x01	; 1
    26ba:	30 e0       	ldi	r19, 0x00	; 0
			if(i%n==0) return 0;
		}
		return 1;
	}
	
}
    26bc:	c9 01       	movw	r24, r18
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <primes>:


int primes(PrimeCalculator *self, int x)
{
    26c4:	cf 92       	push	r12
    26c6:	df 92       	push	r13
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	ec 01       	movw	r28, r24
    26d6:	8b 01       	movw	r16, r22
    26d8:	09 c0       	rjmp	.+18     	; 0x26ec <primes+0x28>
	//while(1)
	{
		while(!(is_prime(x)))
		{
			if(x==32767) x=0;
    26da:	8f e7       	ldi	r24, 0x7F	; 127
    26dc:	0f 3f       	cpi	r16, 0xFF	; 255
    26de:	18 07       	cpc	r17, r24
    26e0:	19 f4       	brne	.+6      	; 0x26e8 <primes+0x24>
    26e2:	00 e0       	ldi	r16, 0x00	; 0
    26e4:	10 e0       	ldi	r17, 0x00	; 0
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <primes+0x28>
			else x++;
    26e8:	0f 5f       	subi	r16, 0xFF	; 255
    26ea:	1f 4f       	sbci	r17, 0xFF	; 255

int primes(PrimeCalculator *self, int x)
{
	//while(1)
	{
		while(!(is_prime(x)))
    26ec:	c8 01       	movw	r24, r16
    26ee:	0e 94 2f 13 	call	0x265e	; 0x265e <is_prime>
    26f2:	89 2b       	or	r24, r25
    26f4:	91 f3       	breq	.-28     	; 0x26da <primes+0x16>
		{
			if(x==32767) x=0;
			else x++;
		}
		SYNC(self->lcd,writeInt,x);
    26f6:	a8 01       	movw	r20, r16
    26f8:	6e eb       	ldi	r22, 0xBE	; 190
    26fa:	70 e1       	ldi	r23, 0x10	; 16
    26fc:	8c 81       	ldd	r24, Y+4	; 0x04
    26fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2700:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <sync>
		x++;
	}
	AFTER(MSEC(100),self,primes,x++);
    2704:	0f 5f       	subi	r16, 0xFF	; 255
    2706:	1f 4f       	sbci	r17, 0xFF	; 255
    2708:	68 01       	movw	r12, r16
    270a:	82 e6       	ldi	r24, 0x62	; 98
    270c:	e8 2e       	mov	r14, r24
    270e:	83 e1       	ldi	r24, 0x13	; 19
    2710:	f8 2e       	mov	r15, r24
    2712:	8e 01       	movw	r16, r28
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	65 e3       	ldi	r22, 0x35	; 53
    271e:	7c e0       	ldi	r23, 0x0C	; 12
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	ff 90       	pop	r15
    2732:	ef 90       	pop	r14
    2734:	df 90       	pop	r13
    2736:	cf 90       	pop	r12
    2738:	08 95       	ret

0000273a <setPeriod>:
	ASYNC(self,Blinking,0);
}


int setPeriod(Blinker *self, int period)
{
    273a:	fc 01       	movw	r30, r24
    273c:	80 85       	ldd	r24, Z+8	; 0x08
    273e:	91 85       	ldd	r25, Z+9	; 0x09
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    2748:	cb 01       	movw	r24, r22
	return self->period/2;
}
    274a:	08 95       	ret

0000274c <stopBlinking>:
	ASYNC(self,Blinking,0);
}


int stopBlinking(Blinker *self, int nothing)
{
    274c:	cf 92       	push	r12
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
	flag_blinking=0;
    2758:	10 92 b7 04 	sts	0x04B7, r1
	ASYNC(self,Blinking,0);
    275c:	cc 24       	eor	r12, r12
    275e:	dd 24       	eor	r13, r13
    2760:	27 ee       	ldi	r18, 0xE7	; 231
    2762:	e2 2e       	mov	r14, r18
    2764:	23 e1       	ldi	r18, 0x13	; 19
    2766:	f2 2e       	mov	r15, r18
    2768:	8c 01       	movw	r16, r24
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	50 e0       	ldi	r21, 0x00	; 0
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
}
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	cf 90       	pop	r12
    278a:	08 95       	ret

0000278c <startBlinking>:
	}
	
}

int startBlinking(Blinker *self, int nothing)
{
    278c:	cf 92       	push	r12
    278e:	df 92       	push	r13
    2790:	ef 92       	push	r14
    2792:	ff 92       	push	r15
    2794:	0f 93       	push	r16
    2796:	1f 93       	push	r17
	flag_blinking=1;
    2798:	21 e0       	ldi	r18, 0x01	; 1
    279a:	20 93 b7 04 	sts	0x04B7, r18
	ASYNC(self,Blinking,0);
    279e:	cc 24       	eor	r12, r12
    27a0:	dd 24       	eor	r13, r13
    27a2:	37 ee       	ldi	r19, 0xE7	; 231
    27a4:	e3 2e       	mov	r14, r19
    27a6:	33 e1       	ldi	r19, 0x13	; 19
    27a8:	f3 2e       	mov	r15, r19
    27aa:	8c 01       	movw	r16, r24
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
}
    27c0:	1f 91       	pop	r17
    27c2:	0f 91       	pop	r16
    27c4:	ff 90       	pop	r15
    27c6:	ef 90       	pop	r14
    27c8:	df 90       	pop	r13
    27ca:	cf 90       	pop	r12
    27cc:	08 95       	ret

000027ce <Blinking>:
#include "blinker.h"

char flag_blinking;

int Blinking(Blinker *self, int nothing)
{
    27ce:	af 92       	push	r10
    27d0:	bf 92       	push	r11
    27d2:	cf 92       	push	r12
    27d4:	df 92       	push	r13
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	ec 01       	movw	r28, r24
    27e4:	5b 01       	movw	r10, r22
	if (flag_blinking)
    27e6:	80 91 b7 04 	lds	r24, 0x04B7
    27ea:	88 23       	and	r24, r24
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <Blinking+0x22>
    27ee:	41 c0       	rjmp	.+130    	; 0x2872 <Blinking+0xa4>
	{
		AFTER(MSEC(setPeriod(self,0)),self,Blinking,1-nothing);
    27f0:	01 e0       	ldi	r16, 0x01	; 1
    27f2:	10 e0       	ldi	r17, 0x00	; 0
    27f4:	06 1b       	sub	r16, r22
    27f6:	17 0b       	sbc	r17, r23
    27f8:	88 85       	ldd	r24, Y+8	; 0x08
    27fa:	99 85       	ldd	r25, Y+9	; 0x09
    27fc:	62 e0       	ldi	r22, 0x02	; 2
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    2804:	88 27       	eor	r24, r24
    2806:	77 fd       	sbrc	r23, 7
    2808:	80 95       	com	r24
    280a:	98 2f       	mov	r25, r24
    280c:	2d e7       	ldi	r18, 0x7D	; 125
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__mulsi3>
    2818:	24 e0       	ldi	r18, 0x04	; 4
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodsi4>
    2824:	ca 01       	movw	r24, r20
    2826:	b9 01       	movw	r22, r18
    2828:	68 01       	movw	r12, r16
    282a:	e7 ee       	ldi	r30, 0xE7	; 231
    282c:	ee 2e       	mov	r14, r30
    282e:	e3 e1       	ldi	r30, 0x13	; 19
    2830:	fe 2e       	mov	r15, r30
    2832:	8e 01       	movw	r16, r28
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
    2840:	ce 80       	ldd	r12, Y+6	; 0x06
    2842:	df 80       	ldd	r13, Y+7	; 0x07
    2844:	0c 81       	ldd	r16, Y+4	; 0x04
    2846:	1d 81       	ldd	r17, Y+5	; 0x05
		if(nothing)
    2848:	ab 28       	or	r10, r11
    284a:	29 f0       	breq	.+10     	; 0x2856 <Blinking+0x88>
		{
			ASYNC(self->lcd,segmentOff,self->segment);
    284c:	51 ee       	ldi	r21, 0xE1	; 225
    284e:	e5 2e       	mov	r14, r21
    2850:	52 e1       	ldi	r21, 0x12	; 18
    2852:	f5 2e       	mov	r15, r21
    2854:	04 c0       	rjmp	.+8      	; 0x285e <Blinking+0x90>
		}
		else
		{
			ASYNC(self->lcd,segmentOn,self->segment);
    2856:	40 e9       	ldi	r20, 0x90	; 144
    2858:	e4 2e       	mov	r14, r20
    285a:	42 e1       	ldi	r20, 0x12	; 18
    285c:	f4 2e       	mov	r15, r20
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
		}
	}
	
}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	ff 90       	pop	r15
    287c:	ef 90       	pop	r14
    287e:	df 90       	pop	r13
    2880:	cf 90       	pop	r12
    2882:	bf 90       	pop	r11
    2884:	af 90       	pop	r10
    2886:	08 95       	ret

00002888 <PiezoOn>:
#include "piezo.h"
#include <avr/io.h>

int  PiezoOn(Piezo *self, int nothing)
{
	PORTB&=~(1<<5);
    2888:	2d 98       	cbi	0x05, 5	; 5
}
    288a:	08 95       	ret

0000288c <PiezoOff>:


int  PiezoOff(Piezo *self, int nothing)
{
	PORTB|=1<<5;
    288c:	2d 9a       	sbi	0x05, 5	; 5
    288e:	08 95       	ret

00002890 <detect>:
#include <avr/io.h>


int detect(Joystick *self,int sig)
{
	if(PINB&(1<<7))
    2890:	1f 9b       	sbis	0x03, 7	; 3
    2892:	06 c0       	rjmp	.+12     	; 0x28a0 <detect+0x10>
	{
		LCDDR3=0x01;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	80 93 ef 00 	sts	0x00EF, r24
		LCDDR18=0x00;
    289a:	10 92 fe 00 	sts	0x00FE, r1
    289e:	08 95       	ret
	} 
	else
	{
		LCDDR3=0x00;
    28a0:	10 92 ef 00 	sts	0x00EF, r1
		LCDDR18=0x01;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	80 93 fe 00 	sts	0x00FE, r24
	}
}
    28aa:	08 95       	ret

000028ac <stop_playing>:
}


int stop_playing(Tone *self, int nothing)
{
	flag_play=0;
    28ac:	10 92 b8 04 	sts	0x04B8, r1
	//ASYNC(self,playing,0);
}
    28b0:	08 95       	ret

000028b2 <setFrequency>:


int  setFrequency(Tone *self, int frequency)
{
	self->frequency = frequency;
    28b2:	fc 01       	movw	r30, r24
    28b4:	77 83       	std	Z+7, r23	; 0x07
    28b6:	66 83       	std	Z+6, r22	; 0x06
	//ASYNC(self,playing,0);
}
    28b8:	08 95       	ret

000028ba <start_playing>:
	}
}


int start_playing(Tone *self, int nothing)
{
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
	flag_play=1;
    28c6:	21 e0       	ldi	r18, 0x01	; 1
    28c8:	20 93 b8 04 	sts	0x04B8, r18
	ASYNC(self,playing,0);
    28cc:	cc 24       	eor	r12, r12
    28ce:	dd 24       	eor	r13, r13
    28d0:	2e e7       	ldi	r18, 0x7E	; 126
    28d2:	e2 2e       	mov	r14, r18
    28d4:	24 e1       	ldi	r18, 0x14	; 20
    28d6:	f2 2e       	mov	r15, r18
    28d8:	8c 01       	movw	r16, r24
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
}
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	ff 90       	pop	r15
    28f4:	ef 90       	pop	r14
    28f6:	df 90       	pop	r13
    28f8:	cf 90       	pop	r12
    28fa:	08 95       	ret

000028fc <playing>:
#include <avr/io.h>

char flag_play;

int  playing(Tone *self, int nothing)
{
    28fc:	af 92       	push	r10
    28fe:	bf 92       	push	r11
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	ec 01       	movw	r28, r24
    2912:	5b 01       	movw	r10, r22
	if(flag_play)
    2914:	80 91 b8 04 	lds	r24, 0x04B8
    2918:	88 23       	and	r24, r24
    291a:	a9 f1       	breq	.+106    	; 0x2986 <playing+0x8a>
	{
		AFTER(RESOLUTION(15625/self->frequency),self,playing,1-nothing);
    291c:	21 e0       	ldi	r18, 0x01	; 1
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	26 1b       	sub	r18, r22
    2922:	37 0b       	sbc	r19, r23
    2924:	6e 81       	ldd	r22, Y+6	; 0x06
    2926:	7f 81       	ldd	r23, Y+7	; 0x07
    2928:	89 e0       	ldi	r24, 0x09	; 9
    292a:	9d e3       	ldi	r25, 0x3D	; 61
    292c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__divmodhi4>
    2930:	88 27       	eor	r24, r24
    2932:	77 fd       	sbrc	r23, 7
    2934:	80 95       	com	r24
    2936:	98 2f       	mov	r25, r24
    2938:	69 01       	movw	r12, r18
    293a:	5e e7       	ldi	r21, 0x7E	; 126
    293c:	e5 2e       	mov	r14, r21
    293e:	54 e1       	ldi	r21, 0x14	; 20
    2940:	f5 2e       	mov	r15, r21
    2942:	8e 01       	movw	r16, r28
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	50 e0       	ldi	r21, 0x00	; 0
    294c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
    2950:	0c 81       	ldd	r16, Y+4	; 0x04
    2952:	1d 81       	ldd	r17, Y+5	; 0x05
		if(nothing) ASYNC(self->piezo,PiezoOff,0);
    2954:	ab 28       	or	r10, r11
    2956:	39 f0       	breq	.+14     	; 0x2966 <playing+0x6a>
    2958:	cc 24       	eor	r12, r12
    295a:	dd 24       	eor	r13, r13
    295c:	46 e4       	ldi	r20, 0x46	; 70
    295e:	e4 2e       	mov	r14, r20
    2960:	44 e1       	ldi	r20, 0x14	; 20
    2962:	f4 2e       	mov	r15, r20
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <playing+0x76>
		else ASYNC(self->piezo,PiezoOn,0);
    2966:	cc 24       	eor	r12, r12
    2968:	dd 24       	eor	r13, r13
    296a:	34 e4       	ldi	r19, 0x44	; 68
    296c:	e3 2e       	mov	r14, r19
    296e:	34 e1       	ldi	r19, 0x14	; 20
    2970:	f3 2e       	mov	r15, r19
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <async>
	}
}
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	df 90       	pop	r13
    2994:	cf 90       	pop	r12
    2996:	bf 90       	pop	r11
    2998:	af 90       	pop	r10
    299a:	08 95       	ret

0000299c <setjmp>:
    299c:	dc 01       	movw	r26, r24
    299e:	2d 92       	st	X+, r2
    29a0:	3d 92       	st	X+, r3
    29a2:	4d 92       	st	X+, r4
    29a4:	5d 92       	st	X+, r5
    29a6:	6d 92       	st	X+, r6
    29a8:	7d 92       	st	X+, r7
    29aa:	8d 92       	st	X+, r8
    29ac:	9d 92       	st	X+, r9
    29ae:	ad 92       	st	X+, r10
    29b0:	bd 92       	st	X+, r11
    29b2:	cd 92       	st	X+, r12
    29b4:	dd 92       	st	X+, r13
    29b6:	ed 92       	st	X+, r14
    29b8:	fd 92       	st	X+, r15
    29ba:	0d 93       	st	X+, r16
    29bc:	1d 93       	st	X+, r17
    29be:	cd 93       	st	X+, r28
    29c0:	dd 93       	st	X+, r29
    29c2:	ff 91       	pop	r31
    29c4:	ef 91       	pop	r30
    29c6:	8d b7       	in	r24, 0x3d	; 61
    29c8:	8d 93       	st	X+, r24
    29ca:	8e b7       	in	r24, 0x3e	; 62
    29cc:	8d 93       	st	X+, r24
    29ce:	8f b7       	in	r24, 0x3f	; 63
    29d0:	8d 93       	st	X+, r24
    29d2:	ed 93       	st	X+, r30
    29d4:	fd 93       	st	X+, r31
    29d6:	88 27       	eor	r24, r24
    29d8:	99 27       	eor	r25, r25
    29da:	09 94       	ijmp

000029dc <longjmp>:
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	81 30       	cpi	r24, 0x01	; 1
    29e2:	91 05       	cpc	r25, r1
    29e4:	81 1d       	adc	r24, r1
    29e6:	2d 90       	ld	r2, X+
    29e8:	3d 90       	ld	r3, X+
    29ea:	4d 90       	ld	r4, X+
    29ec:	5d 90       	ld	r5, X+
    29ee:	6d 90       	ld	r6, X+
    29f0:	7d 90       	ld	r7, X+
    29f2:	8d 90       	ld	r8, X+
    29f4:	9d 90       	ld	r9, X+
    29f6:	ad 90       	ld	r10, X+
    29f8:	bd 90       	ld	r11, X+
    29fa:	cd 90       	ld	r12, X+
    29fc:	dd 90       	ld	r13, X+
    29fe:	ed 90       	ld	r14, X+
    2a00:	fd 90       	ld	r15, X+
    2a02:	0d 91       	ld	r16, X+
    2a04:	1d 91       	ld	r17, X+
    2a06:	cd 91       	ld	r28, X+
    2a08:	dd 91       	ld	r29, X+
    2a0a:	ed 91       	ld	r30, X+
    2a0c:	fd 91       	ld	r31, X+
    2a0e:	0d 90       	ld	r0, X+
    2a10:	f8 94       	cli
    2a12:	fe bf       	out	0x3e, r31	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	ed bf       	out	0x3d, r30	; 61
    2a18:	ed 91       	ld	r30, X+
    2a1a:	fd 91       	ld	r31, X+
    2a1c:	09 94       	ijmp

00002a1e <__subsf3>:
    2a1e:	50 58       	subi	r21, 0x80	; 128

00002a20 <__addsf3>:
    2a20:	bb 27       	eor	r27, r27
    2a22:	aa 27       	eor	r26, r26
    2a24:	0e d0       	rcall	.+28     	; 0x2a42 <__addsf3x>
    2a26:	e5 c0       	rjmp	.+458    	; 0x2bf2 <__fp_round>
    2a28:	d6 d0       	rcall	.+428    	; 0x2bd6 <__fp_pscA>
    2a2a:	30 f0       	brcs	.+12     	; 0x2a38 <__addsf3+0x18>
    2a2c:	db d0       	rcall	.+438    	; 0x2be4 <__fp_pscB>
    2a2e:	20 f0       	brcs	.+8      	; 0x2a38 <__addsf3+0x18>
    2a30:	31 f4       	brne	.+12     	; 0x2a3e <__addsf3+0x1e>
    2a32:	9f 3f       	cpi	r25, 0xFF	; 255
    2a34:	11 f4       	brne	.+4      	; 0x2a3a <__addsf3+0x1a>
    2a36:	1e f4       	brtc	.+6      	; 0x2a3e <__addsf3+0x1e>
    2a38:	cb c0       	rjmp	.+406    	; 0x2bd0 <__fp_nan>
    2a3a:	0e f4       	brtc	.+2      	; 0x2a3e <__addsf3+0x1e>
    2a3c:	e0 95       	com	r30
    2a3e:	e7 fb       	bst	r30, 7
    2a40:	c1 c0       	rjmp	.+386    	; 0x2bc4 <__fp_inf>

00002a42 <__addsf3x>:
    2a42:	e9 2f       	mov	r30, r25
    2a44:	e7 d0       	rcall	.+462    	; 0x2c14 <__fp_split3>
    2a46:	80 f3       	brcs	.-32     	; 0x2a28 <__addsf3+0x8>
    2a48:	ba 17       	cp	r27, r26
    2a4a:	62 07       	cpc	r22, r18
    2a4c:	73 07       	cpc	r23, r19
    2a4e:	84 07       	cpc	r24, r20
    2a50:	95 07       	cpc	r25, r21
    2a52:	18 f0       	brcs	.+6      	; 0x2a5a <__addsf3x+0x18>
    2a54:	71 f4       	brne	.+28     	; 0x2a72 <__addsf3x+0x30>
    2a56:	9e f5       	brtc	.+102    	; 0x2abe <__addsf3x+0x7c>
    2a58:	ff c0       	rjmp	.+510    	; 0x2c58 <__fp_zero>
    2a5a:	0e f4       	brtc	.+2      	; 0x2a5e <__addsf3x+0x1c>
    2a5c:	e0 95       	com	r30
    2a5e:	0b 2e       	mov	r0, r27
    2a60:	ba 2f       	mov	r27, r26
    2a62:	a0 2d       	mov	r26, r0
    2a64:	0b 01       	movw	r0, r22
    2a66:	b9 01       	movw	r22, r18
    2a68:	90 01       	movw	r18, r0
    2a6a:	0c 01       	movw	r0, r24
    2a6c:	ca 01       	movw	r24, r20
    2a6e:	a0 01       	movw	r20, r0
    2a70:	11 24       	eor	r1, r1
    2a72:	ff 27       	eor	r31, r31
    2a74:	59 1b       	sub	r21, r25
    2a76:	99 f0       	breq	.+38     	; 0x2a9e <__addsf3x+0x5c>
    2a78:	59 3f       	cpi	r21, 0xF9	; 249
    2a7a:	50 f4       	brcc	.+20     	; 0x2a90 <__addsf3x+0x4e>
    2a7c:	50 3e       	cpi	r21, 0xE0	; 224
    2a7e:	68 f1       	brcs	.+90     	; 0x2ada <__addsf3x+0x98>
    2a80:	1a 16       	cp	r1, r26
    2a82:	f0 40       	sbci	r31, 0x00	; 0
    2a84:	a2 2f       	mov	r26, r18
    2a86:	23 2f       	mov	r18, r19
    2a88:	34 2f       	mov	r19, r20
    2a8a:	44 27       	eor	r20, r20
    2a8c:	58 5f       	subi	r21, 0xF8	; 248
    2a8e:	f3 cf       	rjmp	.-26     	; 0x2a76 <__addsf3x+0x34>
    2a90:	46 95       	lsr	r20
    2a92:	37 95       	ror	r19
    2a94:	27 95       	ror	r18
    2a96:	a7 95       	ror	r26
    2a98:	f0 40       	sbci	r31, 0x00	; 0
    2a9a:	53 95       	inc	r21
    2a9c:	c9 f7       	brne	.-14     	; 0x2a90 <__addsf3x+0x4e>
    2a9e:	7e f4       	brtc	.+30     	; 0x2abe <__addsf3x+0x7c>
    2aa0:	1f 16       	cp	r1, r31
    2aa2:	ba 0b       	sbc	r27, r26
    2aa4:	62 0b       	sbc	r22, r18
    2aa6:	73 0b       	sbc	r23, r19
    2aa8:	84 0b       	sbc	r24, r20
    2aaa:	ba f0       	brmi	.+46     	; 0x2ada <__addsf3x+0x98>
    2aac:	91 50       	subi	r25, 0x01	; 1
    2aae:	a1 f0       	breq	.+40     	; 0x2ad8 <__addsf3x+0x96>
    2ab0:	ff 0f       	add	r31, r31
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	66 1f       	adc	r22, r22
    2ab6:	77 1f       	adc	r23, r23
    2ab8:	88 1f       	adc	r24, r24
    2aba:	c2 f7       	brpl	.-16     	; 0x2aac <__addsf3x+0x6a>
    2abc:	0e c0       	rjmp	.+28     	; 0x2ada <__addsf3x+0x98>
    2abe:	ba 0f       	add	r27, r26
    2ac0:	62 1f       	adc	r22, r18
    2ac2:	73 1f       	adc	r23, r19
    2ac4:	84 1f       	adc	r24, r20
    2ac6:	48 f4       	brcc	.+18     	; 0x2ada <__addsf3x+0x98>
    2ac8:	87 95       	ror	r24
    2aca:	77 95       	ror	r23
    2acc:	67 95       	ror	r22
    2ace:	b7 95       	ror	r27
    2ad0:	f7 95       	ror	r31
    2ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <__addsf3x+0x96>
    2ad6:	b3 cf       	rjmp	.-154    	; 0x2a3e <__addsf3+0x1e>
    2ad8:	93 95       	inc	r25
    2ada:	88 0f       	add	r24, r24
    2adc:	08 f0       	brcs	.+2      	; 0x2ae0 <__addsf3x+0x9e>
    2ade:	99 27       	eor	r25, r25
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	97 95       	ror	r25
    2ae4:	87 95       	ror	r24
    2ae6:	08 95       	ret

00002ae8 <__fixsfsi>:
    2ae8:	04 d0       	rcall	.+8      	; 0x2af2 <__fixunssfsi>
    2aea:	68 94       	set
    2aec:	b1 11       	cpse	r27, r1
    2aee:	b5 c0       	rjmp	.+362    	; 0x2c5a <__fp_szero>
    2af0:	08 95       	ret

00002af2 <__fixunssfsi>:
    2af2:	98 d0       	rcall	.+304    	; 0x2c24 <__fp_splitA>
    2af4:	88 f0       	brcs	.+34     	; 0x2b18 <__fixunssfsi+0x26>
    2af6:	9f 57       	subi	r25, 0x7F	; 127
    2af8:	90 f0       	brcs	.+36     	; 0x2b1e <__fixunssfsi+0x2c>
    2afa:	b9 2f       	mov	r27, r25
    2afc:	99 27       	eor	r25, r25
    2afe:	b7 51       	subi	r27, 0x17	; 23
    2b00:	a0 f0       	brcs	.+40     	; 0x2b2a <__fixunssfsi+0x38>
    2b02:	d1 f0       	breq	.+52     	; 0x2b38 <__fixunssfsi+0x46>
    2b04:	66 0f       	add	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	88 1f       	adc	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	1a f0       	brmi	.+6      	; 0x2b14 <__fixunssfsi+0x22>
    2b0e:	ba 95       	dec	r27
    2b10:	c9 f7       	brne	.-14     	; 0x2b04 <__fixunssfsi+0x12>
    2b12:	12 c0       	rjmp	.+36     	; 0x2b38 <__fixunssfsi+0x46>
    2b14:	b1 30       	cpi	r27, 0x01	; 1
    2b16:	81 f0       	breq	.+32     	; 0x2b38 <__fixunssfsi+0x46>
    2b18:	9f d0       	rcall	.+318    	; 0x2c58 <__fp_zero>
    2b1a:	b1 e0       	ldi	r27, 0x01	; 1
    2b1c:	08 95       	ret
    2b1e:	9c c0       	rjmp	.+312    	; 0x2c58 <__fp_zero>
    2b20:	67 2f       	mov	r22, r23
    2b22:	78 2f       	mov	r23, r24
    2b24:	88 27       	eor	r24, r24
    2b26:	b8 5f       	subi	r27, 0xF8	; 248
    2b28:	39 f0       	breq	.+14     	; 0x2b38 <__fixunssfsi+0x46>
    2b2a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b2c:	cc f3       	brlt	.-14     	; 0x2b20 <__fixunssfsi+0x2e>
    2b2e:	86 95       	lsr	r24
    2b30:	77 95       	ror	r23
    2b32:	67 95       	ror	r22
    2b34:	b3 95       	inc	r27
    2b36:	d9 f7       	brne	.-10     	; 0x2b2e <__fixunssfsi+0x3c>
    2b38:	3e f4       	brtc	.+14     	; 0x2b48 <__fixunssfsi+0x56>
    2b3a:	90 95       	com	r25
    2b3c:	80 95       	com	r24
    2b3e:	70 95       	com	r23
    2b40:	61 95       	neg	r22
    2b42:	7f 4f       	sbci	r23, 0xFF	; 255
    2b44:	8f 4f       	sbci	r24, 0xFF	; 255
    2b46:	9f 4f       	sbci	r25, 0xFF	; 255
    2b48:	08 95       	ret

00002b4a <__floatunsisf>:
    2b4a:	e8 94       	clt
    2b4c:	09 c0       	rjmp	.+18     	; 0x2b60 <__floatsisf+0x12>

00002b4e <__floatsisf>:
    2b4e:	97 fb       	bst	r25, 7
    2b50:	3e f4       	brtc	.+14     	; 0x2b60 <__floatsisf+0x12>
    2b52:	90 95       	com	r25
    2b54:	80 95       	com	r24
    2b56:	70 95       	com	r23
    2b58:	61 95       	neg	r22
    2b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	99 23       	and	r25, r25
    2b62:	a9 f0       	breq	.+42     	; 0x2b8e <__floatsisf+0x40>
    2b64:	f9 2f       	mov	r31, r25
    2b66:	96 e9       	ldi	r25, 0x96	; 150
    2b68:	bb 27       	eor	r27, r27
    2b6a:	93 95       	inc	r25
    2b6c:	f6 95       	lsr	r31
    2b6e:	87 95       	ror	r24
    2b70:	77 95       	ror	r23
    2b72:	67 95       	ror	r22
    2b74:	b7 95       	ror	r27
    2b76:	f1 11       	cpse	r31, r1
    2b78:	f8 cf       	rjmp	.-16     	; 0x2b6a <__floatsisf+0x1c>
    2b7a:	fa f4       	brpl	.+62     	; 0x2bba <__floatsisf+0x6c>
    2b7c:	bb 0f       	add	r27, r27
    2b7e:	11 f4       	brne	.+4      	; 0x2b84 <__floatsisf+0x36>
    2b80:	60 ff       	sbrs	r22, 0
    2b82:	1b c0       	rjmp	.+54     	; 0x2bba <__floatsisf+0x6c>
    2b84:	6f 5f       	subi	r22, 0xFF	; 255
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255
    2b88:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8c:	16 c0       	rjmp	.+44     	; 0x2bba <__floatsisf+0x6c>
    2b8e:	88 23       	and	r24, r24
    2b90:	11 f0       	breq	.+4      	; 0x2b96 <__floatsisf+0x48>
    2b92:	96 e9       	ldi	r25, 0x96	; 150
    2b94:	11 c0       	rjmp	.+34     	; 0x2bb8 <__floatsisf+0x6a>
    2b96:	77 23       	and	r23, r23
    2b98:	21 f0       	breq	.+8      	; 0x2ba2 <__floatsisf+0x54>
    2b9a:	9e e8       	ldi	r25, 0x8E	; 142
    2b9c:	87 2f       	mov	r24, r23
    2b9e:	76 2f       	mov	r23, r22
    2ba0:	05 c0       	rjmp	.+10     	; 0x2bac <__floatsisf+0x5e>
    2ba2:	66 23       	and	r22, r22
    2ba4:	71 f0       	breq	.+28     	; 0x2bc2 <__floatsisf+0x74>
    2ba6:	96 e8       	ldi	r25, 0x86	; 134
    2ba8:	86 2f       	mov	r24, r22
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	2a f0       	brmi	.+10     	; 0x2bba <__floatsisf+0x6c>
    2bb0:	9a 95       	dec	r25
    2bb2:	66 0f       	add	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	da f7       	brpl	.-10     	; 0x2bb0 <__floatsisf+0x62>
    2bba:	88 0f       	add	r24, r24
    2bbc:	96 95       	lsr	r25
    2bbe:	87 95       	ror	r24
    2bc0:	97 f9       	bld	r25, 7
    2bc2:	08 95       	ret

00002bc4 <__fp_inf>:
    2bc4:	97 f9       	bld	r25, 7
    2bc6:	9f 67       	ori	r25, 0x7F	; 127
    2bc8:	80 e8       	ldi	r24, 0x80	; 128
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	60 e0       	ldi	r22, 0x00	; 0
    2bce:	08 95       	ret

00002bd0 <__fp_nan>:
    2bd0:	9f ef       	ldi	r25, 0xFF	; 255
    2bd2:	80 ec       	ldi	r24, 0xC0	; 192
    2bd4:	08 95       	ret

00002bd6 <__fp_pscA>:
    2bd6:	00 24       	eor	r0, r0
    2bd8:	0a 94       	dec	r0
    2bda:	16 16       	cp	r1, r22
    2bdc:	17 06       	cpc	r1, r23
    2bde:	18 06       	cpc	r1, r24
    2be0:	09 06       	cpc	r0, r25
    2be2:	08 95       	ret

00002be4 <__fp_pscB>:
    2be4:	00 24       	eor	r0, r0
    2be6:	0a 94       	dec	r0
    2be8:	12 16       	cp	r1, r18
    2bea:	13 06       	cpc	r1, r19
    2bec:	14 06       	cpc	r1, r20
    2bee:	05 06       	cpc	r0, r21
    2bf0:	08 95       	ret

00002bf2 <__fp_round>:
    2bf2:	09 2e       	mov	r0, r25
    2bf4:	03 94       	inc	r0
    2bf6:	00 0c       	add	r0, r0
    2bf8:	11 f4       	brne	.+4      	; 0x2bfe <__fp_round+0xc>
    2bfa:	88 23       	and	r24, r24
    2bfc:	52 f0       	brmi	.+20     	; 0x2c12 <__fp_round+0x20>
    2bfe:	bb 0f       	add	r27, r27
    2c00:	40 f4       	brcc	.+16     	; 0x2c12 <__fp_round+0x20>
    2c02:	bf 2b       	or	r27, r31
    2c04:	11 f4       	brne	.+4      	; 0x2c0a <__fp_round+0x18>
    2c06:	60 ff       	sbrs	r22, 0
    2c08:	04 c0       	rjmp	.+8      	; 0x2c12 <__fp_round+0x20>
    2c0a:	6f 5f       	subi	r22, 0xFF	; 255
    2c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	08 95       	ret

00002c14 <__fp_split3>:
    2c14:	57 fd       	sbrc	r21, 7
    2c16:	90 58       	subi	r25, 0x80	; 128
    2c18:	44 0f       	add	r20, r20
    2c1a:	55 1f       	adc	r21, r21
    2c1c:	59 f0       	breq	.+22     	; 0x2c34 <__fp_splitA+0x10>
    2c1e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c20:	71 f0       	breq	.+28     	; 0x2c3e <__fp_splitA+0x1a>
    2c22:	47 95       	ror	r20

00002c24 <__fp_splitA>:
    2c24:	88 0f       	add	r24, r24
    2c26:	97 fb       	bst	r25, 7
    2c28:	99 1f       	adc	r25, r25
    2c2a:	61 f0       	breq	.+24     	; 0x2c44 <__fp_splitA+0x20>
    2c2c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c2e:	79 f0       	breq	.+30     	; 0x2c4e <__fp_splitA+0x2a>
    2c30:	87 95       	ror	r24
    2c32:	08 95       	ret
    2c34:	12 16       	cp	r1, r18
    2c36:	13 06       	cpc	r1, r19
    2c38:	14 06       	cpc	r1, r20
    2c3a:	55 1f       	adc	r21, r21
    2c3c:	f2 cf       	rjmp	.-28     	; 0x2c22 <__fp_split3+0xe>
    2c3e:	46 95       	lsr	r20
    2c40:	f1 df       	rcall	.-30     	; 0x2c24 <__fp_splitA>
    2c42:	08 c0       	rjmp	.+16     	; 0x2c54 <__fp_splitA+0x30>
    2c44:	16 16       	cp	r1, r22
    2c46:	17 06       	cpc	r1, r23
    2c48:	18 06       	cpc	r1, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	f1 cf       	rjmp	.-30     	; 0x2c30 <__fp_splitA+0xc>
    2c4e:	86 95       	lsr	r24
    2c50:	71 05       	cpc	r23, r1
    2c52:	61 05       	cpc	r22, r1
    2c54:	08 94       	sec
    2c56:	08 95       	ret

00002c58 <__fp_zero>:
    2c58:	e8 94       	clt

00002c5a <__fp_szero>:
    2c5a:	bb 27       	eor	r27, r27
    2c5c:	66 27       	eor	r22, r22
    2c5e:	77 27       	eor	r23, r23
    2c60:	cb 01       	movw	r24, r22
    2c62:	97 f9       	bld	r25, 7
    2c64:	08 95       	ret
    2c66:	11 f4       	brne	.+4      	; 0x2c6c <__fp_szero+0x12>
    2c68:	0e f4       	brtc	.+2      	; 0x2c6c <__fp_szero+0x12>
    2c6a:	b2 cf       	rjmp	.-156    	; 0x2bd0 <__fp_nan>
    2c6c:	4a c0       	rjmp	.+148    	; 0x2d02 <__fp_mpack>

00002c6e <sqrt>:
    2c6e:	da df       	rcall	.-76     	; 0x2c24 <__fp_splitA>
    2c70:	d0 f3       	brcs	.-12     	; 0x2c66 <__fp_szero+0xc>
    2c72:	99 23       	and	r25, r25
    2c74:	d9 f3       	breq	.-10     	; 0x2c6c <__fp_szero+0x12>
    2c76:	ce f3       	brts	.-14     	; 0x2c6a <__fp_szero+0x10>
    2c78:	9f 57       	subi	r25, 0x7F	; 127
    2c7a:	55 0b       	sbc	r21, r21
    2c7c:	87 ff       	sbrs	r24, 7
    2c7e:	51 d0       	rcall	.+162    	; 0x2d22 <__fp_norm2>
    2c80:	56 95       	lsr	r21
    2c82:	97 95       	ror	r25
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	20 f4       	brcc	.+8      	; 0x2c90 <sqrt+0x22>
    2c88:	66 0f       	add	r22, r22
    2c8a:	77 1f       	adc	r23, r23
    2c8c:	88 1f       	adc	r24, r24
    2c8e:	bb 1f       	adc	r27, r27
    2c90:	1f 93       	push	r17
    2c92:	0f 93       	push	r16
    2c94:	00 24       	eor	r0, r0
    2c96:	90 01       	movw	r18, r0
    2c98:	a0 01       	movw	r20, r0
    2c9a:	80 01       	movw	r16, r0
    2c9c:	f0 01       	movw	r30, r0
    2c9e:	a0 e8       	ldi	r26, 0x80	; 128
    2ca0:	0e 0f       	add	r16, r30
    2ca2:	1f 1f       	adc	r17, r31
    2ca4:	0a 1e       	adc	r0, r26
    2ca6:	51 1d       	adc	r21, r1
    2ca8:	60 1b       	sub	r22, r16
    2caa:	71 0b       	sbc	r23, r17
    2cac:	80 09       	sbc	r24, r0
    2cae:	b5 0b       	sbc	r27, r21
    2cb0:	48 f4       	brcc	.+18     	; 0x2cc4 <sqrt+0x56>
    2cb2:	60 0f       	add	r22, r16
    2cb4:	71 1f       	adc	r23, r17
    2cb6:	80 1d       	adc	r24, r0
    2cb8:	b5 1f       	adc	r27, r21
    2cba:	0e 1b       	sub	r16, r30
    2cbc:	1f 0b       	sbc	r17, r31
    2cbe:	0a 0a       	sbc	r0, r26
    2cc0:	51 09       	sbc	r21, r1
    2cc2:	07 c0       	rjmp	.+14     	; 0x2cd2 <sqrt+0x64>
    2cc4:	2e 0f       	add	r18, r30
    2cc6:	3f 1f       	adc	r19, r31
    2cc8:	4a 1f       	adc	r20, r26
    2cca:	0e 0f       	add	r16, r30
    2ccc:	1f 1f       	adc	r17, r31
    2cce:	0a 1e       	adc	r0, r26
    2cd0:	51 1d       	adc	r21, r1
    2cd2:	66 0f       	add	r22, r22
    2cd4:	77 1f       	adc	r23, r23
    2cd6:	88 1f       	adc	r24, r24
    2cd8:	bb 1f       	adc	r27, r27
    2cda:	a6 95       	lsr	r26
    2cdc:	f7 95       	ror	r31
    2cde:	e7 95       	ror	r30
    2ce0:	f8 f6       	brcc	.-66     	; 0x2ca0 <sqrt+0x32>
    2ce2:	06 17       	cp	r16, r22
    2ce4:	17 07       	cpc	r17, r23
    2ce6:	08 06       	cpc	r0, r24
    2ce8:	5b 07       	cpc	r21, r27
    2cea:	21 1d       	adc	r18, r1
    2cec:	31 1d       	adc	r19, r1
    2cee:	41 1d       	adc	r20, r1
    2cf0:	0f 91       	pop	r16
    2cf2:	1f 91       	pop	r17
    2cf4:	b9 01       	movw	r22, r18
    2cf6:	84 2f       	mov	r24, r20
    2cf8:	91 58       	subi	r25, 0x81	; 129
    2cfa:	88 0f       	add	r24, r24
    2cfc:	96 95       	lsr	r25
    2cfe:	87 95       	ror	r24
    2d00:	08 95       	ret

00002d02 <__fp_mpack>:
    2d02:	9f 3f       	cpi	r25, 0xFF	; 255
    2d04:	49 f0       	breq	.+18     	; 0x2d18 <__fp_mpack+0x16>
    2d06:	91 50       	subi	r25, 0x01	; 1
    2d08:	28 f4       	brcc	.+10     	; 0x2d14 <__fp_mpack+0x12>
    2d0a:	86 95       	lsr	r24
    2d0c:	77 95       	ror	r23
    2d0e:	67 95       	ror	r22
    2d10:	b7 95       	ror	r27
    2d12:	9f 5f       	subi	r25, 0xFF	; 255
    2d14:	80 38       	cpi	r24, 0x80	; 128
    2d16:	9f 4f       	sbci	r25, 0xFF	; 255
    2d18:	88 0f       	add	r24, r24
    2d1a:	96 95       	lsr	r25
    2d1c:	87 95       	ror	r24
    2d1e:	97 f9       	bld	r25, 7
    2d20:	08 95       	ret

00002d22 <__fp_norm2>:
    2d22:	91 50       	subi	r25, 0x01	; 1
    2d24:	50 40       	sbci	r21, 0x00	; 0
    2d26:	66 0f       	add	r22, r22
    2d28:	77 1f       	adc	r23, r23
    2d2a:	88 1f       	adc	r24, r24
    2d2c:	d2 f7       	brpl	.-12     	; 0x2d22 <__fp_norm2>
    2d2e:	08 95       	ret

00002d30 <__mulsi3>:
    2d30:	62 9f       	mul	r22, r18
    2d32:	d0 01       	movw	r26, r0
    2d34:	73 9f       	mul	r23, r19
    2d36:	f0 01       	movw	r30, r0
    2d38:	82 9f       	mul	r24, r18
    2d3a:	e0 0d       	add	r30, r0
    2d3c:	f1 1d       	adc	r31, r1
    2d3e:	64 9f       	mul	r22, r20
    2d40:	e0 0d       	add	r30, r0
    2d42:	f1 1d       	adc	r31, r1
    2d44:	92 9f       	mul	r25, r18
    2d46:	f0 0d       	add	r31, r0
    2d48:	83 9f       	mul	r24, r19
    2d4a:	f0 0d       	add	r31, r0
    2d4c:	74 9f       	mul	r23, r20
    2d4e:	f0 0d       	add	r31, r0
    2d50:	65 9f       	mul	r22, r21
    2d52:	f0 0d       	add	r31, r0
    2d54:	99 27       	eor	r25, r25
    2d56:	72 9f       	mul	r23, r18
    2d58:	b0 0d       	add	r27, r0
    2d5a:	e1 1d       	adc	r30, r1
    2d5c:	f9 1f       	adc	r31, r25
    2d5e:	63 9f       	mul	r22, r19
    2d60:	b0 0d       	add	r27, r0
    2d62:	e1 1d       	adc	r30, r1
    2d64:	f9 1f       	adc	r31, r25
    2d66:	bd 01       	movw	r22, r26
    2d68:	cf 01       	movw	r24, r30
    2d6a:	11 24       	eor	r1, r1
    2d6c:	08 95       	ret

00002d6e <__divmodhi4>:
    2d6e:	97 fb       	bst	r25, 7
    2d70:	09 2e       	mov	r0, r25
    2d72:	07 26       	eor	r0, r23
    2d74:	0a d0       	rcall	.+20     	; 0x2d8a <__divmodhi4_neg1>
    2d76:	77 fd       	sbrc	r23, 7
    2d78:	04 d0       	rcall	.+8      	; 0x2d82 <__divmodhi4_neg2>
    2d7a:	27 d0       	rcall	.+78     	; 0x2dca <__udivmodhi4>
    2d7c:	06 d0       	rcall	.+12     	; 0x2d8a <__divmodhi4_neg1>
    2d7e:	00 20       	and	r0, r0
    2d80:	1a f4       	brpl	.+6      	; 0x2d88 <__divmodhi4_exit>

00002d82 <__divmodhi4_neg2>:
    2d82:	70 95       	com	r23
    2d84:	61 95       	neg	r22
    2d86:	7f 4f       	sbci	r23, 0xFF	; 255

00002d88 <__divmodhi4_exit>:
    2d88:	08 95       	ret

00002d8a <__divmodhi4_neg1>:
    2d8a:	f6 f7       	brtc	.-4      	; 0x2d88 <__divmodhi4_exit>
    2d8c:	90 95       	com	r25
    2d8e:	81 95       	neg	r24
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	08 95       	ret

00002d94 <__divmodsi4>:
    2d94:	97 fb       	bst	r25, 7
    2d96:	09 2e       	mov	r0, r25
    2d98:	05 26       	eor	r0, r21
    2d9a:	0e d0       	rcall	.+28     	; 0x2db8 <__divmodsi4_neg1>
    2d9c:	57 fd       	sbrc	r21, 7
    2d9e:	04 d0       	rcall	.+8      	; 0x2da8 <__divmodsi4_neg2>
    2da0:	28 d0       	rcall	.+80     	; 0x2df2 <__udivmodsi4>
    2da2:	0a d0       	rcall	.+20     	; 0x2db8 <__divmodsi4_neg1>
    2da4:	00 1c       	adc	r0, r0
    2da6:	38 f4       	brcc	.+14     	; 0x2db6 <__divmodsi4_exit>

00002da8 <__divmodsi4_neg2>:
    2da8:	50 95       	com	r21
    2daa:	40 95       	com	r20
    2dac:	30 95       	com	r19
    2dae:	21 95       	neg	r18
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	4f 4f       	sbci	r20, 0xFF	; 255
    2db4:	5f 4f       	sbci	r21, 0xFF	; 255

00002db6 <__divmodsi4_exit>:
    2db6:	08 95       	ret

00002db8 <__divmodsi4_neg1>:
    2db8:	f6 f7       	brtc	.-4      	; 0x2db6 <__divmodsi4_exit>
    2dba:	90 95       	com	r25
    2dbc:	80 95       	com	r24
    2dbe:	70 95       	com	r23
    2dc0:	61 95       	neg	r22
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	08 95       	ret

00002dca <__udivmodhi4>:
    2dca:	aa 1b       	sub	r26, r26
    2dcc:	bb 1b       	sub	r27, r27
    2dce:	51 e1       	ldi	r21, 0x11	; 17
    2dd0:	07 c0       	rjmp	.+14     	; 0x2de0 <__udivmodhi4_ep>

00002dd2 <__udivmodhi4_loop>:
    2dd2:	aa 1f       	adc	r26, r26
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	a6 17       	cp	r26, r22
    2dd8:	b7 07       	cpc	r27, r23
    2dda:	10 f0       	brcs	.+4      	; 0x2de0 <__udivmodhi4_ep>
    2ddc:	a6 1b       	sub	r26, r22
    2dde:	b7 0b       	sbc	r27, r23

00002de0 <__udivmodhi4_ep>:
    2de0:	88 1f       	adc	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	5a 95       	dec	r21
    2de6:	a9 f7       	brne	.-22     	; 0x2dd2 <__udivmodhi4_loop>
    2de8:	80 95       	com	r24
    2dea:	90 95       	com	r25
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	08 95       	ret

00002df2 <__udivmodsi4>:
    2df2:	a1 e2       	ldi	r26, 0x21	; 33
    2df4:	1a 2e       	mov	r1, r26
    2df6:	aa 1b       	sub	r26, r26
    2df8:	bb 1b       	sub	r27, r27
    2dfa:	fd 01       	movw	r30, r26
    2dfc:	0d c0       	rjmp	.+26     	; 0x2e18 <__udivmodsi4_ep>

00002dfe <__udivmodsi4_loop>:
    2dfe:	aa 1f       	adc	r26, r26
    2e00:	bb 1f       	adc	r27, r27
    2e02:	ee 1f       	adc	r30, r30
    2e04:	ff 1f       	adc	r31, r31
    2e06:	a2 17       	cp	r26, r18
    2e08:	b3 07       	cpc	r27, r19
    2e0a:	e4 07       	cpc	r30, r20
    2e0c:	f5 07       	cpc	r31, r21
    2e0e:	20 f0       	brcs	.+8      	; 0x2e18 <__udivmodsi4_ep>
    2e10:	a2 1b       	sub	r26, r18
    2e12:	b3 0b       	sbc	r27, r19
    2e14:	e4 0b       	sbc	r30, r20
    2e16:	f5 0b       	sbc	r31, r21

00002e18 <__udivmodsi4_ep>:
    2e18:	66 1f       	adc	r22, r22
    2e1a:	77 1f       	adc	r23, r23
    2e1c:	88 1f       	adc	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	1a 94       	dec	r1
    2e22:	69 f7       	brne	.-38     	; 0x2dfe <__udivmodsi4_loop>
    2e24:	60 95       	com	r22
    2e26:	70 95       	com	r23
    2e28:	80 95       	com	r24
    2e2a:	90 95       	com	r25
    2e2c:	9b 01       	movw	r18, r22
    2e2e:	ac 01       	movw	r20, r24
    2e30:	bd 01       	movw	r22, r26
    2e32:	cf 01       	movw	r24, r30
    2e34:	08 95       	ret

00002e36 <_exit>:
    2e36:	f8 94       	cli

00002e38 <__stop_program>:
    2e38:	ff cf       	rjmp	.-2      	; 0x2e38 <__stop_program>

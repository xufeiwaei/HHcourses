1. 

  void setBit(unsigned int *port, int bitNr){

  	*port = *port | (1 << bitNr);

  } 


  void clearBit(unsigned int *port, int bitNr){
 
 	*port = *port & ~(1 << bitNr);

  }


2.
The main problem is that we are forced to choose one source of input,
and while waiting for it we ignore the other sources:  while 
busy-waiting for the next radiopacket we ignore all sonar echoes! We 
could solve this by deconstructing the busy waiting functions and do 
busy waiting in the main loop on all inputs, something like 

main(){

  struct Params params;

  struct Packet packet;

  int dist, signal;

  while(1){

        if (SONAR_STATUS & READY == 1){

        dist = SONAR_DATA;

        control(dist, &signal, &params);

        servo_write(signal);

	}

	if (RADIO_STATUS & READY == 1){

        pkt->v1 = RADIO_DATA1;

        ...

        pkt->vn = RADIO_DATAn;

        decode(&packet,&params);

     	}

  }

}

One remaining problem is that we cannot do concurrent execution: while 
decoding we are ignoring sonar echoes!



3.

The problem is that there are 2 threads using a shared variable. The 
variable is pp, and it is read and updated in printAt, a function that 
is executed in both threads. The purpose of printAt is to write the 2
 least significant digits of a number either at the position provided 
as argument and the following position in the LCD. One of the threads 
wants to use positions 0 and 1 and the other thread wants to use 
positions 3 and 4. What might happen is that one thread gets 
to run and initializes  the value of pp (say 0), then the other thread gets 
to run and also initializes  the value of pp (now 3), it writes a char
at position  3, it increments pp and writes a character at position 
4. Now the first thread gets to run, but instead of writing a
character in positions 0 and 1 it will write in positions 4 and 5! To
 solve the problem, we declare a global variable of type mutex

 
mutex m = initMutex();


and we replace the call to printAt with 


lock(&m);
printAt(...);
unlock(&m);




4.
In array.h we would have the declarations


typedef struct {

  Object super;

  int theArray[];

  int pos;

} Array;


#define initArray(theArray) {initObject(),theArray,0}

// record a position

int setPosition(Array *self, int x);


// set the value at the recorded position to x

int setElement(Array *self, int x);


// return the value at the recorded position

int getElement(Array *self, int x);




In array.c we would have the implementations



int setPosition(Array *self, int x){

    self->pos = x;

}


int setElement(Array *self, int x){

    self->theArray[self->pos] =x;

}


int getElement(Array *self, int x){

    return self->theArray[self->pos];

}




5.
In the file blinker.h we would have the declarations


typedef struct {
  Object super;
  LED *led;
  int period;
  int state;
  int running;
} BLINKER;

#define initBLINKER(led, period) {initObject(), led, period, 0, 0}

int start(BLINKER *self, void * arg);
int stop(BLINKER *self, void * arg);
int setPeriod(BLINKER *self, int * arg);

In the file blinker.c we would have

int blink(BLINKER *self, void * arg)
{
   if(self->running){
	if(self->state == 0)
	{
		ASYNC(self->led,on,NULL);
	}
	else
	{
		ASYNC(self->led,off,NULL);
	}	

	self->state = 1-(self->state);
	AFTER (SEC(self-> period),self,blink,NULL);
   }
}


int start(BLINKER *self, void * arg){
    self->running = 1;
    blink(self,NULL);	
}

int stop(BLINKER *self, void * arg){
    self->running = 0;
}

int setPeriod(BLINKER *self, int * arg){
  self->period = *arg;
}


